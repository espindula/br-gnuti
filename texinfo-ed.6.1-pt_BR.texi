\input texinfo.tex    @c -*-texinfo-*-

@c Tudo entre o início/final das linhas de cabeçalho será 
@c ignorado pelos comandos de região {texinfo,makeinfo}-format do 
@c Emacs.   Veja-se o ponto `início de cabeçalho' para mais informação
@c %**start of header

@c Automake exige isto
@setfilename texinfo-ed.6.1-pt_BR.info
@documentlanguage pt_BR
@documentencoding UTF-8

@c Automake automaticamente atualiza version-pt_BR.texi @set VERSION e 
@c @set UPDATED com os valores apropriados.
@include version-pt_BR.texi
@settitle GNU Texinfo @value{VERSION}

@c Define um novo índice para opções de linha de comando.
@defcodeindex op

@c Coloca tudo, exceto nomes (comando, nesse caso) de função em um 
@c índice (arbitrariamente escolhido para ser o índice de conceito).
@syncodeindex op cp
@syncodeindex vr cp
@syncodeindex pg cp

@c @tex
@c \global\usebracesinindexestrue
@c @end tex

@c final

@comment %**end of header

@c perceba-se que o autor do documento original em inglês usou 
@comment das duas formas de indicar que uma linha é um simples 
@c comentário, ou seja @comment e o sinônimo dele, @c.   No "Cartão de 
@comment Referência do GNU Texinfo", para Texinfo versão 5.2, está 
@c descrita uma terceira forma: DEL.   Essa forma não foi aqui testada 
@comment e, portanto, não se pode afirmar que funciona.

@copying
Este manual é para GNU Texinfo (versão @value{VERSION}, 
@value{UPDATED}), um sistema de documentação que pode produzir ambos 
informação online e um manual impresso a partir de uma fonte única 
usando marcação semântica.

Copyright @copyright{} 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 
2024 da ``versão modificada'' traduzida para o idioma português falado 
e escrito no Brasil: Jamenson Ferreira Espindula de Almeida Melo 
<@email{jafesp@@gmail.com}>.

Copyright @copyright{} 1988, 1990, 1991, 1992, 1993, 1995, 1996, 1997, 
1998, 1999, 2001, 2001, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 
2011, 2012, 2013, 2014, 2015, 2016 da versão original escrita em inglês: 
Free Software Foundation, Inc.


This manual is for GNU Texinfo (version @value{VERSION}, @value{UPDATED}),
a documentation system that can produce both online information and a
printed manual from a single source using semantic markup.

Copyright @copyright{} 1988, 1990, 1991, 1992, 1993, 1995, 1996, 1997,
1998, 1999, 2001, 2001, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010, 2011, 2012, 2013, 2014, 2015, 2016 Free Software Foundation, Inc.

@quotation
É concedida permissão para copiar, distribuir e (ou) mudar este Manual 
para GNU Texinfo (versão @value{VERSION}, @value{UPDATED}), versão 
traduzida para o idioma português sob os termos da Licença GNU de 
Documentação Livre, versão 1.3 ou qualquer versão posterior 
publicada pela Free Software Foundation; sem Seções Invariantes, com os 
Textos de Capa Frontal sendo ``Um Manual GNU'', e com os Textos de 
Quarta Capa como em (a) abaixo.   Uma cópia da licença está incluída na 
seção intitulada ``Licença GNU de Documentação Livre''.

(a) O Texto de Quarta Capa da Free Software Foundation, Inc. (FSF) é: 
``Você tem a liberdade de copiar e mudar este manual GNU.   
Comprando cópias da FSF você a apoia no desenvolvimento GNU e na 
promoção da liberdade de software''.


Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual'',
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation
License''.

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom.''
@end quotation
@end copying

@dircategory Texinfo documentation system
@direntry
* Texinfo: (texinfo).                           O formato de documentação GNU.
* install-info: (texinfo)Invoking install-info. Atualizar entradas info/dir.
* makeinfo: (texinfo)Invoking makeinfo.         Traduzir fonte Texinfo.
* pod2texi: (pod2texi)Invoking pod2texi.        Traduzir POD Perl para Texinfo.
* texi2dvi: (texinfo)Format with texi2dvi.      Imprimir documentos Texinfo.
* texi2pdf: (texinfo)PDF Output.                Saída PDF para Texinfo.
* pdftexi2dvi: (texinfo)PDF Output.             Saída PDF para Texinfo.
* texindex: (texinfo)Format with tex/texindex.  Ordena arquivos de índice Texinfo.
@end direntry

@c Configurar para smallbook se for imprimir no formato para livro 
@c pequeno, de forma que o exemplo do fonte de livro pequeno atualmente 
@c está escrito usando smallbook; em bigbook, uma gambiarra é 
@c usada para a saída TeX.   Faz-se isso via opção -t a texi2dvi, de 
@c maneira que esse mesmo fonte pode ser usado para outros tamanhos 
@c de papel também.
@c smallbook
@c set smallbook
@c @@clear smallbook

@c Se gostar-se de páginas em branco, adicionar via texi2dvi -t.
@c setchapternewpage odd

@set txiindexatsignignore
@set txiindexbackslashignore
@set txiindexlessthanignore
@set txiindexhyphenignore


@titlepage
@title Texinfo
@subtitle O Formato de Documentação GNU
@subtitle para Texinfo versão @value{VERSION}, @value{UPDATED}

@author Robert J. Chassell
@author Richard M. Stallman

@c Inclui a Distribuição no título da página, de forma que tais 
@c cabeçalhos são desligados.

@page
@vskip 0pt plus 1filll
@insertcopying

@sp 1
Publicado pela Free Software Foundation @*
51 Franklin St, Fifth Floor @*
Boston, MA 02110-1301 @*
USA @*
ISBN 1-882114-67-1 @c para a versão 4.0, Setembro de 1999.
@c ISBN 1-882114-65-5 é para a versão 3.12, Março de 1998.
@c ISBN 1-882114-64-7 é para a edição 2.24 de Novembro de 1996.
@c ISBN 1-882114-63-9 é para a edição 2.20 de 28 de fevereiro de 1995.

@sp 1
Arte da capa por Etienne Suvasa.
@end titlepage


@summarycontents
@contents


@ifnottex
@node Top
@top Texinfo

Este manual é para GNU Texinfo (versão @value{VERSION}, @value{UPDATED}), um
sistema de documentação que pode produzir ambos informação online e um manual
impresso a partir de um fonte único usando marcação semântica.

A primeira parte deste menu mestre lista os nodos principais neste documento do
Info, incluindo o comando @@ e índices de conceito. O restante do menu lista
todos os nodos de baixo nível no documento.
@end ifnottex

@menu
* Condições de Cópia::          Seus direitos.
* Visão Geral::                    Texinfo em resumo.
* Escrevendo um Arquivo Texinfo::      Formato de um arquivo fonte Texinfo.
* Iniciando e Finalizando um Arquivo:: Iniciando e fim de um arquivo Texinfo.
* Nodos::                       Escrevendo Nodos, a unidade básica de Texinfo.
* Estruturamento de Capítulo::         Criando capítulos, seções, apêndices, etc.
* Referências Cruzadas::            Escrevendo referências cruzadas.
* Marcando Texto::                Marcando palavras e frases como código, entrada de teclado, variáveis meta sintáticas, e afins.
* Citações e Exemplos::     Encapsulamentos de bloco, exemplos, etc.
* Listas e Tabelas::            Listas de itens ou numeradas, e tabelas.
* Exibições Especiais::            Figuras flutuantes e notas de rodapé.
* Índices::                     Criando índices.
* Inserções::                  Inserindo sinais @@-signs, chaves, etc.
* Quebras::                      Forçando ou impedindo quebras de linha e de página.
* Comandos de Definição::         Descrevendo uniformemente funções e afins.
* Internacionalização::        Suporte a outras linguagens diferentes do Inglês.
* Condicionais::                Especificando texto somente para alguns casos de saída.
* Definindo Novos Comandos Texinfo:: Macros definidas pelo usuário e apelidos.
* Arquivos Include::               Como incorporar outros arquivos Texinfo.
* Cópia Impressa::                    Saída para papel, com @TeX{}.
* Tradutor Genérico @command{texi2any}:: @command{texi2any}, um conversor para todos os propósitos.
* Criando e Instalando Arquivos Info:: Detalhes sobre saída Info.
* Gerando HTML::             Detalhes sobre saída HTML.
@c * texi2any Output Customization:: Sintonia fina com arquivos de 
@c inicialização

Apêndices

* Detalhes do Comando @@::          Detalhes dos comandos @@ de Texinfo.
* Dicas::                        Dicas sobre como escrever um documento Texinfo.
* Arquivos Texinfo Modelo::        Exemplos completos, incluindo textos completos.
* Modo Texinfo::                Utilizando o modo Texinfo do GNU Emacs.
* Cabeçalhos::                    Como escrever cabeçalhos e rodapés de página.
* Capturando Erros::           Como achar erros na formatação.
* Especificação do Formato Info::   Detalhes técnicos do formato de arquivo Info.
* Licença GNU de Documentação Livre:: Copiando este manual.
* Índice de Comando e Variável::  Um menu contendo comandos e variáveis.
* Índice Geral::               Um menu cobrindo muitos tópicos.

@detailmenu
 --- A Listagem Detalhada do Nodo ---

Visão geral de Texinfo

* Relatando Bugs::              Submetendo relatórios efetivos de bugs.
* Formatos de Saída::              Visão geral dos formatos de saída suportados.
* Arquivos do Info::                  O que é um arquivo Info?
* Livros Impressos::               Característica de um livro impresso ou manual.
* Adicionando Formatos de Saída::       Páginas de manual e implementando novos formatos.
* Histórico::                     Agradecimentos, contribuidores e gênese.

Escrevendo um Arquivo Texinfo

* Sintaxe de Comando::              Comandos @@ são utilizados para formatação.
* Convenções::                 Regras gerais para se escrever um arquivo Texinfo.
* Comentários::                    Escrevendo comentários e texto ignorado em geral.
* Mínimo::                     O que um arquivo Texinfo deve ter.
* Amostra Curta::                Um arquivo curto Texinfo de amostra.

Iniciando e Finalizando um Arquivo Texinfo

* Inicialização de Amostra::            Um início de amostra para um arquivo Texinfo.
* Cabeçalho do Arquivo do Texinfo::         As primeiras linhas.
* Permissões do Documento::        Assegurando-se de que seu manual é livre.
* Página de Título e Página de Direitos Autorais::  Criando as páginas de título e de direitos autorais.
* Conteúdo::                    Como criar uma tabela do conteúdo.
* O Nodo Top::                Criando o nodo `Top' e o menu principal.
* Comandos Globais de Documento::    Afetando a formatação ao longo do documento.
* Finalizando um Arquivo::               O que está ao final de um arquivo Texinfo?

Cabeçalho de Arquivo Texinfo

* Primeira Linha::                  A primeira linha de um arquivo Texinfo.
* Início de Cabeçalho::             Formatar uma região exige isso.
* @code{@@setfilename}::                Informe a Info o nome do arquivo Info.
* @code{@@settitle}::                   Crie um título para o trabalho impresso.
* Fim de Cabeçalho::               Formatar uma região exige isso.

Permissões de Documento

* @code{@@copying}::                    Declare as permissões de cópia do documento.
* @code{@@insertcopying}::              Onde inserir as permissões.

Páginas de Título e de Direitos Autorais

* @code{@@titlepage}::                  Crie um título para o documento impresso.
* @code{@@titlefont @@center @@sp}::      Os comandos @code{@@titlefont}, @code{@@center} e @code{@@sp}.
* @code{@@title @@subtitle @@author}::    Os comandos @code{@@title}, @code{@@subtitle}, e @code{@@author}.
* Direitos Autorais::                   Como escrever o aviso de direitos autorais e incluir permissões de cópia.
* Geração de Cabeçalho::          Ligar os cabeçalhos de página após as páginas de título e de direitos autorais.

O Nodo `Top' e o Menu Principal

* Exemplo do Nodo Top::
* Partes do Menu Mestre::

Comandos Globais de Documento

* @code{@@documentdescription}::        Sumário de documento para a saída HTML.
* @code{@@setchapternewpage}::          Iniciar capítulos em páginas do lado direito.
* @code{@@headings}::                   Uma opção para ligar e desligar cabeçalhos e impressão em ambos ou de um único lado.
* @code{@@paragraphindent}::            Especifique recuo de parágrafo.
* @code{@@firstparagraphindent}::       Suprimindo o recuo de primeiro parágrafo.
* @code{@@exampleindent}::              Especifique o recuo de ambiente.

Nodos

* Estrutura do Documento Texinfo::  Como os manuais Texinfo normalmente são organizados.
* Nomes de Nodo::                  Como escolher nomes de nodo.
* Escrevendo um Nodo::              Como escrever uma linha @code{@@node}.
* Exigências de Linha de Nodo::      Mantenha os nomes únicos.
* Primeiro Nodo::                  Como escrever um nodo `Top'.
* Comando @code{@@top}::                Como usar o comando @code{@@top}.
* Ilustração do Menu do Nodo::      Um diagrama, e menus e nodos de amostra.
* Criação de Ponteiros do @command{makeinfo}::   Permitindo que makeinfo determine os ponteiros de nodo.
* Menus::                       Listando nodos subordinados.

Menus

* Escrevendo um Menu::          O que é um menu?
* Exemplo de Menu::             Entradas de menu de duas e três partes
* Localização de Menu::         Menus vão ao final de nodos
* Partes de Menu::              Uma entrada de menu tem três partes
* Entrada de Menu Menos Desordenada::   Entrada de menu de duas partes
* Outros Arquivos Info::        Como se referir a um arquivo Info diferente

Estruturamento de Capítulo

* Estruturamento de Árvore::            Um manual é como uma árvore de cabeça para baixo @dots{}
* Tipos de Comandos Estruturantes::   Como dividir um manual em partes.
* @code{@@chapter}::                    Estruturamento de capítulo.
* @code{@@unnumbered @@appendix}::
* @code{@@majorheading @@chapheading}::
* @code{@@section}::
* @code{@@unnumberedsec @@appendixsec @@heading}::
* @code{@@subsection}::
* @code{@@unnumberedsubsec @@appendixsubsec @@subheading}::
* @code{@@subsubsection}::              Comandos para as seções de mais baixo nível.
* @code{@@part}::                       Coleções de capítulos.
* Levantar/abaixar seções::        Como modificar o nível hierárquico dos comandos.

Referências cruzadas

* Referências::                  Para que são as referências cruzadas.
* Comandos de Referências Cruzadas::    Um sumário dos diferentes comandos.
* Partes de Referências Cruzadas::      Uma Referência Cruzada tem várias partes.
* @code{@@xref}::                       Inicie uma referência com `Veja' @dots{}
* Referenciando Um Manual Como Um Todo::   Referência a um manual inteiro.
* @code{@@ref}::                        Uma referência para a última parte de uma sentença.
* @code{@@pxref}::                      Como escrever uma Referência Cruzada entre parênteses.
* @code{@@anchor}::                     Definindo alvos de Referência Cruzada arbitrários.
* @code{@@inforef}::                    Como referenciar um arquivo somente Info.
* @code{@@url}::                        Como referenciar um Localizador Uniforme de Recursos.
* @code{@@cite}::                       Como referenciar livros que não estão no sistema Info.

@code{@@xref}

* Um Argumento::                @code{@@xref} com um argumento.
* Dois Argumentos::               @code{@@xref} com dois argumentos.
* Três Argumentos::             @code{@@xref} com três argumentos.
* Quatro e Cinco Argumentos::     @code{@@xref} com quatro e cinco argumentos.

@code{@@url}, @code{@@uref@{@var{url}[, @var{text}][, @var{replacement}]@}}

* Exemplos @code{@@url}::           Exemplos da utilização de todas as formas do @code{@@url}.
* Quebra de Linha de URL::       Como as linhas são quebradas dentro do texto do @code{@@url}.
* Formato de Saída PDF @code{@@url}::  Uma opção especial para ocultar links na saída PDF.
* Cores de PDF::              Colorindo urls e outros links na saída PDF.

Marcando Texto, Palavras e Frases

* Indicando::                  Como indicar definições, arquivos, etc.
* Ênfase::                    Como enfatizar texto.

Indicando Definições, Comandos, etc.

* Realçamento Útil::                    Realçamento provê informação útil.
* @code{@@code}::                       Indicando código de programa.
* @code{@@kbd}::                        Mostrando entrada de teclado.
* @code{@@key}::                        Especificando teclas.
* @code{@@samp}::                       Indicando uma sequência literal de caracteres.
* @code{@@verb}::                       Indicando uma sequência literal de caracteres.
* @code{@@var}::                        Indicando variáveis metassintáticas.
* @code{@@env}::                        Indicando variáveis de ambiente.
* @code{@@file}::                       Indicando nomes de arquivo.
* @code{@@command}::                    Indicando nomes de comando.
* @code{@@option}::                     Indicando nomes de opção.
* @code{@@dfn}::                        Especificando definições.
* @code{@@abbr}::                       Indicando abreviações.
* @code{@@acronym}::                    Indicando siglas.
* @code{@@indicateurl}::                Indicando uma URL de exemplo.
* @code{@@email}::                      Indicando um endereço de correio eletrônico.

Enfatizando Texto

* @code{@@emph @@strong}::       Como enfatizar texto em Texinfo.
* Capitalização Pequena::        Como utilizar a fonte capitalização pequena.
* Fontes::                       Comandos variados de fonte para saída impressa.

Encapsulamentos e Exemplos

* Comandos de Inclusão de Blocos::    Construtores diferentes para propósitos diferentes.
* @code{@@quotation}::                Escrevendo uma citação.
* @code{@@indentedblock}::            Bloco de texto recuado a esquerda.
* @code{@@example}::                  Escrevendo um exemplo em uma fonte de largura fixa.
* @code{@@verbatim}::                 Escrevendo um exemplo de literal.
* @code{@@verbatiminclude}::          Incluindo um arquivo de literal.
* @code{@@lisp}::                     Ilustrando código Lisp.
* @code{@@small@dots{}}::             Exemplos em uma fonte menor.
* @code{@@display}::                  Escrevendo um exemplo na fonte atual.
* @code{@@format}::                   Escrevendo um exemplo sem margens estreitadas.
* @code{@@exdent}::                   Desfazer recuo em uma linha.
* @code{@@flushleft @@flushright}::   Empurrando texto alinhado à esquerda ou alinhado à direita.
* @code{@@raggedright}::              Evitando justificação à direita.
* @code{@@noindent}::                 Prevenindo recuo de parágrafo.
* @code{@@indent}::                   Forçando recuo de parágrafo.
* @code{@@cartouche}::                Desenhando retângulos por todos os lados ao redor do texto.

Listas e Tabelas

* Listas de Introdução::          Listas de formatos Texinfo para você.
* @code{@@itemize}::              Como construir uma lista simples.
* @code{@@enumerate}::            Como construir uma lista numerada.
* Tabelas de Duas Colunas::       Como construir uma tabela de duas colunas.
* Tabelas Multi Colunas::         Como construir tabelas generalizadas.

Fazendo uma Tabela de Duas Colunas

* @code{@@table}::                      Como construir uma tabela de duas colunas.
* @code{@@ftable @@vtable}::            Indexamento automático para tabelas de duas colunas.
* @code{@@itemx}::                      Como colocar mais entradas na primeira coluna.

@code{@@multitable}: Tabelas Multi Coluna

* Larguras de Colunas Multi Tabelas::   Definindo tamanhos de coluna multi tabela.
* Linhas de Multi Tabelas::             Definindo linhas multi tabela, com exemplos.

Exibições Especiais

* Flutuadores::                  Figuras, tabelas, e afins.
* Imagens::                      Incluindo gráficos e imagens.
* Notas de Rodapé::              Escrevendo notas de rodapé.

Flutuações

* @code{@@float}::                      Produzindo material que flutua.
* @code{@@caption @@shortcaption}::     Especificando descrições para flutuações.
* @code{@@listoffloats}::               Um Sumário para flutuações.

Inserindo Imagens

* Sintaxe da Imagem::
* Escalonamento da Imagem::

Notas de rodapé

* Comandos de Notas de Rodapé::           Como escrever uma nota de rodapé em Texinfo.
* Estilos de Notas de Rodapé::            Controlando como as notas de rodapé aparecem em Info.

Índices

* Entradas de Índice::           Escolha palavras diferentes para entradas de índice.
* Índices Predefinidos::         Use índices diferentes para tipos diferentes de entradas.
* Comandos de Indexação::        Como fazer uma entrada de índice.
* Imprimindo Índices e Menus::   Como imprimir um índice em cópia impressa e gerar menus de índice no Info.
* Combinando Índices::           Como combinar índices.
* Novos Índices::                Como definir teus próprios índices.

Combinando Índices

* @code{@@syncodeindex}::               Como mesclar dois índices, utilizando a fonte @code{@@code} para o índice mesclado a partir de.
* @code{@@synindex}::                   Como mesclar dois índices, utilizando a fonte roman para o índice mesclado a partir de.

Inserções Especiais

* Caracteres Especiais::                  Inserindo @@ @{@} , \ #
* Inserindo Caracteres de Citação::       Inserindo aspas a esquerda e a direita, em código.
* Inserindo Espaço::                      Inserindo a quantidade correta de espaços em branco.
* Inserindo Acentos::                     Inserindo acentos e caracteres especiais.
* Inserindo Aspas::                       Inserindo aspas.
* Inserindo Subscritos e Sobrescritos::   Inserindo sub/sobrescritos.
* Inserindo Fórmulas Matemáticas::        Formatando expressões matemáticas.
* Glifos para Texto::                     Inserindo pontos, bullets, símbolos de moedas, etc.
* Glifos para Programação::               Indicando resultados de avaliação, expansão de macros, erros, etc.
* Inserindo Unicode::                     Inserindo um caractere Unicode por ponto de código.

Caracteres Especiais: Inserindo @@ @{@} , \ #

* Inserindo um Símbolo Arroba::         @code{@@@@}, @code{@@atchar@{@}}.
* Inserindo Chaves::                    @code{@@@{ @@@}}, @code{@@l rbracechar@{@}}.
* Inserindo Uma Vírgula::               , e @code{@@comma@{@}}.
* Inserindo uma Barra Invertida::       \ e @code{@@backslashchar@{@}}.
* Inserindo um Símbolo Cerquilha::      # e @code{@@hashchar@{@}}.

Inserindo Espaço

* Espaços Múltiplos::               Inserindo múltiplos espaços.
* Não Finalizando Uma Frase::       Algumas vezes um ponto ``.'' não finaliza uma frase.
* Finalizando Uma Frase::           Algumas vezes finaliza.
* @code{@@frenchspacing}::          Especificando espaçamento de fim de frase.
* @code{@@dmn}::                    Formatando uma dimensão.

Símbolos para Texto

* @code{@@TeX @@LaTeX}::                As logomarcas do @TeX{}.
* @code{@@copyright}::                  O símbolo de direitos autorais (c em um círculo).
* @code{@@registeredsymbol}::           O símbolo de marca registrada (R em um círculo).
* @code{@@dots}::                       Como inserir reticências: @dots{} e @enddots{}
* @code{@@bullet}::                     Como inserir um marcador: @bullet{}
* @code{@@euro}::                       Como inserir o símbolo da moeda Euro.
* @code{@@pounds}::                     Como inserir o símbolo da moeda Libras.
* @code{@@textdegree}::                 Como inserir o símbolo de Graus.
* @code{@@minus}::                      Como inserir um sinal de menos.
* @code{@@geq @@leq}::                  Como inserir os sinais maior/menor que ou igual a.

Símbolos para Programação

* Sumário de Glifos::
* @code{@@result}::                     Como exibir o resultado da expressão.
* @code{@@expansion}::                  Como indicar uma expansão.
* @code{@@print}::                      Como indicar saída gerada.
* @code{@@error}::                      Como indicar uma mensagem de erro.
* @code{@@equiv}::                      Como indicar equivalência.
* @code{@@point}::                      Como indicar o local do ponto.
* Sequências de Clique::                Inserindo sequências de uso da GUI.

Forçando e Impedindo Quebras

* Comandos de Quebra::                  Resumo dos comandos relacionados a quebra.
* Quebras de Linha::                    Forçando quebras de linha.
* @code{@@- @@hyphenation}::            Ajudando @TeX{} com pontos de hifenação.
* @code{@@allowcodebreaks}::            Controlando quebras de linhas dentro do texto de @@code.
* @code{@@w}::                          Impedindo quebras de linha indesejadas no texto.
* @code{@@tie}::                        Inserindo um inquebrável, porém variante espaço.
* @code{@@sp}::                         Inserindo linhas em branco.
* @code{@@page}::                       Forçando o início de uma página nova.
* @code{@@group}::                      Impedindo quebras de página indesejadas.
* @code{@@need}::                       Outra maneira de impedir quebras de página indesejadas.

Comandos de Definição

* Modelos de Comando de Definição::                 Escrevendo descrições utilizando comandos de definição.
* Linhas de Continuação de Comando de Definição::   Continuando o cabeçalho por sobre linhas de fonte.
* Argumentos Opcionais::                            Manuseando argumentos opcionais e repetidos.
* @code{@@deffnx}::                                 Agrupe duas ou mais `primeiras' linhas.
* Comandos de Definição em Detalhe::                Referência para todos os comandos de definição.
* Convenções de Comando de Definição::              Convenções para a escrita de definições.
* Definição de Função de Amostra::                  Um exemplo.

Os Comandos de Definição

* Comandos de Funções::          Comandos para funções e entidades similares.
* Comandos de Variáveis::        Comandos para variáveis e entidades similares.
* Funções Tipadas::              Comandos para funções em linguagens tipadas.
* Variáveis ​​Tipadas::            Comandos para variáveis em linguagens tipadas.
* Tipos de Dados::               O comando de definição para tipos de dados.
* Objetos Abstratos::            Comandos para programação orientada a objetos.

Programação Orientada a Objetos

* Variáveis Orientadas a Objetos::   Variáveis Orientadas a Objetos.
* Métodos Orientados a Objetos::     Métodos Orientados a Objetos.

Internacionalização

* @code{@@documentlanguage}::           Declarando a linguagem atual.
* @code{@@documentencoding}::           Declarando a codificação de entrada.

Texto Visível Condicionalmente

* Comandos Condicionais::             Texto para um dado formato.
* Não Comandos Condicionais::         Texto para qualquer outro formato que não um dado.
* Comandos do Formatador Bruto::      Utilizando comandos crus do formatador.
* Condicionais Inline::               Texto condicional delimitado por chaves.
* @code{@@set @@clear @@value}::      Testes de variáveis e substituições.
* Testes para Comandos do Texinfo::   Testando se um comando Texinfo está disponível.
* Aninhamento Condicional::           Utilizando condicionais dentro de condicionais.

Parâmetros: @code{@@set}, @code{@@clear}, condicionais, e @code{@@value}

* @code{@@set @@value}::                 Expandir uma variável de parâmetro para uma sequência de caracteres.
* @code{@@ifset @@ifclear}::             Formatar uma região se um parâmetro estiver configurado.
* @code{@@inlineifset @@inlineifclear}:: Condicionais de parâmetro delimitados por chave.
* @code{@@value} Example::              Uma maneira fácil de atualizar informação de edição.

Definindo Novos Comandos Texinfo

* Definindo Macros::             Definindo e indefinindo novos comandos.
* Invoking Macros::             Utilizando uma macro, uma vez que se definiu uma.
* Macro Details::               Limitações das macros Texinfo.
* @code{@@alias}::                      Apelidos de comandos.
* @code{@@definfoenclose}::             Salientamento personalizado.
* External Macro Processors::   Diretivas @code{#line}.

Processadores Externos de Macro: Diretivas de Linha

* Diretiva @samp{#line}::
* @samp{#line} e @TeX{}::
* Detalhes da Sintaxe @samp{#line}::

Arquivos Include

* Using Arquivos Include::         Como utilizar o comando @code{@@include}.
* @code{texinfo-multiple-files-update}:: Como criar e atualizar nodos e 
menus quando da utilização de arquivos included.
* Arquivos Include Requirements::  Exigências @code{texinfo-multiple-files-update}.
* Sample Include File::         Um arquivo exterior de amostra com 
arquivos included dentro dele; e um arquivo included de amostra.
* Arquivos Include Evolution::     Como a utilização do comando @code{@@include} mudou ao longo do tempo.

Formatando e Imprimindo Cópia Impressa

* Use @TeX{}::                                    Use @TeX{} para formatar para cópia impressa.
* Formatar com @command{texi2dvi}::               A maneira mais simples para formatar.
* Formatar com @command{tex}/@command{texindex}:: Formatando com comandos explícitos de shell.
* Imprimir com @command{lpr}::                    Como imprimir.
* Dentro do Emacs::                               Como formatar e imprimir a partir de um shell Emacs.
* Impressão de Modo Texinfo::                     Como formatar e imprimir em modo Texinfo.
* Comando de Compilação::                         Como imprimir usando o comando de compilar do Emacs.
* Resumo das Exigências::                         Resumo de exigências de formatação do @TeX{}.
* Preparando para @TeX{}::                        O que se fazer antes de usar o @TeX{}.
* hboxes lotados::                                O que são e o que se fazer com hboxes superlotados.
* @code{@@smallbook}::                            Como imprimir livros e manuais formato pequeno.
* Papel A4::                                      Como imprimir em papel A4 ou A5.
* @code{@@pagesizes}::                            Como imprimir com tamanhos de página personalizados.
* Marcas de Corte e Ampliação::                   Como imprimir marcas para indicar o tamanho das páginas e como imprimir saída escalada.
* Saída gerada de PDF::                           Saída em Formato Portável de Documento.
* Obtendo @TeX{}::                                Como obter @TeX{}.

Formatar com @command{tex}/@command{texindex}

* Formatting Partial Documents::
* Detalhes de @command{texindex}::

@command{texi2any}: O Tradutor Genérico para Texinfo

* Reference Implementation::    @command{texi2any}: a implementação de referência.
* Invoking @command{texi2any}::           Executando o tradutor a partir de um shell.
* @command{texi2any} Printed Output::     Chamando @command{texi2any}.
* Pointer Validation::          Como verificar que os ponteiros apontam para algum lugar.
* Customization Variables::     Configurando @command{texi2any}.
* Internacionalização of Document Strings:: Traduzindo texto inserido pelo programa.
* Invoking @command{pod2texi}::           Traduzindo POD Perl para Texinfo.
* @command{texi2html}::                   Um ancestral de @command{texi2any}.

Variáveis de Personalização

* Variáveis de Personalização para Comandos @code{@@}::
* Variáveis e Opções de Personalização::
* Variáveis de Personalização de HTML::
* Outras Variáveis de Personalização::

Criando e Instalando Arquivos Info

* Creating an Info File::
* Instalando Um Arquivo Info::

Criando um Arquivo Info

* @command{makeinfo} Advantages::         @command{makeinfo} provê melhor verificação de erro.
* @code{makeinfo} in Emacs::           Como executar @code{makeinfo} a partir do Emacs.
* Comandos @code{texinfo-format}::     Dois comandos de formatação Info escritos em Emacs Lisp são uma alternativa a @code{makeinfo}.
* Batch Formatting::            Como formatar para Info em modo de lote Emacs.
* Tag and Split Files::         Como os arquivos marcados e divididos ajudam Info a executar melhor.

Instalando um Arquivo Info

* Directory File::              O menu de nível superior para todos os arquivos Info.
* New Info File::               Listando um novo arquivo Info.
* Other Info Directories::      Como especificar arquivos Info que estão localizados em outros diretórios.
* Installing Dir Entries::      Como especificar qual entrada de menu adicionar ao diretório Info.
* Invoking @command{install-info}::       Opções @code{install-info}.

Gerando HTML

* HTML Translation::       Detalhes da saída HTML.
* HTML Splitting::         Como a saída HTML é dividida.
* HTML CSS::               Influenciando saída HTML com Cascading Style Sheets.
* HTML Xref::              Referências cruzadas em saída HTML.

Referências Cruzadas HTML

* Básicos de Links:    Básico do Link HTML Xref.
* Expansão de Nodo:    Expansão de Nome de Nodo HTML Xref.
* Expansão de Comando: Expansão de Comando HTML Xref.
* Expansão de 8 bits:  Expansão de Caractere de 8 Bits HTML Xref.
* Incompatibilidade:   Incompatibilidade de Xref HTML.
* Configuração:        Configuração HTML Xref. htmlxref.cnf.
* Preservando links:   Preservação de Link HTML Xref. MANUAL-noderename.cnf.

Arquivos de Amostra Texinfo

* Short Sample Texinfo File::
* GNU Sample Texts::
* Verbatim Copying License::
* All-permissive Copying License::

Utilizando o Modo Texinfo

* Modo Texinfo Visão Geral::       Como o modo Texinfo pode te ajudar.
* Emacs Editing::               Adições do modo Texinfo às características de propósito geral de edição do GNU Emacs.
* Inserting::                   Como inserir comandos @code{@@@@} utilizados frequentemente.
* Showing the Structure::       Como exibir a estrutura de um arquivo.
* Atualizando Nodos e Menus::    Como atualizar ou criar novos nodos e menus.
* Info Formatting::             Como formatar para Info.
* Printing::                   Como formatar e imprimir parte ou tudo de um arquivo.
* Modo Texinfo Summary::        Sumário de todos os comandos do modo Texinfo.

Atualizando Nodos e Menus

* Updating Commands::           Cinco principais comandos de atualização.
* Updating Requirements::       Como estruturar um arquivo Texinfo para a utilização do comando de atualizar.
* Other Updating Commands::     Como endentar descrições, inserir linhas de nodos que faltam, e atualizar nodos em sequência.

Cabeçalhos de Página

* Cabeçalhos Introduced::         Convenções para se utilizar cabeçalhos de página.
* Heading Format::              Formatos padrão de cabeçalhos de página.
* Heading Choice::              Como especificar o tipo do cabeçalho de página.
* Custom Cabeçalhos::             Como criar seus próprios cabeçalhos e rodapés.

Capturando Erros

* @command{makeinfo} Preferred::          @code{makeinfo} encontra erros.
* Debugging with Info::         Como capturar erros com a formatação Info.
* Debugging with @TeX{}::          Como capturar erros com a formatação @TeX{}.
* Using @code{texinfo-show-structure}:: Como se utilizar @code{texinfo-show-structure}.
* Using @code{occur}::                 Como listar todas as linhas contendo um modelo.
* Running @code{Info-validate}::       Como encontrar nodos mal referenciados.

Encontrando Nodos Mal Referenciados

* Using @code{Info-validate}::         Como executar @code{Info-validate}.
* Unsplit::                     Como criar um arquivo não dividido.
* Tagifying::                   Como etiquetar um arquivo.
* Splitting::                   Como dividir um arquivo manualmente.

Especificação de Formato Info

* General:: Desenho Geral do Formato Info.
* Text::    Construtores de Texto do Formato Info.

Desenho Geral do Formato Info

* Whole::           Manual Completo do Formato Info. Manuais split vs.@: nonsplit.
* Preamble::        Preâmbulo do Formato Info.
* Indirect::        Tabela Indireta do Formato Info.
* Tag table::       Tabela de Etiquetas do Formato Info.
* Local variables:: Variáveis Local do Formato Info.
* Regular Nodos::   Nodos Regulares do Formato Info.

Construtores de Texto do Formato Info

* Menu::  Menu do Formato Info.
* Image:: Imagem do Formato Info.
* Printindex:: Imprime índices do Formato Info.
* Xref::  Referências Cruzadas do Formato Info.

@end detailmenu
@end menu

@c Recompensem-se os(as) leitores(as) por terem chegado ao fim do menu :).
@c Contribuição de Arnold Robbins.
@quotation
Documentação é como o sexo: quando ela é boa, ela é muito, muito boa; e 
quando ela é ruim, é melhor que nada.
---Dick Brandon
@end quotation


@node Condições de Cópia
@unnumbered Condições de Cópia do Texinfo
@cindex Condições de cópia
@cindex Condições para copiar Texinfo
@cindex Software livre
@cindex Livre, software

GNU Texinfo é @dfn{free software}; isso significa que qualquer pessoa é livre
para usá-lo e livre para redistribuí-lo sob certas condições. Texinfo não está
em domínio público; ele está sob direitos autorais e existem restrições acerca
da distribuição dele; porém essas restrições estão projetadas para permitir
qualquer coisa que um(a) bom(a) cidadão(ã) cooperador(a) desejasse fazer. O que
não for permitido é para tentar impedir que outros(as) adicionalmente
compartilhem qualquer versão de Texinfo que eles(as) possam obter de você.

Especificamente, nós queremos ter certeza que você tem o direito de doar cópias
dos programas que se relacionem a Texinfo; que você receba código fonte ou, do
contrário, possa obtê-lo se assim o desejar; que você pode mudar esses
programas ou usar pedaços deles em novos programas livres; e que você sabe que
pode fazer essas coisas.

Para ter certeza de que qualquer pessoa tem tais direitos, nós temos que
proibir que você prive alguém mais desses direitos. Por exemplo, se você
distribuir cópias dos programas relacionados a Texinfo, você precisa dar para
os(as) receptores(as) todos os direitos que você tem. Você precisa assegurar-se
de que eles(as), também, recebam ou possam conseguir o código fonte.  E você
precisa informá-los(as) dos direitos deles(as).

Além disso, para nossa própria proteção, nós devemos estar certos(as) de que
qualquer pessoa sabe que não existe garantia para os programas que se
relacionem a Texinfo. Se esses programas forem modificados por qualquer outra
pessoa e passados adiante, nós queremos que os(as) receptores(as) deles saibam
que o que eles(as) tem não é o que nós distribuímos, de forma que quaisquer
problemas introduzidos por outros(as) não refletirão na nossa reputação.

As condições precisas das licenças para os programas atualmente sendo
distribuídos que se relacionem com Texinfo são encontradas nas Licenças Gerais
Públicas que os acompanham. Este manual está coberto pela Licença GNU de
Documentação Livre (@pxref{Licença GNU de Documentação Livre}).


@node Visão Geral
@chapter Visão Geral do Texinfo @c Capítulo 1
@cindex Visão Geral do Texinfo
@cindex Texinfo visão geral
@cindex Usando Texinfo em geral
@cindex Texinfo, introdução a
@cindex Introdução a Texinfo
@anchor{Using Texinfo} @c nodo mesclado

@dfn{Texinfo} é um sistema de documentação que usa um arquivo fonte único para
produzir informações online e saída impressa. Isso significa que, em vez de
escrever vários documentos, um para cada formato de saída, você precisa
escrever somente um documento.

Usando Texinfo, você consegue criar um documento impresso (via sistema
tipográfico @TeX{}) em formato PDF ou PostScript, incluindo capítulos, seções,
referências cruzadas e índices. A partir do mesmo arquivo fonte do Texinfo,
você consegue criar um arquivo de saída HTML adequado para uso com um navegador
web; você consegue criar um arquivo do Info com recursos especiais para
facilitar a navegação da documentação; e também criar um arquivo do Docbook ou
uma transliteração para o formato XML.

@cindex Formato do arquivo fonte
@cindex Marcação semântica
Um arquivo fonte do Texinfo é um arquivo de texto simples contendo texto
intercalado com @dfn{comandos @@} (palavras precedidas por um @samp{@@}) que
informam aos processadores Texinfo o que fazer. Os comandos de marcação do
Texinfo são quase inteiramente @dfn{semânticos}; isto é, eles especificam o
significado pretendido do texto no documento, em vez de instruções de
formatação física. Você consegue editar um arquivo do Texinfo com qualquer
editor de texto, porém é especialmente conveniente se usar o GNU Emacs, dado
que esse editor tem um modo especial, chamado modo Texinfo, que fornece vários
recursos relacionados ao Texinfo (@xref{Modo Texinfo}).

@cindex Escopo limitado do Texinfo
Texinfo foi concebido especificamente para o propósito de escrever documentação
e manuais de software. Se você quer escrever um bom manual para teu programa,
Texinfo tem muitos recursos que nós esperamos que tornarão tua tarefa mais
fácil. Entretanto, ele quase não fornece comandos para controlar a formatação
final. Texinfo não é destinado a ser um programa de formatação de propósito
geral, de modo que se você precisa planejar um jornal, conceber um anúncio
luxuoso de revista, ou seguir as exatas exigências de formatação de uma
editora, Texinfo pode não ser a ferramenta mais simples.

@cindex Escrita de Texinfo
@cindex Pronúncia de Texinfo
Escreva-se ``Texinfo'' com um ``T'' maiúsculo e as outras letras em minúsculas.
A primeira silaba de ``Texinfo'' é pronunciada como ``speck'', e não ``hex''.
Essa pronúncia estranha é derivada da pronúncia de @TeX{}. Pronuncie-se @TeX{}
como se o @samp{X} fosse o último som no nome `Bach'. Na palavra @TeX{}, o
@samp{X} é, em vez da letra do Inglês ``ex'', na verdade a letra Grega ``chi''.

Texinfo é o formato oficial de documentação do projeto GNU. Mais informações,
incluindo manuais para pacotes GNU, estão disponíveis na
@uref{http://www.gnu.org/doc/, página web da documentação GNU}.

@menu
* Informando Defeitos::           Submetendo informes efetivos de defeitos.
* Formatos de Saída::             Visão geral dos formatos de saída suportados.
* Arquivos do Info::              O que é um arquivo Info?
* Livros Impressos::              Características de um livro ou manual impresso.
* Adicionando Formatos de Saída:: Páginas de manual e implementando novos formatos.
* Histórico::                     Agradecimentos, contribuidores(as) e gênese.
@end menu


@node Informando Defeitos
@section Informando Defeitos

@cindex Defeitos, informando
@cindex Sugestões para Texinfo, fazendo
@cindex Informando Defeitos
Nós apreciamos informes de defeitos e de sugestões para qualquer aspecto do
sistema Texinfo: programas, documentação, instalação, etc. Por favor, envie-os
para @email{bug-texinfo@@gnu.org}. Você consegue obter a versão mais recente do
Texinfo por meio da página inicial dele,
@uref{http://www.gnu.org/software/texinfo}.

@cindex Lista de verificação para informes de defeitos
Para informes de defeitos, por favor, inclua informações suficientes para
os(as) mantenedores(as) reproduzirem o problema. Falando genericamente, isso
significa:

@itemize @bullet
@item O número da versão do Texinfo e o(s) programa(s) ou manual(is) envolvido(s).
@item O conteúdo de quaisquer arquivos de entrada necessários para reproduzir o defeito.
@item Precisamente como você executou quaisquer programa(s) envolvido(s).
@item Uma descrição do problema e amostras de quaisquer saídas errôneas.
@item Nomes e versões do hardware e do sistema operacional.
@item Qualquer outra coisa que você pense que pudesse ajudar.
@end itemize

Quando em dúvida se alguma coisa é necessária ou não, inclua-a. É melhor
incluir muito mais que deixar de fora algo importante.

É crítico enviar um arquivo de entrada atual que reproduza o problema.
O que não é crítico é ``simplificar'' o exemplo para a menor entrada 
possível---a entrada atual com a qual você descobriu o defeito bastará.
(Certamente, se você fizer experimentos, quanto menor o arquivo de 
entrada, melhor).

@cindex Remendos, contribuindo
Correções (``Patches'') são mais que bem-vindas; se possível, por favor 
faça-as com @samp{@w{diff -c}} 
(veja-se @ref{Top,,, diffutils, Comparing and Merging Files}) e inclua as 
entradas @file{ChangeLog} 
(veja-se @ref{Change Log,,, emacs, The GNU Emacs Manual}), e siga o estilo de 
codificação existente.

@node Formatos de Saída
@section Formatos de Saída
@cindex Formatos de saída
@cindex Estrutura de rataguarda, formatos de saída

Aqui está uma visão geral breve dos formatos de saída atualmente 
suportados por Texinfo.

@table @asis
@item Info
@cindex Saída gerada do Info, visão geral
(Gerado via @command{makeinfo}).   O formato Info é em sua maior parte 
transliteração de texto plano do fonte Texinfo.   Ele adiciona uns 
poucos caracteres de controle para prover informação de navegação para 
referências cruzadas, índices, e assim por diante.   O subsistema Emacs 
Info (veja-se @ref{Top,,, info, Info}), e o programa autônomo @command{info} 
(@pxref{Top,,, info-stnd, GNU Info}), entre outros, podem ler esses 
arquivos. Veja-se @ref{Arquivos do Info}, e 
@ref{Criando e Instalando Arquivos Info}.

@item Plain text
@cindex Saída gerada de texto simples, visão geral
(Gerado via @command{makeinfo --plaintext}).   Essa é quase a mesma que 
a saída Info com os caracteres de controle de navegação omitidos.

@item HTML
@cindex Saída gerada de HTML, visão geral
@cindex Consórcio W3
@cindex Mozilla
@cindex Lynx
@cindex Emacs-W3
(Gerado via @command{makeinfo --html}).   HTML, significando Hyper Text 
Markup Language (Linguagem de Marcação de Hiper Texto), tem se tornado a 
mais comumente utilizada linguagem para a escrita de documentos na World 
Wide Web (Teia de Alcance Global).   Os navegadores web, tais como 
Mozilla, Lynx, e Emacs-W3, podem renderizar essa linguagem online.   
Existem muitas versões de HTML, também padrões diferentes e variações 
específicas de navegador.   @command{makeinfo} tenta utilizar um 
subconjunto da linguagem que possa ser interpretado por qualquer 
navegador comum, intencionalmente não se utilizando de muitas marcações 
mais novas ou menos amplamente suportadas.
Apesar que a saída nativa é assim até certo ponto plana, ela pode ser 
personalizada em vários níveis, se desejado.   Para detalhes da 
linguagem HTML e mais informação relacionada, veja-se 
@uref{http://www.w3.org/MarkUp/}.
Veja-se @ref{Gerando HTML}.

@item DVI
@cindex Saída gerada DVI, visão geral
@pindex dvips
@pindex xdvi
(Gerado via @command{texi2dvi}).   O formato binário ``DeVIce Independent''
é liberado pelo programa tipográfico @TeX{} (@uref{http://tug.org}).   
Essa é então lida por um `controlador' DVI, o qual conhece os comandos 
específicos de dispositivo atuais que podem ser visualizados ou 
impressos, notadamente Dvips para tradução para PostScript 
(veja-se @ref{Top,,, dvips, Dvips}) e Xdvi para visualização em uma tela X
(@uref{http://sourceforge.net/projects/xdvi/}). Veja-se @ref{Cópia Impressa}.
(Esteja avisado de que a linguagem Texinfo é muito diferente de, e muito 
mais estrita que, as linguagens usuais de @TeX{}: plain @TeX{}, @LaTeX{},
Con@TeX{}t, etc.).

@item PostScript
@cindex Saída gerada PostScript, visão geral
(Gerada via @command{texi2dvi --ps}).   PostScript é uma linguagem de 
descrição de página que se tornou amplamente utilizada por volta de 1985 
e ainda é utilizada hoje em dia.   
@uref{http://en.wikipedia.org/wiki/PostScript} dá uma descrição básica e 
mais preferências.   Por padrão, Texinfo utiliza o programa 
@command{dvips} para converter a saída DVI de @TeX{} para PostScript.
 Veja-se @ref{Top,,, dvips, Dvips}.

@item PDF
@cindex Saída gerada PDF, visão geral
@cindex Beebe, Nelson
(Gerada via @command{texi2dvi --pdf} ou @command{texi2pdf}).   Esse 
formato foi desenvolvido por Adobe Systems para troca de documento 
portável, baseado na linguagem PostScript prévia deles.   O formato pode 
representar a exata aparência de um documento, incluindo fontes e 
gráficos, e suportar escalamento arbitrário.   Ele é entendido como 
sendo independente de plataforma e facilmente visualizável, entre outros 
objetivos de design;
@uref{http://en.wikipedia.org/wiki/Portable_Document_Format} e
@uref{http://tug.org/TUGboat/tb22-3/tb72beebe-pdf.pdf} tem algum 
conhecimento.   Por padrão, Texinfo utiliza o programa @command{pdftex}, 
uma extensão de @TeX{}, para liberar PDF; veja-se
@uref{http://tug.org/applications/pdftex}. Veja-se @ref{PDF Output}.

@item Docbook
@cindex Saída gerada Docbook, visão geral
@cindex Saída gerada XML Docbook, visão geral
(Gerado via @command{makeinfo --docbook}).   Esse é um formato baseado 
em XML desenvolvido alguns anos atrás, primariamente para documentação 
técnica.   Ele por conseguinte assume alguma semelhança, em linhas 
gerais, com Texinfo.   Veja-se @uref{http://www.docbook.org}.
Vários conversores de Docbook @emph{para} Texinfo também foram 
desenvolvidos; veja-se as páginas web Texinfo.

@item XML
@cindex Saída gerada XML Texinfo, visão geral
@cindex Saída gerada Texinfo XML, visão geral
@cindex DTD, para Texinfo XML
@pindex texinfo.dtd
@pindex txixml2texi
(Gerado via @command{makeinfo --xml}).   XML é uma especificação de 
sintaxe genérica utilizável para qualquer tipo de conteúdo (uma 
referência está em @uref{http://www.w3.org/XML}).   A saída XML de 
@command{makeinfo}, diferente de todos os outros formatos de saída, é 
uma transliteração do fonte Texinfo em vez de saída processada.   Isto 
é, a saída traduz os comandos de marcação Texinfo em sintaxe XML, para 
processamento mais amplo por ferramentas XML.   Os detalhes da saída 
estão definidos em um DTD XML como de costume, o qual está contido em um 
arquivo @file{texinfo.dtd} incluso na distribuição do fonte Texinfo e 
disponível via páginas web Texinfo.
O XML contém informação suficiente para recriar o conteúdo original, 
exceto para construções sintáticas, tais como macros Texinfo e 
condicionais.   A distribuição do fonte Texinfo inclui um script 
utilitário @file{txixml2texi} para fazer essa transformação de volta.
@end table


@node Arquivos do Info
@section Arquivos do Info
@cindex Arquivos Info

Conforme mencionado acima, o formato Info é em sua maioria uma 
transliteração de texto plano do fonte Texinfo, com a adição de uns 
poucos caracteres de controle para separar nodos e prover informação de 
navegação, de forma que os programas de leitura Info possam operar sobre 
ele.

Os arquivos Info são quase sempre criados pelo processamento de um 
documento fonte Texinfo.   O comando @command{makeinfo}, também 
conhecido como @command{texi2any}, é o comando principal que converte um 
arquivo Texinfo em um arquivo Info; veja-se 
@ref{Tradutor Genérico @command{texi2any}}.

Geralmente, você adentra um arquivo Info via um nodo que, por convenção, 
é chamado `Top'.   Esse nodo normalmente contém somente um sumário curto 
do propósito do arquivo, e um menu amplo por meio do qual o restante do 
arquivo é alcançado.   A partir desse nodo, você ou pode atravessar o 
arquivo sistematicamente, indo de nodo a nodo; ou você pode ir até um 
nodo específico listado no menu principal, ou você pode pesquisar no 
menu de índice e então ir diretamente ao nodo que tenha a informação que 
você deseja.   Alternativamente, com programa autônomo Info, você pode 
especificar itens de menu na linha de comando 
(veja-se @ref{Top,,, info, Info}).

Se você desejar ler ao longo de um arquivo Info em sequência, como se 
ele fosse um manual impresso, você pode teclar @key{ESPAÇO} repetidamente, 
ou você percorre o arquivo inteiro com o comando Info avançado @kbd{g *}. 
(Veja-se @ref{Advanced,, Advanced Info commands, info, Info}).

O arquivo @file{dir} no diretório @file{info} serve como o ponto de 
chegada para o sistema Info inteiro.   A partir dele, você pode alcançar 
os nodos `Top' de cada um dos documentos em um sistema Info completo.

@cindex Sintaxe URI para Info
Se você desejar se referir a um arquivo Info via URI, você pode utilizar 
a sintaxe (não oficial) exemplificada pelo seguinte.   Isto funciona com 
Emacs/W3, por exemplo:
@example
info:emacs#Dissociated%20Press
info:///usr/info/emacs#Dissociated%20Press
info://localhost/usr/info/emacs#Dissociated%20Press
@end example

O próprio programa @command{info} não segue URIs de qualquer tipo.


@node Livros Impressos
@section Livros Impressos
@cindex Manual e livro impresso, características
@cindex Características de manual, impresso
@cindex Características de livro, impresso
@cindex Características de livro impresso Texinfo
@cindex Características, manuais e livros impressos

@cindex Knuth, Donald
Um arquivo Texinfo pode ser formatado e composto como um livro impresso 
ou um manual.   Para fazer isso, você precisa de @TeX{}, um sofisticado 
programa de tipografia escrito por Donald Knuth da Universidade Stanford.

Um livro baseado em Texinfo é similar a qualquer outro composto, 
trabalho impresso: ele pode ter uma página de título, página de direitos 
autorais, sumário, e prefácio, bem como capítulos, seções e subseções 
numeradas ou não numeradas, cabeçalhos de páginas, referências cruzadas, 
notas de rodapé, e índices.

@TeX{} é um programa tipográfico de propósito geral.   Texinfo provê um 
arquivo @file{texinfo.tex} que contém informação (definições ou 
@dfn{macros}) que @TeX{} utiliza quando compõe arquivo Texinfo.
(@file{texinfo.tex} informa a @TeX{} como converter os comandos @@ de 
Texinfo para comandos @TeX{}, os quais @TeX{} pode então processar para 
criar o documento tipografado).   @file{texinfo.tex} contém as 
especificações para imprimir um documento.   Você pode obter a versão 
mais recente de @file{texinfo.tex} a partir da página de Texinfo 
@uref{http://www.gnu.org/software/texinfo/}.

Nos Estados Unidos, os documentos são em sua maioria frequentemente 
impressos em páginas de 8.5 por 11 polegadas 
(216@dmn{mm} por 280@dmn{mm}); esse é o tamanho padrão.
Porém, você também pode imprimir em páginas de 7 por 9.25 polegadas 
(178@dmn{mm} por 235@dmn{mm}, o tamanho @code{@@smallbook}; ou em papel 
de tamanho A4 ou A5 (@code{@@afourpaper}, @code{@@afivepaper}).
 Veja-se @ref{@code{@@smallbook}}, e @ref{Papel A4}.

@cindex Programação competente
@TeX{} é livremente distribuível.   Ele é escrito em um super conjunto 
de Pascal para programação de instrução chamado WEB e pode ser compilado 
ou em Pascal ou (pelo uso de um programa de conversão que vem com a 
distribuição de @TeX{}) em C.

@TeX{} é muito poderoso e tem um grande número de características.  
Porque um arquivo Texinfo deve necessariamente estar apto a apresentar 
informação tanto em um terminal somente carácter em formato Info quanto 
em um livro tipografado, os comandos de formatação que Texinfo suporta 
são necessariamente limitados. Veja-se @ref{Obtaining @TeX{}}, para 
informação sobre como adquirir @TeX{}. Ele não é parte da distribuição Texinfo.


@node Adicionando Formatos de Saída
@section Adicionando Formatos de Saída
@cindex Formatos de saída adicionais

Os formatos de saída nas seções anteriores lidam com uma variedade ampla 
de usos, porém, certamente, sempre existe espaço para mais.

@cindex Formatos de saída, suportando mais
@cindex Ferramentas SGML, formatos de saída
Se você for um programador e gostaria de contribuir para com o projeto 
GNU implementando formatos de saída adicionais para Texinfo, isso seria 
excelente.   A maneira de fazer isso que seria mais útil é escrever uma 
infraestrutura nova para @command{texi2any}, nossa implementação de 
referência de um analisador Texinfo; ela cria uma representação de 
árvore da entrada de Texinfo que você pode utilizar para a conversão.
A documentação no arquivo fonte 
@file{tp/Texinfo/Convert/Converter.pm} é um bom lugar para começar.
Veja-se @ref{Tradutor Genérico @command{texi2any}}.

Outra abordagem viável é utilizar a saída XML de Texinfo oriunda de 
@command{texi2any} como sua entrada.   Esse XML é uma representação 
essencialmente completa da entrada, porém sem a sintaxe de Texinfo 
e as peculiaridades de opção, conforme descrito acima.

@cindex Analisadores Texinfo, desencorajando mais
Se você ainda não conseguir resistir à tentação de escrever um programa 
novo que leia o fonte Texinfo diretamente, permita-nos te dar mais 
algumas advertências: por favor não subestime a quantidade de trabalho 
exigida.   Texinfo não é de forma alguma uma linguagem simples de se 
analisar corretamente, e permanece sob desenvolvimento, de maneira que 
você estaria se comprometendo com uma tarefa em andamento.   Você está 
aconselhado a verificar se os testes da linguagem que vem com 
@command{texi2any} dão resultados corretos com o seu programa novo.

@cindex Saída de página de manual, não suportada
De tempos em tempos, propostas são feitas para gerar páginas de manual 
Unix tradicionais a partir do fonte Texinfo.   Entretanto, pelo motivo 
de que as páginas de manual tem um formato convencional estrito, criar 
uma página de manual boa exige um fonte completamente diferente daquele 
necessário para as aplicações Texinfo típicas de escrita de um tutorial 
de usuário bom e/ou um bom manual de referência.   Isso torna a geração 
de páginas de manual incompatível com o objetivo do desenho de Texinfo 
de não ter de documentar a mesma informação em maneiras diferentes para 
diferentes formatos de saída.   Você poderia também escrever a página de 
manual diretamente.

@pindex help2man
@cindex O'Dea, Brendan
Como um meio alternativo para suportar páginas de manual, você pode 
achar que o programa @command{help2man} seja útil.   Ele gera uma página 
de manual tradicional a partir da saída @samp{--help} de um programa.
De fato, as páginas de manual para os programas na distribuição Texinfo 
são geradas com isso.
Ele é software GNU escrito por Brendan O'Dea, disponível a partir de 
@uref{http://www.gnu.org/software/help2man}.



@node Histórico
@section Histórico

@cindex Stallman, Richard M.
@cindex Chassell, Robert J.
@cindex Fox, Brian
@cindex Berry, Karl
Richard M. Stallman inventou o formato Texinfo, escreveu os 
processadores iniciais, e criou a Edição 1.0 deste manual.  
Robert@tie{}J. Chassell revisou e estendeu imensamente o manual, 
iniciando com a Edição 1.1.   Brian Fox foi responsável pela 
distribuição autônoma de Texinfo até a versão 3.8, e originalmente 
escreveu os programas autônomos @command{makeinfo} e @command{info}.  
Karl Berry continuou a manutenção desde Texinfo 3.8 
(edição do manual 2.22).

@cindex Pinard, Fran@,{c}ois
@cindex Schwab, Andreas
@cindex Weinberg, Zack
@cindex Weisshaus, Melissa
@cindex Zaretskii, Eli
@cindex Zuhn, David D.
Nossos agradecimentos vão para todos que ajudaram a aperfeiçoar este 
trabalho, particularmente os incansáveis Eli Zaretskii e Andreas Schwab, 
que forneceram correções incontáveis.   Fran@,{c}ois Pinard e 
David@tie{}D. Zuhn, incansavelmente gravaram e relataram erros e 
obscuridades.  Zack Weinberg fez o impossível implementando a sintaxe de 
macro em @file{texinfo.tex}.   Obrigado a Melissa Weisshaus por suas 
frequentes revisões de edições quase similares.   Dúzias de outros 
contribuíram com correções e sugestões, eles estão agradecidamente 
reconhecidos no arquivo @file{ChangeLog}.   Nossos erros são nossos 
próprios.

@cindex Histórico of Texinfo
@cindex Texinfo, estória
@subheading Beginnings

@cindex Scribe
@cindex Reid, Brian
Nos anos 1970 no CMU, Brian Reid desenvolveu um programa e formato 
chamado Scribe para marcar documentos para impressão.   Ele utilizou o 
carácter @code{@@} para introduzir comandos, conforme Texinfo faz.  
Muito mais consequencialmente, ele se empenhou em descrever o conteúdo 
dos documentos em vez da formatação, uma ideia inteiramente adotada por 
Texinfo.

@cindex Bolio
@cindex Bo@TeX{}
Ao mesmo tempo, pessoas no MIT desenvolveram outro, não muito diferente 
formato chamado Bolio.  Esse então foi convertido utilizando @TeX{} como 
sua linguagem tipográfica: Bo@TeX{}.  A versão mais antiga de Bo@TeX{} 
parece ter sido a 0.02 em 31 de outubro de 1984.

Bo@TeX{} somente poderia ser utilizado como uma linguagem de marcação 
para documentos serem impressos, não para documentos online.  Richard 
Stallman (RMS) trabalhou em ambos Bolio e Bo@TeX{}.  Ele também 
desenvolveu um formato chique de ajuda on-line chamado Info, e então 
combinou Bo@TeX{} e Info para criar Texinfo, uma linguagem de marcação 
para texto que é entendida para ler ambos online e como cópia impressa.

Seguindo em frente, o tradutor original para criar Info foi escrito 
(primariamente por RMS e Bob Chassell) em Emacs Lisp, a saber: o 
@code{texinfo-format-buffer} e outras funções.  No começo dos anos 1990, 
Brian Fox reimplementou o programa de conversão em C, agora chamado 
@command{makeinfo}.

@subheading Reimplementing in Perl

@cindex Cons, Lionel
@cindex Dumas, Patrice
Em 2012, o @command{makeinfo} C foi ele próprio substituído por uma 
implementação Perl chamada genericamente @command{texi2any}.  Essa 
versão suporta o mesmo nível de personalização de saída que 
@command{texi2html}, um programa independente originalmente escrito por 
Lionel Cons, mais tarde com trabalho substancial de muitos outros.  As 
muitas características adicionais necessárias para tornar 
@command{texi2html} uma substituição para @command{makeinfo} foram 
implementadas por Patrice Dumas.  A primeira versão jamais lançada de 
@command{texi2any} foi baseada no código @command{texi2html}.  Essa 
implementação, entretanto, foi abandonada em favor do atual programa, 
que analisa a entrada Texinfo em uma árvore para processamento.  Ele 
ainda suporta quase todas as características de @command{texi2html}.

O novo programa Perl é muito mais lento que o antigo programa C.  
Nós esperamos que a diferença de velocidade será fechada no futuro, 
porém elas podem jamais ser inteiramente comparáveis.  Então porque nós 
mudamos?  Em poucas palavras, nós pretendemos e esperamos que o presente 
programa seja muito mais fácil que a prévia implementação C de 
@command{makeinfo} para estender para diferentes estilos de saída, 
formatos de infra estrutura de saída, e todas as outras personalizações.
Em mais detalhes:

@itemize @bullet
@item Personalização de HTML.  Muitos GNU e outros pacotes de software 
livre tem sido felizes na utilização das características de 
personalização de HTML em @command{texi2html} por anos.  Assim, na 
verdade, duas implementações independentes da linguagem Texinfo foram 
desenvolvidas, e mantê-las em sincronia não foi simples.  Adicionar a 
possibilidade de personalização de HTML em @command{texi2html} a um 
programa C tem sido um esforço enorme.

@item Unicode, e suporte multilínguas genericamente, especialmente das 
linguagens da Ásia Oriental.  Apesar que certamente é perfeitamente 
plausível escrever tal suporte em C, no caso particular de 
@command{makeinfo}, isso teria sido equivalente a reescrever o programa 
inteiro.  Em Perl, muito disso vem essencialmente de graça.

@item Infra estrutura adicional.  O código @command{makeinfo} se tornou 
tão complexo ao ponto de que, adicionar uma infra estrutura nova, era bastante 
complexo, exigindo interações complexas com as infra estruturas 
existentes.  Em contraste, nossa implementação Perl provê uma 
representação limpa baseada em árvore para todas as infra estruturas 
funcionarem.  Pessoas tem solicitado numerosas infra estruturas 
diferentes (@LaTeX{}, o mais recente (X)HTML, @dots{}), e elas agora 
serão muito mais viáveis de implementar.  O que conduz ao último item:

@item Tornando as contribuições mais fáceis.  Em geral, devido à 
estrutura mais limpa, o programa Perl deveria ser consideravelmente mais 
fácil que o C para qualquer pessoa ler e contribuir com, com os óbvios 
benefícios resultantes.
@end itemize

Veja-se @ref{Reference Implementation}, para mais sobre a razão de ser e função 
de @command{texi2any}.


@node Escrevendo um Arquivo Texinfo
@chapter Escrevendo um Arquivo Texinfo @c Capítulo 2

Este capítulo descreve a sintaxe Texinfo e o que é exigido em um arquivo 
Texinfo, e dá um arquivo curto de amostra.

@menu
* Convenções::                Regras gerais para escrever um arquivo Texinfo.
* Comentários::                   Escrevendo comentários e texto ignorado em geral.
* Mínimo::                    O que um arquivo Texinfo deve ter.
* Amostra Curta::               Um arquivo curto de amostra Texinfo
@end menu


@node Convenções
@section Convenções Sintáticas Gerais
@cindex Convenções sintáticas gerais
@cindex Sintáticas, convenções
@cindex Convenções, sintáticas
@cindex Caracteres, entrada básica
@anchor{Formatting Commands} @c nome antigo

Esta seção descreve as convenções gerais utilizadas em todos os 
documentos Texinfo.

@itemize @bullet
@item
@cindex Arquivos fonte, caracteres usados
Todos os caracteres ASCII imprimíveis, exceto @samp{@@}, @samp{@{} e 
@samp{@}}, podem aparecer em um arquivo Texinfo e representam eles 
mesmos.
@samp{@@} é o carácter de encapsulamento que introduz comandos, enquanto 
@samp{@{} e @samp{@}} são utilizados para envolver argumentos a certos 
comandos.   Para colocar um desses caracteres especiais no documento, 
coloque um carácter @samp{@@} em frente a ele, como isto: @samp{@@@@},
@samp{@@@{}, e @samp{@@@}}.

@item
@cindex @@-commands
@cindex Formatando, comandos
Em um arquivo Texinfo, os comandos que você escreve para descrever o 
conteúdo do manual são precedidos por um carácter @samp{@@}; eles são 
chamados @dfn{comandos @@}.   (O @samp{@@} em Texinfo tem o mesmo 
significado que @samp{\} tem em @TeX{} plano).

@cindex Chaves, quando usar
Dependendo do que fazem ou quais argumentos@footnote{A palavra 
argumento é oriunda da maneira como ela é empregada em matemática e não 
se refere a uma disputa entre duas pessoas; ela se refere a informação 
apresentada ao comando.  De acordo com o @cite{Oxford English 
Dictionary}, a palavra é derivada do Latim para @dfn{tornar claro, 
provar}; então, ela veio a significar `a evidência oferecida como 
prova', o que é dizer `a informação oferecida', o que leva ao seu 
significado matemático.  Em sua outra derivação subjacente, a palavra 
veio a significar `afirmar em um modo contra o qual outros podem fazer 
contra afirmações', o que levou ao significado de `argumento' como uma 
disputa.} receberem, você precisa escrever comandos @@ em suas próprias 
linhas, ou como parte de sentenças.   Como uma regra geral, um comando 
exige chaves se esse comando se misturar entre outro texto; porém, ele 
não necessita das chaves se estiver em sua própria linha.  Para mais 
detalhes da sintaxe de comando Texinfo, veja-se @ref{Sintaxe de Comando}.


@item
Espaço em branco seguindo um nome de comando @@ é opcional e 
(normalmente) ignorado se presente.  As exceções são contextos quando o 
espaço em branco é significativo, por exemplo, um ambiente de 
@code{@@example}.


@item
Texinfo suporta as marcações normais de encapsulamento utilizados em 
Inglês e em outras linguagens; veja-se @ref{Inserindo Aspas}.

@item
@cindex Vários traços no fonte
@cindex Traços no fonte
@cindex Hífens no fonte, dois ou três em uma linha
@cindex Travessão, produzindo
@cindex Em dash, produzir
Use três hifens em uma linha, @samp{---}, para produzir um traço 
longo---como esse (chamado um @dfn{travessão}), utilizado para pontuação 
em sentenças.  Use dois hifens, @samp{--}, para produzir um traço 
médio (chamado um @dfn{traço médio}), utilizado primariamente para 
intervalos numéricos, como em ``Junho 25--26''.  Use um hífen 
simples, @samp{-}, para produzir um hífen padrão utilizado em palavras 
compostas.  Para exibir na tela, Info reduz três hifens para dois e dois 
hifens para um (não transitivamente!).  Certamente, qualquer número de 
hifens no fonte permanece como estiverem em contextos literais, 
tais como @code{@@code} e @code{@@example}.

@item
@cindex Form feed characters
@cindex @kbd{CTRL-l}
Os caracteres de alimentação de formulário (@kbd{CTRL-l}) na entrada são 
manipulados conforme segue:

@table @asis
@item PDF/DVI
Em texto normal, tratado como finalizante de qualquer parágrafo aberto; 
essencialmente ignorado entre parágrafos.

@item Info
Saída como-é entre parágrafos (o uso mais comum deles); em outros 
contextos, eles podem ser tratados como espaços regulares (e então 
consolidados com espaço em branco envolvente).

@item HTML
Escrito como uma entidade numérica, exceto contextos onde espaços são 
ignorados; por exemplo, em @samp{@@footnote@{ ^L foo@}}, a alimentação 
de formulário é ignorada.

@item XML
Mantenha-os em qualquer lugar; em atributos, encapsulados como 
@samp{\f}; também, @samp{\} é encapsulado como @samp{\\} e uma nova 
linha como @samp{\n}.

@item Docbook
Completamente removidos, dado que não são permitidos.
@end table

Como você pode ver, por causa dessas exigências diferentes dos formatos 
de saída, não é possível se utilizar alimentações de formulário 
completamente portáveis.

@item
@cindex Tabs; don't use!
@strong{Aviso:} Por último, não use caracteres tab em um arquivo 
Texinfo! (Exceto, talvez, em modos textuais.)  @TeX{} utiliza fontes de 
largura variável, o que significa que é impraticável, na melhor das 
hipóteses, se definir um tab para funcionar em todas as circunstâncias.  
Consequentemente, @TeX{} trata tabs como espaços únicos, e isso não é o 
que eles aparentam no fonte.
Além disso, @code{makeinfo} não faz nada especial com tabs, e então um 
carácter tab em seu arquivo de entrada geralmente terá uma aparência 
diferente na saída.

@noindent
Para evitar esse problema, o modo Texinfo em GNU Emacs insere espaços 
múltiplos quando você pressiona a tecla @key{TAB}.   Ainda, você pode 
executar @code{untabify} em Emacs para converter tabs em uma região para 
espaços múltiplos, ou utilizar o comando @code{unexpand} a partir do 
shell.
@end itemize


@node Comentários
@section Comentários

@cindex Comentários
@findex comment
@findex c

Você pode escrever comentários em um arquivo Texinfo utilizando o 
comando @code{@@comment}, o qual pode ser abreviado para @code{@@c}.  
Tais comentários são para uma pessoa examinando o arquivo fonte Texinfo.  
Todo o texto em uma linha que se seguir ou a @code{@@comment} ou a 
@code{@@c} é um comentário; o restante da linha não aparece na saída 
visível.  (Para ser preciso, o carácter após o @code{@@c} ou 
@code{@@comment} deve necessariamente ser algo que não um traço ou 
alfanumérico, ou será tomado como sendo parte do comando.)

Frequentemente, você pode escrever o @code{@@comment} ou @code{@@c} no 
meio de uma linha, e somente o texto que se seguir após o comando 
@code{@@comment} ou @code{@@c} não aparece; porém alguns comandos, tais 
como @code{@@settitle}, funcionam sobre uma linha inteira.  Você não 
pode utilizar @code{@@comment} ou @code{@@c} dentro de uma linha que se 
inicie com um tal comando.

@findex DEL @r{(comment character)}
@cindex Catcode for comments in @TeX{}
Em casos de invocações de comando aninhado, definições complicadas de 
macro, etc., @code{@@c} e @code{@@comment} podem provocar um erro quando 
do processamento com @TeX{}.  Por conseguinte, você também pode utilizar 
o carácter @kbd{DEL}(decimal 127 ASCII, hexadecimal 0x7f, octal 0177) 
como um verdadeiro carácter de comentário @TeX{} (catcode 14, em 
internos @TeX{}).   Tudo na linha após o @kbd{DEL} será ignorado.

@cindex Ignored text
@cindex Unprocessed text
@findex ignore
Você também pode ter trechos longos de texto ignorados pelos 
processadores Texinfo com os comandos @code{@@ignore} e 
@code{@@end ignore}.
Escreva cada um desses comandos em sua própria linha, iniciando cada 
comando no começo da linha.  O texto entre esses dois comandos não 
aparece na saída processada.  Você pode utilizar @code{@@ignore} e 
@code{@@end ignore} para escrever comentários.  (Para algumas 
advertências relativamente ao aninhamento de tais comandos, veja-se 
@ref{Aninhamento Condicional}.)


@node Mínimo
@section O Que um Arquivo do Texinfo Deve Ter
@cindex Arquivo mínimo do Texinfo (requisitos)
@cindex Deve ter no arquivo do Texinfo
@cindex Obrigatório no arquivo do Texinfo
@cindex Mínimo do arquivo do Texinfo

Por convenção, o nome de um arquivo Texinfo termina com uma das 
extensões @file{.texinfo}, @file{.texi}, @file{.txi}, ou 
@file{.tex}.@footnote{As extensões mais longas são as preferidas, dado 
que elas descrevem mais claramente a um leitor humano a natureza do 
arquivo.  As extensões mais curtas são para sistemas operacionais que 
não conseguem lidar com nomes longos de arquivos.}

Para fazer com que seja um manual impresso e outros formatos de saída, 
um arquivo Texinfo deve necessariamente iniciar com linhas como estas:

@example
@group
\input texinfo
@@settitle @var{nome-do-manual}
@end group
@end example

@noindent
O conteúdo do arquivo segue esse início, e então você deve finalizar o 
fonte Texinfo com uma linha como esta:

@example
@@bye
@end example

@findex \input @r{(raw @TeX{} startup)}
@noindent
Aqui está uma explanação:

@itemize @bullet
@item
A linha @samp{\input texinfo} manda @TeX{} utilizar o arquivo 
@file{texinfo.tex}, o qual instrui @TeX{} como traduzir os comandos @@ 
Texinfo em comandos de tipografia @TeX{}.  (Note-se o uso da barra 
invertida, @samp{\}; isso é correto para @TeX{}.)

@item
A linha @code{@@settitle} especifica um título para os cabeçalhos de 
página (ou rodapés) do manual impresso, e o título padrão e descrição de 
documento para o marcador @samp{<head>} em HTML@.  Estritamente falando, 
@code{@@settitle} é opcional---se você não se importar de ver o seu 
documento sendo intitulado `Untitled'.

@item
A linha @code{@@bye} ao final do arquivo em uma linha própria informa 
aos formatadores que o arquivo está finalizado e para parar de formatar.  
Se você deixar isso fora, você será colocado no prompt de @TeX{} ao 
final da execução.
@end itemize

Além disso, você geralmente proverá um arquivo Texinfo com uma página de 
título, índices, e semelhantes, tudo isso é explanado neste manual.  
Porém, o mínimo, que pode ser útil para documentos curtos, é apenas as 
duas linhas no início e aquela no final.



@node Amostra Curta
@section Um Arquivo Curto de Amostra do Texinfo
@cindex Arquivo de amostra do Texinfo, com comentários

Aqui está um curto, porém completo, arquivo Texinfo, de forma que você 
possa ver como um fonte Texinfo se aparenta na prática.  As primeiras 
três partes do arquivo são em sua maioria clichê: quando da escrita de 
um manual, você simplesmente modifica os nomes conforme apropriado.

O arquivo completo, sem os comentários intercalados, é mostrado em 
@ref{Short Sample Texinfo File}.

Veja-se @ref{Iniciando e Finalizando um Arquivo}, para mais documentação acerca dos 
comandos listados aqui.


@subheading Header

@noindent
O cabeçalho diz a @TeX{} qual arquivo de definições utilizar, nomeia o 
manual, e realiza outras tais tarefas domésticas.

@example
@group
\input texinfo
@@settitle Manual de Amostra 1.0
@end group
@end example


@subheading Summary Description and Copyright

Este segmento descreve o documento e contém o aviso de direitos autorais 
e permissões de cópia.  Isso é feito com o comando @code{@@copying}.

@noindent
Um manual real inclui mais texto aqui, de acordo com a licença sob a 
qual ele é distribuído. Veja-se @ref{GNU Sample Texts}.

@example
@group
@@copying
Este é um exemplo curto de um arquivo completo Texinfo, versão 1.0.

Direitos autorais @@copyright@{@} 2016 Free Software Foundation, Inc.
@@end copying
@end group
@end example

@subheading Titlepage, Copyright, Contents

O segmento de título e direitos autorais contém as páginas de título e 
de direitos autorais para o manual impresso.   O segmento deve 
necessariamente estar incluso entre os comandos @code{@@titlepage} e 
@code{@@end titlepage}.  A página de título e de direitos autorais não 
aparece na saída online.

@noindent
Nós utilizamos o comando @code{@@insertcopying} para incluir o texto de 
permissão a partir da seção anterior, em vez de escrevê-lo outra vez; o 
texto é colocado no verso da página de título.  O comando 
@code{@@contents} gera um sumário.

@example
@group
@@titlepage
@@title Título de Amostra
@end group

@group
@@c Os dois comandos seguintes iniciam a página de direitos autorais.
@@page
@@vskip 0pt plus 1filll
@@insertcopying
@@end titlepage
@end group

@@c Coloca o sumário no início.
@@contents
@end example

@subheading `Top' Node and Master Menu

O nodo `Top' começa a saída online; ela não aparece no manual impresso.  
Nós repetimos a descrição curta do início do texto @samp{@@copying}, 
porém não há a necessidade de se repetir a informação de direitos 
autorais, de forma que nós não utilizamos @samp{@@insertcopying} aqui.

O próprio comando @samp{@@top} ajuda @command{makeinfo} a determinar o 
relacionamento entre os nodos.  O nodo `Top' contém, pelo menos, um 
@dfn{menu} de alto nível listando os capítulos, e possivelmente um 
@dfn{Menu Mestre} listando todos os nodos no documento inteiro.


@example
@@ifnottex
@@node Top
@@top Amostra Curta

Este é um arquivo curto de amostra Texinfo.
@@end ifnottex

@group
@@menu
* Primeiro Capítulo:: O primeiro capítulo é o único capítulo nesta 
amostra.
* Índice::            Índice completo.
@@end menu
@end group
@end example


@subheading The Body of the Document

@noindent
O segmento corpo contém todo o texto do documento, porém não os índices 
ou sumário.  Este exemplo ilustra um nodo e um capítulo contendo uma 
lista enumerada.

@example
@group
@@node Primeiro Capítulo
@@chapter Primeiro Capítulo

@@cindex capítulo, primeiro
@end group

@group
Este é o primeiro capítulo.
@@cindex entrada de índice, um outro
@end group

@group
Aqui está uma lista numerada.

@@enumerate
@@item
Este é o primeiro item.

@@item
Este é o segundo item.
@@end enumerate
@end group
@end example


@subheading The End of the Document

Isto pode conter comandos para a impressão de índices, o fecha com o 
comando @code{@@bye}, o qual marca o fim do documento.

@example
@group
@@node Índice
@@unnumbered Índice
@end group

@group
@@printindex cp

@@bye
@end group
@end example


@subheading Some Results

Aqui está com o que se parece o conteúdo do primeiro capítulo da 
amostra:

@sp 1
@need 700
@quotation
Este é o primeiro capítulo.

Aqui está uma lista numerada.

@enumerate
@item
Este é o primeiro item.

@item
Este é o segundo item.
@end enumerate
@end quotation


@node Iniciando e Finalizando um Arquivo
@anchor{Beginning a File} @c old name
@chapter Começando e Terminando um Arquivo Texinfo @c Capítulo 3
@cindex Beginning a Texinfo file
@cindex Texinfo file beginning
@cindex File beginning

Este capítulo se estende sobre o arquivo fonte mínimo completo de 
Texinfo previamente dado (veja-se @ref{Amostra Curta}).

Certos pedaços de informação devem necessariamente ser providos no 
início de um arquivo Texinfo, tais como o título do documento e o nodo 
Top.   Um sumário geralmente também é produzido aqui.

@cindex Frontmatter, text in
Texto simples fora de qualquer comando antes do nodo Top deveria ser 
evitado.  Tal texto é tratado diferentemente nos diferentes formatos de 
saída: no momento da escrita, é visível em @TeX{} e HTML, por padrão não 
mostrado em leitores Info, e assim por diante.

@menu
* Inicialização de Amostra::     Um início de amostra para um arquivo Texinfo.
* Cabeçalho do Arquivo do Texinfo::         As primeiras linhas.
* Permissões do Documento::    Assegurando-se de que o seu manual é livre.
* Página de Título e Página de Direitos Autorais:: Criando as páginas de título e de direitos autorais.
* Conteúdo::                    Como criar uma tabela do conteúdo.
* O Nodo Top::                Criando o nodo `Top' e menu mestre.
* Comandos Globais de Documento::    Afetando a formatação ao longo do documento.
* Finalizando um Arquivo::               O que está ao final de um arquivo Texinfo?
@end menu


@node Inicialização de Amostra
@section Exemplo de Início do Arquivo do Texinfo

@cindex Example beginning of Texinfo file

A amostra seguinte mostra o que é necessário.  Os elementos dados aqui 
são explanados em maiores detalhes nas seções seguintes.  Outros 
comandos frequentemente são incluídos no início de arquivos Texinfo, 
porém aqueles aqui são os mais críticos.

Veja-se @ref{GNU Sample Texts}, para os textos completos a serem utilizados em 
manuais GNU.

@example
\input texinfo
@@settitle @var{nome-do-manual} @var{versão}

@@copying
Este manual é para @var{programa}, versão @var{versão}.

Direitos autorais @@copyright@{@} @var{anos} @var{titular-direitos-autorais}.

@group
@@quotation
É concedida permissão para @dots{}
@@end quotation
@@end copying
@end group

@group
@@titlepage
@@title @var{nome-do-manual-quando-impresso}
@@subtitle @var{subtítulo-se-algum}
@@subtitle @var{segundo-subtítulo}
@@author @var{autor}
@end group

@group
@@c  Os dois comandos seguintes
@@c  iniciam a página de direitos autorais.
@@page
@@vskip 0pt plus 1filll
@@insertcopying
@end group

Publicado por @dots{}
@@end titlepage

@@c Então o sumário é impresso no início.
@@contents

@@ifnottex
@@node Top
@@top @var{título}

Este manual é para @var{programa}, versão @var{versão}.
@@end ifnottex

@group
@@menu
* First Chapter::    Iniciando @dots{}
* Second Chapter::       @dots{} @dots{}
* Copying::          Seus direitos e liberdades.
@@end menu
@end group

@group
@@node Primeiro Capítulo
@@chapter Primeiro Capítulo

@@cindex primeiro capítulo
@@cindex capítulo, primeiro
@dots{}
@end group
@end example


@node Cabeçalho do Arquivo do Texinfo
@section Cabeçalho do Arquivo do Texinfo
@cindex Header for Texinfo files
@cindex Texinfo file header

Os arquivos Texinfo iniciam com pelo menos duas linhas.  Essas são a 
linha @code{\input texinfo} e a linha @code{@@settitle}.

Também, se você desejar formatar somente parte do arquivo Texinfo em 
Emacs, você deve necessariamente escrever a linha @code{@@settitle} 
entre as linhas `start-of-header' e `end-of-header'.  Essas linhas 
`start-' e `end-of-header' são opcionais, porém elas não produzem danos, 
de forma que você pode muito bem sempre incluí-las.

Qualquer comando que afete a formatação do documento como um todo faz 
sentido incluir no cabeçalho.  @code{@@synindex} 
(veja-se @ref{@code{@@synindex}}), por exemplo, é outro comando frequentemente 
incluído no cabeçalho.

Assim, o início de um arquivo Texinfo se parece aproximadamente com 
isto:

@example
@group
\input texinfo
@@settitle Manual de Amostra 1.0
@end group
@end example

(Veja-se @ref{GNU Sample Texts} para textos de amostra completos.)

@menu
* Primeira Linha::                  A primeira linha de um arquivo Texinfo.
* Início de Cabeçalho::             Formatar uma região exige isso.
* @code{@@setfilename}::        Informe a Info o nome do arquivo Info.
* @code{@@settitle}::           Crie um título para o trabalho impresso.
* Fim de Cabeçalho::               Formatar uma região exige isso.
@end menu


@node Primeira Linha
@subsection A Primeira Linha de um Arquivo do Texinfo
@cindex Primeira linha de um arquivo do Texinfo
@cindex Linha de início de um arquivo do Texinfo
@cindex Cabeçalho de um arquivo do Texinfo

Cada arquivo Texinfo que é para ser a entrada de alto nível para @TeX{} 
deve necessariamente iniciar com uma linha que se parece com isto:

@example
\input texinfo
@end example

Quando o arquivo é processado por @TeX{}, o comando @samp{\input 
texinfo} manda @TeX{} carregar as macros necessárias para o 
processamento de um arquivo Texinfo.
Essas estão em um arquivo chamado @file{texinfo.tex}, o qual deveria ter 
sido instalado em seu sistema juntamente com o software @TeX{} ou 
Texinfo.  @TeX{} utiliza uma barra invertida, @samp{\}, para marcar o 
início de um comando, exatamente como Texinfo utiliza @samp{@@}.  O 
arquivo @file{texinfo.tex} provoca a permuta de @samp{\} para @samp{@@}; 
antes que a permuta ocorra, @TeX{} exige @samp{\}, o que é o motivo pelo qual 
ela aparece no início do arquivo.

Você pode opcionalmente seguir essa linha com um comentário para 
informar a GNU Emacs para utilizar o modo Texinfo quando o arquivo for 
editado:

@example
\input texinfo   @@c -*-texinfo-*-
@end example

@noindent Isso pode ser útil quando Emacs não detectar automaticamente o 
tipo do arquivo a partir da extensão do arquivo.

@node Início de Cabeçalho
@subsection Início de Cabeçalho
@cindex Linha de Início de Cabeçalho

Uma linha `start-of-header' é um comentário Texinfo que se parece com 
isto:

@example
@@c %**start of header
@end example

Escreva a linha `start-of-header' na segunda linha de um arquivo 
Texinfo.  Prossiga a linha `start-of-header' com uma linha 
`@code{@@settitle}' e, opcionalmente, com outros comandos que 
globalmente afetam a formatação do documento, tais como 
@code{@@synindex} ou @code{@@footnotestyle}; e então por uma linha 
`end-of-header' (@pxref{Fim de Cabeçalho}).

As linhas `start-' e `end-of-header` te permitem formatar somente parte 
de um arquivo Texinfo para Info ou impressão. 
@xref{Comandos @code{texinfo-format}}.

A estranha sequência de caracteres, @samp{%**}, é para assegurar que 
nenhum outro comentário seja acidentalmente tomado por uma linha 
`start-of-header'.  Você pode modificá-la se você desejar, configurando 
as variáveis Emacs @code{tex-start-of-header} e/ou 
@code{tex-end-of-header}. @xref{Modo Texinfo Printing}.


@node @code{@@setfilename}
@subsection @code{@@setfilename}: Configura o Nome do Arquivo de Saída

@anchor{setfilename}@c nome antigo
@findex setfilename
@cindex Texinfo requires @code{@@setfilename}
@cindex Output file name, required

A linha @code{@@setfilename} especifica o nome do arquivo de saída a ser 
gerado.
Quando presente, ele deveria ser o primeiro comando Texinfo (isto é, 
após @samp{\input texinfo}).
Escreva o comando @code{@@setfilename} no início de uma linha e siga-o 
na mesma linha pelo nome do arquivo Info.

@example
@@setfilename @var{nome-arquivo-info}
@end example

O nome deve necessariamente ser diferente do nome do arquivo Texinfo.
Existem duas convenções para a escolha do nome: você ou pode remover a 
extensão (tal como @samp{.texi}) inteiramente do nome do arquivo de 
entrada; ou (recomendado) substitui-lo com a extensão @samp{.info}.

@cindex Ignored before @code{@@setfilename}
@cindex @samp{\input} source line ignored
Quando uma linha @code{@@setfilename} está presente, os processadores 
Texinfo ignoram tudo escrito antes da linha @code{@@setfilename}.  Isso 
é o motivo da primeiríssima linha do arquivo (a linha @code{\input}) não 
aparecer na saída.

Se não existir uma linha @code{@@setfilename}, @code{makeinfo} utiliza o 
arquivo de entrada para determinar o nome de saída: primeiro, qualquer 
das extensões @code{.texi}, @code{.tex}, @code{.txi} ou @code{.texinfo} 
é removida do nome do arquivo de entrada; então, a extensão específica 
do formato de saída é adicionada---@code{.html} quando da geração de 
HTML; @code{.info} quando da geração de Info, etc.  A linha 
@code{\input} ainda é ignorada nesse processamento, bem como as linhas 
em branco iniciais.

Quando da produção de outro formato de saída, @code{makeinfo} 
substituirá qualquer extensão final com a extensão de saída específica 
de formato (@samp{html} quando da geração de HTML, por exemplo), ou 
adicionar um ponto seguido pela extensão (@samp{.html} para HTML), se o 
nome dado não tiver extensão.

@code{@@setfilename} costumava ser exigido pelos processadores Texinfo, 
e alguns outros programas ainda podem esperar que ele esteja presente; 
por exemplo, Automake (veja-se @ref{Texinfo,,,automake, GNU Automake}).

@cindex Length of file names
@cindex File name collision
@cindex Info file name, choosing
Apesar que uma extensão @samp{.info} explícita seja preferível, alguns 
sistemas operacionais não conseguem lidar com nomes longos de arquivo.  
Você pode acabar com problemas mesmo quando o nome de arquivo que você 
especificar for ele próprio curto o suficiente.
Isso ocorre porque os formatadores Info dividem um arquivo longo Info em 
sub-arquivos curtos indiretos, e os nomeia acrescentando ao final 
@samp{-1}, @samp{-2}, @dots{}, @samp{-10}, @samp{-11}, e assim por 
diante, ao nome de arquivo original. (Veja-se @ref{Tag and Split Files}.)  O 
nome de sub-arquivo @file{texinfo.info-10}, por exemplo, é longo demais 
para sistemas antigos com um limite de 14 caracteres em nomes de 
arquivo; assim, o nome de arquivo Info para este documento é 
@file{texinfo} em vez de @file{texinfo.info}.  Quando @code{makeinfo} 
está em execução em sistemas operacionais tais como MS-DOS que impõe 
limites severos sobre nomes de arquivo, ele pode remover alguns 
caracteres do nome original do arquivo para deixar espaço suficiente 
para o sufixo do sub-arquivo, assim produzindo arquivos chamados 
@file{texin-10}, @file{gcc.i12}, etc.

Veja-se também a opção @option{--output} em 
@ref{Invoking @command{texi2any}}.


@node @code{@@settitle}
@subsection @code{@@settitle}: Configura o Título do Documento

@anchor{settitle}@c nome antigo
@findex settitle
@cindex Document title, specifying

Um arquivo Texinfo deveria conter uma linha que se pareça com isto:

@example
@@settitle @var{título}
@end example

Escreva o comando @code{@@settitle} no início de uma linha e siga-o na 
mesma pelo título.  Não escreva nada mais na linha.  O comando 
@code{@@settitle} deveria preceder tudo o que gera saída atual.  O 
melhor lugar para ele é logo após o comando @code{@@setfilename} 
(descrito na seção anterior).

Esse comando informa a @TeX{} o título a utilizar em um cabeçalho ou 
rodapé para saída de lado duplo, no caso de tais cabeçalhos serem 
impressos.  Para mais sobre cabeçalhos para @TeX{}, veja-se 
@ref{Geração de Cabeçalho}.

@cindex @code{<title>} HTML tag
No arquivo HTML produzido por @command{makeinfo}, @var{título} serve 
como o @samp{<título>} do documento.  Ele também se torna a descrição 
padrão do documento na parte @samp{<head>} 
(@pxref{@code{@@documentdescription}}).

Quando a página de título for utilizada na saída, o título no comando 
@code{@@settitle} não afeta o título conforme ele aparece na página de 
título.  Assim, os dois não precisam coincidir exatamente.  Uma prática 
que se recomenda é incluir a versão ou número de edição do manual no 
título @code{@@settitle}; na página de título, o número de versão 
geralmente aparece como um @code{@@subtitle}, de forma que ele poderia 
ser omitido do @code{@@title}. Veja-se @ref{@code{@@titlepage}}.


@node Fim de Cabeçalho
@subsection Fim de Cabeçalho
@cindex End of header line

Siga as linhas de cabeçalho com uma linha @w{end-of-header}, que é um 
comentário Texinfo que se parece com isto:

@example
@@c %**end of header
@end example

Veja-se @ref{Início de Cabeçalho}.


@node Permissões do Documento
@section Permissões do Documento
@cindex Permissões do Documento
@cindex Copying Permissions

O aviso de direitos autorais e permissões de cópia para um documento 
precisam aparecer em vários lugares nos vários formatos de saída de 
Texinfo.  Portanto, Texinfo provê um comando (@code{@@copying}) para 
declarar esse texto uma vez, e outro comando (@code{@@insertcopying}) 
para inserir o texto em pontos apropriados.

@anchor{Software Copying Permissions}@c nome antigo de nodo
Esta seção é sobre a licença do documento Texinfo.  Se o documento for 
um manual de software, o software está tipicamente sob uma licença 
diferente---para GNU e muitos outros pacotes de software livre, o 
software é usualmente publicado sob a GNU GPL, e os manuais são 
publicados sob a GNU FDL@.  É de muita ajuda declarar a licença do 
software do manual, porém fornecer o texto completo da licença de 
software não é necessariamente exigido.

@menu
* @code{@@copying}::                    Declare as permissões de cópia do documento.
* @code{@@insertcopying}::              Onde inserir as permissões.
@end menu


@node @code{@@copying}
@subsection @code{@@copying}: Declare as Permissões de Cópia

@anchor{copying}@c nome antigo
@findex copying

O comando @code{@@copying} deveria ser dado cedissimo no documento; a 
localização recomendada é logo após o material de cabeçalho 
(@pxref{Cabeçalho do Arquivo do Texinfo}).  Convencionalmente consiste de uma 
sentença ou duas sobre o que é o programa, identificação da própria 
documentação, a linha de direitos autorais legal, e as permissões de 
cópia.  Aqui está um exemplo esqueletal:

@example
@@copying
Este documento é para @var{programa} (versão @var{versão}, atualizada 
@var{date}), o qual @dots{}

Direitos autorais @@copyright@{@} @var{anos} @var{titular-direitos-autorais}.

@@quotation
É concedida permissão para @dots{}
@@end quotation
@@end copying
@end example

O @code{@@quotation} não tem significado legal; ele está lá para 
melhorar a legibilidade em alguns contextos.

O texto de @code{@@copying} é produzido como um comentário no início dos 
arquivos de saída Info, HTML, XML, e Docbook.  O texto @emph{não} é 
produzido implicitamente em texto plano ou @TeX{}; depende de você 
utilizar @code{@@insertcopying} para emitir a informação de direitos 
autorais.  Veja a próxima seção para detalhes.

@findex copyright
O comando @code{@@copyright@{@}} gera um @samp{c} dentro de um círculo 
quando o formato de saída suportar essa figura (imprimir e HTML sempre 
suportam, por exemplo).  Quando a figura não for suportada na saída, o 
comando gera a sequência de três caracteres @samp{(C)}.

O próprio aviso de direitos autorais tem a seguinte forma legalmente 
prescrita:

@example
Direitos autorais @copyright{} @var{anos} @var{titular-direitos-autorais}.
@end example

@cindex Copyright word, always in English
A palavra `Copyright' deve necessariamente estar escrita em Inglês, 
mesmo se o documento estiver de outra forma escrito em outra linguagem.  
Isso é devido ao direito internacional.

@cindex Years, in copyright line
A lista dos anos deveria incluir todos os anos nos quais uma versão foi 
completada (mesmo se ela foi publicada em um ano subsequente).  É mais 
simples que cada ano seja escrito individualmente e na íntegra, 
separados por vírgulas.

@cindex Copyright holder for FSF works
@cindex Holder of copyright for FSF works
@cindex Owner of copyright for FSF works
O titular (ou titulares) dos direitos autorais é quem quer que detenha 
os direitos autorais legais sobre o trabalho.  No caso de trabalhos 
atribuídos à FSF, o titular é `Free Software Foundation, Inc.'.

A `linha' de direitos autorais atualmente pode ser dividida em linhas 
múltiplas, tanto no documento fonte quanto na saída.  Isso acontece 
frequentemente para documentos com um histórico longo, tendo muitos anos 
diferentes de publicação.  Se você utilizar várias linhas, não endente 
qualquer delas (ou qualquer outra coisa no bloco @code{@@copying}) no 
arquivo fonte.

Veja-se @ref{Copyright Notices,,, maintain, GNU Maintainer Information}, para 
informação adicional. Veja-se @ref{GNU Sample Texts}, para o texto completo a 
ser utilizado em manuais GNU. Veja-se @ref{Licença GNU de Documentação Livre}, 
para a própria licença sob a qual GNU e outros manuais livres são 
distribuídos.


@node @code{@@insertcopying}
@subsection @code{@@insertcopying}: Incluir Texto de Permissões

@anchor{insertcopying}@c old name
@findex insertcopying
@cindex Copying text, including
@cindex Permissions text, including
@cindex Including permissions text

O comando @code{@@insertcopying} simplesmente é escrito em uma linha 
própria, como esta:

@example
@@insertcopying
@end example

Isso insere o texto previamente definido por @code{@@copying}.  Para 
atender às exigências legais, o texto deve necessariamente ser utilizado 
na página de direitos autorais no manual impresso (veja-se @ref{Direitos Autorais}).

O próprio comando @code{@@copying} faz com que o texto das permissões 
apareça em um arquivo Info @emph{antes} do primeiro nodo.  O texto 
também é copiado no início de cada arquivo dividido de saída Info, como 
é legalmente necessário.  Essa localização implica que um humano lendo o 
manual utilizando Info @emph{não} vê esse texto (exceto quando da 
utilização do comando avançado @kbd{g *} de Info), porém isso não 
importa para propósitos legais, pois o texto está presente.

Similarmente, o texto @code{@@copying} é automaticamente incluído no 
início de cada arquivo de saída HTML, como um comentário HTML.  De novo, 
esse texto não é visível (a menos que o leitor visualize o fonte HTML).

O texto de permissões definido por @code{@@copying} também aparece 
automaticamente no início dos arquivos de saída XML e Docbook.


@node Página de Título e Página de Direitos Autorais
@section Páginas de Título e de Direitos Autorais

Em saída impressa, o nome e autor do manual são usualmente impressos em 
uma página de título.   A informação de direitos autorais é geralmente 
impressa no verso de página de título.

As páginas de título e de direitos autorais aparecem em manuais 
impressos, porém não na maior parte dos outros formatos de saída.  Por 
causa disso, é possível utilizar vários comandos de tipografia 
ligeiramente obscuros que não são para ser utilizados no texto 
principal.  Adicionalmente, esta parte do início de um arquio Texinfo 
contém o texto das permissões de cópia que aparece no manual impresso.

@menu
* @code{@@titlepage}::                  Crie um título para o documento impresso.
* @code{@@titlefont @@center @@sp}::    Os comandos @code{@@titlefont}, @code{@@center} e @code{@@sp}.
* @code{@@title @@subtitle @@author}::  Os comandos @code{@@title}, @code{@@subtitle}, e @code{@@author}.
* Direitos Autorais::                   Como escrever o aviso de direitos autorais e incluir permissões de cópia.
* Geração de Cabeçalho::          Ligue o cabeçalho de página após as páginas de título e de direitos autorais.
@end menu


@node @code{@@titlepage}
@subsection @code{@@titlepage}

@anchor{titlepage}@c nome antigo
@cindex Title page
@findex titlepage

Inicie o material para a página de título e seguinte à página de 
direitos autorais com @code{@@titlepage} em uma linha própria e finalize 
com @code{@@end titlepage} em uma linha própria.

O comando @code{@@end titlepage} inicia uma página nova e liga a 
numeração de página (@pxref{Geração de Cabeçalho}).  Todo o material que 
você deseja que apareça em páginas não numeradas deveria ser colocado 
entre os comandos @code{@@titlepage} e @code{@@end titlepage}.
Você pode forçar que o sumário apareça ali com o comando 
@code{@@setcontentsaftertitlepage} (@pxref{Conteúdo}).

@findex page@r{, within @code{@@titlepage}}
Ao utilizar o comando @code{@@page} você pode forçar uma quebra de 
página dentro da região delineada pelos comandos @code{@@titlepage} e 
@code{@@end titlepage} e assim criar mais que uma página não numerada.
É assim que a página de direitos autorais é produzida.  (O comando 
@code{@@titlepage} talvez pudesse ter sido melhor nomeado de 
@code{@@titleandadditionalpages}, porém isso poderia ter sido até certo 
ponto longo!)

Quando você escreve um manual acerca de um programa de computador, você 
deveria escrever, na página de título, a versão do programa para a qual 
o manual se aplica.
Se o manual muda mais frequentemente que o programa ou é independente 
dele, você também deveria incluir um número de 
edição@footnote{Entendeu-se que é útil se referir a versões de manuais 
independentes como `edições' e versões de programas como `versões'; do 
contrário, nós achamos que estamos sujeitos a confundir cada um em 
conversas, referenciando a ambos, a documentação e o software, com as 
mesmas palavras.} para o manual.  Isso ajuda os leitores a se manterem 
informados sobre qual manual é para qual versão do programa.  (O nodo 
`Top' também deveria conter essa informação; veja-se 
@ref{O Nodo Top}).

Texinfo provê dois métodos principais para criar uma página de título.  
Um método utiliza os comandos @code{@@titlefont}, @code{@@sp}, e 
@code{@@center} para gerar uma página de título na qual as palavras na 
página são centralizadas.

O segundo método utiliza os comandos @code{@@title}, @code{@@subtitle}, 
e @code{@@author} para criar uma página de título com traços negros sob 
as linhas de título e autor e o texto de subtítulo colocado rente ao 
lado direito da página.   Com esse método, você não especifica nada da 
formatação atual da página de título.  Você especifica o texto que você 
deseja, e Texinfo faz a formatação.

Você pode utilizar qualquer método, ou você pode combiná-los; veja os 
exemplos nas seções abaixo.

@findex shorttitlepage
@cindex Bastard title page
@cindex Title page, bastard
Para documentos suficientemente simples, e para a página de anterrosto 
em formatador tradicional de livro, Texinfo também provê um comando, 
@code{@@shorttitlepage}, o qual toma o restante da linha como o título.
O argumento é tipografado em uma página própria e seguido por uma página 
em branco.


@node @code{@@titlefont @@center @@sp}
@subsection @code{@@titlefont}, @code{@@center} e @code{@@sp}

@anchor{titlefont center sp}@c nome antigo
@findex titlefont
@findex center
@findex sp @r{(titlepage line spacing)}

Você pode utilizar os comandos @code{@@titlefont}, @code{@@sp}, e 
@code{@@center} para criar uma página de título para um documento 
impresso.  (Esse é o primeiro de dois métodos para a criação de uma 
página de título em Texinfo).

Use o comando @code{@@titlefont} para selecionar uma fonte larga 
adequada para o próprio título.  Você pode utilizar @code{@@titlefont} 
mais que uma vez se você tiver um título especialmente longo.

Para saída HTML, cada comando @code{@@titlefont} produz um cabeçalho 
@code{<h1>}, porém o @code{<title>} do documento HTML não é afetado.  
Para isso, você deve necessariamente colocar um comando 
@code{@@settitle} antes do comando @code{@@titlefont} 
(veja-se @ref{@code{@@settitle}}).

@need 700
Por exemplo:

@example
@@titlefont@{Texinfo@}
@end example

Use o comando @code{@@center} no início de uma linha para 
centralizar o restante do texto naquela linha.  Assim,

@example
@@center @@titlefont@{Texinfo@}
@end example

@noindent
centraliza o título, o qual neste exemplo é ``Texinfo'' impresso na 
fonte de título.

Use o comando @code{@@sp} para inserir espaço vertical.  Por 
exemplo:

@example
@@sp 2
@end example

@noindent
Isso insere duas linhas em branco na página impressa.
(Veja-se @ref{@code{@@sp}}, para mais informação acerca do comando 
@code{@@sp}).

Um modelo para esse método se parece com isto:

@example
@group
@@titlepage
@@sp 10
@@center @@titlefont@{@var{nome-do-manual-quando-impresso}@}
@@sp 2
@@center @var{subtítulo-se-algum}
@@sp 2
@@center @var{autor}
@dots{}
@@end titlepage
@end group
@end example

O espaçamento do exemplo se encaixa em um manual de 8.5 por 11 
polegadas.

Você de fato pode utilizar esses comandos em qualquer lugar, não somente 
em uma página de título, porém dado que eles não são comandos lógicos de 
marcação, não se recomenda-os.


@node @code{@@title @@subtitle @@author}
@subsection @code{@@title}, @code{@@subtitle}, e @code{@@author}

@anchor{title subtitle author}@c nome antigo
@findex title
@findex subtitle
@findex author

Você pode utilizar os comandos @code{@@title}, @code{@@subtitle}, e 
@code{@@author} para criar uma página de título na qual o espaçamento 
vertical e horizontal seja feito para você automaticamente.  Isso 
contrasta com o método descrito na seção anterior, no qual o comando 
@code{@@sp} é necessário para ajustar o espaçamento vertical.

Escreva os comandos @code{@@title}, @code{@@subtitle}, ou 
@code{@@author} no início de uma linha seguido pelo título, subtítulo, 
ou autor.  O comando @code{@@author} pode ser utilizado para uma citação 
em um bloco @code{@@quotation} (veja-se @ref{@code{@@quotation}});
exceto para isso, é um erro utilizar quaisquer desses comandos fora de 
@code{@@titlepage}.

O comando @code{@@title} produz uma linha na qual o título é configurado 
rente ao lado esquerdo da página em um fonte mais larga que a normal.
O título é sublinhado com uma linha preta.  O título deve 
necessariamente ser dado em uma linha única no arquivo fonte; ele será 
quebrado em múltiplas linhas de saída se necessário.

Para títulos longos, o comando @code{@@*} pode ser utilizado para 
especificar as quebras de linha em títulos longos se as quebras 
automáticas não servirem.  Tais quebras explícitas de linha geralmente 
são refletidas em todos os formatos de saída; se você desejar somente 
especificá-las para a saída impressa, use um condicional 
(veja-se @ref{Condicionais}).  Por exemplo:

@example
@@title Este Título Longo@@inlinefmt@{tex,@@*@} É Quebrado em @@TeX@{@}
@end example

O comando @code{@@subtitle} configura subtítulos em uma fonte de tamanho 
normal rente ao lado direito da página.

O comando @code{@@author} configura os nomes do autor ou autores em uma 
fonte de tamanho médio rente ao lado esquerdo da página em uma linha 
próxima ao pé da página de título.  Os nomes são seguidos por uma linha 
preta que é mais fina que a linha que sublinha o título.

Existem duas maneiras de se utilizar o comando @code{@@author}: você 
pode escrever o nome ou nomes na parte restante da linha que inicia com 
um comando @code{@@author}:

@example
@@author por Jane Smith e John Doe
@end example

@noindent
ou você pode escrever os nomes um acima do outro, utilizando múltiplos 
comandos @code{@@author}:

@example
@group
@@author Jane Smith
@@author John Doe
@end group
@end example

@need 950
Um modelo para esse método se parece com isto:

@example
@group
@@titlepage
@@title @var{nome-do-manual-quando-impresso}
@@subtitle @var{subtítulo-se-algum}
@@subtitle @var{segundo-subtítulo}
@@author @var{autor}
@@page
@dots{}
@@end titlepage
@end group
@end example


@node Direitos Autorais
@subsection Página de Direitos Autorais
@cindex Página de direitos autorais
@cindex Permissões impressas
@cindex Permissões, impressas

Por acordo internacional, o aviso de direitos autorais para um livro 
deve necessariamente estar ou na página de título ou no verso da página 
de título. Quando o aviso de direitos autorais estiver no verso da 
página de título, essa página é costumeiramente não numerada.  Portanto, 
em Texinfo, a informação na página de direitos autorais deveria estar 
entre os comandos @code{@@titlepage} e @code{@@end titlepage}.

@findex vskip @r{@TeX{} vertical skip}
@cindex filll @r{@TeX{} dimension}
Use o comando @code{@@page} para provocar uma quebra de página.  
Para empurrar o aviso de direitos autorais e o outro texto na página de 
direitos autorais em direção ao pé da página, use o seguinte 
encantamento após @code{@@page}:

@example
@@vskip 0pt plus 1filll
@end example

@noindent
O comando @code{@@vskip} insere espaço em branco na saída @TeX{}; ele é 
ignorado em todos os outros formatos de saída.  O @samp{0pt plus 1filll} 
significa colocar em zero pontos de espaço em branco obrigatório, e 
tantos espaços em branco opcionais quantos sejam necessários para 
empurrar o texto seguinte para o pé da página.  Note o uso de três 
@samp{l}s na palavra @samp{filll}; isso está correto.

Para inserir o próprio texto de direitos autorais, escreva 
@code{@@insertcopying} depois (veja-se @ref{Permissões do Documento}):

@example
@@insertcopying
@end example

Siga o texto de direitos autorais pelo editor, números ISBN, créditos de 
arte de capa, e outras tais informações.

Aqui está um exemplo de como colocar tudo isso junto:

@example
@@titlepage
@dots{}
@@page
@@vskip 0pt plus 1filll
@@insertcopying

Publicado por @dots{}

Arte de capa por @dots{}
@@end titlepage
@end example

Nós temos um caso especial a considerar: para saída de texto plano, você 
deve necessariamente inserir a informação de direitos autorais 
explicitamente se você deseja que ela apareça.  Por exemplo, você 
poderia ter o seguinte após a página de direitos autorais:

@example
@@ifplaintext
@@insertcopying
@@end ifplaintext
@end example

Você poderia incluir outras informações de título para a saída de texto 
plano no mesmo lugar.



@node Geração de Cabeçalho
@subsection Geração de Cabeçalho

@anchor{end titlepage}@c old name
@cindex Cabeçalhos, page, begin to appear
@cindex Titlepage end starts headings
@cindex End titlepage starts headings
@cindex Generating page headings

Como todos os comandos @code{@@end} (veja-se @ref{Citações e Exemplos}), o 
comando @code{@@end titlepage} deve estar escrito no início de uma linha 
própria, com somente um espaço entre o @code{@@end} e o @code{titlepage}.
Ele somente marca o fim das páginas de título e de direitos autorais, 
porém também manda que @TeX{} inicie a geração de cabeçalhos de página e 
de números de página.

Texinfo tem dois formatos padrão de cabeçalho  de página, um para 
documentos impressos em um lado de cada folha de papel (impressão de 
lado único), e o outro para documentos impressos em ambos os lados de 
cada folha (impressão de lado duplo).

Em generalidade plena, você pode controlar os cabeçalhos em diferentes 
maneiras:

@itemize @bullet
@item
A maneira convencional é escrever um comando @code{@@setchapternewpage} 
antes dos comandos de página de título, se exigido, e então ter o 
comando @code{@@end titlepage} iniciando a geração de cabeçalhos de 
página na maneira desejada.

A maioria dos documentos é formatada com os cabeçalhos padrão lado único 
ou lado duplo, (as vezes) utilizando @code{@@setchapternewpageodd} para 
impressão em lado duplo e (quase sempre) sem comando 
@code{@@setchapternewpage} para impressão de lado único 
(veja-se @ref{@code{@@setchapternewpage}}).

@item
Alternativamente, você pode utilizar o comando @code{@@headings} para 
prevenir que os cabeçalhos de página sejam gerados ou para iniciá-los 
para, ou impressão de lado único, ou duplo.  Escreva um comando 
@code{@@headings} imediatamente após o comando @code{@@end titlepage}.
Para desligar os cabeçalhos, escreva @code{@@headings off}. Veja-se 
@ref{@code{@@headings}}.

@item
Ou, você pode especificar o seu próprio formato de cabeçalho e rodapé de 
página.
@xref{Cabeçalhos}.
@end itemize


@node Conteúdo
@section Gerando Uma Tabela do Conteúdo
@cindex Tabela do conteúdo
@cindex Conteúdo, tabela do
@cindex Tabela curta do conteúdo
@findex conteúdo
@findex summarycontents
@findex shortcontents

@code{@@chapter}, @code{@@section}, e outros comandos de estruturamento
(veja-se @ref{Estruturamento de Capítulo}) fornecem a informação para produzir 
um Sumário, porém eles não fazem com que uma tabela atual apareça no 
manual.   Para fazer isso, você deve necessariamente utilizar os 
comandos @code{@@contents} e/ou @code{@@summarycontents}.

@table @code
@item @@contents
Gera um Sumário em um manual impresso, incluindo todos os 
capítulos, seções, subseções, etc., bem como apêndices e capítulos não 
numerados.   Os cabeçalhos gerados por @code{@@majorheading},
@code{@@chapheading}, e outros comandos @code{@@@dots{}heading} não 
aparecem no Sumário
(veja-se @ref{Tipos de Comandos Estruturantes}).

@item @@shortcontents
@itemx @@summarycontents
(@code{@@summarycontents} é um sinônimo para @code{@@shortcontents}).

Gera uma tabela curta ou sumário do conteúdo que lista somente os 
capítulos, apêndices e capítulos não numerados.   Seções, subseções e 
sub-subseções são omitidas.   Somente um manual longo precisa de uma 
tabela curta de conteúdo em adição à tabela completa de conteúdo.
@end table

Ambos os comandos de conteúdo deveriam ser escritos em uma linha para 
cada um deles, e colocados próximo do início do arquivo, após o
@code{@@endtitlepage} (veja-se @ref{@code{@@titlepage}}), antes de 
qualquer comando de seccionamento.   Os comandos de conteúdo 
automaticamente geram um cabeçalho estilo capítulo no topo da primeira 
página do Sumário, portanto não inclua qualquer comando de 
seccionamento tal qual @code{@@unnumbered} antes deles.

Dado que um arquivo info utiliza menus em vez de tabelas de conteúdo, os 
comandos de formatação de Info ignoram os comandos de conteúdo.   Porém, 
o conteúdo é incluído na saída de texto plano (gerada por
@code{makeinfo --plaintext}) e em outros formatos de saída, tais como 
HTML.

Quando @code{makeinfo} escreve uma tabela curta de conteúdo quando da 
produção de saída HTML, os links na tabela curta de conteúdo apontam 
para as entradas correspondentes na tabela completa de conteúdo, em vez 
de apontar para o texto do documento.   Os links na tabela completa de 
conteúdo apontam para o texto principal do documento.

No passado, os comandos de conteúdo algumas vezes foram colocados ao 
final do arquivo, após quaisquer índices e pouco antes de @code{@@bye}, 
porém não mais se recomenda isso.

@findex setcontentsaftertitlepage
@findex setshortcontentsaftertitlepage
@cindex Sumário, after title page
@cindex Table of contents, after title page
Entretanto, dado que muitos documentos Texinfo existentes ainda tem o 
@code{@@contents} ao final do manual, se você for um usuário imprimindo 
um manual, você pode desejar forçar que o conteúdo seja impresso após a 
página de título.   Você pode fazer isso especificando 
@code{@@setcontentsaftertitlepage} e/ou 
@code{@@setshortcontentsaftertitlepage}.   O primeiro imprime somente o 
conteúdo principal após o @code{@@end titlepage}; o segundo imprime 
ambos o conteúdo curto e o conteúdo principal.   Em qualquer caso, 
quaisquer @code{@@contents} ou @code{@@shortcontents} subsequentes são 
ignorados.

Você precisa incluir os comandos 
@code{@@set@dots{}contentsaftertitlepage} logo no documento (logo após 
@code{@@setfilename}, por exemplo).   Recomenda-se utilizar 
@command{texi2dvi} (veja-se @ref{Format with @command{texi2dvi}}) para 
especificar isso sem nenhuma alteração do arquivo fonte.   Por exemplo:

@example
texi2dvi --texinfo=@@setcontentsaftertitlepage foo.texi
@end example

Uma invocação alternativa, utilizando @command{texi2any}:

@example
texi2any --dvi --Xopt --texinfo=@@setcontentsaftertitlepage foo.texi
@end example



@node O Nodo Top
@section O Nodo `Top' e Menu Mestre
@cindex Nodo Top
@cindex Nodo, `Top'

O nodo `Top' é o nodo no qual um leitor acessa um manual Info.
Como tal, ele deveria iniciar com uma descrição breve do manual 
(incluindo o número de versão), e terminar com um menu mestre para o 
manual inteiro.  Certamente você deveria incluir qualquer outra 
informação geral que você sinta que um leitor acharia de muita ajuda.

@findex top
É convencional e desejável escrever uma linha de comando de seccionamento 
@code{@@top} contendo o título do documento imediatamente após a linha 
@code{@@node Top} (veja-se @ref{Comando @code{@@top}}).

O conteúdo do nodo `Top' deveria aparecer somente na saída online; nada 
dele deveria aparecer em saída impressa, então envolva-o entre os 
comandos @code{@@ifnottex} e @code{@@end ifnottex}.  (@TeX{} não imprime 
nem uma linha @code{@@node} nem um menu; eles aparecem somente em Info; 
estritamente falando, você não está obrigado a envolver essas partes 
entre @code{@@ifnottex} e @code{@@end ifnottex}, porém é mais simples 
fazer isso. Veja-se @ref{Condicionais, , Conditionally Visible Text}).

@menu
* Exemplo do Nodo Top::
* Partes do Menu Mestre::
@end menu


@node Exemplo do Nodo Top
@subsection Exemplo do Nodo Top

@cindex Top node example

Aqui está um exemplo de um nodo Top.

@example
@group
@@ifnottex
@@node Top
@@top Título de Amostra

Este é o texto do nodo top.
@@end ifnottex
@end group

Informação geral adicional.

@group
@@menu
* Primeiro Capítulo::
* Segundo Capítulo::
@dots{}
* Index::
@end group
@@end menu
@end example


@node Partes do Menu Mestre
@subsection Partes de um Menu Mestre
@cindex Master menu
@cindex Menu, master
@cindex Partes de um Menu Mestre

Um @dfn{menu mestre} é o menu principal.  É costumeiro incluir um menu 
detalhado listando todos os nodos do documento nesse menu.

Como qualquer outro menu, um menu mestre é envolvido em @code{@@menu} e 
@code{@@end menu} e não aparece na saída impressa.

Geralmente, um menu mestre é dividido em partes.

@itemize @bullet
@item
A primeira parte contém os nodos principais no arquivo Texinfo: os nodos 
para os capítulos, seções em forma de capítulo, e os apêndices.

@item
A segunda parte contém nodos para os índices.

@item
@findex detailmenu
@cindex Detailed menu
A terceira e subsequentes partes contém uma listagem dos outros, nodos 
de baixo nível, frequentemente ordenados por capítulo.  Essa maneira, em 
vez de se ir ao longo de um menu intermediário, um investigador pode ir 
diretamente a um nodo particular quando da busca por informação 
específica.  Esses itens de menu não são exigidos; adicione-os se você 
pensar que eles são uma conveniência.
Se você utilizá-los, coloque @code{@@detailmenu} antes do primeiro, e 
@code{@@end detailmenu} após o último; do contrário, @code{makeinfo} 
ficará confuso.
@end itemize

Cada seção no menu pode ser introduzida por uma linha descritiva.  
Contanto que a linha não se inicie com um asterisco, ela não será 
tratada como uma entrada de menu. (Veja-se @ref{Escrevendo um Menu}, para mais 
informação).

Por exemplo, o menu mestre para este manual se parece com o seguinte 
(porém tem muito mais entradas):

@example
@group
@@menu
* Condições de Cópia::  Seus direitos.
* Visão Geral::         Texinfo em resumo.
@dots{}
@end group
@group
* Índices de Comandos e Variáveis::
* Índices Gerais::
@end group

@group
@@detailmenu
--- A Listagem Detalhada do Nodo ---

Visão geral de Texinfo

* Relatando Bugs:: @dots{}
@dots{}
@end group

@group
Iniciando um Arquivo Texinfo

* Início de Amostra:: @dots{}
@dots{}
@@end detailmenu
@@end menu
@end group
@end example


@node Comandos Globais de Documento
@section Comandos Globais de Documento
@cindex Comandos Globais de Documento

Ao lado dos comandos básicos mencionados nas seções anteriores, aqui 
estão comandos adicionais que afetam o documento como um todo.  Eles 
geralmente são todos dados antes do nodo Top, se forem dados afinal.

@menu
* @code{@@documentdescription}::        Sumário do documento para a saída HTML.
* @code{@@setchapternewpage}::          Iniciar capítulos em páginas do lado direito.
* @code{@@headings}::                   Uma opção para ligar e desligar cabeçalhos e impressão em lado único ou duplo.
* @code{@@paragraphindent}::            Especificar recuo de parágrafo.
* @code{@@firstparagraphindent}::       Suprimindo o primeiro recuo de parágrafo.
* @code{@@exampleindent}::              Especificar recuo de ambiente.
@end menu


@node @code{@@documentdescription}
@subsection @code{@@documentdescription}: Texto de Resumo
@anchor{documentdescription}@c nome antigo

@cindex Document description
@cindex Description of document
@cindex Summary of document
@cindex Abstract of document
@cindex @code{<meta>} HTML tag, and document description
@findex documentdescription

Quando da produção de saída HTML para um documento, @command{makeinfo} 
escreve um elemento @samp{<meta>} no @samp{<head>} para dar alguma ideia 
do conteúdo do documento.  Por padrão, essa @dfn{descrição} é o título 
do documento, tomado a partir do comando @code{@@settitle} 
(veja-se @ref{@code{@@settitle}}).  Para mudar isso, use o ambiente 
@code{@@documentdescription}, como em:

@example
@@documentdescription
texto descritivo.
@@end documentdescription
@end example

@noindent
Isso produzirá a saída seguinte no @samp{<head>} do HTML:

@example
<meta name=description content="texto descritivo.">
@end example

@code{@@documentdescription} deve necessariamente estar especificado 
antes do primeiro nodo do documento.


@node @code{@@setchapternewpage}
@subsection @code{@@setchapternewpage}: Páginas em Branco Antes dos Capítulos

@anchor{setchapternewpage}@c nome antigo
@findex setchapternewpage
@cindex Starting chapters
@cindex Pages, starting odd

Em um oficialmente limitado livro, o texto normalmente é impresso em 
ambos os lados do papel, capítulos iniciam em páginas do lado direito, e 
as páginas do lado direito tem números ímpares.  Porém em relatórios 
curtos, o texto frequentemente é impresso somente em um lado do papel.  
Também em relatórios curtos, capítulos as vezes não iniciam em páginas 
novas, mas são impressos na mesma página que o final do capítulo 
precedente, após uma quantidade pequena de espaço em branco vertical.

Você pode utilizar o comando @code{@@setchapternewpage} com vários 
argumentos para especificar como @TeX{} deveria iniciar capítulos e 
quando deveria formatar cabeçalhos para impressão em um ou ambos os 
lados do papel (impressão em lado único ou em lado duplo).

Escreva o comando @code{@@setchapternewpage} no início de uma linha 
seguido pelo seu argumento.

Por exemplo, você escreveria o seguinte para fazer com que cada capítulo 
iniciasse em uma nova página com numeração ímpar:

@example
@@setchapternewpage odd
@end example

Você pode especificar uma de três alternativas com o comando 
@code{@@setchapternewpage}:

@table @asis

@item @code{@@setchapternewpage off}
Provoca @TeX{} a tipografar um novo capítulo na mesma página como o 
último capítulo, após pular algum espaço em branco vertical.  Também faz 
com que @TeX{} formate os cabeçalhos de página para impressão em lado 
único.

@item @code{@@setchapternewpage on}
Provoca @TeX{} a iniciar novos capítulos em novas páginas e formatar os 
cabeçalhos de página para impressão em lado único.  Essa é a forma 
frequentemente mais utilizada para relatórios curtos ou impressão 
pessoal.  Essa é a padrão.

@item @code{@@setchapternewpage odd}
Provoca @TeX{} a iniciar novos capítulos em novas, páginas de número 
ímpar (páginas de lado direito) e a tipografar para impressão em lado 
duplo.  Essa é a forma frequentemente mais utilizada para livros e 
manuais.
@end table

Texinfo não tem um comando @code{@@setchapternewpage even}, pois não há 
tradição de impressão de capítulos de início ou livros em uma página de 
número par.

Se você não gosta dos cabeçalhos padrão que @code{@@setchapternewpage} 
configura, você pode explicitamente controlá-los com o comando 
@code{@@headings}. Veja-se @ref{@code{@@headings}}.

No início de um manual ou livro, as páginas não numeradas---por exemplo, 
as páginas de título e de direitos autorais de um livro não são 
numeradas.  Por convenção, as páginas de sumário e frontal são numeradas 
com numerais romanos e não em sequência com o restante do documento.

O @code{@@setchapternewpage} não tem efeito em formatos de saída que não 
tem páginas, tais como Info e HTML.

Recomenda-se não incluir qualquer comando @code{@@setchapternewpage} em 
seu fonte de documento de jeito nenhum, dado que tal paginação desejada 
não é intrínseca ao documento.  Para uma execução particular de 
impressão em papel, se você não deseja que a saída padrão (sem páginas 
em branco, mesmos cabeçalhos em todas as páginas) use a opção 
@option{--texinfo} a @command{texi2dvi} para especificar a saída que 
você deseja.


@node @code{@@headings}
@subsection O Comando @code{@@headings}

@anchor{headings on off}@c nome antigo
@findex headings

O comando @code{@@headings} raramente é utilizado.  Ele especifica o 
tipo de cabeçalhos e rodapés a imprimir em cada página.  Usualmente, 
isso é controlado pelo comando @code{@@setchapternewpage}.  Você precisa 
do comando @code{@@headings} somente se o comando 
@code{@@setchapternewpage} não fizer o que você desejar, ou se você 
desejar desligar os cabeçalhos de página pré-definidos antes de definir 
os seus próprios.  Escreva um comando @code{@@headings} imediatamente 
após o comando @code{@@end titlepage}.

Você pode utilizar @code{@@headings} conforme a seguir:

@table @code
@item @@headings off
Desliga a impressão de cabeçalhos de páginas.

@item @@headings single
Liga os cabeçalhos de página apropriados para a impressão em lado único.

@item @@headings double
Liga os cabeçalhos de página apropriados para a impressão em lado duplo.

@item @@headings singleafter
@itemx @@headings doubleafter
Liga os cabeçalhos @code{single} ou @code{double}, respectivamente, após 
ser produzida a saída da página atual.

@item @@headings on
Liga os cabeçalhos de página: @code{single} se 
@samp{@@setchapternewpageon}; e @code{double} do contrário.
@end table

Por exemplo, suponha que você escreva @code{@@setchapternewpage off} 
antes do comando @code{@@titlepage} para informar a @TeX{} para iniciar 
um capítulo novo na mesma página como o final do mais recente capítulo.  
Esse comando também faz com que @TeX{} tipografe os cabeçalhos de página 
para a impressão em lado único.  Para fazer com que @TeX{} tipografe 
para impressão em lado duplo, escreva @code{@@headingsdouble} após o 
comando @code{@@end titlepage}.

Você pode fazer com que @TeX{} pare de gerar quaisquer cabeçalhos de 
página em quaisquer circunstâncias, escrevendo @code{@@headings off} em 
uma linha própria imediatamente após a linha contendo o comando 
@code{@@end titlepage}, como isto:

@example
@@end titlepage
@@headings off
@end example

@noindent
O comando @code{@@headings off} anula o comando @code{@@end titlepage}, 
o qual do contrário faz com que @TeX{} imprima os cabeçalhos de página.

Você também pode especificar seu próprio estilo de cabeçalho e de rodapé 
de página. Veja-se @ref{Cabeçalhos, , Cabeçalhos de Página}, para mais informação.


@node @code{@@paragraphindent}
@subsection @code{@@paragraphindent}: Controlando o Recuo de Parágrafo

@anchor{paragraphindent}@c old name
@findex paragraphindent
@cindex Indentando parágrafos, controle de
@cindex Controle de recuo de parágrafo

Os processadores de Texinfo podem inserir espaços em branco no início da 
primeira linha de cada parágrafo, consequentemente recuando esse 
parágrafo.  Você pode utilizar o comando @code{@@paragraphindent} para 
especificar tal recuo.  Escreva um comando @code{@@paragraphindent} no 
início de uma linha seguido por ou @samp{asis} ou um número:

@example
@@paragraphindent @var{indent}
@end example

O recuo ocorre de acordo com o valor de @var{indent}:

@table @asis
@item @code{asis}
Não modifica o recuo existente (não implementado em @TeX{}).

@item @code{none}
@itemx 0
Omite todos os recuos.

@item @var{n}
Recua @var{n} caracteres de espaço em saída Info, @var{n} em @TeX{}.

@end table

O valor padrão de @var{indent} é três (3).  @code{@@paragraphindent} é 
ignorado para saída HTML.

É melhor escrever o comando @code{@@paragraphindent} antes da linha de 
fim de cabeçalho, no início de um arquivo Texinfo, de maneira que os 
comandos de formatação de região recuem os parágrafos conforme 
especificado. Veja-se @ref{Início de Cabeçalho}.


@node @code{@@firstparagraphindent}
@subsection @code{@@firstparagraphindent}: Recuando Após Cabeçalhos

@anchor{firstparagraphindent}@c nome antigo
@findex firstparagraphindent
@cindex First paragraph, suppressing indentation of
@cindex Suppressing first paragraph indentation
@cindex Preventing first paragraph indentation
@cindex Indenting, suppressing of first paragraph
@cindex Cabeçalhos, indentation after

Conforme você pode ver no presente manual, o primeiro parágrafo em 
qualquer seção não é recuado por padrão.  Tipograficamente, o recuo é um 
separador de parágrafos, o que significa que ele é desnecessário quando 
uma nova seção se inicia.  Esse recuo é controlado com o comando 
@code{@@firstparagraphindent}:

@example
@@firstparagraphindent @var{word}
@end example

O primeiro parágrafo após um cabeçalho é recuado de acordo com o valor 
de @var{word}:

@table @asis
@item @code{none}
Evita que o primeiro parágrafo seja recuado (padrão).
Essa opção é ignorada por @command{makeinfo} se 
@code{@@paragraphindent asis} estiver em efeito.

@item @code{insert}
Inclui o recuo normal de parágrafo.  Isso respeita o recuo de parágrafo 
configurado por um comando @code{@@paragraphindent} 
(veja-se @ref{@code{@@paragraphindent}}).
@end table

@code{@@firstparagraphindent} é ignorado para saída HTML e Docbook.

É melhor escrever o comando @code{@@firstparagraphindent} antes da linha 
de fim de cabeçalho, no início de um arquivo Texinfo, de maneira que os 
comandos de formatação de região recuem os parágrafos conforme 
especificado. Veja-se @ref{Início de Cabeçalho}.


@node @code{@@exampleindent}
@subsection @code{@@exampleindent}: Recuo de Ambiente

@anchor{exampleindent}@c nome antigo
@findex exampleindent
@cindex Ambientes de recuo
@cindex Recuo de ambiente
@cindex Recuo de exemplo

Os processadores Texinfo recuam cada linha de @code{@@example} e 
ambientes similares.  Você pode utilizar o comando 
@code{@@exampleindent} para especificar tal recuo.  Escreva um comando 
@code{@@exampleindent} no início de uma linha seguido por ou @samp{asis} 
ou um número:

@example
@@exampleindent @var{indent}
@end example

O recuo é de acordo com o valor de @var{indent}:

@table @asis
@item @code{asis}
Não modifica o recuo existente (não implementado em @TeX{}).

@item 0
Omite todos os recuos.

@item @var{n}
Recua ambientes em @var{n} caracteres de espaço em saída Info, @var{n} 
em @TeX{}.

@end table

O valor padrão de @var{indent} é cinco (5) espaços em Info, e 
0.4@dmn{in} em @TeX{}, o que é de alguma maneira menos.  (A redução é 
para ajudar @TeX{} a encaixar mais caracteres em linhas físicas).

É melhor escrever o comando @code{@@exampleindent} antes da linha de fim 
de cabeçalho, no início de um arquivo Texinfo, de maneira que os 
comandos de formatação de região recuem os parágrafos conforme 
especificado.  @xref{Início de Cabeçalho}.


@node Finalizando um Arquivo
@section Finalizando um Arquivo do Texinfo
@cindex Finalizando um Arquivo do Texinfo
@cindex Finalização de arquivo do Texinfo
@cindex Finalização de arquivo
@findex bye

O final de um arquivo Texinfo deveria incluir comandos para criar 
índices (veja-se @ref{Imprimindo Índices e Menus}), e o comando @code{@@bye} 
para marcar a última linha a ser processada.  Por exemplo:

@example
@@node Index
@@unnumbered Index

@@printindex cp

@@bye
@end example

@findex bye
@anchor{File End}
Um comando @code{@@bye} termina o processamento Texinfo.  Nenhum dos 
formatadores processa nada seguinte a @code{@@bye}; qualquer de tal 
texto é completamente ignorado.  O comando @code{@@bye} deveria estar em 
uma linha própria.

Assim, se você desejar, você pode seguir a linha @code{@@bye} com notas 
arbitrárias.  Também, você pode seguir a linha @code{@@bye} com uma 
lista de variáveis locais para Emacs, a maioria das vezes tipicamente um 
@samp{compile-command} 
(veja-se @ref{Compile-Command,, Usando a Lista de Variáveis Locais}).


@node Nodos
@chapter Nodos @c Capítulo 4
@anchor{node}@anchor{@@node} @c nomes antigos

@cindex Node, defined
Um @dfn{nodo} é uma região de texto que inicia no comando @code{@@node}, 
e continua até o próximo comando @code{@@node}.
Para especificar um nodo, escreva um comando @code{@@node} no início de 
uma linha, e siga-o com o nome do nodo.
Cada nodo contém a discussão de um tópico.  Os leitores Info exibem um 
nodo por vez, e disponibilizam comandos para o usuário se movimentar a 
nodos relacionados.  A saída HTML pode ser navegada similarmente.

Os nodos são utilizados como os alvos de referências cruzadas.  As 
referências cruzadas, tais quais aquelas ao final desta sentença, são 
feitas com @code{@@xref} e comandos relacionados; veja-se 
@ref{Referências Cruzadas}.  As referências cruzadas podem ser colocadas em 
qualquer parte do texto, e proporcionam uma maneira de representar links 
que não se encaixam em uma estrutura hierárquica.

Normalmente, você coloca um comando nodo imediatamente antes de cada 
comando de estruturação de capítulo---por exemplo, uma linha 
@code{@@section} ou @code{@@subsection}. (Veja-se @ref{Estruturamento de Capítulo}).
Você deve necessariamente fazer isso, ainda que você não pretenda 
formatar o arquivo para Info.
Isso é por que @TeX{} utiliza ambos, nomes @code{@@node} e nomes de 
estruturação de capítulo, na saída para referências cruzadas.  A única 
vez que você similarmente utiliza os comandos de estruturação de 
capítulo sem também utilizar nodos é se você estiver escrevendo um 
documento que não contenha referências cruzadas e somente será impresso, 
não transformado em Info, HTML, ou outros formatos.


@menu
* Estrutura do Documento Texinfo::  Estrutura dupla de documentos.
* Nomes de Nodo::                  Como escolher nomes de nodo.
* Escrevendo um Nodo::              Como escrever uma linha @code{@@node}.
* Exigências de Linha de Nodo::      Mantenha únicos os nomes.
* Primeiro Nodo::                  Como escrever um nodo `Top'.
* Comando @code{@@top}::           Como usar o comando @code{@@top}.
* Ilustração do Menu do Nodo::      Um diagrama, e nodos e menus de amostra.
* Criação de Ponteiros do @command{makeinfo}::   Permitindo que makeinfo determine os ponteiros de nodo.
* Menus::                       Listando nodos subordinados.
@end menu


@node Estrutura do Documento Texinfo
@section Estrutura do Documento Texinfo
@cindex Estrutura do Documento Texinfo
@cindex Document structure, of Texinfo
@cindex Structure, of Texinfo documents
@cindex Double structure, of Texinfo documents

@anchor{Two Paths}@c nome de nodo

Os nodos podem conter @dfn{menus}, os quais contém os nomes de 
@dfn{nodos filhos} dentro do nodo pai; por exemplo, um nodo 
correspondente a um capítulo poderia ter um menu de seções nesse 
capítulo.  Os menus permitem ao usuário se movimentar aos nodos filhos 
em uma maneira natural na saída em linha.

Adicionalmente, os nodos contém @dfn{ponteiros de nodo} que nomeiam outros 
nodos.  Os ponteiros `Next' e `Previous' formam nodos no mesmo nível de 
seccionamento em uma cadeia.  Conforme você pode imaginar, o ponteiro 
`Next' vincula ao próximo nodo, e o ponteiro `Previous' vincula ao nodo 
anterior.  Assim, por exemplo, todos os nodos que estão ao nível de 
seções dentro de um capítulo, são vinculados juntos, e a ordem dentro 
dessa cadeia é a mesma que a ordem dos filhos no menu do capítulo pai.  
Cada nodo filho grava o nome de nodo pai como o seu ponteiro `Up'.

@opindex accesskey@r{, in HTML output of Nodos}
A saída Info e HTML originada de @command{makeinfo} para cada nodo 
inclui vínculos aos nodos `Next', `Previous', e `Up'.  O HTML também 
utiliza o atributo @code{accesskey} com os valores @samp{n}, @samp{p}, e
@samp{u}, respectivamente.  Isso permite a pessoas que usem 
navegadores web a seguir a navegação usando (tipicamente) 
@kbd{M-@var{letter}}, por exemplo, @kbd{M-n} para o nodo `Next', a 
partir de qualquer lugar dentro do nodo.
Os ponteiros e menus de nodo proveem estrutura para os arquivos Info, 
exatamente como capítulos, seções, subseções e semelhantes proveem 
estrutura para livros impressos.  As duas estruturas teoricamente são 
distintas; na prática, entretanto, a estrutura de árvore de livros 
impressos é também essencialmente sempre utilizada para o nodo e 
estrutura de menu, pois isso conduz a um documento que é mais fácil de 
seguir. Veja-se @ref{Estrutura do Documento Texinfo}.

Tipicamente, a estrutura de seccionamento e a estrutura de nodo são 
completamente paralelas, com um nodo para cada capítulo, seção, etc., e 
com os nodos seguindo o mesmo arranjo hierárquico que o seccionamento.  
Assim, se o nodo estiver ao nível lógico de um capítulo, então seus 
nodos filhos estão ao nível de seções; similarmente, os nodos filhos de 
seções estão ao nível de subseções.

Apesar que é tecnicamente possível se criar documentos Texinfo com 
somente uma estrutura ou a outra, ou para as duas estruturas não estarem 
em paralelo, ou para ou o seccionamento ou estrutura de nodo estarem 
anormalmente formadas, etc., isso 
@emph{terminantemente não é recomendado}.  Conforme é do nosso 
conhecimento, todos os manuais Texinfo atualmente em uso geral seguem a 
estrutura paralela convencional.


@node Nomes de Nodo
@section Escolhendo Nomes de Nodo

@cindex Node names, choosing
O nome de um nodo identifica o nodo.  Para todos os detalhes de nomes de 
nodo, veja-se @ref{Exigências de Linha de Nodo}).

@anchor{Node Line Dicas}@c nome prévio de nodo
Aqui estão algumas sugestões para nomes de nodo:

@itemize @bullet
@item
Tente pegar nomes de nodo que sejam informativos, porém curtos.

No arquivo Info, o nome de arquivo, nome de nodo, e nomes de ponteiro 
são todos inseridos em uma linha, os quais podem invadir a borda direita 
da janela.  (Isso não causa um problema com Info, porém é horrível).

@item
Tente pegar nomes de nodo que difiram uns dos outros próximo do início de 
seus nomes.  Dessa maneira, é fácil utilizar a complementação automática 
de nome em Info.

@item
Convencionalmente, os nomes de nodo são capitalizados da mesma maneira 
que os títulos de seção e capítulo.  Neste manual, as palavras iniciais 
e significantes são capitalizadas; outras não o são.  Em outros manuais, 
somente as palavras iniciais e substantivos próprios são capitalizados.  
Qualquer forma está boa; nós somente recomendamos ser consistente.
@end itemize

Por que os nomes de nodo são utilizados em referências cruzadas, não é 
desejável casualmente modificá-los uma vez publicados.  Tais mudanças de 
nome invalidam as referências a partir de outros manuais, a partir de 
arquivamentos de correspondências, e assim por diante.
Veja-se @ref{Preservação de Link HTML Xref}.

Os ponteiros a partir de um dado nodo te habilitam a alcançar outros 
nodos e consistem simplesmente dos nomes de tais nodos.  Os ponteiros 
usualmente não estão especificados explicitamente, conforme 
@command{makeinfo} possa determiná-los 
(veja-se @ref{Criação de Ponteiros do @command{makeinfo}}).

Normalmente, um ponteiro `Up' de nodo contém o nome do nodo cujo menu 
menciona aquele nodo.  O ponteiro `Next' de nodo contém o nome do nodo 
que segue o presente nodo naquele menu e seu ponteiro `Previous' contém 
o nome do nodo que o precede naquele menu.  Quando um nodo `Previous' de 
nodo for o mesmo que seu nodo `Up', ambos os ponteiros nomeiam o mesmo 
nodo.

Usualmente, o primeiro nodo de um arquio Texinfo é o nodo `Top', e o seu 
ponteiro `Up' aponta para o arquivo @file{dir}, o qual contém o menu 
principal para todos os Info.


@node Escrevendo um Nodo
@section Escrevendo uma Linha de @code{@@node}
@cindex Escrevendo uma Linha de @code{@@node}
@cindex escrita de linha de @code{@@node}
@cindex Escrita de linha de nodo

@findex node
A maneira mais fácil de se escrever uma linha @code{@@node} é escrever 
@code{@@node} no início de uma linha e então o nome do nodo, como isto:

@example
@@node @var{nome_do_nodo}
@end example

Após se ter inserido uma linha @code{@@node}, você deveria imediatamente 
escrever um @@-command para o capítulo ou seção e inserir o nome desse 
capítulo ou seção.
Próximo (e isto é importante!), coloque várias entradas de índices.  
Usualmente, você encontrará pelo menos duas e frequentemente por volta 
de quatro ou cinco maneiras de se referir ao nodo no índice.  Use-as 
todas.  Isso tornará muito mais fácil para as pessoas encontrar o nodo.

Se você desejar, você pode ignorar as linhas @code{@@node} completamente 
em seu primeiro rascunho e então utilizar o comando 
@code{texinfo-insert-node-lines} para criar as linhas @code{@@node} para 
você.  Entretanto, não se recomenda essa prática.  É melhor nomear o 
nodo ao mesmo tempo em que você escreve um segmento, de forma que você 
possa facilmente produzir referências cruzadas.
As referências cruzadas úteis são uma característica especialmente 
importante de um bom manual Texinfo.

Mesmo quando você explicitamente especificar todos os ponteiros, você 
não pode escrever os nodos no arquivo fonte Texinfo em uma ordem 
arbitrária!  Porque os formatadores devem necessariamente processar o 
arquivo sequencialmente, sem considerar os ponteiros de nodo, você deve 
necessariamente escrever os nodos na ordem que você os desejar para 
aparecer na saída.  Para o formato Info, alguém pode imaginar que a 
ordem pode não importar, porém ela importa para os outros formatos.

Você pode opcionalmente seguir o argumento de nome de nodo a 
@code{@@node} com até três argumentos opcionais no restante da mesma 
linha, separando os argumentos com vírgulas.  Esses são os nomes dos 
ponteiros `Next', `Previous', e `Up', nessa exata ordem.  Recomenda-se 
omiti-los se o seu documento Texinfo for hierarquicamente organizado, 
como virtualmente todos são 
(veja-se @ref{Criação de Ponteiros do @command{makeinfo}}).

Quaisquer espaços antes ou após cada nome na linha @code{@@node} são 
ignorados.

O modelo para uma linha de nodo completamente preenchida com os 
ponteiros `Next', `Previous', e `Up' se parece com isto:

@example
@@node @var{nome_do_nodo}, @var{next}, @var{previous}, @var{up}
@end example

O argumento @var{nome_do_nodo} deve necessariamente estar presente, porém 
os outros são opcionais.  Se você desejar especificar algum, porém não 
outros, apenas insira vírgulas conforme necessário, como em: 
@samp{@@node meu_nodo,,,nodo_superior}.  Entretanto, recomenda-se deixar 
desativados todos os ponteiros e permitir que @code{makeinfo} os 
determine.

Se você estiver utilizando o GNU Emacs, você pode utilizar os comandos 
de atualização de nodos disponibilizados pelo modo Texinfo para inserir 
os nomes dos ponteiros; ou (recomendado), você pode deixar os ponteiros 
fora do arquivo Texinfo e permitir que @code{makeinfo} insira os 
ponteiros de nodo no arquivo Info que ele criar. 
(Veja-se @ref{Modo Texinfo}, e @ref{Criação de Ponteiros do @command{makeinfo}}).

Alternativamente, você pode inserir os ponteiros `Next', `Previous', e 
`Up' você mesmo.  Se você fizer isso, você pode achar de grande ajuda 
utilizar o comando de teclado do modo Texinfo @kbd{C-c C-c n}.  Esse 
comando insere @samp{@@node} e uma linha de comentário que te ajuda a 
monitorar quais argumentos são para quais ponteiros.  Essa linha de 
comentário é especialmente útil se você não estiver familiarizado com 
Texinfo.


@node Exigências de Linha de Nodo
@section Exigências de Linha de @code{@@node}

@cindex Exigências de Linha de Nodo
@cindex Restrições a nomes de nodo

Os nomes usados com @code{@@node} tem várias exigências:

@itemize @bullet
@item
@cindex Unique node names requirement
@cindex Node names must be unique
Todos os nomes de nodo em um arquivo Texinfo devem ser únicos.

Isso significa, por exemplo, que, se você finalizar cada capítulo com um 
sumário, você precisa nomear cada nodo de sumário diferentemente. Você 
não pode simplesmente chamá-los todos de ``Sumário''. Você pode, 
entretanto, duplicar os títulos dos capítulos, seções, e afins. Assim, 
você pode finalizar cada capítulo com uma seção chamada ``Sumário'', 
contanto que os nomes de nodo para tais seções sejam todos diferentes.

@item
@cindex Commands in node names
@cindex @@-commands in node names
Os nomes de nodo podem conter @@-commands. A saída é geralmente o 
resultado natural do comando; por exemplo, usar @code{@@TeX@{@}} em um 
nome de nodo resulta no logotipo do @TeX{} sendo exibido, conforme 
poderia estar em texto normal. As referências cruzadas deveriam usar 
@code{@@TeX@{@}}, assim como o nome de nodo usa.

Para saída Info e HTML, especialmente, é necessário expandir os comandos 
para alguma sequência de carácteres planos; por exemplo, 
@code{@@TeX@{@}} se expande para as três letras @samp{TeX} no nome de 
nodo do Info. Entretanto, as referências cruzadas ao nodo não deveriam 
tomar o ``atalho'' de usar @samp{TeX}; furar ao nome do nó real, comandos e tudo.

Alguns comandos não fazem sentido em nomes de nodo; por exemplo, ambientes (e.g., 
@code{@@quotation}), comandos que leem uma linha inteira como seu argumento (e.g., 
@code{@@sp}), e muitos outros.

Para a lista completa de comandos permitidos, e suas expansões para identificadores 
HTML e nomes de arquivo, veja-se @ref{Expansão de Comando Xref HTML}. As
expansões para Info geralmente são dadas como a principal descrição do comando.

Antes do lançamento de Texinfo 5 em 2013, essa característica era suportada em
uma maneira ad hoc (a opção @option{--commands-in-node-names} para @command{makeinfo}).
Agora é parte da linguagem.

@item
@cindex Dois pontos em nome de nodo
@cindex Vírgula em nome de nodo
@cindex Parêntesis em nome de nodo
@cindex Ponto em nome de nodo
@cindex Caracteres, inválidos em nome de nodo
@cindex Caracteres inválidos em nome de nodo
@cindex Nomes de nodo, caracteres inválidos em
Infelizmente, você não pode confiavelmente usar pontos, vírgulas ou dois pontos
em um nome de nodo; esses podem confundir o leitor Info. Também,  um nome de nodo
não pode iniciar com um abre parênteses precedendo um fecha parênteses, como
em @code{(não)permitido}, dado que tal sintaxe é usada para especificar um
manual externo. (Talvez essas limitações sejam removidas algum dia).

@command{makeinfo} alerta sobre tais usos problemáticos em nomes de nodo, 
itens de menu e referências cruzadas. Se você não quiser ver os alertas, 
você pode configurar a variável de personalização @code{INFO_SPECIAL_CHARS_WARNING} 
para @samp{0} (veja-se @ref{Outras Variáveis de Personalização}).

Também, se você insistir em usar tais caracteres em nomes de nodo (aceitando 
a saída Info subpadrão resultante), com o objetivo de não confundir os processadores
Texinfo, você deve ainda encapsular tais caracteres, usando ou inserções especiais 
(veja-se @ref{Inserindo Uma Vírgula}) ou @code{@@asis} (veja-se @ref{@code{@@asis}}).
Por exemplo:

@example
@@node foo@@asis@{::@}bar
@end example

Como um exemplo de se evitar os caracteres especiais, o seguinte é um 
título de seção neste manual:

@smallexample
@@section @@code@{@@@@unnumbered@}, @@code@{@@@@appendix@}: ...
@end smallexample

@noindent
Porém, falta ao nome de nodo correspondente as vírgulas e o subtítulo:

@smallexample
@@node @code{@@unnumbered @@appendix}
@end smallexample

@cindex Maiúsculas e minúsculas em nome de nodo
@item
Maiúsculas e minúsculas são significantes em nomes de nodo.

@cindex Espaço em branco em nome de nodo
@cindex Espaços em nome de nodo
@item
Os espaços antes e depois dos nomes na linha @samp{@@node} são ignorados.
Caracteres espaços em branco múltiplos ``dentro'' de um nome são substituídos
por um espaço único. Por exemplo:

@example
@@node foo bar
@@node  foo bar,
@@node foo bar ,
@@node foo  bar,
@@node  foo  bar ,
@end example

@noindent todos definem o mesmo nodo, chamado @samp{foo bar}. Em entradas de menu, 
esse é o nome que deveria ser usado: sem espaços antes ou depois, e um espaço interno
único. (Para referências cruzadas, o nome de nodo usado nos fontes Texinfo é 
automaticamente normalizado dessa maneira).

@item
Os ponteiros next/previous/up em linhas @code{@@node} devem ser os nomes dos nodos.
(É recomendado deixar esses nomes de ponteiros de nodo explícitos, os quais 
automaticamente evitam quaisquer problemas aqui; 
veja-se @ref{Criação de Ponteiros do @command{makeinfo}}).
@end itemize


@node Primeiro Nodo
@section O Primeiro Nodo
@cindex O nodo Top é primeiro
@cindex Primeiro nodo

O primeiro nodo de um arquivo Texinfo é o nodo @dfn{Top}, exceto em um arquivo 
incluído (@pxref{Arquivos Include}). O nodo Top deveria conter um 
sumário curto, permissões de cópia e um menu mestre. Veja-se @ref{O Nodo Top}, 
para mais informações sobre o conteúdo e exemplos do nodo Top.

Aqui está uma descrição dos ponteiros de nodo a serem usados no nodo Top:

@itemize @bullet
@item
@cindex Nodo Up do nodo Top
@cindex (dir) como nodo Up do nodo Top
O nodo Top (o qual deve ser nomeado @samp{top} ou @samp{Top}) deveria ter como 
seu nodo `Up' o nome de um nodo em outro arquivo, onde existe um menu que leva 
a esse arquivo. Especifique o nome de arquivo entre parênteses.

Usualmente, todos os arquivos Info estão disponíveis por meio de uma árvore 
virtual única de Info, construída a partir de múltiplos diretórios. Nesse caso, 
use @samp{(dir)} como o pai do nodo Top; isso especifica o nodo topo de nível no 
arquivo @file{dir}, o qual contém o menu principal para o sistema Info como um 
todo. (Cada diretório com arquivos Info deve conter um arquivo chamado @file{dir}).

Isso está bom para Info, porém para saída HTML, alguém bem pode desejar que o 
link Up oriundo do nodo Top vá para algum lugar diferente de @samp{dir.html}. 
Por exemplo, para GNU, o lugar natural seria @url{http://www.gnu.org/manual/} 
(uma página da web contendo links para a maior parte dos manuais GNU), melhor 
especificada que apenas @code{/manual/}, se o manual será instalado em 
@code{www.gnu.org}. Isso pode ser especificado com a variável de personalização 
@code{TOP_NODE_UP_URL} (veja-se @ref{Variáveis de Personalização de HTML}), como em 

@example
$ @kbd{makeinfo --html -c TOP_NODE_UP_URL=/manual/} ...
@end example

Todos os links para @code{(dir)} serão substituídos pela URL dada.

@item
@cindex Nodo Prev do nodo Top
O nodo `Prev' do nodo Top é usualmente ou omitido ou também configurado para 
@file{(dir)}. Qualquer uma está legal.

@item
@cindex Nodo Next do nodo Top
O nodo `Next' do nodo Top deveria ser o primeiro capítulo em seu documento.

@end itemize

Veja-se @ref{Instalando Um Arquivo Info}, para mais informação sobre a instalação 
de um arquivo Info no diretório @file{info}.

Geralmente, é melhor deixar os ponteiros completamente e deixar que as ferramentas 
os definam implicitamente, com este resultado simples:

@example
@@node Top
@end example


@node Comando @code{@@top}
@section O Comando de Seccionamento @code{@@top}

@anchor{top command}@c old name
@anchor{makeinfo top}@c another old name
@anchor{makeinfo top command}@c yet another name
@findex top

O comando @code{@@top} é um comando especial de seccionamento que você 
deveria somente usar após uma linha @samp{@@node Top} no início de um 
arquivo Texinfo. O comando @code{@@top} diz ao formatador @code{makeinfo} 
qual nodo é para ser usado como raiz da árvore de nodos.

O comando produz o mesmo tipo de saída que @code{@@unnumbered} 
(veja-se @ref{@code{@@unnumbered @@appendix}}).

O nodo @code{@@top} é convencionalmente envolto em um condicional 
@code{@@ifnottex} de forma que não aparecerá na saída @TeX{} 
(veja-se @ref{Condicionais}).
Assim, na prática, um nodo Top geralmente se parece com isto:

@example
@@ifnottex
@@node Top
@@top @var{titulo-do-seu-manual}

@var{sumario-de-altissimo-nivel}
@@end ifnottex
@end example

@code{@@top} é ignorado ao se levantar ou abaixar seções. Ou seja, nunca 
é baixado e nada pode ser levantado a ele (veja-se 
@ref{Levantar/abaixar seções}).

@node Ilustração do Menu do Nodo
@section Ilustração de Menu e Nodo @c Capítulo 4 - Nodos - Seção 4.7

Aqui está uma diagrama que ilustra um arquivo Texinfo com três capítulos, 
cada um dos quais contendo duas seções.

A ``raiz'' está no topo do diagrama e as ``folhas'' estão na parte 
inferior. Assim é como tal diagrama é desenhado convencionalmente; ele 
ilustra uma árvore de cabeça para baixo. Por essa razão, o nodo raiz é 
chamado de nodo `Top', e ponteiros de nodo `Up' levam você para mais 
perto da raiz.

@example
@group
                         Top
                          |
        -------------------------------------
       |                  |                  |
    Capítulo 1        Capítulo 2         Capítulo 3
       |                  |                  |
    --------           --------           --------
   |        |         |        |         |        |
 Seção    Seção     Seção    Seção     Seção    Seção
  1.1      1.2       2.1      2.2       3.1      3.2
@end group
@end example

Usando ponteiros explícitos (não recomendado, mas mostrado para fins do 
exemplo), o comando totalmente escrito para iniciar o Capítulo@tie{}2 
poderia ser isto:

@example
@group
@@node     Capítulo 2,  Capítulo 3, Capítulo 1, Top
@@comment  nome-nodo,   next,       previous,   up
@end group
@end example

@noindent
Essa linha @code{@@node} diz que o nome desse nodo é ``Capítulo@tie{}2'', 
o nome do nodo `Next' é ``Capítulo 3'', o nome do nodo `Previous' é 
``Capítulo@tie{}1'' e o nome do nodo `Up' é ``Top''. Você pode (e 
deveria) omitir a explicitação desses nomes de nodo se o seu documento 
estiver hierarquicamente organizado 
(veja-se @ref{Criação de Ponteiros do @command{makeinfo}}), porém os 
relacionamentos de ponteiros ainda serão obtidas.

@quotation Nota
`Next' e `Previous' se referem a nodos no @emph{mesmo nível hierárquico} 
no manual, não necessariamente ao próximo nodo dentro do arquivo Texinfo. 
No arquivo Texinfo, o nodo subsequente pode estar a um nível mais 
baixo---um nodo de nível de seção frequentemente segue um nodo de nível 
de capítulo, por exemplo. (O nodo `Top' contém a exceção a essa regra. 
Dado que o nodo `Top' é o único nodo naquele nível, `Next' se refere ao 
primeiro nodo seguinte, o qual quase sempre é um nodo de capítulo ou 
nível de capítulo).
@end quotation

Para ir para as Seções 2.1 e 2.2 usando Info, você precisa de um menu 
dentro do Capítulo 2. (veja-se @ref{Menus}). Você escreveria o menu 
pouco antes do início da Seção 2.1, como isto:

@example
@group
   @@menu
   * Seção. 2.1::    Descrição dessa seção.
   * Seção. 2.2::    Descrição.
   @@end menu
@end group
@end example

Usando ponteiros explícitos, o nodo para a Seção.@: 2.1 é escrito como 
isto:

@example
@group
@@node     Seção. 2.1, Seção. 2.2, Capítulo 2, Capítulo 2
@@comment  nome-nodo,  next,       previous,   up
@end group
@end example

Em formato Info, os ponteiros `Next' e `Previous' de um nodo geralmente 
conduzem à outros nodos no mesmo nível---de capítulo para capítulo ou de 
seção para seção (as vezes, conforme mostrado, o ponteiro `Previous' 
aponta para cima); um ponteiro `Up' geralmente conduz à um nodo ao nível 
acima (mais perto do nodo `Top'); e um `Menu' conduz à nodos a um nível 
abaixo (mais perto das `folhas'). (Uma referência cruzada pode apontar 
para um nodo em qualquer nível; veja-se @ref{Referências Cruzadas}).

Um comando @code{@@node} e um comando de estruturamento de capítulo são 
convencionalmente usados juntos, nessa ordem, frequentemente seguidos 
por comandos de indexação. (Conforme mostrado no exemplo acima, você 
pode seguir a linha @code{@@node} com uma linha de comentário, por 
exemplo, para mostrar qual ponteiro é qual se ponteiros explícitos são 
usados). Os processadores Texinfo usam essa construção para determinar 
os relacionamentos entre nodos e comandos de seccionamento.

Aqui está o início de um capítulo neste manual chamado 
``Finalizando um Arquivo Texinfo''. Isso mostra uma linha @code{@@node} 
seguida por uma linha @code{@@chapter} e, então, por linhas de 
indexação.

@example
@group
@@node Finalizando um Arquivo
@@chapter Finalizando um Arquivo Texinfo
@@cindex Finalizando um arquivo Texinfo
@@cindex Finalização de arquivo Texinfo
@@cindex Finalização de arquivo
@end group
@end example

Uma versão mais antiga do manual usava ponteiros de nodo explícitos. 
Aqui está o início do mesmo capítulo para esse caso. Isto mostra uma 
linha @code{@@node} seguida por uma linha de comentário, uma linha 
@code{@@chapter} e, então, por linhas de indexação.

@example
@group
@@node Finalizando um Arquivo, Estruturamento, Iniciando um Arquivo, Top
@@comment nome-nodo,           next,           previous,             up
@@chapter Finalizando um Arquivo Texinfo
@@cindex Finalizando um Arquivo Texinfo
@dots{}
@end group
@end example

@node Criação de Ponteiros do @command{makeinfo}
@section Criação de Ponteiros do @command{makeinfo} @c Capítulo 4 - Nodos - Seção 4.8

@cindex Criando ponteiros com @code{makeinfo}
@cindex Criação de Ponteiros do @command{makeinfo} com @code{makeinfo}
@cindex Criação Automática De Ponteiros do @command{makeinfo} com @code{makeinfo}
@cindex Criação Implícita de Ponteiros do @command{makeinfo} com @code{makeinfo}

O programa @code{makeinfo} pode automaticamente determinar ponteiros de 
nodo para um documento hierarquicamente organizado. Essa característica 
de criação implícita de ponteiro de nodo em @code{makeinfo} liberta você 
da necessidade de atualizar menus e ponteiros manualmente ou com 
comandos em modo Texinfo. (@xref{Atualizando Nodos e Menus}). Nós 
recomendamos enfaticamente tomar vantagem disso.

Para fazer isso, escreva suas linhas @code{@@node} apenas com o nome do 
nodo:

@example
@@node Meu Nodo
@end example

@noindent
Você não precisa escrever os ponteiros `Next', `Previous', e `Up'.

Então, você deve escrever um comando de seccionamento, como 
@code{@@chapter} ou @code{@@section}, na linha imediatamente seguinte a 
cada linha @code{@@node} truncada (exceto aquelas linhas de comentários 
que podem intervir). Isso é como normalmente ocorre.

Também, você deve escrever o nome de cada nodo (exceto para o nodo 
`Top') em um menu que esteja um ou mais níveis hierárquicos acima do 
nível do nodo.

Finalmente, você deve seguir a linha `Top' da linha @code{@@node} com 
uma linha iniciando com @code{@@top} para marcar o nodo de nível de topo 
no arquivo. Veja-se @ref{Comando @code{@@top}}.

@cindex Menu de detalhe
@findex menudetalhe
Se você usa um menu detalhado no seu menu mestre (veja-se 
@ref{Partes do Menu Mestre}), marque-o com o ambiente 
@code{@@detailmenu @dots{} @@end detailmenu}, ou @command{makeinfo} 
ficará confuso, tipicamente acerca do último e/ou primeiro nodo no 
documento.

Na maior parte dos casos, você desejará tomar vantagem dessa 
característica e não redundantemente especificar ponteiros de nodo que 
os programas podem determinar. Entretanto, não se exige que os 
documentos Texinfo sejam organizados hierarquicamente ou, de fato, 
conterem quaisquer comandos de seccionamento (por exemplo, se você nunca 
pretender que o documento seja impresso), de forma que os ponteiros de 
nodo ainda possam ser especificados explicitamente, em completa 
generalidade.

@node Menus
@section Menus @c Capítulo 4 - Nodos - Seção 4.9
@cindex Menus
@findex menu

@dfn{Menus} contém ponteiros para subordinar nodos. Em saída online, 
você usa menus para ir para tais nodos. Os menus não tem efeito em 
manuais impressos e não aparecem neles.

@menu
* Escrevendo um Menu::          O que é um menu?
* Exemplo de Menu::             Entradas de menu de duas e três partes
* Localização de Menu::         Menus vão ao final de nodos
* Partes de Menu::              Uma entrada de menu tem três partes
* Entrada de Menu Menos Desordenada::   Entrada de menu de duas partes
* Outros Arquivos Info::        Como se referir a um arquivo Info diferente
@end menu

@node Escrevendo um Menu
@subsection Escrevendo um Menu
@cindex Escrevendo um Menu
@cindex Menu, Escrevendo

Um menu consiste de um comando @code{@@menu} em uma linha própria, 
seguido por linhas de entrada de menu ou linhas de comentário de menu, e 
então seguido por um comando @code{@@end menu} em uma linha própria.

Um menu se parece com isto:

@example
@group
@@menu
Unidades de Texto Mais Largas

* Arquivos::                    Tudo sobre a manipulação de arquivos
* Múltiplos: Buffers.           Múltiplos buffers; editando
                                 vários arquivos de uma vez
@@end menu
@end group
@end example

@cindex Espaços, em menus
Em um menu, cada linha que inicie com um @w{@samp{* }} é uma 
@dfn{entrada de menu}. (Note o espaço após o asterisco).

Uma linha que não se inicie com um @w{@samp{* }} também pode aparecer em 
um menu. Tal linha não é uma entrada de menu, mas sim uma linha de 
@dfn{comentário de menu} que aparece no arquivo Info. No exemplo acima, 
a linha @samp{Unidades de Texto Mais Largas} é uma linha de comentário 
de menu; as duas linhas iniciando com @w{@samp{* }} são entradas de 
menu.

@cindex Documentos hierárquicos, e menus
Tecnicamente, menus podem te transportar para qualquer nodo, 
independentemente da estrutura do documento; mesmo para nodos em um 
arquivo Info diferente. Entretanto, nós não recomendamos fazer uso 
disso, pois é trabalhoso para os leitores seguirem. Também, a 
característica de criação implícita de ponteiros do comando 
@command{makeinfo} (@pxref{Criação de Ponteiros do @command{makeinfo}}) 
e os comandos de atualização do modo Texinfo do GNU Emacs funcionam 
somente para criar menus de nodos subordinados em um documentos 
hierarquicamente estruturado. É muito melhor usar referências cruzadas 
para se referir a nodos arbitrários.

@cindex Menus, gerando automaticamente
@findex validatemenus
O comando @command{makeinfo} pode automaticamente gerar menus em nodos 
para saída Info e HTML, baseado na estrutura de capítulo do documento. 
Para especificar que você deseja que o comando faça isso, coloque uma 
linha @samp{@@validatemenus off} próxima do início do documento.

Em Info, um usuário seleciona um nodo o comando @kbd{m} 
(@code{Info-menu}). O nome de entrada de menu é o que o usuário digita 
após o comando @kbd{m}.

@opindex accesskey@r{, em saída de menus HTML}
Na saída HTML oriunda de @command{makeinfo}, o atributo @code{accesskey} 
é usado com os valores @samp{1}@dots{}@samp{9} para as primeiras nove 
entradas. Isso permite que as pessoas usando navegadores da Internet 
sigam a primeira entrada de menu usando (tipicamente) 
@kbd{M-@var{digit}}, por exemplo, @kbd{M-1} para a primeira entrada.

@node Exemplo de Menu
@subsection Um Exemplo de Menu
@cindex Exemplo de Menu
@cindex Menu, Exemplo

@c mesclar com o nodo Escrevendo um Menu?

Um menu se parece com isto em Texinfo:

@example
@group
@@menu
* Nome de entrada do menu: Nome do nodo. Uma descrição curta.
* Nome do nodo::                   Essa forma é preferida.
@@end menu
@end group
@end example

@need 800
@noindent
Isso produz:

@example
@group
* menu:

* Nome de entrada do menu: Nome do nodo. Uma descrição curta.
* Nome do nodo::                   Essa forma é preferida.
@end group
@end example

@need 700
Aqui está um exemplo de como você poderá vê-lo em um arquivo Texinfo:

@example
@group
@@menu
Unidades de Texto Mais Largas

* Arquivos::                    Tudo sobre a manipulação de arquivos.
* Múltiplos: Buffers.           Múltiplos buffers; editando
                                vários arquivos de uma vez.
@@end menu
@end group
@end example

@need 800
@noindent
Isso produz:

@example
@group
* menu:
Unidades de Texto Mais Largas

* Arquivos::                    Tudo sobre a manipulação de arquivos.
* Múltiplos: Buffers.           Múltiplos buffers; editando
                                vários arquivos de uma vez.
@end group
@end example

Nesse exemplo, o menu tem duas entradas. @samp{Arquivos} tanto é um nome 
de entrada de menu quanto o nome do nodo referenciado por aquele nome.
@samp{Múltiplos} é o nome de entrada de menu; ele se refere ao nodo 
chamado @samp{Buffers}. A linha @samp{Unidades de Texto Mais Largas} é 
um comentário; ele aparece no menu, porém não é uma entrada.

Dado que nenhum nome de arquivo é especificado com @samp{Arquivos} ou 
@samp{Buffers}, eles podem ser os nomes de nodos no mesmo arquivo Info 
(@pxref{Outros Arquivos Info, , Referindo-se a Outros Arquivos Info}).

@node Localização de Menu
@subsection Localização de Menu
@cindex Localização de Menu
@cindex Menus, Localização de

Pode existir ao menos um menu em um nodo. Um menu é convencionalmente 
localizado ao final de um nodo, sem qualquer texto regular ou comandos 
adicionais entre o @code{@@end menu} e o início do próximo nodo.

@cindex Formato Info, e menus
Essa convenção é útil, dado que um leitor que usa o menu poderia 
facilmente se esquecer de quaisquer de tais textos. Também, quaisquer de 
tais textos pós menu serão considerados parte do menu na saída Info (a 
qual não tem marcador para o final de um menu). Assim, uma linha 
iniciando com @samp{* } será igualmente incorretamente manipulada.

Geralmente é melhor se um nodo com um menu não contenha muito texto. Se 
você se encontrar com um monte de texto antes de um menu, geralmente nós 
recomendamos mover tudo, menos um par de parágrafos, para um novo 
subnodo. Do contrário, é fácil para os leitores esquecerem o menu.

@ignore
Anos atrás, nós recomendamos o uso de um comando @samp{@@heading} dentro 
de um condicional @code{@@ifinfo} em vez dos comandos de seccionamento 
normais após um nodo muito curto com um menu. Isso tinha a vantagem de 
tornar a saída impressa visualmente melhor, pois não havia texto muito 
curto entre dois cabeçalhos no pagina. Porém, não funcionava com a 
criação de ponteiros implícita de @command{makeinfo}, e também tornava a 
saída XML incorreta, dado que não refletia a verdadeira estrutura do 
documento. Dessa maneira, nós não mais recomendamos isso.
@end ignore


@node Partes de Menu
@subsection As Partes de um Menu
@cindex Partes de um menu
@cindex Menu, partes
@cindex Partes de um @code{@@menu}

Uma entrada de menu tem três partes, das quais apenas a segunda é 
exigida:

@enumerate
@item
O nome de entrada de menu (opcional).

@item
O nome do nodo (exigido).

@item
Uma descrição do item (opcional).
@end enumerate

O modelo para uma entrada de menu genérica se parece com isto (porém, 
veja a próxima seção para mais uma possibilidade):

@example
* @var{nome_de_entrada_de_menu}: @var{nome_de_nodo}.   @var{descrição}
@end example

Coloque um único dois pontos após o nome de entrada de menu, seguido do 
nome de nodo e um tab, vírgula, enter ou os dois caracteres ``ponto'' e 
``espaço'' (@samp{. }).

A terceira parte de uma entrada de menu é uma frase descritiva ou 
sentença. Os nomes de entrada de menu e os nomes de nodo frequentemente 
são curtos; a descrição explana para o leitor a respeito de que se trata 
o nodo. Uma descrição útil complementa o nome de nodo em vez de 
repeti-lo. A descrição, a qual é opcional, pode ser espraiada por várias 
linhas; se isso acontecei, alguns autores preferem recuar a segunda 
linha enquanto outros preferem alinhá-lo com a primeira (e todas as 
outras). É completamente com você. Uma linha variz, ou a próxima entrada 
de menu, finaliza a descrição.

Os caracteres de espaço em um menu são preservados como estão na saída 
Info; isso permite formatar o menu como se desejar. Infelizmente, você 
deve digitar os nomes de nodo sem quaisquer espaços extra ou algumas 
versões de alguns leitores Info não encontrarão o nodo 
(@pxref{Exigências de Linha de Nodo}).

@command{makeinfo} alerta quando o texto de um item de menu (e nomes de 
nodo e referências cruzadas) contem uma construção problemática que 
interferirá com sua análise em Info. Se você não deseja ver esses 
alertas, você pode configurar a variável de personalização 
@code{INFO_SPECIAL_CHARS_WARNING} para @samp{0} 
(@pxref{Outras Variáveis de Personalização}).

@node Entrada de Menu Menos Desordenada
@subsection Entrada de Menu Menos Desordenada
@cindex Entrada de menu de duas partes
@cindex Entradas de menu de dois pontos
@cindex Entradas de menu com dois ``dois pontos''
@cindex Entrada de menu menos desordenada
@cindex Entrada de menu organizada

Quando o nome de entrada de menu e o nome de nodo são os mesmos, você 
pode escrever o nome imediatamente após o asterisco e espaço no início 
da linha e seguir com o nome com ``dois pontos'' duas vezes.

@need 800
Por exemplo, escreva

@example
* Nome::                        @var{descrição}
@end example

@need 800
@noindent
em vez de

@example
* Nome: Nome.                   @var{descrição}
@end example

Nós recomendamos usar o nome de nodo para o nome de entrada de menu 
sempre que possível, dado que isso reduz a confusão visual no menu.

@node Outros Arquivos Info
@subsection Referindo-se a Outros Arquivos Info
@cindex Referindo-se a Outros Arquivos Info
@cindex Nodos em Outros Arquivos Info
@cindex Outros Arquivos Info' nodos
@cindex Indo para Outros Arquivos Info' nodos
@cindex Info; outros arquivos' nodos

Você pode criar uma entrada de menu que habilite um leitor em Info a ir 
para um nodo em outro arquivo Info, escrevendo o nome de arquivo entre 
parênteses um pouco antes do nome do nodo. Alguns exemplos:

@example
@group
@@menu
* @var{nome-da-primeira-entrada}:(@var{nome-do-arquivo})@var{nome-do-nodo}.     @var{descrição}
* (@var{nome-do-arquivo})@var{segundo-nodo}::                                   @var{descrição}
@@end menu
@end group
@end example

Por exemplo, para se referir diretamente aos nodos @samp{Outlining} e 
@samp{Rebinding} no @cite{Manual do Emacs}, você poderia escrever um 
menu como este:

@example
@group
@@menu
* Outlining: Modo Contorno(emacs). O principal modo de edição de 
                                   contornos.

* (emacs)Rebinding::          Como redefinir o significado de uma tecla.

@@end menu
@end group
@end example

Se você não listar o nome de nodo, mas apenas nomear o arquivo, então 
Info presume que você está se referindo ao nodo `Top'. Exemplos:

@example
@group
* Info: (info).         Sistema de navegação de documentação.
* (emacs)::             Editor de texto, extensível, auto-documentador

@end group
@end example

Os comandos de atualização de menu do modo Texinfo do GNU Emacs somente 
funcionam com nodos dentro do buffer atual, de forma que você não pode 
usá-los para criar menus que se refiram a outros arquivos. Você deve 
escrever tais menus manualmente.

@node Estruturamento de Capítulo
@chapter Estruturamento de Capítulo @c Capítulo 5
@anchor{Estruturamento}@c old name
@cindex Estruturamento de Capítulo
@cindex Estruturamento de capítulos
@cindex Seccionamento

Os comandos de @dfn{Estruturamento de Capítulo} do Texinfo dividem um 
documento em uma hierarquia de capítulos, seções, subseções e 
subsubseções. Esses comandos geram cabeçalhos largos no texto, como o 
acima. Eles também proveem informação para a geração de índices 
(@pxref{Conteúdo,, Gerando Uma Tabela do Conteúdo}).

Normalmente você coloca um comando @code{@@node} imediatamente antes de 
cada comando de Estruturamento de Capítulo. @xref{Nodos}.

@menu
* Estruturamento de Árvore::  Um manual é como uma árvore de cabeça para baixo @dots{}
* Tipos de Comandos Estruturantes::  Como dividir um manual em partes.
* @code{@@chapter}::                    Estruturamento de Capítulo.
* @code{@@unnumbered @@appendix}::
* @code{@@majorheading @@chapheading}::
* @code{@@section}::
* @code{@@unnumberedsec @@appendixsec @@heading}::
* @code{@@subsection}::
* @code{@@unnumberedsubsec @@appendixsubsec @@subheading}::
* @code{@@subsubsection}::  Comandos para as seções de nível mais baixo.
* @code{@@part}::           Coleções de capítulos.
* Levantar/abaixar seções::  Como modificar o nível hierárquico de comandos.
@end menu


@node Estruturamento de Árvore
@section Estrutura de Árvore das Seções @c Capítulo 5 - Estruturamento de Capítulo; Seção 5.1 - Estrutura de Árvore das Seções
@cindex Estruturamento de Árvore

Um arquivo Texinfo é geralmente estruturado como um livro com capítulos, 
seções, subseções, e afins. Essa estrutura pode ser visualizada como uma 
árvore (ou melhor, como uma árvore de cabeça para baixo) com a raiz no 
topo e as folhas correspondendo aos capítulos, seções, subseções e 
subsubseções.

Aqui está um diagrama que mostra um arquivo Texinfo com três capítulos, 
cada qual com duas seções.

@example
@group
                         Top
                          |
        -------------------------------------
       |                  |                  |
    Capítulo 1         Capítulo 2         Capítulo 3
       |                  |                  |
    --------           --------           --------
   |        |         |        |         |        |
 Seção    Seção     Seção    Seção     Seção    Seção
  1.1      1.2       2.1      2.2       3.1      3.2

@end group
@end example

Em um arquivo Texinfo que tenha essa estrutura, o início do Capítulo 2 
poderia ser escrito assim:

@example
@group
@@node    Capítulo 2
@@chapter Capítulo 2
@end group
@end example

@noindent
Para o propósito do exemplo, aqui está como poderia ser escrito com 
ponteiros de nodo explícitos:

@example
@group
@@node    Capítulo 2,  Capítulo 3, Capítulo 1, Top
@@chapter Capítulo 2
@end group
@end example

Os comandos de estruturamento de capítulo estão descritos nas seções 
seguintes; o comando @code{@@node} está descrito no capítulo anterior 
(@pxref{Nodos}).

@node Tipos de Comandos Estruturantes
@section Tipos de Comandos Estruturantes @c Capítulo 5 - Estruturamento de Capítulo; Seção 5.2 - Tipos de Comandos Estruturantes

Os comandos de estruturamento de capítulo se dividem em quatro grupos ou 
séries, cada um dos quais contendo comandos de estruturamento 
correspondentes aos níveis hierárquicos de capítulos, seções, subseções 
e subsubseções.

Os quatro grupos de comandos são: a série @code{@@chapter}; a série 
@code{@@unnumbered}; a série @code{@@appendix}; e a série 
@code{@@heading}. Cada comando produz um título com uma aparência 
diferente no corpo do documento. Alguns dos comandos listam seus títulos 
no sumário, enquanto outros não. Aqui estão os detalhes:

@itemize @bullet
@item
As séries de comandos @code{@@chapter} e @code{@@appendix} produzem 
entradas numeradas ou letradas, ambas no corpo de um documento e em seu 
sumário.

@item
A série de comandos @code{@@unnumbered} produzem entradas não numeradas, 
ambas no corpo de um documento e em seu sumário. O comando @code{@@top}, 
o qual tem um uso especial, é um membro dessa série 
(@pxref{Comando @code{@@top}}). Uma seção @code{@@unnumbered} é uma 
parte normal da estrutura do documento.

@item
A série de comandos @code{@@heading} produzem cabeçalhos não numerados 
simples que não aparecem em um sumário, não são associados com nodos e 
não podem ser referenciados. Esses comandos de cabeçalhos nunca iniciam 
uma nova página.
@end itemize

Quando um comando @code{@@setchapternewpage} diz para fazer isso, ou 
seja, novo capítulo com nova página, os comandos @code{@@chapter}, 
@code{@@unnumbered} e @code{@@appendix} iniciam novas páginas no manual 
impresso; os comandos @code{@@heading} não. 
@xref{@code{@@setchapternewpage}}.

Aqui está um sumário:

@tex
{\globaldefs=1 \smallfonts \rm}
@end tex

@multitable @columnfractions .19 .30 .29 .22
@item                        @tab                              @tab                       @tab No new page
@item @i{Numerada}           @tab @i{Não numerada}             @tab @i{Letrada/numerada}  @tab @i{Não numerada}
@item No conteúdo            @tab No conteúdo                  @tab No conteúdo           @tab Não no conteúdo
@item                        @tab @code{@@top}                 @tab                       @tab @code{@@majorheading}
@item @code{@@chapter}       @tab @code{@@unnumbered}          @tab @code{@@appendix} @tab @code{@@chapheading}
@item @code{@@section}       @tab @code{@@unnumberedsec}       @tab @code{@@appendixsec} @tab @code{@@heading}
@item @code{@@subsection}    @tab @code{@@unnumberedsubsec}    @tab @code{@@appendixsubsec} @tab @code{@@subheading}
@item @code{@@subsubsection} @tab @code{@@unnumberedsubsubsec} @tab @code{@@appendixsubsubsec} @tab @code{@@subsubheading}
@end multitable
@tex
{\globaldefs=1 \textfonts \rm}
@end tex


@node @code{@@chapter}
@section @code{@@chapter}: Estruturamento de Capítulo @c Capítulo 5 - Estruturamento de Capítulo; Seção 5.3 - Estruturamento de Capítulo

@anchor{chapter}@c old name
@findex chapter

@code{@@chapter} identifica um capítulo no documento--a nível mais alto 
da hierarquia de estruturamento normal do documento. Escreva o comando 
no início de uma linha e o siga na mesma linha pelo título ou capítulo. 
O capítulo é numerado automaticamente, iniciando a partir de@tie{}1.

Por exemplo, o capítulo presente neste manual é intitulado 
``@code{@@chapter}: Estruturamento de Capítulo'';  a linha 
@code{@@chapter} se parece com isto:

@example
@@chapter @@code@{@@@@chapter@}: Estruturamento de Capítulo
@end example

Em @TeX{}, o comando @code{@@chapter} produz um cabeçalho de capítulo no 
documento.

Em saída Info e texto plano, o comando @code{@@chapter} faz com que o 
título apareça em uma linha própria, com uma linha de asteriscos 
inserida abaixo. Assim, o exemplo acima produz a seguinte saída:

@example
@group
5 Estruturamento de Capítulo
****************************
@end group
@end example

Em HTML, o comando @code{@@chapter} produz um cabeçalho de nível 
@code{<h2>} por padrão (controlado pela variável de personalização 
@code{CHAPTER_HEADER_LEVEL}, @pxref{Outras Variáveis de Personalização}).

Na saída XML e Docbook, um elemento @code{<chapter>} é produzido, o qual 
inclui todas as seções seguintes, até o próximo capítulo.

@node @code{@@unnumbered @@appendix}
@section @code{@@unnumbered}, @code{@@appendix}: Capítulos com Outra Rotulagem

@anchor{unnumbered & appendix}@c old name
@findex unnumbered
@findex appendix

Use o comando @code{@@unnumbered} para iniciar um elemento de nível de 
capítulo que aparece sem números de capítulos de qualquer tipo. Use o 
comando @code{@@appendix} para iniciar um apêndice que é rotulado por 
letras (`A', `B', @dots{}) em vez de números; apêndices também estão ao 
nível de estruturamento de capítulo.

Escreva um comando @code{@@appendix} ou @code{@@unnumbered} no início de 
uma linha e siga-o, na mesma linha, pelo título, exatamente como com 
@code{@@chapter}.

@findex centerchap
Texinfo também provê um comando @code{@@centerchap}, o qual é análogo a 
@code{@@unnumbered}, porém centraliza seus argumentos nas saídas 
impressa e HTML. Esse tipo de escolha estilística geralmente não é 
oferecida por Texinfo. Ela pode ser adequada para documentos curtos.
@c porém, o Dicionário do Hacker desejava, antes de abandonarem Texinfo.

@cindex Docbook e seções prévias
@cindex Prefácio, etc., e Docbook
Com @code{@@unnumbered}, se o nome do nodo associado é uma destas 
palavras do Inglês (não diferencia maiúsculas de minúsculas):

@example
Acknowledgements  Colophon  Dedication  Preface
@end example

@cindex @code{<acknowledgements>} Etiqueta do Docbook
@cindex @code{<colophon>} Etiqueta do Docbook
@cindex @code{<dedication>} Etiqueta do Docbook
@cindex @code{<preface>} Etiqueta do Docbook
@cindex @code{<chapter>} Etiqueta do Docbook
@cindex @code{<title>} Etiqueta do Docbook
@noindent então a saída Docbook usa etiquetas especiais correspondentes 
(@code{<preface>}, etc.)@: em vez do padrão @code{<chapter>}. O 
argumento ao próprio @code{@@unnumbered} pode ser qualquer coisa, e é 
produzido como o texto @code{<title>} a seguir como de costume.

@node @code{@@majorheading @@chapheading}
@section @code{@@majorheading}, @code{@@chapheading}: Cabeçalhos de Nível de Capítulo
@c Capítulo 5 - Nodos; Seção 5.5 - Cabeçalhos de Nível de Capítulo

@anchor{majorheading & chapheading}@c old name
@findex majorheading
@findex chapheading

Os comandos @code{@@majorheading} e @code{@@chapheading} produzem 
cabeçalhos semelhantes a capítulos no corpo de um documento.

Entretanto, nenhum desses comandos produz uma entrada no índice, e 
nenhum desses comandos faz com que @TeX{} inicie uma nova página em um 
manual impresso.

Em @TeX{}, um comando @code{@@majorheading} gera um espaço em branco 
vertical mais largo, antes do cabeçalho, que um comando 
@code{@@chapheading}, porém, de outra forma, é o mesmo.

Em Info e texto plano, os comandos @code{@@majorheading} e 
@code{@@chapheading} produzem a mesma saída que @code{@@chapter}: o 
título é impresso em uma linha própria com uma linha de asteriscos 
abaixo. Semelhante para HTML@. A única diferença é a falta de numeração 
e a falta de qualquer associação com Nodos. @xref{@code{@@chapter}}.

@node @code{@@section}
@section @code{@@section}: Seções Abaixo de Capítulos
@c Capítulo 5 - Nodos; Seção 5.6 - Seções Abaixo de Capítulos

@anchor{section}@c nome antigo
@findex section

Um comando @code{@@section} identifica uma seção dentro de uma unidade 
de capítulo, seja ela criada com @code{@@chapter}, @code{@@unnumbered}, 
ou @code{@@appendix}, seguindo o esquema de numeração do comando de 
nível de capítulo. Assim, dentro de um Capítulo @code{@@chapter} 
numerado `1', as seções são numeradas `1.1', `1.2', etc.; dentro de um 
``capítulo'' @code{@@appendix} rotulado `A', as seções são numeradas 
`A.1', `A.2', etc.; dentro de um capítulo @code{@@unnumbered}, a seção 
não é numerada. A saída é sublinhada com @samp{=} em Info e texto plano.

Para criar uma seção, escreva o comando @code{@@section} no início de 
uma linha e siga-o, na mesma linha, pelo título da seção. Por exemplo,

@example
@@section Isto é uma seção
@end example

@noindent
pode produzir o seguinte em Info:

@example
@group
5.7 Isto é uma seção
====================
@end group
@end example

Os títulos de seção são listados no índice.

A saída @TeX{}, HTML, Docbook e XML é toda análoga à saída de nível de 
capítulo, apenas ``um nível abaixo''; @pxref{@code{@@chapter}}.


@node @code{@@unnumberedsec @@appendixsec @@heading}
@section @code{@@unnumberedsec}, @code{@@appendixsec}, @code{@@heading}
@c Capítulo 5 - Nodos; Seção 5.7 - @code{@@unnumberedsec}, @code{@@appendixsec}, @code{@@heading}

@anchor{unnumberedsec appendixsec heading}@c nome antigo
@findex unnumberedsec
@findex appendixsec
@findex heading

Os comandos @code{@@unnumberedsec}, @code{@@appendixsec} e 
@code{@@heading} são respectivamente, os equivalentes não numerado, 
apêndice e cabeçalho do comando @code{@@section} (veja a seção 
anterior).

@code{@@unnumberedsec} e @code{@@appendixsec} não precisam ser usados em 
circunstâncias normais, pois @code{@@section} também pode ser usado 
dentro de capítulos @code{@@unnumbered} e @code{@@appendix}; novamente, 
veja a seção anterior.

@table @code
@item @@unnumberedsec
O comando @code{@@unnumberedsec} pode ser usado dentro de um capítulo 
não numerado ou dentro de um capítulo ou apêndice normal para produzir 
uma seção não numerada.

@item @@appendixsec
@itemx @@appendixsection
@findex appendixsection
@findex appendixsec
@code{@@appendixsection} é a escrita mais longa do comando 
@code{@@appendixsec}; os dois são sinônimos.

Convencionalmente, o comando @code{@@appendixsec} ou 
@code{@@appendixsection} é usado somente dentro de apêndices.

@item @@heading
Você pode usar o comand @code{@@heading} (quase) em qualquer lugar para 
um cabeçalho estilo seção que não aparecerá no índice. Os comandos da 
série @code{@@heading} podem aparecer dentro da maior parte dos 
ambientes, por exemplo, ao longo de localizações patológicas e inúteis 
como dentro de @code{@@titlepage}, como um argumento para outro comando, 
etc., não são permitidos.

@end table


@node @code{@@subsection}
@section @code{@@subsection}: Subseções Abaixo de Seções
@c Capítulo 5 - Nodos; Seção 5.8 - @code{@@subsection}: Subseções Abaixo de Seções

@anchor{subsection}@c nome antigo
@findex subsection

Subseções estão para seções como seções estão para capítulos; 
@pxref{@code{@@section}}. Em Info e texto plano, os títulos de subseções 
são sublinhados com @samp{-}. Por exemplo,

@example
@@subsection Esta é uma subseção
@end example

@noindent
pode produzir

@example
@group
1.2.3 Esta é uma subseção
-------------------------
@end group
@end example

Os títulos das subseções são listados no índice.

A saída @TeX{}, HTML, Docbook e XML é toda análoga à saída de nível de 
capítulo, apenas ``dois níveis abaixo''; @pxref{@code{@@chapter}}.


@node @code{@@unnumberedsubsec @@appendixsubsec @@subheading}
@section Os Comandos do Tipo @code{@@subsection}
@c Capítulo 5 - Nodos; Seção 5.9 - Os Comandos do Tipo @code{@@subsection}

@anchor{unnumberedsubsec appendixsubsec subheading}@c nome antigo
@findex unnumberedsubsec
@findex appendixsubsec
@findex subheading
@cindex Subsection-like commands

Os comandos @code{@@unnumberedsubsec}, @code{@@appendixsubsec} e 
@code{@@subheading} são, respectivamente, os equivalentes não numerado, 
tipo apêndice e tipo cabeçalho do comando @code{@@subsection}. 
(@xref{@code{@@subsection}}).

@code{@@unnumberedsubsec} e @code{@@appendixsubsec} não precisam ser 
usados em circunstâncias normais, pois @code{@@subsection} também pode 
ser usado dentro de seções de capítulos @code{@@unnumbered} e 
@code{@@appendix} (@pxref{@code{@@section}}).

Um comando @code{@@subheading} produz um cabeçalho semelhante àquele de 
uma subseção, exceto que não é numerado e não aparece no índice. 
Similarmente, um comando @code{@@unnumberedsubsec} produz um cabeçalho 
não numerado semelhante àquele de uma subseção e um comando 
@code{@@appendixsubsec} produz um cabeçalho do tipo subseção rotulado 
com uma letra e números; ambos esses comandos produzem cabeçalhos que 
aparecem no índice. Em Info e texto plano, os comandos do tipo 
@code{@@subsection} geram um título sublinhado com hifens.


@node @code{@@subsubsection}
@section @code{@@subsection} e Outros Comandos Subsub
@c Capítulo 5 - Nodos; Seção 5.10 - @code{@@subsection} e Outros Comandos Subsub

@anchor{subsubsection}@c nome antigo
@findex subsubsection
@findex unnumberedsubsubsec
@findex appendixsubsubsec
@findex subsubheading
@cindex Subsub sectioning commands

O quarto e menor nível de comandos de seccionamento em Texinfo são os 
comandos `subsub'. São eles:

@table @code
@item @@subsubsection
Subsubseções estão para subseções como subseções estão para seções. 
(@xref{@code{@@subsection}}). Os títulos das subsubseções aparecem no 
índice.

@item @@unnumberedsubsubsec
Os títulos de subsubseções não numeradas aparecem no índice, porém 
faltam números. Do contrário, subsubseções não numeradas são o mesmo que 
subsubseções.

@item @@appendixsubsubsec
Convencionalmente, os comandos de apêndice são usados somente para 
apêndices e são indicados e numerados apropriadamente. Eles também 
aparecem no índice.

@item @@subsubheading
O comando @code{@@subsubheading} pode ser usado em qualquer lugar onde 
você desejar um pequeno cabeçalho que não aparecerá no índice.

@end table

Como com subseções, @code{@@unnumberedsubsubsec} e 
@code{@@appendixsubsubsec} não precisam ser usados em circunstâncias 
normais, pois @code{@@subsubsection} também pode ser usado dentro de 
subseções de capítulos @code{@@unnumbered} e @code{@@appendix} 
(@pxref{@code{@@section}}).

Em Info, os títulos `subsub' são sublinhados com pontos. Por exemplo, 

@example
@@subsubsection Esta é uma subsubseção
@end example

@noindent
pode produzir

@example
@group
1.2.3.4 Esta é uma subsubseção
..............................
@end group
@end example

A saída @TeX{}, HTML, Docbook e XML é toda análoga à saída de nível de 
capítulo, apenas ``três níveis abaixo''; @pxref{@code{@@chapter}}.


@node @code{@@part}
@section @code{@@part}: Grupos de Capítulos
@c Capítulo 5 - Nodos; Seção 5.11 - @code{@@part}: Grupos de Capítulos
@findex part
@cindex Part pages

O comando de seccionamento final é o @code{@@part}, para marcar uma 
@dfn{parte} de um manual, isto é, um grupo de capítulos ou (raramente) 
apêndices. Isso se comporta bem diferentemente de outros comandos de 
seccionamento, para se encaixar com a maneira que tais ``partes'' são 
convencionalmente usadas em livros.

Nenhum comando @code{@@node} é associado com @code{@@part}. Apenas 
escreva o comando em uma linha própria, incluindo o título da parte, no 
lugar no documento que você desejar marcar como o início daquela parte. 
Por exemplo:

@example
@@part Parte I:@@* O Início
@end example

Como pode ser inferido desse exemplo, nenhuma numeração ou rotulamento 
automático do texto do @code{@@part} é feito. O texto é tomado como 
está.

Por causa de as partes não serem associadas com Nodos, nenhum texto 
geral pode seguir a linha @code{@@part}. Para produzir a saída 
pretendida, a linha deve ser seguida por um comando de nível de 
capítulo (incluindo seu nodo). Assim, para continuar o exemplo:

@example
@@part Parte I:@@* O Início

@@node Introdução
@@chapter Introdução
...
@end example

Na saída @TeX{}, o texto @code{@@part} é incluído em ambos os índices, 
o normal e o resumido, (@pxref{Conteúdo}), sem um número de página 
(dado que é a convenção normal). Adicionalmente, uma ``página da parte'' 
é saída no corpo do documento, apenas contendo o texto @code{@@part}. No 
exemplo acima, o @code{@@*} causa uma quebra de linha no página da parte 
(porém, é substituída com um espaço no índice). Essa página da parte é 
sempre forçada a estar em uma página ímpar (a direita), 
independentemente da capitulação do capítulo 
(@pxref{@code{@@setchapternewpage}}).

Na saída HTML, o texto @code{@@part} é similarmente incluído no índice, 
e um cabeçalho é incluído no texto do documento principal, como parte do 
nodo do capítulo ou apêndice seguinte.

Na saída XML e Docbook, o elemento @code{<part>} inclui todos os 
capítulos seguintes, até o próximo @code{<part>}. Um @code{<part>} 
contendo capítulos também é fechado em um apêndice.

Na saída Info e texto plano, @code{@@part} não tem efeito.

@code{@@part} é ignorado quando do levantamento ou do abaixamento de 
seções (veja a próxima seção). Isto é, nunca é abaixado e nada pode ser 
levantado para ele.


@node Levantar/abaixar seções
@section Levantar/abaixar seções: @code{@@raisesections} e @code{@@lowersections}
@c Capítulo 5 - Nodos; Seção 5.12 - Levantar/abaixar seções: @code{@@raisesections} e @code{@@lowersections}
@findex raisesections
@findex lowersections
@cindex Raising and lowering sections
@cindex Lowering and raising sections
@cindex Sections, raising and lowering

Os comandos @code{@@raisesections} e @code{@@lowersections} 
implicitamente levantam e abaixam o nível hierárquico dos seguintes 
capítulos, seções e dos outros comandos de seccionamento (excluindo as 
partes).

Isto é, o comando @code{@@raisesections} modifica seções para capítulos, 
subseções para seções, e assim por diante. Por outro lado, o comando 
@code{@@lowersections} modifica capítulos para seções, seções para 
subseções, e assim por diante. Assim, um comando @code{@@lowersections} 
cancela um comando @code{@@raisesections}, e vice versa.

@cindex Arquivos Include, e níveis de seção
Você pode usar @code{@@lowersections} para incluir texto escrito como um 
arquivo Texinfo externo ou autônomo em outro arquivo Texinfo como um 
arquivo interno, arquivo included (@pxref{Arquivos Include}). O uso 
típico se parece com isto:

@example
@@lowersections
@@include algum_arquivo.texi
@@raisesections
@end example

@noindent (Sem o @code{@@raisesections}, todas as seções subsequentes no 
arquivo principal também poderiam ser rebaixadas).

Se o arquivo included sendo rebaixado tiver um nodo @code{@@top}, você 
precisará condicionar sua inclusão com um parâmetro 
(@pxref{@code{@@set @@value}}).

De um ponto de vista prático, você geralmente só quer elevar ou rebaixar 
grandes blocos, geralmente em arquivos externos, como mostrado acima. O 
resultado final tem que ter menus que levem em conta a elevação e o 
rebaixamento, de forma que você não pode simplesmente intercalar 
arbitrariamente os comandos @code{@@raisesections} e 
@code{@@lowersections} por todo o documento.

O uso repetido dos comandos continua a elevar ou a rebaixar o nível 
hierárquico um passo de cada vez. Uma tentativa de elevar `capítulo' 
acima reproduz comandos de capítulo; uma tentativa de rebaixar 
`subsubseção' abaixo reproduz comandos subsubseção. Também, subsubseções 
rebaixadas e capítulos elevados não funcionarão com a característica de 
@command{makeinfo} de implicitamente determinar ponteiros de nodo, dado 
que a estrutura de menu não pode ser representada corretamente.

Escreva cada comando @code{@@raisesections} e @code{@@lowersections} em 
uma linha própria.


@node Referências Cruzadas
@chapter Referências Cruzadas @c Capítulo 6
@cindex Making cross-references
@cindex Cross-references
@cindex References

@dfn{Referências cruzadas} são usadas para guiar o leitor para outras 
partes do mesmo ou de diferentes arquivos Texinfo.

@menu
* Referências::                  Para que são as referências cruzadas.
* Comandos de Referências Cruzadas::    Um sumário dos diferentes comandos.
* Partes de Referências Cruzadas::      Uma Referência Cruzada tem várias partes.
* @code{@@xref}::                       Inicie uma referência com `Veja' @dots{}
* Referenciando Um Manual Como Um Todo::   Referência a um manual inteiro.
* @code{@@ref}::                        Uma referência para a última parte de uma sentença.
* @code{@@pxref}::                      Como escrever uma Referência Cruzada entre parênteses.
* @code{@@anchor}::                     Definindo alvos de Referência Cruzada arbitrários.
* @code{@@inforef}::                    Como referenciar um arquivo somente Info.
* @code{@@url}::                        Como referenciar um Localizador Uniforme de Recursos.
* @code{@@cite}::                       Como referenciar livros que não estão no sistema Info.
@end menu


@node Referências
@section Para Que São As Referências Cruzadas
@c Capítulo 6 - Referências Cruzadas; Seção 6.1 - Para Que São As Referências Cruzadas

Frequentemente, porém nem sempre, um documento impresso deveria ser 
projetado de forma que possa ser lido sequencialmente. As pessoas se 
cansam de ir e vir para encontrar informações que deveriam ser 
apresentadas a elas conforme necessário.

Entretanto, em qualquer documento, algumas informações estarão 
detalhadas demais para o contexto atual, ou incidental; use referências 
cruzadas para fornecer acesso a tais informações. Também, um sistema de 
ajuda online ou um manual de referência não é como um romance; poucos 
leem tais documentos em sequência do início ao final. Em vez disso, as 
pessoas buscam o que precisam. Por essa razão, tais criações deveriam 
conter muitas referências cruzadas para ajudar os leitores a achar outra 
informação que eles podem não ter lido.

Em um manual impresso, uma referência cruzada resulta em uma referência 
de página, a menos que seja para outro manual, caso no qual a referência 
cruzada nomeia esse manual. Em Info, uma referência cruzada resulta em 
uma entrada que você pode seguir usando o comando @samp{f}
(@xref{Help-Xref,, Following cross-references, info, Info}.). Em HTML, 
uma referência cruzada resulta em um hiperlink.

Os vários comandos de referências cruzadas usam Nodos 
(ou âncoras, @pxref{@code{@@anchor}}) para definir localizações de 
referências cruzadas. @TeX{} precisa de Nodos para definir localizações 
de referências cruzadas. Quando @TeX{} gera um arquivo DVI, grava cada 
número de página do nodo e usa os números de página na produção das 
referências. Assim, mesmo que você esteja escrevendo um manual que será 
somente impresso, e não usado online, você deve, ainda assim, escrever 
linhas @code{@@node} para nomear os lugares para os quais você faz 
referências cruzadas.

@need 800
@node Comandos de Referências Cruzadas
@section Diferentes Comandos de Referência Cruzada
@c Capítulo 6 - Referências Cruzadas; Seção 6.2 - Diferentes Comandos de Referência Cruzada
@cindex Different cross-reference commands

Existem três diferentes comandos de referência cruzada:

@table @code
@item @@xref
Usado para iniciar uma frase no manual impresso e em HTML com 
@w{`Veja @dots{}'} ou uma referência cruzada Info dizendo 
@samp{*Nota @var{name}: @var{node}.}.

@item @@ref
Usado dentro de, ou mais frequentemente, ao final de uma frase; produz 
apenas a referência no manual impresso e em HTML, sem ser precedida por 
`Veja' (mesmo que @code{@@xref} para Info).

@item @@pxref
Usado dentro de parênteses, ao final de uma frase, ou, do contrário, 
antes de pontuação, para fazer uma referência. Sua saída inicia com um 
`veja' escrito com letras todas minúsculas no manual impresso e em HTML, 
e um @samp{*nota} também escrito com letras todas minúsculas em Info. 
(@samp{p} é para `parênteses').
@end table

Adicionalmente, existem comandos que produzem referências a documentos 
fora do sistema Texinfo. O comando @code{@@cite} é usado para fazer 
referências a livros e manuais. @code{@@url} produz um @acronym{URL}, 
por exemplo, uma referência a uma página na Rede Mundial de 
Computadores. @code{@@inforef} é usado para fazer uma referência a um 
arquivo Info para o qual não existe manual impresso.


@node Partes de Referências Cruzadas
@section Partes de Uma Referência Cruzada
@c Capítulo 6 - Referências Cruzadas; Seção 6.3 - Partes de Uma Referência Cruzada
@cindex Cross-reference parts
@cindex Parts of a cross-reference
@anchor{Reference Syntax} @c nodo mesclado

Um comando de referência cruzada exige apenas um argumento, o qual é o 
nome do nodo para o qual se refere. Aqui está um exemplo simples:

@example
@@xref@{Nome do nodo@}.
@end example

@noindent
Em saída Info, isso produz

@example
*Nota Nome do nodo::.
@end example

@noindent
Em um manual impresso, a saída é

@quotation
Veja Seção @var{nnn} [Nome do nodo], página @var{ppp}.
@end quotation

Um comando de referência cruzada pode conter até quatro argumentos 
adicionais. Usando esses argumentos, você pode fornecer um nome de 
referência cruzada, uma descrição de tópico ou título de seção para a 
saída impressa, o nome de um arquivo diferente de manual e o nome de um 
manual diferente impresso. Para se referir a outro manual como um todo, 
o arquivo de manual e/ou o nome do manual impresso são os únicos 
argumentos exigidos (@pxref{Referenciando Um Manual Como Um Todo}).

@need 700
Aqui está um exemplo de uma referência cruzada completa de cinco partes:

@example
@group
@@xref@{Nome do nodo, Rótulo Online, Rótulo Impresso,
nome-arquivo-info, Um Manual Impresso@}, para detalhes.
@end group
@end example

@noindent
o qual produz

@example
*Nota Rótulo Online: (nome-arquivo-info)Nome do nodo,
para detalhes.
@end example

@noindent
em Info e

@quotation
Veja seção ``Rótulo Impresso'' em @i{Um Manual Impresso}, para detalhes.
@end quotation

@noindent
em um livro impresso.

Os cinco argumentos possíveis para uma referência cruzada são:

@enumerate
@item
O nome do nodo ou âncora (exigido, exceto para referência a manuais 
inteiros). Isso é a localização para onde a referência cruzada leva 
você. Em um documento impresso, a localização do nodo fornece a 
referência de página apenas para referências dentro do mesmo documento. 
Use @code{@@node} para definir o nodo (@pxref{Escrevendo um Nodo}), ou 
@code{@@anchor} (@pxref{@code{@@anchor}}).

Escreva um nome de nodo em uma referência cruzada exatamente da mesma 
maneira que na linha @code{@@node}, incluindo a mesma capitalização; do 
contrário, os formatadores podem não encontrar a referência.

@item
Um rótulo para saída online. Ele geralmente é omitido; então a descrição 
do tópico (terceiro argumento) é usado foi especificado; se também foi 
omitido, o nome do nodo é usado.

@item
Um rótulo para saída impressa. Frequentemente, isso é o título ou tópico 
da seção. Isso é usado como o nome da referência no manual impresso. Se 
omitido, o nome do nodo é usado.

@item
O nome do arquivo de manual no qual a referência está localizada, se for 
diferente o arquivo atual. Esse nome é usado por Info e por HTML.

@item
O nome de um manual impresso oriundo de um diferente arquivo Texinfo.
@end enumerate

O modelo para uma referência cruzada de cinco argumentos completa é 
semelhante a este

@example
@group
@@xref@{@var{nome-do-nodo}, @var{rótulo-online}, @var{rótulo-impresso}, 
@var{nome-arquivo-info}, @var{título-manual-impresso}@}
@end group
@end example

Espaços em branco antes ou depois das vírgulas separando esses 
argumentos são ignorados. Para incluir uma vírgula em um dos argumentos, 
use @code{@@comma@{@}} (@pxref{Inserindo Uma Vírgula}).

@cindex Comma after cross-reference
Quando do processamento com TeX, uma vírgula é automaticamente inserida 
após o número da página para referências cruzadas para dentro do mesmo 
manual, a menos que a chave de fechamento do argumento seja seguida por 
espaços não brancos (como uma vírgula ou um ponto). Isso lhe dá opção de 
ter uma vírgula lá na saída Info ou HTML. Por exemplo, 

@example
@@xref@{Outra Seção@} para mais informação
@end example

@noindent produz
@w{`Veja Outra Seção, página @var{ppp}, para mais informação'} na saída 
impressa, e
@w{@samp{*Nota Outra Seção:: para mais informação}} na saída Info.

Se uma vírgula indesejada for adicionada, siga o argumento com um 
comando como @samp{@@:}. Por exemplo, 
@w{@samp{@@xref@{Furacões@}@@: --- para os detalhes}} produz

@quotation
Veja Furacões, página @var{ppp} --- para os detalhes
@end quotation

@noindent em vez de 
@w{`Veja Furacões, página @var{ppp}, --- para os detalhes'}.

Referências cruzados com um, dois, três quatro e cinco argumentos estão 
descritas separadamente seguindo a descrição de @code{@@xref}.

@command{makeinfo} alerta quando o texto de uma referência cruzada (e 
nomes de nodo e itens de menu) contém uma construção problemática que 
interferirá com sua análise em Info. Se você não deseja ver tais 
alertas, você pode configurar a variável de personalização 
@code{INFO_SPECIAL_CHARS_WARNING} para @samp{0} 
(@pxref{Outras Variáveis de Personalização}).


@node @code{@@xref}
@section @code{@@xref}
@c Capítulo 6 - Referências Cruzadas; Seção 6.4 - @code{@@xref}

@anchor{xref}@c nome antigo
@findex xref
@cindex Cross-references using @code{@@xref}
@cindex References using @code{@@xref}

O comando @code{@@xref} gera uma referência cruzada para o início de uma 
frase.

@menu
* Um Argumento::                @code{@@xref} com um argumento.
* Dois Argumentos::             @code{@@xref} com dois argumentos.
* Três Argumentos::             @code{@@xref} com três argumentos.
* Quatro e Cinco Argumentos::   @code{@@xref} com quatro e cinco 
                                argumentos.
@end menu

@node Um Argumento
@subsection @code{@@xref} com Um Argumento
@cindex One-argument form of cross-references

A forma mais simples do @code{@@xref} pega um argumento, o nome de outro 
nodo no mesmo arquivo Texinfo.

@need 700
@noindent
Por exemplo,

@example
@@xref@{Tempestades Tropicais@}.
@end example

@noindent
produz

@example
*Nota Tempestades Tropicais::.
@end example

@noindent
em Info e

@quotation
Veja Seção 3.1 [Tempestades Tropicais], página 24.
@end quotation

@noindent
em um manual impresso.


@node Dois Argumentos
@subsection @code{@@xref} com Dois Argumentos
@cindex Two-argument form of cross-references

Com dois argumentos, o segundo é usado como um rótulo para a saída 
online.

@need 750
@noindent
O modelo é semelhante a isto:

@example
@@xref@{@var{nome-nodo}, @var{rótulo-online}@}.
@end example

@need 700
@noindent
Por exemplo,

@example
@@xref@{Efeitos Elétricos, Relâmpago@}.
@end example

@noindent
produz:

@example
*Nota Relâmpago: Efeitos Elétricos.
@end example

@noindent
em Info e

@quotation
Veja Seção 5.2 [Efeitos Elétricos], página 57.
@end quotation

@noindent
em um manual impresso, onde o nome do nodo é impresso.

O segundo argumento para referências cruzadas deve observar algumas das 
restrições para nomes de nodo (@pxref{Exigências de Linha de Nodo}). O 
problema mais comum é que dois pontos não podem ser usados, pois isso 
interfere na análise do arquivo Info.

@node Três Argumentos
@subsection @code{@@xref} com Três Argumentos
@cindex Three-argument form of cross-references

Um terceiro argumento substitui o nome de nodo na saída @TeX{}. O 
terceiro argumento deveria ser o nome da seção na saída impressa, ou, 
pelo contrário, indicar o tópico debatido pela aquela seção.

@need 750
@noindent
O modelo é semelhante a isto:

@example
@group
@@xref@{@var{nome-nodo}, @var{rótulo-online}, @var{rótulo-impresso}@}.
@end group
@end example

@need 700
@noindent
Por exemplo,

@example
@group
@@xref@{Efeitos Elétricos, Relâmpago, Trovão e Relâmpago@}, para 
detalhes.
@end group
@end example

@noindent
produz:

@example
*Nota Relâmpago: Efeitos Elétricos, para detalhes.
@end example

@noindent
em Info e

@quotation
Veja Seção 5.2 [Trovão e Relâmpago], página 57, para detalhes.
@end quotation

@noindent
em um manual impresso.

Se um terceiro argumento for dado e o segundo estiver vazio, então e 
terceiro argumento serve a ambos. (Note como duas vírgulas, lado a lado, 
marcam o segundo argumento vazio).

@example
@group
@@xref@{Efeitos Elétricos, , Trovão e Relâmpago@}, para detalhes.
@end group
@end example

@noindent
produz:

@example
*Nota Trovão e Relâmpago: Efeitos Elétricos, para detalhes.
@end example

@noindent
em Info e

@quotation
Veja Seção 5.2 [Trovão e Relâmpago], página 57, para detalhes.
@end quotation

@noindent
em um manual impresso.

O terceiro argumento para referências cruzadas deve observar algumas das 
restrições para nomes de nodo (@pxref{Exigências de Linha de Nodo}). O 
problema mais comum é que dois pontos não podem ser usados, pois isso 
interfere na análise do arquivo Info.

De um ponto de vista prático, geralmente é melhor escrever referências 
cruzadas apenas com o primeiro argumento se o nome do nodo e o título da 
seção forem iguais (ou quase), e com o primeiro e terceiro 
argumentos somente se o nome de nodo e título forem diferentes.

@findex xrefautomaticsectiontitle
Texinfo oferece uma configuração para usar o título da seção em vez dos 
nomes de nodo por padrão em referências cruzadas (um terceiro argumento 
explicitamente especificado ainda tem precedência):

@example
@@xrefautomaticsectiontitle on
@end example

Tipicamente essa linha deveria ser dada próxima do início do documento e 
usada para o manual inteiro. Porém, você pode desativá-la se você 
desejar (@code{@@xrefautomaticsectiontitle off}), por exemplo, se você 
estiver incluindo algum outro sub-documento que não tenha nomes de seção 
adequados.


@node Quatro e Cinco Argumentos
@subsection @code{@@xref} com Quatro e Cinco Argumentos
@cindex Four- and five argument forms of cross-references

Em uma referência cruzada, um quarto argumento especifica o nome de 
outro arquivo Info, diferente do arquivo no qual a referência aparece, e 
um quinto argumento especifica seu título como um manual impresso.

@need 800
@noindent
O modelo completo é:

@example
@group
@@xref@{@var{nome-nodo}, @var{rótulo-online}, @var{rótulo-impresso}, 
@var{nome-arquivo-info}, @var{título-manual-impresso}@}.
@end group
@end example

@need 700
@noindent
Por exemplo,

@example
@@xref@{Efeitos Elétricos, Relâmpago, Trovão e Relâmpago, clima, Uma 
Introdução à Meteorologia@}.
@end example

@noindent
produz esta saída em Info:

@example
*Nota Relâmpago: (clima)Efeitos Elétricos.
@end example

@noindent
Como você pode ver, o nome do arquivo Info está entre parênteses e 
precede o nome do nodo.

@noindent
Em um manual impresso, a referência se parece com isto:

@quotation
Veja seção ``Trovão e Relâmpago'' em @cite{Uma Introdução à 
Meteorologia}.
@end quotation

@noindent
O título do manual impresso é digitado como @code{@@cite}; e a 
referência não possui um número de página, pois @TeX{} não tem como 
saber para qual página uma referência se refere quando essa referência é 
para outro manual.

Próximo caso: frequentemente você deixará de fora o segundo argumento 
quando usar a versão longa de @code{@@xref}. Nesse caso, o terceiro 
argumento, a descrição do tópico, será usada como o nome da referência 
cruzada em Info. Por exemplo,

@example
@@xref@{Efeitos Elétricos, , Trovão e Relâmpago, clima, Uma Introdução à 
Meteorologia@}.
@end example

@noindent
produz:

@example
@group
*Nota Trovão e Relâmpago: (clima)Efeitos Elétricos.
@end group
@end example

@noindent
em Info e

@quotation
Veja seção ``Trovão e Relâmpago'' in @cite{Uma Introdução à 
Meteorologia}.
@end quotation

@noindent
em um manual impresso.


Próximo caso: se o nome do nodo e o título de seção forem iguais no 
outro manual, você também pode deixar de fora o título da seção. Nesse 
caso, o nome de nodo é usado em ambas as instâncias. Por exemplo, 

@example
@@xref@{Efeitos Elétricos,,, clima, Uma Introdução à Meteorologia@}.
@end example

@noindent
produz:

@example
@group
*Nota (clima)Efeitos Elétricos::.
@end group
@end example

@noindent
em Info e

@quotation
Veja seção ``Efeitos Elétricos'' em @cite{Uma Introdução à Meteorologia}.
@end quotation

@noindent
em um manual impresso.

Um caso muito incomum: você pode querer se referir a outro arquivo de 
manual que esteja dentro de um manual impresso único---quando 
múltiplos arquivos Texinfo são incorporados à mesma execução de @TeX{}, 
porém pode criar arquivos de saída Info ou HTML separados. Nesse caso, 
você precisa especificar apenas o quarto argumento e não o quinto.

Finalmente, também é permitido deixar de fora todos os argumentos, 
@emph{except} o quarto e quinto, para referenciar outro manual como um 
todo. Veja a próxima seção.

@node Referenciando Um Manual Como Um Todo
@section Referenciando Um Manual Como Um Todo
@c Capítulo 6 - Referências Cruzadas; Seção 6.5 - Referenciando Um Manual Como Um Todo
@cindex Manual, referring to as a whole
@cindex Referring to an entire manual
@anchor{Top Node Naming} @c nome antigo

Normalmente, você sempre deve nomear um nodo em uma referência 
cruzada. Entretanto, não é incomum querer referenciar outro manual como 
um todo, em vez de uma seção em particular dentro dele. Nesse caso, dar 
qualquer nome de seção é uma distração desnecessária.

Assim, com referências cruzadas a outros manuais 
(@pxref{Quatro e Cinco Argumentos}), se o primeiro argumento for ou 
@samp{Top} (escrito com a primeira letra maiúscula) ou inteiramente 
omitido, e o terceiro argumento for omitido, a saída impressa não inclui 
nome de nodo ou seção. (A saída Info inclui @samp{Top} se foi dado). Por 
exemplo, 

@example
@@xref@{Top,,, make, O Manual do GNU Make@}.
@end example

@noindent
produz:

@example
@group
*Nota (make)Top::.
@end group
@end example

@noindent
e

@quotation
Veja @cite{O Manual do GNU Make}.
@end quotation

@noindent
Os leitores Info irão para o nodo Top do manual se o nodo `Top' for 
explicitamente especificado ou não.

Também é possível (e é prática histórica) referenciar uma manual inteiro 
especificando-se o nodo `Top' e uma entrada apropriada para o terceiro 
argumento ao comando @code{@@xref}. Usando esse idioma, para fazer uma 
referência cruzada para o @cite{O Manual do GNU Make}, você poderia 
escrever: 

@example
@@xref@{Top,, Visão Geral, make, O Manual do GNU Make@}.
@end example

@noindent
o qual produz:

@example
*Nota Visão Geral: (make)Top.
@end example

@noindent
em Info e

@quotation
Veja seção ``Visão Geral'' in @cite{O Manual do GNU Make}.
@end quotation

@noindent
em um manual impresso.

Nesse exemplo, @samp{Top} é o nome do primeiro nodo e @samp{Visão Geral} 
é o nome da primeira seção do manual. Não existe convenção amplamente 
usada para nomear a primeira seção em um manual impresso; isso é apenas 
o que o manual do Make usa. Essa arbitrariedade do primeiro nome é a 
razão principal pela qual é preferível omitir o terceiro argumento em 
referências cruzadas de manual inteiro.


@node @code{@@ref}
@section @code{@@ref}
@c Capítulo 6 - Referências Cruzadas; Seção 6.6 - @ref

@anchor{ref} @c nome antigo
@findex ref
@cindex Cross-references using @code{@@ref}
@cindex References using @code{@@ref}

@code{@@ref} é aproximadamente o mesmo que @code{@@xref}, exceto que não 
gera um `Veja' na saída impressa, apenas a própria referência. Isso a 
torna útil como a última parte de uma frase.

@noindent
Por exemplo,

@cindex Hurricanes
@example
Para mais informação, @@pxref@{Isso@}, e @@ref@{Aquilo@}.
@end example

@noindent
produz em Info:

@example
Para mais informação, *nota Isso::, e *nota Aquilo::.
@end example

@noindent
e em saída impressa:

@quotation
Para mais informação, veja Seção 1.1 [Isso], página 1, e Seção 1.2 
[Aquilo], página 2.
@end quotation

O comando @code{@@ref} pode instigar os escritores a se expressarem de 
uma maneira que seja adequada para um manual impresso, porém parecerem 
estranhos no formato Info. Tenha em mente que seu público pode estar 
usando tanto o formato impresso quanto o Info. Por exemplo:

@cindex Sea surges
@example
Os surtos de mar estão descritos na @@ref@{Furacões@}.
@end example

@noindent
aparenta ok na saída impressa:

@quotation
Os surtos de mar estão descritos na Seção 6.7 [Furacões], página 72.
@end quotation

@noindent
porém, é estranho ler em Info, ``nota'' sendo um verbo:

@example
Os surtos de mar estão descritos na *nota Furacões::.
@end example


@node @code{@@pxref}
@section @code{@@pxref}
@c Capítulo 6 - Referências Cruzadas; Seção 6.7 - @pxref

@anchor{pxref} @c nome antigo
@findex pxref
@cindex Cross-references using @code{@@pxref}
@cindex References using @code{@@pxref}

O comando de referência entre parênteses, @code{@@pxref}, é 
aproximadamente o mesmo que @code{@@xref}, porém é melhor usado no final 
de uma frase ou antes de um parêntese de fechamento. O comando difere do 
@code{@@xref} em que @TeX{} digita a referência para o manual impresso 
com um `veja' escrito em letras minúsculas em vez de `Veja' escrito com 
a primeira letra maiúscula.

@noindent
Com um argumento, uma referência cruzada entre parênteses se parece com 
isto:

@cindex Flooding
@example
@dots{} tempestades causam inundações (@@pxref@{Furacões@}) @dots{}
@end example

@need 800
@noindent
o qual produz:

@example
@group
@dots{} tempestades causam inundações (*nota Furacões::) @dots{}
@end group
@end example

@noindent
em Info e

@quotation
@dots{} tempestades causam inundações (veja Seção 6.7 [Furacões], página 
72) @dots{}
@end quotation

@noindent
em um manual impresso.

Sem argumentos, uma referência cruzada entre parênteses tem este modelo:

@example
@dots{} (@@pxref@{@var{nome-nodo}, @var{nome-referência-cruzada}@}) 
@dots{}
@end example

@noindent
o qual produz

@example
@dots{} (*nota @var{nome-referência-cruzada}: @var{nome-nodo}.) @dots{}
@end example

@noindent
em Info e

@quotation
@dots{} (veja Seção @var{nnn} [@var{nome-nodo}], página @var{ppp}) 
@dots{}
@end quotation

@noindent
em um manual impresso.

@code{@@pxref} pode ser usado com até cinco argumentos, exatamente como 
@code{@@xref} (@pxref{@code{@@xref}}).

Em versões antigas de Texinfo, não era permitido escrever pontuação após 
um @code{@@pxref}, de forma que o comando poderia ser usado 
@emph{somente} antes de um parêntese de fechamento. Esse não mais é o 
caso, de forma que agora o comando pode ser usado (por exemplo) no final 
de uma frase, onde um ``'veja' escrito com letras minúsculas funciona 
melhor. Por exemplo:

@example
@dots{} Para mais informação, @@pxref@{Mais@}.
@end example

@noindent
o qual tem a seguinte saída (em Info):

@example
@dots{} Para mais informação, *nota Mais::.
@end example

Por uma questão de estilo, @code{@@pxref} é mais usado nos finais de 
frase. Embora tecnicamente o comando funcione no meio de uma frase, essa 
localização interrompe o fluxo de leitura.

@node @code{@@anchor}
@section @code{@@anchor}: Definindo Alvos Arbitrários de Referências Cruzadas
@c Capítulo 6 - Referências Cruzadas;
@c Seção 6.8 - @code{@@anchor}: Definindo Alvos Arbitrários de Referências Cruzadas

@anchor{anchor} @c nome antigo
@findex anchor
@cindex Anchors
@cindex Cross-reference targets, arbitrary
@cindex Targets for cross-references, arbitrary

Uma @dfn{âncora} é uma posição no seu documento, rotulada de forma que 
referências cruzadas possam referenciá-la, exatamente como podem a 
Nodos. Você cria uma âncora com o comando @code{@@anchor}, e dá o rótulo 
como um argumento normal delimitado por chaves. Por exemplo:

@example
Isso marca o ponto @@anchor@{x-spot@}.
@dots{}
@@xref@{x-spot,,o ponto@}.
@end example

@noindent
produz:

@example
Isso marca o ponto.
@dots{}
Veja [o ponto], página 1.
@end example

Como você pode ver, o próprio comando @code{@@anchor} não produz saída. 
Esse exemplo define uma âncora `x-spot' exatamente antes da palavra 
`ponto'. Você referenciá-la depois com um @code{@@xref} ou outro comando 
de referência cruzada, conforme mostrado (@pxref{Referências Cruzadas}).

É melhor colocar os comandos @code{@@anchor} exatamente antes da posição 
de que deseja referenciar; dessa maneira o olho do leitor é guiado ao 
texto correto quando pular para a âncora. Você pode colocar o comando 
@code{@@anchor} em uma linha própria se isso ajudar a legibilidade do 
fonte. Espaços em branco (incluindo novas linhas) são ignorados após 
@code{@@anchor}.

Os nomes de âncora e os nomes de nodos não podem conflitar. Às âncoras e 
aos nodos são dados tratamento similar de algumas maneiras; por exemplo, 
o comando @code{goto-node} recebe ou um nome de âncora ou um nome de 
nodo como argumento. (@xref{Ir para o nodo,,, info, Info}).

Também, como nomes de nodo, os nomes de âncora não podem incluir alguns 
caracteres (@pxref{Exigências de Linha de Nodo}).

@cindex Nodos, deletando ou renomeando
Por causa dessa dualidade, quando você deleta ou renomeia um nodo, 
geralmente é uma boa ideia definir um @code{@@anchor} com o nome antigo. 
Dessa maneira, quaisquer vínculos ao nodo antigo, seja originários de 
outros manuais Texinfo ou páginas web em geral, continuam funcionando. 
Você também pode fazer isso com a característica 
@file{RENAMED_NODE_FILE} de @command{makeinfo} 
(@pxref{Preservação de Link HTML Xref}). Ambos os métodos mantém 
links na web funcionando; a única diferença substantiva é que a 
definição de âncoras também torna os nomes de nodo antigos acessíveis 
quando da leitura do documento em Info.

@node @code{@@inforef}
@section @code{@@inforef}: Referências cruzadas para material unicamente Info
@c Capítulo 6 - Referências Cruzadas;
@c Seção 6.9 - @code{@@inforef}: Referências cruzadas para material unicamente Info

@anchor{inforef} @c nome antigo
@findex inforef
@cindex Referências cruzadas usando @code{@@inforef}
@cindex Referências usando @code{@@inforef}

@code{@@inforef} é usado para fazer referências cruzadas para documentos 
Info---mesmo a partir de um manual impresso. Isso pode ser porque você 
quer referenciar um texto condicional @code{@@ifinfo} 
(@pxref{Condicionais}), ou porque a saída impressa não está acessível 
(talvez porque não exista um fonte Texinfo), entre outras 
possibilidades.

O comando recebe ou dois ou três argumentos, na seguinte ordem:

@enumerate
@item
O nome do nodo.

@item
O nome da referência cruzada (opcional).

@item
O nome do arquivo Info.
@end enumerate

@noindent
O modelo é:

@example
@@inforef@{@var{nome-nodo}, @var{nome-referência-cruzada}, @var{nome-arquivo-info}@}
@end example

@need 800
@noindent
Por exemplo,

@example
@group
@@inforef@{Avançado, Comandos Info avançados, info@},
para mais informação.
@end group
@end example

@need 800
@noindent
produz (em Info):

@example
@group
*Nota Comandos Info avançados: (info)Avançado,
para mais informação.
@end group
@end example

@need 800
@noindent
e (na saída impressa):

@quotation
Veja arquivo Info @file{info}, nodo @samp{Avançado}, para mais 
informação.
@end quotation

(Esse exemplo em particular não é realístico, dado que o manual Info é 
escrito em Texinfo, de forma que todos os formatos estão disponíveis. Na 
verdade, não se sabe de nenhum manual existente unicamente Info).

O inverso de @code{@@inforef} é @code{@@cite}, que é usado para se 
referir a trabalhos impressos para os quais não existe uma forma Info. 
@xref{@code{@@cite}}.

@node @code{@@url}
@section @code{@@url}, @code{@@uref@{@var{url}[, @var{texto}][, @var{substituição}]@}}
@c Capítulo 6 - Referências Cruzadas;
@c Seção 6.10 - @url, @uref{url[, texto][, substituição]}

@anchor{uref} @c nome antigo
@findex uref
@cindex Localizador Uniforme de Recursos, refenciando a
@cindex URL, refenciando a

@cindex @code{href}, produzindo HTML
@code{@@uref} produz uma referência a um Localizador Uniforme de 
Recursos (URL). O comando recebe um argumento obrigatório, a URL, e dois 
argumentos opcionais que controlam o texto que é exibido. Em saída HTML 
e PDF, @code{@@uref} produz um link que você pode seguir. (Para 
meramente indicar uma URL sem criar um link que as pessoas possam 
seguir, use @code{@@indicateurl}, @pxref{@code{@@indicateurl}}).

@findex url
@anchor{url}
@code{@@url} é um sinônimo para @code{@@uref}. (Originalmente, 
@code{@@url} tinha o significado de @code{@@indicateurl}, porém, na 
prática, era quase sempre mal usado. Então, mudou-se o significado).
O segundo argumento, se especificado, é o texto a exibir (o padrão é a 
própria URL); em saída Info, DVI e PDF, porém não em saída HTML, a URL é 
exibida adicionalmente a esse texto.

@cindex Página de Manual, referência a
O terceiro argumento, se especificado, é o texto a exibir, mas, nesse 
caso, a URL não é exibida em qualquer formato de saída. Isso é útil 
quando o texto já está suficientemente referencial, como em uma página 
de manual. Também, se o terceiro argumento for dado, o segundo argumento 
é ignorado.

@menu
* Exemplos @code{@@url}::           Exemplos da utilização de todas as formas do @code{@@url}.
* Quebra de Linha de URL::       Como as linhas são quebradas dentro do texto do @code{@@url}.
* Formato de Saída PDF @code{@@url}::  Uma opção especial para ocultar links na saída PDF.
* Cores de PDF::              Colorindo urls e outros links na saída PDF.
@end menu

@node Exemplos @code{@@url}
@subsection Exemplos @code{@@url}
@c Capítulo 6 - Referências Cruzadas;
@c Seção 6.10 - @code{@@url}, @code{@@uref@{@var{url}[, @var{text}][, @var{replacement}]@}}
@c Subseção 6.10.1 - Exemplos @code{@@url}

@cindex @code{@@url}, exemplos de uso
@cindex URL, exemplos de exibição

Primeiro, aqui está um exemplo da forma mais simples de @code{@@url}, 
com apenas um argumento. A URL dada é tanto o alvo quanto o texto 
visível do link:

@example
O site ftp oficial do projeto GNU é @@uref@{http://ftp.gnu.org/gnu@}.
@end example

@noindent
produz:
@display
O site ftp oficial do projeto GNU é @uref{http://ftp.gnu.org/gnu}.
@end display

@subsubheading Forma de dois argumentos de @code{@@url}

Aqui está um exemplo da forma de dois argumentos:
@example
O @@uref@{http://ftp.gnu.org/gnu, site ftp oficial do projeto GNU@} 
contém programas e textos.
@end example

@noindent
o que produz:
@display
O @uref{http://ftp.gnu.org/gnu, site ftp oficial do projeto GNU} contém 
programas e textos.
@end display

@noindent
isto é, a saída Info (e @TeX{}, etc.)@: é esta:
@example
O site ftp oficial do projeto GNU (http://ftp.gnu.org/gnu) contém 
programas e textos.
@end example

@noindent
enquanto que a saída HTML é esta:
@example
O <a href="http://ftp.gnu.org/gnu">O site ftp oficial do projeto GNU</a> 
contém programas e textos.
@end example

@subsubheading Forma de três argumentos de @code{@@url}

Finalmente, um exemplo da forma de três argumentos:
@example
O programa @@uref@{/man.cgi/1/ls,,ls@} @dots{}
@end example

@noindent
o qual, exceto para HTML, produz:
@display
O programa @uref{/man.cgi/1/ls,,ls} @dots{}
@end display

@noindent
porém, com HTML:
@example
O programa <a href="/man.cgi/1/ls">ls</a> @dots{}
@end example


A propósito, algumas pessoas preferem exibir URLs no inequívoco formato:

@display
<URL:http://@var{host}/@var{path}>
@end display

@noindent
@cindex @code{<URL...>} convenção, não usada
Você pode usar essa forma no arquivo de entrada de desejar. Sentimos que 
não é necessário incluir o @samp{<URL:} e @samp{>} na saída, dado que, 
para ser útil, qualquer software que tente detectar URLs em texto já tem 
de detectá-las sem o @samp{<URL:}.


@node Quebra de Linha de URL
@subsection Quebra de Linha de URL
@c Capítulo 6 - Referências Cruzadas;
@c Seção 6.10 - @code{@@url}, @code{@@uref@{@var{url}[, @var{text}][, @var{replacement}]@}}
@c Subseção 6.10.2 - Quebra de Linha de URL

@cindex Quebra de linha, e URLs
@cindex Pontos de interrupção dentro de URLs
@TeX{} permite quebra de linha dentro de URLs com apenas alguns 
caracteres (os quais são especiais em URLs): @samp{&}, @samp{.}, 
@samp{#}, @samp{?}, e @samp{/}, (mas não entre dois caracteres 
@samp{/}). Uma pequena quantidade de espaço elástico também é inserida 
em torno desses caracteres para ajudar na quebra de linha.

Para saída HTML, os navegadores de Internet modernos também fazem quebra 
de linha dentro das URLs exibidas. Se você precisar permitir quebras em 
outros caracteres, você pode inserir @code{@@/} conforme necessário 
(@pxref{Quebras de Linha}).

@findex estilo de quebra uref
@findex uref, estilo de quebra
Por padrão, em @TeX{}, quaisquer de tais quebras em caracteres especiais 
ocorrerão após o carácter. Algumas pessoas preferem que tais quebras 
aconteçam antes do carácter especial. Isso pode ser controlado com o 
comando @code{@@urefbreakstyle} (esse comando tem efeito somente em 
@TeX{}):

@example
@@urefbreakstyle @var{como}
@end example

@noindent
onde o argumento @var{como} é uma destas palavras:

@vindex after@r{, valor para @code{@@urefbreakstyle}}
@vindex before@r{, valor para @code{@@urefbreakstyle}}
@vindex none@r{, valor para @code{@@urefbreakstyle}}
@table @samp
@item after
(O padrão). Potencialmente quebra após os caracteres especiais.
@item before
Potencialmente quebra antes dos caracteres especiais.
@item none
Não considera a quebra em caracteres especiais em absoluto; quaisquer 
quebras potenciais devem ser inseridas manualmente.
@end table


@node Formato de Saída PDF @code{@@url}
@subsection @code{@@url} Formato de Saída PDF
@c Capítulo 6 - Referências Cruzadas;
@c Seção 6.10 - @code{@@url}, @code{@@uref@{@var{url}[, @var{text}][, @var{replacement}]@}}
@c Subseção 6.10.3 - @code{@@url} Formato de Saída PDF

@cindex Saída PDF de URLs
@cindex URLs, saída PDF de
Se o propósito final de um PDF é apenas para ser visto online, talvez 
similar a HTML de alguma maneira incipiente, você pode não querer que as 
URLs sejam incluídas no texto visível (exatamente como as URLs não são 
visíveis a leitores de páginas da web). Texinfo provê uma opção 
específica de PDF para isso, a qual deve ser usado dentro de 
@code{@@tex}:

@findex \urefurlonlylinktrue
@example
@@tex
\global\urefurlonlylinktrue
@@end tex
@end example

O resultado é que @code{@@url@{http://www.gnu.org, GNU@}} tem a saída 
visível de apenas `GNU', com um alvo de link de 
@url{http://www.gnu.org}. Normalmente, a saída visível incluiria tanto o 
rótulo quanto a URL: `GNU (@url{http://www.gnu.org})'.

Essa opção somente tem efeito quando a saída PDF é produzida com o 
programa pdf@TeX{}, não com outras maneiras de obter de Texinfo para PDF 
(por exemplo, @TeX{} para DVI para PDF)@.  Consequentemente, está certo 
especificar essa opção incondicionalmente dentro de @code{@@tex}, 
conforme mostrado acima. A opção é ignorada quando DVI está sendo 
produzido.


@node Cores de PDF
@subsection Cores de PDF
@c Capítulo 6 - Referências Cruzadas;
@c Seção 6.10 - @code{@@url}, @code{@@uref@{@var{url}[, @var{text}][, @var{replacement}]@}}
@c Subseção 6.10.4 - Cores de PDF

@cindex Links coloridos, em saída PDF
@cindex Links, colorindo em saída PDF
@cindex URLs, colorindo em saída PDF

Por padrão, links de URLs e de referências cruzadas são impressos em 
preto em saída PDF. Muito ocasionalmente, entretanto, você pode querer 
destacar tais links ``vivos'' com uma cor diferente, como é feito 
comumente em páginas da web. Texinfo prove uma opção específica de PDF 
para especificar tais cores, a qual deve ser usada dentro de 
@code{@@tex}:

@findex \linkcolor
@findex \urlcolor
@example
@@tex
\global\def\linkcolor@{1 0 0@}  % vermelha
\global\def\urlcolor@{0 1 0@}   % verde
@@end tex
@end example

@code{\urlcolor} muda a cor da saída @code{@@url} (tanto a URL atual, 
quanto qualquer rótulo textual), ao passo que @code{\linkcolor} muda a 
cor para referências cruzadas para nodos, etc. As opções são 
independentes.

@cindex especificação de cor RGB
Os três valores dados devem ser números entre 0 e 1, especificando a 
quantidade de vermelho, verde e azul, respectivamente.

Essas definições somente tem efeito quando a saída PDF é produzida com o 
programa pdf@TeX{}, não com outros meio de obter de Texinfo para PDF 
(por exemplo, @TeX{} para DVI para PDF)@. Consequentemente, está certo 
especificar essa opção incondicionalmente dentro de @code{@@tex}, 
conforme mostrado acima. A opção é ignorada quando DVI está sendo 
produzido.

Não recomendamos colorir apenas por diversão; a menos que você tenha um 
motivo específico para usar cores, melhor ignorá-las.


@node @code{@@cite}
@section @code{@@cite}@{@var{referência}@}
@c Capítulo 6 - Referências Cruzadas;
@c Seção 6.11 - @code{@@cite}@{@var{referência}@}

@anchor{cite} @c nome antigo
@findex cite

Use o comando @code{@@cite} para o nome de um livro que não tenha um 
arquivo complementar Info. O comando produz itálicos no manual impresso 
e aspas no arquivo Info.

Se um livro for escrito em Texinfo, é melhor usar um comando de 
referência cruzada dado que um leitor pode facilmente seguir tal 
referência em Info. @xref{@code{@@xref}}.


@node Marcando Texto
@chapter Marcação de Texto, Palavras e Frases
@cindex Paragraph, marking text within
@cindex Marking words and phrases
@cindex Words and phrases, marking them
@cindex Marking text within a paragraph
@cindex Text, marking up
@c Capítulo 7 - Marcação de Texto, Palavras e Frases

Em Texinfo, você pode marcar palavras e frases de várias formas. Os 
formatadores Texinfo usam essa informação para determinar como destacar 
o texto. Você pode especificar, por exemplo, quando uma palavra ou frase 
é uma ocorrência definidora, uma variável metassintática ou um símbolo 
usado em um programa. Além disso, você pode enfatizar o texto, de 
diferentes maneiras.

@menu
* Indicando::                  Como indicar definições, arquivos, etc.
* Ênfase::                    Como enfatizar texto.
@end menu


@node Indicando
@section Indicando Definições, Comandos, etc.
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.

@cindex Destacando texto
@cindex Realçando texto
@cindex Indicando comandos, definições, etc.

Texinfo tem comandos para indicar exatamente a que tipo de objeto um 
pedaço de texto se refere. Por exemplo, endereços de correio eletrônico 
são marcados por @code{@@email}; dessa maneira, o resultado pode ser um 
link ``vivo'' para enviar mensagem eletrônica quando o formato de saída 
for compatível. Se o endereço de correio eletrônico simplesmente fosse 
marcado como ``imprimir em uma fonte de máquina de escrever'', isso não 
seria possível.

@menu
* Realçamento Útil::                    Realçamento provê informação útil.
* @code{@@code}::                       Indicando código de programa.
* @code{@@kbd}::                        Mostrando entrada de teclado.
* @code{@@key}::                        Especificando teclas.
* @code{@@samp}::                       Indicando uma sequência literal de caracteres.
* @code{@@verb}::                       Indicando uma sequência literal de caracteres.
* @code{@@var}::                        Indicando variáveis metassintáticas.
* @code{@@env}::                        Indicando variáveis de ambiente.
* @code{@@file}::                       Indicando nomes de arquivo.
* @code{@@command}::                    Indicando nomes de comando.
* @code{@@option}::                     Indicando nomes de opção.
* @code{@@dfn}::                        Especificando definições.
* @code{@@abbr}::                       Indicando abreviações.
* @code{@@acronym}::                    Indicando siglas.
* @code{@@indicateurl}::                Indicando uma URL de exemplo.
* @code{@@email}::                      Indicando um endereço de correio eletrônico.
@end menu


@node Realçamento Útil
@subsection Comandos de Realçamento são Úteis
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.1 - Comandos de Realçamento são Úteis

Os comandos servem a uma variedade de propósitos:

@table @code
@item @@code@{@var{código-modelo}@}
Indica texto que é um exemplo literal de um pedaço de um programa.  
@xref{@code{@@code}}.

@item @@kbd@{@var{caracteres-de-teclado}@}
Indica entrada de teclado.  @xref{@code{@@kbd}}.

@item @@key@{@var{nome-de-tecla}@}
Indica o nome convencional para uma tecla em um teclado.  
@xref{@code{@@key}}.

@item @@samp@{@var{texto}@}
Indica texto que é um exemplo literal de uma sequência de caracteres.  
@xref{@code{@@samp}}.

@item @@verb@{@var{texto}@}
Escreve uma sequência literal de caracteres.  @xref{@code{@@verb}}.

@item @@var@{@var{variável-metassintática}@}
Indica uma variável metassintática.  @xref{@code{@@var}}.

@item @@env@{@var{variável-de-ambiente}@}
Indica uma variável de ambiente.  @xref{@code{@@env}}.

@item @@file@{@var{nome-de-arquivo}@}
Indica o nome de um arquivo.  @xref{@code{@@file}}.

@item @@command@{@var{nome-de-comando}@}
Indica o nome de um comando.  @xref{@code{@@command}}.

@item @@option@{@var{nome-de-opção}@}
Indica uma opção de linha de comando.  @xref{@code{@@option}}.

@item @@dfn@{@var{termo}@}
Indica o uso definidor ou introdutório de um termo.  @xref{@code{@@dfn}}.

@item @@cite@{@var{referência}@}
Indica o nome de um livro.  @xref{@code{@@cite}}.

@item @@abbr@{@var{abreviação}@}
Indica uma abreviação, como `Comput.'.

@item @@acronym@{@var{sigla}@}
Indica uma sigla.  @xref{@code{@@acronym}}.

@item @@indicateurl@{@var{localizador-uniforme-de-recurso}@}
Indica um exemplo (isto é, não funcional) de Localizador Uniforme de 
Recurso.  @xref{@code{@@indicateurl}}.  (Use @code{@@url} 
(@pxref{@code{@@url}}) para URLs ``vivas'').

@item @@email@{@var{endereço-de-email}[, @var{texto-exibido}]@}
Indica um endereço de correio eletrônico.  @xref{@code{@@email}}.

@end table


@node @code{@@code}
@subsection @code{@@code}@{@var{código-modelo}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.2 - @code{código-modelo}

@anchor{code} @c nome antigo
@findex código

@cindex Tokens sintáticos, indicando
@cindex Símbolos sintáticos, indicando
Use o comando @code{@@code} para indicar texto que é um pedaço de um 
programa e que consiste de símbolos sintáticos inteiros. Coloque o texto 
entre chaves.

@cindex Expressões em um programa, indicando
@cindex Palavras chave, indicando
@cindex Palavras reservadas, indicando
Assim, você deveria usar @code{@@code} para uma expressão em um 
programa, para o nome de uma variável ou função usada em um programa ou 
para uma palavra chave em uma linguagem de programação.

Use @code{@@code} para nomes de comando em linguagens que reconstroem 
linguagens de programação, como Texinfo.  Por exemplo, @code{@@code} e 
@code{@@samp} são produzidos escrevendo @samp{@@code@{@@@@code@}} e 
@samp{@@code@{@@@@samp@}} no fonte Texinfo, respectivamente.

@cindex Maiúscula, não alteração @code{@@code}
É incorreto alterar a primeira letra (para maiúscula) de uma palavra 
dentro de um comando @code{@@code} quando esse aparece no início de uma 
frase. A maioria das linguagens de programação diferencia maiúsculas de 
minúsculas. Em C, por exemplo, @code{Printf} é diferente do 
identificador @code{printf}, e possivelmente é um erro de ortografia. 
Mesmo em linguagens que não diferenciam maiúsculas de minúsculas, é 
confuso para um leitor humano ver identificadores escritos de diferentes 
maneiras. Escolha uma grafia e sempre a use. Se você não quer iniciar 
uma frase com um nome de comando escrito todo em letras minúsculas, você 
deveria reorganizar a frase.

Na saída Info, @code{@@code} resulta em aspas simples em torno do texto. 
Em outros formatos, o argumento @code{@@code} é formatado em uma fonte 
de máquina de escrever (mono espaçada). Por exemplo, 

@example
A função retorna @@code@{nulo@}.
@end example

@noindent
produz isto:

@quotation
A função retorna @code{nulo}.
@end quotation

Aqui estão alguns casos para os quais é preferível @emph{não} usar 
@code{@@code}:

@itemize @bullet
@item
Para nomes de comando de shell como @command{ls} (use @code{@@command}).

@item
Para variável de ambiente como @env{TEXINPUTS} (use @code{@@env}).

@item
Para opções de shell como @samp{-c} quando tais opções são independentes 
(use @code{@@option}).

@item
Um comando inteiro de shell frequentemente parece melhor se escrito 
usando @code{@@samp} em vez de @code{@@code}. Nesse caso, a regra é 
escolher o formato mais agradável.

@item
Para uma sequência de caracteres menor que um token sintático. Por 
exemplo, se você está escrevendo sobre @samp{goto-ch}, que apenas é 
parte do nome para a função @code{goto-char} da Emacs Lisp, você deveria 
usar @code{@@samp}.

@item
Geralmente, quando escrever acerca dos caracteres usados em um token; 
por exemplo, não use @code{@@code} quando estiver explanando quais 
letras ou símbolos imprimíveis podem ser usados nos nomes das funções. 
(Use @code{@@samp}). Ainda, você deveria não usar @code{@@code} para 
marcar texto que é considerado entrada para programas, a menos que a 
entrada seja escrita em uma linguagem que seja semelhante a uma 
linguagem de programação. Por exemplo, você não deveria usar 
@code{@@code} para os comandos de teclas do GNU Emacs (use @code{@@kbd} 
em vez disso), apesar que você pode usar @code{@@code} para os nomes das 
funções da Emacs Lisp que os comandos de teclas invocam.

@end itemize

Por padrão, @TeX{} considerará quebras de linhas nos caracteres @samp{-} 
e @samp{_} dentro do @code{@@code} e comandos relacionados. Isso pode 
ser controlado com @code{@@allowcodebreaks} 
(@pxref{@code{@@allowcodebreaks}}). A saída HTML tenta respeitar isso 
para @samp{-}, mas, no final, depende do comportamento do navegador. 
Para Info, parece melhor nunca fazer tais quebras.

Para Info, as aspas são omitidas na saída do comando @code{@@code} e 
comandos relacionados (por exemplo, @code{@@kbd}, @code{@@command}), em 
contextos semelhantes a máquinas de escrever, como o ambiente 
@code{@@example} (@pxref{@code{@@example}}) e o próprio @code{@@code}, 
etc.

Para controlar quais caracteres de citação são implicitamente inseridos 
por processadores Texinfo na saída do @samp{@@code}, etc., veja as 
variáveis de personalização @code{OPEN_QUOTE_SYMBOL} e 
@code{CLOSE_QUOTE_SYMBOL} (@pxref{Outras Variáveis de Personalização}).  
Isso é separado de como são manipulados os atuais caracteres de citação 
no documento de entrada (@pxref{Inserindo Caracteres de Citação}).


@node @code{@@kbd}
@subsection @code{@@kbd}@{@var{caracteres-de-teclado}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.3 - @kbd{caracteres-de-teclado}

@anchor{kbd} @c nome antigo
@findex kbd
@cindex Entrada de teclado
@cindex Teclado, Entrada de

Use o comando @code{@@kbd} para caracteres de entrada a serem digitados 
por usuários. Por exemplo, para se referir aos caracteres @kbd{M-a}, 
escreva:

@example
@@kbd@{M-a@}
@end example

@noindent
e para se referir aos caracteres @kbd{M-x shell}, escreva:

@example
@@kbd@{M-x shell@}
@end example

@cindex Entrada de usuário
@cindex Fonte de máquina de escrever inclinada, para @code{@@kbd}
Por padrão, o comando @code{@@kbd} produz uma fonte diferente (máquina 
de escrever inclinada em vez da máquina de escrever normal), de forma 
que os usuários podem distinguir os caracteres que deveriam digitar 
daqueles que o computador exibe.

@findex kbdinputstyle
Dado que o uso de @code{@@kbd} varia de manual para manual, você pode 
controlar a fonte trocando com o comando @code{@@kbdinputstyle}. Esse 
comando não tem efeito sobre a saída Info. Escreva esse comando no 
início de uma linha com uma única palavra como um argumento, uma das 
seguintes:

@vindex distinct@r{, value for @code{@@kbdinputstyle}}
@vindex example@r{, value for @code{@@kbdinputstyle}}
@vindex code@r{, value for @code{@@kbdinputstyle}}
@table @samp
@item code
Sempre use a mesma fonte para @code{@@kbd} como @code{@@code}.
@item example
Use a fonte de distinção para @code{@@kbd} somente em @code{@@example} e 
ambientes similares.
@item distinct
(o padrão) Sempre use a fonte de distinção para @code{@@kbd}.
@end table

Você pode incorporar outro comando @@ dentro das chaves de um comando 
@code{@@kbd}. Aqui, por exemplo, está a maneira para descrever um 
comando que pressiona a tecla @key{RETURN}'':

@example
@@kbd@{r @@key@{RET@}@}
@end example

@noindent
Isso produz: @kbd{r @key{RET}}.  (O presente manual usa o padrão para 
@code{@@kbdinputstyle}).

Você também usa o comando @code{@@kbd} se estiver soletrando as letras 
que digitar; por exemplo:

@example
Para dar o comando @@code@{logout@}, digite os caracteres 
@@kbd@{l o g o u t @@key@{RET@}@}.
@end example

@noindent
Isso produz:

@quotation
Para dar o comando @code{logout}, digite os caracteres 
@kbd{l o g o u t @key{RET}}.
@end quotation

(Além disso, esse exemplo mostra que você pode adicionar espaços para 
maior clareza. Se você deseja mencionar explicitamente um caractere 
espaço como um dos caracteres da entrada, escreva @kbd{@@key@{SPC@}} 
para ele).


@node @code{@@key}
@subsection @code{@@key}@{@var{nome-de-tecla}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.4 - @key{nome-de-tecla}

@anchor{key} @c nome antigo
@findex key

Use o comando @code{@@key} para o nome convencional para uma tecla em um 
teclado, como em:

@example
@@key@{RET@}
@end example

Você pode usar o comando @code{@@key} dentro do argumento de um comando 
@code{@@kbd} quando a sequência de caracteres a ser digitada incluir uma 
ou mais teclas que sejam descritas por nome.

Por exemplo, para produzir @kbd{C-x @key{ESC}} e @kbd{M-@key{TAB}} você 
digitaria:

@example
@@kbd@{C-x @@key@{ESC@}@}
@@kbd@{M-@@key@{TAB@}@}
@end example

Aqui está uma lista dos nomes recomendados para teclas:
@cindex Nomes recomendados para teclas
@cindex Teclas, nomes recomendados
@cindex Abreviações para teclas
@cindex Teclas de controle, especificando
@cindex Teclas Meta, especificando

@quotation
@table @t
@item SPC
Espaço
@item RET
Retorno (Nova linha)
@item LFD
Alimentação de Linha (no entanto, como a maioria dos teclados hoje em 
dia não tem uma tecla de alimentação de linha, talvez seja melhor chamar 
esse caractere @kbd {C-j})
@item TAB
Tab
@item BS
Backspace
@item ESC
Escape
@item DELETE
Delete
@item SHIFT
Shift
@item CTRL
Control
@item META
Meta
@end table
@end quotation

@cindex META, tecla
Existem sutilezas para lidar com palavras como `meta' ou `ctrl', que são 
nomes de teclas modificadoras. Quando mencionar um carácter no qual a 
tecla modificadora é usada, como @kbd{Meta-a}, use o comando 
@code{@@kbd} sozinho; não use o comando @code{@@key}; porém, quando 
estiver se referindo à tecla modificadora isoladamente, use o comando 
@code{@@key}. Por exemplo, escreva @samp{@@kbd@{Meta-a@}} para produzir 
@kbd{Meta-a} e @samp{@@key@{META@}} para produzir @key{META}.

@c por Richard Matthew Stallman (rms).
Como uma convenção em manuais GNU, @code{@@key} não deveria ser usado em 
entradas de indexação.


@node @code{@@samp}
@subsection @code{@@samp}@{@var{texto}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.5 - @samp{texto}

@anchor{samp} @c nome antigo
@findex samp

Use o comando @code{@@samp} para indicar um texto que seja um exemplo 
literal ou ``amostra'' de uma sequência de caracteres em um arquivo, 
cadeia de caracteres, padrão, etc. Coloque o texto entre chaves. O 
argumento aparece entre aspas simples tanto no arquivo Info quanto no 
manual impresso; além disso, o texto é impresso em uma fonte de largura 
fixa.

@example
Para combinar @@samp@{foo@} no final da linha, use a expressão regular 
@@samp@{foo$@}.
@end example

@noindent
produz:

@quotation
Para combinar @samp{foo} no final da linha, use a expressão regular 
@samp{foo$}.
@end quotation

Sempre que estiver se referindo a caracteres únicos, você deveria usar 
@code{@@samp}, a menos que @code{@@kbd} ou @code{@@key} sejam mais 
apropriados. Além disso, você pode usar @code{@@samp} para instruções 
inteiras em C e para comandos inteiros do shell---nesse caso, 
@code{@@samp} geralmente parece melhor que @code{@@code}. Basicamente, 
@code{@@samp} é um ``pega tudo'' para o que não for coberto por 
@code{@@code}, @code{@@kbd}, @code{@@key}, @code{@@command}, etc.

Somente inclua sinais de pontuação entre chaves se eles fizerem parte da 
sequência de caracteres que você estiver especificando. Escreva sinais 
de pontuação fora das chaves se tais sinais de pontuação fizerem parte 
do texto em Inglês que envolve a sequência de caracteres. Na frase 
seguinte, por exemplo, as vírgulas e pontos estão fora das chaves:

@example
@group
Em Inglês, as vogais são @@samp@{a@}, @@samp@{e@}, @@samp@{i@}, 
@@samp@{o@}, @@samp@{u@}, e, as vezes, @@samp@{y@}.
@end group
@end example

@noindent
Isso produz:

@quotation
Em Inglês, as vogais são @samp{a}, @samp{e}, @samp{i}, @samp{o}, 
@samp{u}, e, as vezes, @samp{y}.
@end quotation


@node @code{@@verb}
@subsection @code{@@verb}@{@var{char}@var{text}@var{char}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.6 - @verb{chartextchar}

@anchor{verb} @c nome antigo
@findex verb
@cindex Texto literal interno a linha

@cindex Carácter delimitador, para literalidade
Use o comando @code{@@verb} para imprimir uma sequência literal de 
caracteres.

Semelhante ao comando @code{\verb} do @LaTeX{}, o texto literal pode ser 
delimitado usando-se qualquer carácter delimitador único. Coloque o 
texto literal, incluindo os delimitadores, entre chaves. O texto é 
impresso em uma fonte de largura fixa:

@example
Quantos caracteres de escape @@verb@{|@@|@} alguém precisa para imprimir 
esta sequência @@verb@{.@@a @@b.@@c.@} ou esta 
@@verb@{+@@'e?`@{@}!`\+@}?
@end example

@noindent
produz:

@example
Quantos caracteres de escape @verb{|@|} alguém precisa para imprimir 
esta sequência @verb{.@a @b.@c.} ou esta @verb{+@'e?`{}!`\+}?
@end example

Isso está em contraste com @code{@@samp} (veja a seção anterior), 
@code{@@code} e comandos semelhantes; naqueles casos, o argumento é 
texto normal Texinfo, onde os três caracteres @code{@@@{@}} são 
especiais, como de costume. Com @code{@@verb}, nada é especial, exceto o 
carácter delimitador que você escolher.

O próprio carácter delimitador pode aparecer dentro do texto literal, 
conforme mostrado acima. Como outro exemplo, @samp{@@verb@{...@}} 
imprime um único ponto (largura fixa).

Não é confiável usar @code{@@verb} dentro de outras construções do 
Texinfo. Em particular, não funciona usar @code{@@verb} em nada 
relacionado a referências cruzadas, como títulos de seção ou legendas de 
figuras.


@node @code{@@var}
@subsection @code{@@var}@{@var{variável-metassintática}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.7 - @var{variável-metassintática}

@anchor{var} @c nome antigo
@findex var

Use o comando @code{@@var} para indicar variáveis metassintáticas. Uma 
@dfn{variável metassintática} é algo que representa outro pedaço de 
texto. Por exemplo, você deveria usar uma variável metassintática na 
documentação de uma função para descrever os argumentos que são passados 
para aquela função.

Não use @code{@@var} para os nomes de variáveis normais em programas de 
computador. Esse são nomes específicos, de forma que @code{@@code} é 
correto para eles (@code{@@code}). Por exemplo, a variável 
@code{texinfo-tex-command} da Emacs Lisp não é uma variável 
metassintática; ela é formatada apropriadamente usando @code{@@code}.

Tampouco use @code{@@var} para variáveis de ambiente; @code{@@env} é 
correto para elas (veja a próxima seção).

O efeito de @code{@@var} no arquivo Info é modificar a escrita do 
argumento para letras todas maiúsculas. No manual impresso e saída HTML, 
o argumento é exibido em tipo inclinado.

@need 700
Por exemplo,

@example
Para deletar o arquivo @@var@{filename@}, digite 
@@samp@{rm @@var@{filename@}@}.
@end example

@noindent
produz:

@quotation
Para deletar o arquivo @var{filename}, digite @samp{rm @var{filename}}.
@end quotation

@noindent
(Note que @code{@@var} pode aparecer dentro de @code{@@code}, 
@code{@@samp}, @code{@@file}, etc.).

Escreva uma variável metassintática toda em letras minúsculas e sem 
espaços, e use hifens para torná-la mais legível. Assim, o fonte de 
Texinfo para a ilustração de como iniciar um manual Texinfo se parece 
com isto:

@example
@group
\input texinfo
@@@@settitle @@var@{nome-do-manual@}
@end group
@end example

@noindent
Isso produz:

@example
@group
\input texinfo
@@settitle @var{nome-do-manual}
@end group
@end example

Em alguns estilos de documentação, as variáveis metassintáticas são 
mostradas entre colchetes angulares, por exemplo:

@example
@dots{}, digite rm <nome_arquivo>
@end example

@noindent
Entretanto, esse não é o estilo que Texinfo usa.

@c CONSERTE-ME: adicionar uma variável de personalização? Adicionar um 
@c exemplo sobre como fazer isso para HTML?
@c (Você pode, certamente, modificar os fontes para @file{texinfo.tex} e 
@c os comandos de formatação do Info para expedir o formato do 
@c @code{<@dots{}>} se você quiser).


@node @code{@@env}
@subsection @code{@@env}@{@var{variável-de-ambiente}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.8 - @env{variável-de-ambiente}

@anchor{env} @c nome antigo
@findex env

Use o comando @code{@@env} para indicar variáveis de ambiente, conforme 
usadas por muitos Sistemas Operacionais, incluindo GNU@. Não a use para 
variáveis @emph{meta}ssintáticas; use @code{@@var} para essas (veja a 
seção anterior).

@code{@@env} é equivalente a @code{@@code} em seus efeitos. Por exemplo:

@example
A variável de ambiente @@env@{PATH@} @dots{}
@end example
@noindent
produz:
@quotation
A variável de ambiente @env{PATH} @dots{}
@end quotation


@node @code{@@file}
@subsection @code{@@file}@{@var{nome-de-arquivo}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.9 - @file{nome-de-arquivo}

@anchor{file} @c nome antigo
@findex file

Use o comando @code{@@file} para indicar texto que é o nome de um 
arquivo, buffer, ou diretório, ou é o nome de um nodo em Info. Você 
também pode usar o comando para extensões de nome de arquivo. Não use 
@code{@@file} para símbolos em uma linguagem de programação; use 
@code{@@code}.

@code{@@file} é equivalente a @code{code} em seus efeitos. Por exemplo,

@example
Os arquivos @@file@{.el@} estão no diretório 
@@file@{/usr/local/emacs/lisp@}.
@end example

@noindent
produz:

@quotation
Os arquivos @file{.el} estão no diretório @file{/usr/local/emacs/lisp}.
@end quotation


@node @code{@@command}
@subsection @code{@@command}@{@var{nome-de-comando}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.10 - @command{nome-de-comando}

@anchor{command} @c nome antigo
@findex comando
@cindex Nomes de comando, indicando
@cindex Nomes de programa, indicando

Use o comando @code{@@command} para indicar os nomes de comando, como 
@command{ls} ou @command{cc}.

@code{@@command} é equivalente a @code{@@code} em seus efeitos. Por 
exemplo:

@example
O comando @@command@{ls@} lista o conteúdo de diretórios.
@end example
@noindent
produz:
@quotation
O comando @command{ls} lista o conteúdo de diretórios.
@end quotation

Você deveria escrever o nome de um programa na fonte de texto comum, em 
vez de usar @code{@@command}, se considerá-lo uma nova palavra em 
inglês, como `Emacs' or `Bison'.

Quando escrever uma invocação inteira de comando de shell, como em 
@samp{ls -l}, você deveria usar ou @code{@@samp} ou @code{@@code} a seu 
critério.


@node @code{@@option}
@subsection @code{@@option}@{@var{nome-de-opção}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.11 - @option{nome-de-opção}

@anchor{option} @c nome antigo
@findex opção

Use o comando @code{@@option} para indicar uma opção de linha de 
comando; por exemplo, @option{-l} ou @option{--version} ou 
@option{--output=@var{filename}}.

@code{@@option} é equivalente a @code{@@code} em seus efeitos. Por 
exemplo:

@example
A opção @@option@{-l@} produz uma listagem longa.
@end example
@noindent
produz:
@quotation
A opção @option{-l} produz uma listagem longa.
@end quotation


@node @code{@@dfn}
@subsection @code{@@dfn}@{@var{termo}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.12 - @dfn{termo}

@anchor{dfn} @c nome antigo
@findex dfn

Use o comando @code{@@dfn} para identificar o uso introdutório ou 
definidor de um termo técnico. Use o comando somente em passagens cujo 
propósito é introduzir um termo o qual será usado novamente ou o qual o 
leitor deve saber. A simples menção de um termo pela primeira vez não 
merece um @code{@@dfn}. O comando gera itálicos no manual impresso, e 
aspas duplas no arquivo Info. Por exemplo:

@example
Livrar-se de um arquivo chama-se @@dfn@{deletando@}.
@end example

@noindent
produz:

@quotation
Livrar-se de um arquivo chama-se @dfn{deletando}.
@end quotation

Como regra geral, uma frase contendo a ocorrência definidora de um termo 
deve ser uma definição do termo. A frase não precisa dizer 
explicitamente que é uma definição, mas deve conter a informação de uma 
definição---ela deve deixar claro o significado.


@node @code{@@abbr}
@subsection @code{@@abbr}@{@var{abreviação}[, @var{significado}]@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.13 - @abbr{abreviação[, significado]}

@anchor{abbr} @c nome antigo
@findex abbr

@cindex Abreviaturas, marcação
Você pode usar o comando @code{@@abbr} para abreviações gerais. A 
abreviação é dada como o argumento único entre chaves, como em 
@samp{@@abbr@{Comput.@}}. Por uma questão de estilo, ou para 
abreviações específicas, você pode preferir omitir pontos, como em 
@samp{@@abbr@{Mr@} Stallman}.

@code{@@abbr} aceita um segundo argumento opcional, destinado a ser 
usado para o significado da abreviação.

Se a abreviação finalizar com uma letra minúscula e um ponto, e não 
estiver no final de uma frase, e não tiver um segundo argumento, 
lembre-se de usar o comando @code{@@.} (@pxref{Finalizando Uma Frase}) 
para obter o espaçamento correto. Entretanto, você não tem de usar 
@code{@@.} dentro da própria abreviação; Texinfo automaticamente assume 
que pontos dentro da abreviação não finalizam uma frase.

@cindex marcações @code{<abbr>} e @code{<abbrev>}
Em @TeX{} e na saída Info, o primeiro argumento é impresso como está; se 
o segundo argumento estiver presente, ele é impresso entre parênteses 
após a abreviação. Em HTML, a marcação @code{<abbr>} é usada; em 
Docbook, a marcação @code{<abbrev>} é usada. Por exemplo:

@example
@@abbr@{Comput. J., Jornal do Computador@}
@end example

@noindent
produz:

@display
@abbr{Comput. J., Jornal do Computador}
@end display

Para abreviações que consistem de todas as letras maiúsculas, você pode 
preferir usar o comando @code{@@acronym}. Veja a próxima seção para mais 
sobre o uso desses dois comandos.


@node @code{@@acronym}
@subsection @code{@@acronym}@{@var{sigla}[, @var{significado}]@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.14 - @acronym{sigla[, significado] }

@anchor{acronym} @c nome antigo
@findex sigla

@cindex NASA, como sigla
@cindex Siglas, marcando
Você pode usar o comando @code{@@acronym} para abreviações escritas 
todas com letras maiúsculas, como `@acronym{NASA}'. A abreviação é dada 
como o único argumento entre chaves, como em @samp{@@acronym@{NASA@}}. 
Por uma questão de estilo, ou para siglas específicas, você pode 
preferir usar pontos, como em @samp{@@acronym@{N.A.S.A.@}}.

@code{@@acronym} aceita um segundo argumento opcional, destinado a ser 
usado para o significado da sigla.

Se a sigla estiver no final de uma frase, e se não existir segundo 
argumento, lembre-se de usar o @code{@@.} ou comando similar 
(@pxref{Finalizando Uma Frase}) para obter o espaçamento correto.

@cindex marcação @code{<acronym>}
Em @TeX{}, a sigla é impressa em fonte ligeiramente menor. Na saída 
Info, o argumento é impresso como está. Em qualquer formato, se o 
segundo argumento estiver presente, ele é impresso entre parênteses após 
a sigla. Em HTML e Docbook a marcação @code{<acronym>} é usada.

Por exemplo (dado que GNU é uma sigla recursiva, nós usamos 
@code{@@acronym} recursivamente):

@example
@@acronym@{GNU, @@acronym@{GNU@} Não é Unix@}
@end example

@noindent
produz:

@display
@acronym{GNU, @acronym{GNU} Não é Unix}
@end display

@cindex Nomes de família, todas letras maiúsculas
Em algumas circunstâncias, é convencional imprimir nomes de família em 
letras maiúsculas. Não use @code{@@acronym} para isso, pois um nome não 
é uma sigla. Use @code{@@sc} (@pxref{Capitalização Pequena}).

@code{@@abbr} e @code{@@acronym} são comandos intimamente relacionados: 
ambos sinalizam para o leitor que uma forma abreviada está sendo usada, 
e possivelmente dá um significado. Ao escolher usar esses dois comandos, 
por favor tenha o seguinte em mente.

@itemize @minus
@item
No uso comum do Inglês, siglas são um subconjunto de abreviações: elas 
incluem palavras pronunciáveis como `@acronym{NATO}', `radar' e `snafu'; 
algumas fontes também incluem siglas de siglas, como `Usenet'; híbridas, 
como `@acronym{SIGGRAPH}'; e inicialismos impronunciáveis como 
`@acronym{FBI}'.

@item
Em Texinfo, uma sigla (mas não uma abreviação) deveria consistir apenas 
de letras maiúsculas e pontos, não minúsculas.

@item
Em @TeX{}, uma sigla (mas não uma abreviação) é impressa em uma fonte 
ligeiramente menor.

@item
Alguns navegadores colocam uma borda inferior pontilhada em abreviações, 
mas não em siglas.

@item
Geralmente é bastante difícil e/ou demorado usar consistentemente 
@code{@@acronym} para todas as sequências de letras maiúsculas. Além do 
mais, parece estranho para algumas siglas estar no tamanho normal da 
fonte e outras estarem menores. Assim, uma abordagem mais simples que 
você pode querer considerar é evitar @code{@@acronym} e apenas digitar 
tudo como texto normal em todas maiúsculas: @samp{GNU}, produzindo a 
saída `GNU'.

@item
Em geral, não é essencial usar quaisquer desses comandos para todas as 
abreviações; use seu bom senso. O texto é perfeitamente legível sem tais 
comandos.
@end itemize


@node @code{@@indicateurl}
@subsection @code{@@indicateurl}@{@var{localizador-uniforme-de-recurso}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.15 - @indicateurl{localizador-uniforme-de-recurso}

@anchor{indicateurl} @c nome antigo
@findex indicateurl
@cindex Localizador Uniforme de Recurso, indicando
@cindex URL, indicando

Use o comando @code{@@indicateurl} para indicar um Localizador Uniforme 
de Recurso na Internet. Isso é puramente para propósitos de marcação e 
não produz um link que você possa seguir (use o comando @code{@@url} ou 
@code{@@uref} para isso, @pxref{@code{@@url}}). @code{@@indicateurl} é 
útil para URLs que não existem atualmente. Por exemplo:

@example
Por exemplo, a URL poderia ser @@indicateurl@{http://example.org/path@}.
@end example

@noindent
que produz:

@display
Por exemplo, a URL poderia ser @indicateurl{http://example.org/path}.
@end display

A saída oriunda de @code{@@indicateurl} é mais ou menos como aquela de 
@code{@@samp} (@pxref{@code{@@samp}}).


@node @code{@@email}
@subsection @code{@@email}@{@var{endereço-de-email}[, @var{texto-exibido}]@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.16 - @email{endereço-de-email[, texto-exibido]}

@anchor{email} @c nome antigo
@findex email

Use o comando @code{@@email} para indicar um endereço de correio 
eletrônico. O comando recebe um argumento obrigatório, o endereço, e um 
argumento opcional, o texto a exibir (o padrão é o próprio endereço).

@cindex Link para EMail
Em Info, o endereço é mostrado entre colchetes angulares (sinal de 
``maior que'' e ``menor que''), precedido pelo texto a ser exibido, se 
houver. Em @TeX{}, os colchetes angulares são omitidos. Na saída HTML, 
@code{@@email} produz um link @samp{mailto} que geralmente abre uma 
janela de composição de correspondência. Por exemplo:

@example
Mande relatórios de bugs para @@email@{bug-texinfo@@@@gnu.org@}, 
sugestões para o @@email@{bug-texinfo@@@@gnu.org, algum lugar@}.
@end example

@noindent
produz:

@display
Mande relatórios de bugs para @email{bug-texinfo@@gnu.org},
sugestões para o @email{bug-texinfo@@gnu.org, algum lugar}.
@end display


@node Ênfase
@section Enfatizando Texto
@cindex Enfatizando Texto
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.2 - Enfatizando Texto

Normalmente, Texinfo modifica a fonte para marcar palavras no texto de 
acordo com a categoria a que as palavras pertencem; um exemplo é o 
comando @code{@@code}. Na maioria das vezes, essa é a melhor maneira de 
marcar palavras. Entretanto, as vezes, você desejará enfatizar texto sem 
indicar uma categoria. Texinfo tem dois comandos para fazer isso. Além 
disso, Texinfo tem vários comandos que especificam a fonte na qual o 
texto será produzido. Esses comandos não tem efeito em Info e apenas um 
deles, o comando @code{@@r}, tem algum uso regular.

@menu
* @code{@@emph @@strong}::       Como enfatizar texto em Texinfo.
* Capitalização Pequena::        Como utilizar a fonte capitalização pequena.
* Fontes::                       Comandos variados de fonte para saída impressa.
@end menu


@node @code{@@emph @@strong}
@subsection @code{@@emph}@{@var{texto}@} e @code{@@strong}@{@var{texto}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.2 - Enfatizando Texto
@c Subseção 7.2.1 - @emph{texto} e @strong{texto}

@anchor{emph & strong} @c nome antigo
@findex comando ``emph''
@findex comando ``strong''
@cindex Enfatizando Texto, fonte para

Os comandos @code{@@emph} e @code{@@strong} são para ênfase; 
@code{@@strong} é o mais forte. Em saída impressa, @code{@@emph} produz 
@emph{itálico} e @code{@@strong} produz @strong{negrito}. Na saída Info, 
@code{@@emph} envolve o texto com sublinhados (@samp{_}), e 
@code{@@strong} coloca asteriscos em volta do texto.

Por exemplo,

@example
@group
@@strong@{Cuidado:@} @@samp@{rm *@} remove @@emph@{todos@} os arquivos normais.
@end group
@end example

@noindent
produz o seguinte:

@quotation
@strong{Cuidado}: @samp{rm * .[^.]*} remove @emph{todos} os arquivos normais.
@end quotation

O comando @code{@@strong} raramente é usado, exceto para marcar que é, 
na verdade, um elemento tipográfico, como a palavra `Cuidado' no exemplo 
anterior.

@quotation Cuidado
Não use @code{@@strong} com a palavra @samp{Nota} seguida por um espaço; 
Info confundirá a combinação para uma referência cruzada. Use uma frase, 
como @strong{Por favor note} ou @strong{Cuidado} em vez disso, ou o 
argumento opcional para @code{@@quotation}---@samp{Nota} é permitido lá.
@end quotation


@node Capitalização Pequena
@subsection @code{@@sc}@{@var{texto}@}: A Fonte de Capitalização Pequena
@cindex Fonte de capitalização pequena
@findex sc @r{(fonte de capitalização pequena)}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.2 - Enfatizando Texto
@c Subseção 7.2.2 - @sc{texto}: A Fonte de Capitalização Pequena

Use o comando @samp{@@sc} para configurar texto em 
@sc{uma fonte de capitalização pequena} (onde for possível). Escreva o 
texto que você quer que esteja em capitalização pequena entre chaves e 
em letras minúsculas, como isto:

@example
Richard @@sc@{Stallman@} commenc@'{e} GNU.
@end example

@noindent
Isso produz:

@display
Richard @sc{Stallman} commenc@'{e} GNU.
@end display

Como mostrado aqui, nós recomendamos reservar @code{@@sc} para casos 
especiais onde você desejar capitalização pequena tipográfica; nomes de 
família são um desses, especialmente em outros idiomas que não o Inglês, 
embora não existam regras rígidas e rápidas acerca de tais coisas.

@cindex marcação @code{<small>}
@TeX{} escreve qualquer letra maiúscula entre as chaves de um comando 
@code{@@sc} em letras maiúsculas de tamanho real; apenas letras 
minúsculas são impressas na fonte de capitalização pequena. Na saída 
Info, o argumento para @code{@@sc} é impresso todo em maiúsculas. Em 
HTML, o argumento é colocado em letras maiúsculas e a saída marcada com 
a marcação @code{<small>} para reduzir o tamanho da fonte, dado que HTML 
não pode facilmente representar capitalizações pequenas verdadeiras.

No geral, recomendamos o uso de letras maiúsculas e minúsculas padrão 
sempre que possível.


@node Fontes
@subsection Fontes para Impressão
@cindex Fontes para impressão
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.2 - Enfatizando Texto
@c Subseção 7.2.3 - Fontes para Impressão

@findex comando fonttextsize
@cindex Tamanho de fonte, reduzindo
@cindex Reduzindo tamanho de fonte
@cindex Fontes menores
O Texinfo fornece um comando para mudar o tamanho da fonte do corpo 
principal na saída @TeX{} para um documento: @code{@@fonttextsize}. O 
comando não tem efeito em outra saída. O comando recebe um argumento 
único no restante da linha, o qual deve ser ou @samp{10} ou @samp{11}. 
Por exemplo:

@example
@@fonttextsize 10
@end example

@cindex Custo de impressão, reduzindo
O efeito é reduzir a fonte do corpo para um tamanho de 10@dmn{pt} (o 
padrão é 11@dmn{pt}). Fontes para outros elementos,  tais como seções e 
capítulos, são reduzidas de acordo. Isso somente deveria ser usado em 
conjunto com @code{@@smallbook} (@pxref{@code{@@smallbook}}) ou similar, 
dado que fontes de 10@dmn{pt} em papel padrão (8.5x11 or A4) são muito 
pequenas. Uma razão para usar esse comando é para economizar páginas, e, 
assim, custo de impressão, para livros físicos.

Texinfo atualmente não tem comandos para alternar a família da fonte a 
usar, ou comandos de alteração de tamanho mais gerais.

Texinfo também fornece vários comandos de fonte que especificam as 
mudanças de fonte no manual impresso e (quando possível) na saída HTML. 
Esses comandos não tem efeito em Info. Todos os comandos se aplicam a um 
argumento a seguir cercados por chaves.

@table @code
@item @@b
@findex b @r{(negrito)}
@cindex Negrito
seleciona @b{negrito};

@item @@i
@findex i @r{(itálico)}
@cindex Italic font
seleciona uma fonte @i{itálico};

@item @@r
@findex r @r{(fonte roman)}
@cindex Fonte roman
@cindex Fonte padrão
seleciona uma fonte @r{roman}, que é a fonte usual na qual o texto é 
impresso. Ela pode ou não ser serif.

@item @@sansserif
@findex sansserif @r{(fonte sans serif)}
@cindex Fonte sans serif
seleciona uma fonte @sansserif{sans serif};

@item @@slanted
@findex slanted @r{(fonte inclinada)}
@cindex Fonte inclinada
@cindex Fonte oblíqua
seleciona uma fonte @slanted{inclinada};

@item @@t
@findex t @r{(fonte de máquina de escrever)}
@cindex Fonte mono espaçada
@cindex Fonte de tamanho fixo
@cindex Fonte de máquina de escrever
seleciona a fonte de @t{tamanho fixo}, estilo máquina de escrever usada 
por @code{@@code};

@end table

(Os comandos com nomes mais longos foram inventados muito mais tarde que 
os outros, quando não parecia desejável usar nomes muito curtos para 
recursos tão pouco necessários).

@cindex marcação @code{<lineannotation>} do Docbook
O comando @code{@@r} pode ser útil em ambientes de exemplo, para 
escrever comentários na fonte roman padrão em vez da fonte de largura 
fixa. Isso fica melhor na saída impressa, e produz uma marca 
@code{<lineannotation>} na saída do Docbook.

Por exemplo,

@example
@group
@@lisp
(+ 2 2)    ; @@r@{Adiciona dois mais dois.@}
@@end lisp
@end group
@end example

@noindent
produz

@lisp
(+ 2 2)    ; @r{Adiciona dois mais dois.}
@end lisp

O comando @code{@@t} pode ocasionalmente ser útil para produzir saída em 
uma fonte de máquina de escrever onde isso for suportado (por exemplo, 
HTML e PDF), mas nenhuma distinção é necessária em Info ou texto plano: 
@code{@@t@{foo@}} produz @t{foo}, cf. @code{@@code@{foo@}} produzindo 
@code{foo}.

Em geral, os outros comandos de fonte provavelmente não são úteis; eles 
existem principalmente para possibilitar documentar a funcionalidade de 
efeitos específicos de fontes, como no @TeX{} e pacotes relacionados.


@node Citações e Exemplos
@chapter Citações e Exemplos
@c Capítulo 8 - Citações e Exemplos

Citações e exemplos são blocos de texto que consistem em um ou mais 
parágrafos inteiros que são separados da maior parte do texto e tratados 
de forma diferente. Eles geralmente são recuados na saída.

@findex fim
Em Texinfo, você sempre inicia uma citação ou exemplo escrevendo um 
comando @@ sozinho no início de uma linha, e o finaliza escrevendo um 
comando @code{@@end} que também está sozinho no início de uma linha. Por 
exemplo, você inicia um exemplo escrevendo @code{@@example} no início de 
uma linha e finaliza o exemplo escrevendo @code{@@end example} sozinho, 
no início daquela linha, e somente com um espaço entre o @code{@@end} e 
o @code{example}.

@menu
* Comandos de Inclusão de Blocos::    Construtores diferentes para propósitos diferentes.
* @code{@@quotation}::                Escrevendo uma citação.
* @code{@@indentedblock}::            Bloco de texto recuado a esquerda.
* @code{@@example}::                  Escrevendo um exemplo em uma fonte de largura fixa.
* @code{@@verbatim}::                 Escrevendo um exemplo de literal.
* @code{@@verbatiminclude}::          Incluindo um arquivo de literal.
* @code{@@lisp}::                     Ilustrando código Lisp.
* @code{@@small@dots{}}::             Exemplos em uma fonte menor.
* @code{@@display}::                  Escrevendo um exemplo na fonte atual.
* @code{@@format}::                   Escrevendo um exemplo sem margens estreitadas.
* @code{@@exdent}::                   Desfazer recuo em uma linha.
* @code{@@flushleft @@flushright}::   Empurrando texto alinhado à esquerda ou alinhado à direita.
* @code{@@raggedright}::              Evitando justificação à direita.
* @code{@@noindent}::                 Prevenindo recuo de parágrafo.
* @code{@@indent}::                   Forçando recuo de parágrafo.
* @code{@@cartouche}::                Desenhando retângulos por todos os lados ao redor do texto.
@end menu


@node Comandos de Inclusão de Blocos
@section Comandos de Inclusão de Blocos
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.1 - Comandos de Inclusão de Blocos

Aqui está um resumo de comandos que contém blocos de texto, também 
conhecidos como @dfn{ambientes}. Eles estão mais explicados nas próximas 
seções.

@table @code
@item @@quotation
Indica texto que é citado. O texto é preenchido, recuado (a partir de 
ambas as margens) , e impresso em uma fonte roman por padrão.

@item @@indentedblock
Como @code{@@quotation}, mas o texto é recuado apenas a esquerda.

@item @@example
Ilustra código, comandos, e afins. O texto é impresso em uma fonte de 
largura fixa, e recuado, mas não preenchido.

@item @@lisp
Como @code{@@example}, mas especificamente para ilustrar código da Lisp. 
O texto é impresso em uma fonte de largura fixa, e recuado, mas não 
preenchido.

@item @@verbatim
Marca um pedaço de texto que é para ser impresso literalmente; nenhuma 
substituição de carácter é feita e todos os comandos são ignorados, até 
o próximo @code{@@end verbatim}. O texto é impresso em uma fonte de 
largura fixa, e não é recuado ou preenchido. Espaços extra e linhas em 
branco são significantes, e TABs são expandidos.

@item @@display
Exibe texto ilustrativo. O texto é recuado, mas não preenchido, e 
nenhuma fonte é selecionada (então, por padrão, a fonte ŕ roman).

@item @@format
Como @code{@@display} (o texto não é preenchido e nenhuma fonte é 
selecionada), mas o texto não é recuado.

@item @@smallquotation
@itemx @@smallindentedblock
@itemx @@smallexample
@itemx @@smalllisp
@itemx @@smalldisplay
@itemx @@smallformat
Esses comandos @code{@@small...} são semelhantes aos seus equivalentes 
não-small, exceto que emitem texto em um tamanho de fonte menor, quando 
possível.

@item @@flushleft
@itemx @@flushright
O texto não é preenchido, mas é alinhado com a margem esquerda ou 
direita, respectivamente.

@item @@raggedright
O texto é preenchido, mas justificado apenas a esquerda, deixando a 
margem direita irregular.

@item @@cartouche
Realça o texto, geralmente um exemplo ou uma citação, desenhando uma 
caixa com cantos arredondados ao redor.
@end table

O comando @code{@@exdent} é usado dentro das construções acima para 
desfazer o recuo de uma linha.

O comando @code{@@noindent} pode ser usado após uma das construções 
acima (ou no início de qualquer parágrafo) para prevenir que o texto 
seguinte seja recuado como um novo parágrafo.


@node @code{@@quotation}
@section @code{@@quotation}: Citações de Bloco
@anchor{quotation} @c nome antigo
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.2 - @quotation: Citações de Bloco

@cindex Citações
@findex citação

O texto de uma citação é processado como texto normal (fonte regular, 
texto é preenchido), exceto que:

@itemize @bullet
@item
ambas as margens esquerda e direita estão mais próximas ao centro da 
página, de forma que a totalidade da citação é recuada;

@item
as primeiras linhas de parágrafos não são recuadas mais que outras 
linhas; e

@item
um comando @code{@@author} pode ser dado para especificar o autor da 
citação.
@end itemize

@quotation
Este é um exemplo de texto escrito entre um comando @code{@@quotation} e 
um comando @code{@@end quotation}. Um comando @code{@@quotation} é usado 
com frequência para indicar texto que é extraído de outro trabalho 
impresso (real ou hipotético).
@end quotation

Escreva um comando @code{@@quotation} como texto sozinho em uma linha. 
Essa linha desaparecerá da saída. Marque o final da citação com uma 
linha iniciando com e contendo somente @code{@@end quotation}. A linha 
do @code{@@end quotation} também desaparecerá da saída.

@code{@@quotation} aceita um argumento opcional, dado no restante da 
linha. Esse texto, se presente, é incluído no início da citação, em 
negrito, ou, caso contrário, enfatizado, e seguido com um @samp{:}. Por 
exemplo:

@example
@@quotation Nota
Isto é 
um foo.
@@end quotation
@end example

@noindent
produz:

@quotation Nota
Isto é 
um foo.
@end quotation

Se o argumento do @code{@@quotation} for uma destas palavras do Inglês 
(não diferencia maiúsculas de minúsculas):

@example
Caution  Important  Note  Tip  Warning
@end example

@cindex marcação @code{<caution>} do Docbook
@cindex marcação @code{<important>} do Docbook
@cindex marcação @code{<note>} do Docbook
@cindex marcação @code{<tip>} do Docbook
@cindex marcação @code{<warning>} do Docbook
@cindex marcação @code{<blockquote>} do HTML
@noindent
então a saída do Docbook usa marcações especiais correspondentes 
(@code{<note>}, etc.)@: em vez do padrão @code{<blockquote>}. A saída 
HTML sempre usa @code{<blockquote>}.

Se o autor da citação for especificado no bloco @code{@@quotation} com o 
comando @code{@@author}, uma linha com o nome do autor é exibida após a 
citação:

@example
@@quotation

As pessoas as vezes me perguntam se é pecado na Igreja do Emacs usar vi. 
Usar uma versão livre do vi não é pecado; é uma penitência. Então, feliz 
hacking.

@@author Richard Stallman
@@end quotation
@end example

@noindent
produz

@quotation
As pessoas as vezes me perguntam se é pecado na Igreja do Emacs usar vi. 
Usar uma versão livre do vi não é pecado; é uma penitência. Então, feliz 
hacking.

@author Richard Stallman
@end quotation

@findex citaçãopequena
Texinfo também fornece um comando @code{@@smallquotation}, o qual é 
exatamente como @code{@@quotation}, mas usa um tamanho de fonte menor 
onde for possível. @xref{@code{@@small@dots{}}}.


@node @code{@@indentedblock}
@section @code{@@indentedblock}: Blocos recuados de texto
@cindex Blocos recuados de texto
@findex blocorecuado
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.3 - @indentedblock: Blocos recuados de texto

O ambiente @code{@@indentedblock} é semelhante ao @code{@@quotation}, 
exceto que o texto somente é recuado a esquerda (e não existe argumento 
opcional para um autor). Assim, a fonte do texto permanece inalterada, e 
o texto é reunido e preenchido como de costume, mas a margem esquerda é 
aumentada. Por exemplo:

@indentedblock
Este é um exemplo de texto escrito entre um comando 
@code{@@indentedblock} e um comando @code{@@end indentedblock}. O 
ambiente @code{@@indentedblock} pode conter qualquer texto ou outros 
comandos desejados.
@end indentedblock

Isso é escrito no fonte do Texinfo como:

@example
@@indentedblock
Este é um exemplo ...
@@end indentedblock
@end example

@findex blocorecuadopequeno
Texinfo também fornece um comando @code{@@smallindentedblock}, que é 
exatamente como @code{@@indentedblock}, mas usa um tamanho de fonte 
menor onde possível. @xref{@code{@@small@dots{}}}.


@node @code{@@example}
@section @code{@@example}: Texto de Exemplo
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.4 - @example: Texto de Exemplo

@anchor{example} @c nome antigo
@findex exemplo
@cindex Exemplos, formatando
@cindex Formatando exemplos

O ambiente @code{@@example} é usado para indicar um exemplo que não é 
parte do texto em execução, como uma saída ou entrada de computador. 
Escreva um comando @code{@@example} sozinho no início de uma linha. 
Marque o final do exemplo com um comando @code{@@end example}, também 
escrito sozinho no início de uma linha.

Um ambiente @code{@@example} tem as seguintes características:

@itemize
@item 
Cada linha no arquivo de entrada é uma linha na saída; isto é, o texto 
fonte não é preenchido como normalmente é.
@item 
Linhas em branco e espaços extras são significantes.
@item 
A saída é recuada.
@item 
A saída usa uma fonte de largura fixa.
@item 
Os comandos do Texinfo @emph{são} expandidos; se você deseja que a saída 
seja a entrada literalmente, use o ambiente @code{@@verbatim} 
(@pxref{@code{@@verbatim}}).
@end itemize

Por exemplo,

@example
@@example
cp foo @@var@{dest1@}; \
 cp foo @@var@{dest2@}
@@end example
@end example

@noindent
produz:

@example
cp foo @var{dest1}; \
 cp foo @var{dest2}
@end example

As linhas contendo @code{@@example} e @code{@@end example} desaparecerão 
da entrada. Para fazer com que a saída apareça bem, você deveria colocar 
uma linha em branco antes do @code{@@example} e outra linha em branco 
após o @code{@@end example}. As linhas em branco dentro do 
@code{@@example} inicial e do @code{@@end example} final, por outro 
lado, aparecem na saída.

@quotation Cuidado
Não use ``tabs'' nas linhas de um exemplo! (Ou em qualquer outro lugar 
em Texinfo, exceto em ambientes ``verbatim''). O @TeX{} trata os 
``tabs'' como espaços simples, e isso não é o que parecem. Em Emacs, 
você pode usar @kbd{M-x untabify} para converter ``tabs'' em uma região 
para espaços múltiplos.
@end quotation

Os exemplos frequentemente estão, falando logicamente, ``no meio'' de um 
parágrafo, e o texto que continua após não deveria ser recuado, como no 
exemplo acima. O comando @code{@@noindent} evita que um pedaço de texto 
seja recuado como se fosse um parágrafo novo (@pxref{@code{@@noindent}}.

Se você deseja incorporar fragmentos de código em frases, em vez de 
exibi-los, use o comando @code{@@code} ou seus parentes 
(@pxref{@code{@@code}}).

Se você quer escrever um ``comentário'' em uma linha de um exemplo na 
fonte roman normal, você pode usar o comando @code{@@r} (@pxref{Fontes}).


@node @code{@@verbatim}
@section @code{@@verbatim}: Texto Literal
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.5 - @verbatim: Texto Literal

@anchor{verbatim} @c nome antigo
@findex verbatim
@cindex Ambiente verbatim

Use o ambiente @code{@@verbatim} para a impressão de texto que pode 
conter caracteres especiais ou comandos que não deveriam ser 
interpretados, como saída ou entrada de computador (@code{@@example} 
interpreta seu texto como comandos regulares do Texinfo). Isso é útil 
especialmente para incluir arquivos gerados automaticamente em um manual 
Texinfo.

Geralmente, a saída será exatamente a mesma que a entrada. Nenhuma 
substituição de caracteres é feita, por exemplo, todas as linhas em 
branco e espaços são significantes, incluindo ``tabs''. No manual 
impresso, o texto é produzido em uma fonte de largura fixa, e não 
recuado ou preenchido.

Escreva um comando @code{@@verbatim} sozinho no início de uma linha. 
Essa linha desaparecerá da saída. Marque o final do bloco ``verbatim'' 
com um comando @code{@@end verbatim}, também escrito sozinho no início 
de uma linha. O @code{@@end verbatim} também desaparecerá da saída.

Por exemplo:
@c oops, tive que enganar isso um pouco: não se pode usar @end verbatim 
@c dentro de @verbatim

@example
@exdent @t{@@verbatim}
@exdent @t{@{}
@exdent @key{TAB}@t{@@command com caracteres estranhos: @@'e}
@exdent @t{expanda-@key{TAB}me}
@exdent @t{@}}
@exdent @t{@@end verbatim}
@end example

@noindent
Isso produz:

@verbatim
{
        @command com caracteres estranhos: @'e
expanda-	me
}
@end verbatim

Dado que as linhas contendo @code{@@verbatim} e @code{@@end verbatim} 
não produzem saída, tipicamente você deveria colocar uma linha em branco 
antes do @code{@@verbatim} e outra linha em branco após o 
@code{@@end verbatim}. As linhas em branco entre o início do 
@code{@@verbatim} e o final do @code{@@end verbatim} aparecerão na saída.

@cindex Verbatim, pequeno
@cindex Literal, pequeno
@cindex Pequeno verbatim
Você pode obter um literal ``pequeno'' colocando o @code{@@verbatim} em 
um ambiente @code{@@smallformat}, conforme mostrado aqui:

@c mais trapaça ...
@smallexample
@exdent @t{@@smallformat}
@exdent @t{@@verbatim}
@exdent @t{... ainda literal, mas em uma fonte menor ...}
@exdent @t{@@end verbatim}
@exdent @t{@@end smallformat}
@end smallexample

Finalmente, uma palavra de alerta: não é confiável usar 
@code{@@verbatim} dentro de outras construções do Texinfo.

Veja também @ref{@code{@@verbatiminclude}}.


@node @code{@@lisp}
@section @code{@@lisp}: Marcando um Exemplo da Lisp
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.6 - @lisp: Marcando um Exemplo da Lisp

@anchor{lisp} @c nome antigo
@findex lisp
@cindex Exemplo (ambiente) da Lisp

O comando @code{@@lisp} é usado para código da Lisp. Ele é um sinônimo 
do comando @code{@@example}.

@lisp
Este é um exemplo de texto escrito entre um comando @code{@@lisp} e um 
comando @code{@@end lisp}.
@end lisp

Use @code{@@lisp} em vez de @code{@@example} para preservar informação 
relativa à natureza do exemplo. Isso é útil, por exemplo, se você 
escrever uma função que avalia apenas e todo o código Lisp em um arquivo 
do Texinfo. Então você pode usar o arquivo Texinfo como uma biblioteca 
Lisp. Marque o final do @code{@@lisp} com @code{@@end lisp} sozinho em 
uma linha.


@node @code{@@display}
@section @code{@@display}: Exemplos Usando a Fonte de Texto
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.7 - @display: Exemplos Usando a Fonte de Texto

@anchor{display} @c nome antigo
@findex exibição
@cindex Formatação de exibição

O comando @code{@@display} inicia outro tipo de ambiente, onde a fonte é 
deixada inalterada, não trocada para máquina de escrever como com 
@code{@@example}. Cada linha da entrada ainda produz uma linha de saída, 
e a saída ainda é recuada.

@display
Este é um exemplo de texto escrito entre um comando @code{@@display} e 
um comando @code{@@end display}. O comando @code{@@display} recua o 
texto, mas não o preenche.
@end display

@findex exibiçãopequena
Texinfo também fornece o ambiente @code{@@smalldisplay}, que é como 
@code{@@display}, mas usa um tamanho de fonte menor. 
@xref{@code{@@small@dots{}}}.


@node @code{@@format}
@section @code{@@format}: Exemplos Usando a Largura Total da Linha
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.8 - @format: Exemplos Usando a Largura Total da Linha

@anchor{format} @c nome antigo
@findex formato

O comando @code{@@format} é similar a @code{@@display}, exceto que deixa 
o texto sem recuo. Como @code{@@display}, não seleciona a fonte de 
largura fixa.

@format
Este é um exemplo de texto escrito entre um comando @code{@@format} e um 
comando @code{@@end format}. Como você pode ver a partir deste exemplo, 
o comando @code{@@format} não preenche o texto.
@end format

@findex formatopequeno
Texinfo também fornece o ambiente @code{@@smallformat}, que é como 
@code{@@format}, mas usa um tamanho de fonte menor. 
@xref{@code{@@small@dots{}}}.


@node @code{@@exdent}
@section @code{@@exdent}: Desfazendo o Recuo de Uma Linha
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.9 - @exdent: Desfazendo o Recuo de Uma Linha

@anchor{exdent} @c nome antigo
@findex exdent
@cindex Recuo, desfazendo

O comando @code{@@exdent} remove qualquer recuo que uma linha possa ter. 
O comando é escrito no início de uma linha e se aplica somente ao texto 
que segue o comando que está na mesma linha. Não use chaves em volta do 
texto. Em um manual impresso, o texto em uma linha @code{@@exdent} é 
impresso na fonte roman.

@code{@@exdent} normalmente é usado dentro de exemplos. Assim,

@example
@group
@@example
Esta linha segue um comando @@@@example.
@@exdent Esta linha está sem recuo.
Esta linha segue a linha sem recuo.
O @@@@end example vem na próxima linha.
@@end example
@end group
@end example

@noindent
produz:

@example
@group
Esta linha segue um comando @@example.
@exdent Esta linha está sem recuo.
Esta linha segue a linha sem recuo.
O @@end example vem na próxima linha.
@end group
@end example

Na prática, o comando @code{@@exdent} raramente é usado. Geralmente, 
você retira o recuo do texto finalizando o exemplo e retornando a página 
para a sua largura normal.

@code{@@exdent} não tem efeito em saída HTML.


@node @code{@@flushleft @@flushright}
@section @code{@@flushleft} e @code{@@flushright}
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.10 - @flushleft e @flushright

@anchor{flushleft & flushright} @c nome antigo
@findex flushleft
@findex flushright
@cindex Direita irregular, sem preencher
@cindex Esquerda irregular, sem preencher

Os comandos @code{@@flushleft} e @code{@@flushright} alinham as 
extremidades das linhas nas margens esquerda e direita de uma página, 
mas não preenchem o texto. Os comandos são escritos sozinhos em linhas 
próprias, sem chaves. Os comandos @code{@@flushleft} e 
@code{@@flushright} são finalizados pelos comandos 
@code{@@end flushleft} e @code{@@end flushright} sozinhos em suas 
próprias linhas.

@need 1500
Por exemplo,

@example
@group
@@flushleft
Este texto está
escrito flushleft.
@@end flushleft
@end group
@end example

@noindent
produz:

@quotation
@flushleft
Este texto está
escrito flushleft.
@end flushleft
@end quotation


@code{@@flushright} produz o tipo de recuo frequentemente usado no 
endereço de retorno de cartas. Por exemplo,

@example
@group
@@flushright
Aqui está um exemplo de texto escrito 
flushright.  O comando @@code@{@@flushright@} 
justifica a direita de cada linha, mas deixa a 
extremidade esquerda irregular.
@@end flushright
@end group
@end example

@noindent
produz:

@flushright
Aqui está um exemplo de texto escrito 
flushright.  O comando @code{@@flushright} 
justifica a direita de cada linha, mas deixa a 
extremidade esquerda irregular.
@end flushright


@node @code{@@raggedright}
@section @code{@@raggedright}: Texto Irregular a Direita
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.11 - @raggedright: Texto Irregular a Direita

@anchor{raggedright} @c nome antigo
@findex raggedright
@cindex Irregular a Direita, com preenchimento

O @code{@@raggedright} preenche texto como de costume, mas o texto só é 
justificado a esquerda; a margem direita é irregular. O comando é 
escrito sozinho em uma linha, sem chaves. O comando @code{@@raggedright} 
é finalizado por @code{@@end raggedright} sozinho em uma linha. Esse 
comando não tem efeito em saída Info e HTML, onde o texto sempre é 
definido como irregular a direita.

O comando @code{@@raggedright} pode ser útil com parágrafos contendo 
listas de comandos com nomes longos, quando se sabe antecipadamente que 
justificar o texto em ambas as margens fará com que o parágrafo tenha 
aparência ruim.

Um exemplo (originário de outro lugar neste manual):

@example
@group
@@raggedright
Comandos para aspas de ângulo duplo e único:
@@code@{@@@@guillemetleft@@@{@@@}@}, @@code@{@@@@guillemetright@@@{@@@}@},
@@code@{@@@@guillemotleft@@@{@@@}@}, @@code@{@@@@guillemotright@@@{@@@}@},
@@code@{@@@@guilsinglleft@@@{@@@}@}, @@code@{@@@@guilsinglright@@@{@@@}@}.
@@end raggedright
@end group
@end example

@noindent
produz:

@raggedright
Comandos para aspas de ângulo duplo e único: 
@code{@@guillemetleft@{@}}, @code{@@guillemetright@{@}}, 
@code{@@guillemotleft@{@}}, @code{@@guillemotright@{@}}, 
@code{@@guilsinglleft@{@}}, @code{@@guilsinglright@{@}}.
@end raggedright


@node @code{@@noindent}
@section @code{@@noindent}: Omitindo Recuo
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.12 - @noindent: Omitindo Recuo

@anchor{noindent} @c nome antigo
@findex semrecuo
@cindex Omitindo recuo
@cindex Suprimindo recuo
@cindex Recuo, omitindo

Um exemplo ou outra inclusão pode quebrar um parágrafo em segmentos. 
Normalmente, os formatadores recuam o texto que segue um exemplo como um 
parágrafo novo. Você pode evitar isso caso a caso escrevendo 
@code{@@noindent} no início de uma linha, precedendo o texto de 
continuação. Você também pode desativar o recuo de todos os parágrafos 
globalmente com @code{@@paragraphindent} 
(@pxref{@code{@@paragraphindent}}).

Aqui está um exemplo mostrando como eliminar o recuo normal do texto 
após um @code{@@example}, uma situação comum:

@example
@group
@@example
Este é um exemplo
@@end example

@@noindent
Esta linha não é recuada. Como você pode ver, o 
início da linha é nivelado totalmente com a 
linha seguinte.
@end group
@end example

@noindent
produz:

@display
@example
Este é um exemplo
@end example

@noindent
Esta linha não é recuada. Como você pode ver, o 
início da linha é nivelado totalmente com a 
linha seguinte.
@end display

O uso padrão do @code{@@indent} é exatamente como acima: no início do 
que seria de outro modo um parágrafo, para eliminar o recuo que 
normalmente acontece ali. O comando ou pode ser seguido por texto ou 
estar sozinho em uma linha. Não há razão para usá-lo em outros 
contextos, como no meio de um parágrafo ou dentro de um ambiente 
(@pxref{Citações e Exemplos}).

Você pode controlar o número de linhas em branco na saída do arquivo 
Info ajustando a entrada como desejado: uma linha contendo apenas 
@code{@@noindent} não gera uma linha em branco, e também não o faz uma 
linha @code{@@end} para um ambiente.

Não coloque chaves após um comando @code{@@noindent}; elas não usadas, 
dado que @code{@@noindent} é um comando usado do lado de fora de 
parágrafos (@pxref{Sintaxe de Comando}).


@node @code{@@indent}
@section @code{@@indent}: Forçando o Recuo
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.13 - @indent: Forçando o Recuo

@anchor{indent} @c nome antigo
@findex recuo
@cindex Forçando recuo
@cindex Inserindo recuo
@cindex Recuo, forçando

@indent
Para complementar o comando @code{@@noindent} (veja a seção anterior), 
Texinfo fornece o comando @code{@@indent} para forçar que um parágrafo 
seja recuado. Por exemplo, este parágrafo (o primeiro nesta seção) está 
recuado usando um comando @code{@@indent}.

E, de fato, o primeiro parágrafo de uma seção é o lugar mais provável 
para se usar @code{@@indent}, para anular o comportamento normal de não 
recuo ali (@pxref{@code{@@paragraphindent}}). O comando ou pode ser 
seguido por texto ou estar sozinho em uma linha.

Como um caso especial, quando @code{@@indent} é usado em um ambiente 
onde o texto não é preenchido, ele produz um espaço de recuo de 
parágrafo na saída @TeX{}. (Esses ambientes são onde uma linha de 
entrada produz uma linha de saída, como @code{@@example} e 
@code{@@display}; para um resumo de todos os ambientes, 
@pxref{Comandos de Inclusão de Blocos}).

Não coloque chaves após um comando @code{@@indent}; elas não são usadas, 
dado que @code{@@indent} é um comando usado do lado de fora de 
parágrafos (@pxref{Sintaxe de Comando}).


@node @code{@@cartouche}
@section @code{@@cartouche}: Retângulos Arredondados
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.14 - @cartouche: Retângulos Arredondados

@anchor{cartouche} @c nome antigo
@findex cartouche
@cindex Caixa com cantos arredondados
@cindex Retângulos arredondados, ao redor do texto

Em um manual impresso, o comando @code{@@cartouche} desenha uma caixa 
com cantos arredondados em torno do seu conteúdo. Em HTML, um retângulo 
normal é desenhado. @code{@@cartouche} não tem efeito em saída Info.

Você pode usar esse comando para realçar ainda mais um exemplo ou 
citação. Por exemplo, você poderia escrever um manual no qual um tipo de 
exemplo esteja envolvido por um ``cartouche'' para ênfase.

Por exemplo,

@example
@@cartouche
@@example
% pwd
/usr/local/share/emacs
@@end example
@@end cartouche
@end example

@noindent
cerca o exemplo de duas linhas com uma caixa com cantos arredondados, no 
manual impresso.

A saída oriunda do exemplo se parece com isto (se você estiver lendo 
isto em Info, você verá que o @code{@@cartouche} não teve efeito):

@cartouche
@example
% pwd
/usr/local/info
@end example
@end cartouche

@code{@@cartouche} também implica @code{@@group} 
(@pxref{@code{@@group}}).


@node @code{@@small@dots{}}
@section @code{@@small@dots{}} Comandos de Bloco
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.15 - @code{@@small@dots{}} Comandos de Bloco

@anchor{small} @c nome antigo
@findex smallexample
@findex smallformat
@findex smalllisp
@findex smallquotation
@cindex Exemplos do comando small
@cindex Exemplos em fontes menores
@cindex Citações em fontes menores
@cindex Exemplos da Lisp em fontes menores

Adicionalmente ao @code{@@example} regular e comandos similares, Texinfo 
tem comandos estilo de exemplo ``pequeno''. Esses são 
@code{@@smallquotation}, @code{@@smallindentedblock}, 
@code{@@smalldisplay}, @code{@@smallexample}, @code{@@smallformat}, e 
@code{@@smalllisp}.

Em saída Info, os comandos @code{@@small@dots{}} são equivalentes aos 
seus comandos complementares não ``pequeno''.

Em @TeX{}, entretanto, os comandos @code{@@small@dots{}} produzem texto 
em uma fonte menor que os comandos exemplo não-small. Assim, por 
exemplo, exemplos de código podem conter linhas mais longas e ainda 
caberem em uma página sem a necessidade de serem reescritos.

Um tamanho de fonte menor também é solicitado em saída HTML, e (como de 
costume) retido na transliteração XML do Texinfo@tie{}.

Marque o fim de um bloco @code{@@small@dots{}} com um correspondente 
@code{@@end small@dots{}} . Por exemplo, emparelhe @code{@@smallexample} 
com @code{@@end smallexample}.

Aqui está um exemplo da fonte usada pelo comando @code{@@smallexample} 
(em Info, a saída será a mesma como de costume):

@smallexample
@dots{} para ter certeza de que você tem a liberdade de 
distribuir cópias de software livre (e cobrar por 
esse serviço se você desejar), que você receba o código 
fonte ou consiga obtê-lo se quiser, que você pode 
modificar o software ou usar partes dele em novos 
programas livres; e que você sabe que você pode fazer 
essas coisas.
@end smallexample

Os comandos @code{@@small@dots{}} usam o mesmo estilo de fonte que suas 
contrapartes normais: @code{@@smallexample} e @code{@@smalllisp} usam 
uma fonte de largura fixa, e os demais usam a fonte regular. Eles também 
tem o mesmo comportamento em outros aspectos---quando o preenchimento é 
feito e quando as margens são reduzidas.

Como regra geral, um documento impresso terá uma melhor aparência se 
você usar somente um de (por exemplo) @code{@@example} ou 
@code{@@smallexample} consistentemente dentro de um capítulo.



@node Listas e Tabelas
@chapter Listas e Tabelas
@cindex Construindo listas e tabelas
@cindex Listas e tabelas, construindo
@cindex Tabelas e listas, construindo
@c Capítulo 9 - Listas e Tabelas

Texinfo tem várias maneiras de construir listas e tabelas. As listas 
podem ser marcadas ou numeradas; tabelas de duas colunas podem realçar 
os itens na primeira coluna; tabelas multi colunas também são 
suportadas.

@menu
* Listas de Introdução::          Listas de formatos Texinfo para você.
* @code{@@itemize}::              Como construir uma lista simples.
* @code{@@enumerate}::            Como construir uma lista numerada.
* Tabelas de Duas Colunas::       Como construir uma tabela de duas colunas.
* Tabelas Multi Colunas::         Como construir tabelas generalizadas.
@end menu

@node Listas de Introdução
@section Listas de Introdução
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.1 - Listas de Introdução

Texinfo automaticamente recua o texto em listas ou tabelas, e numera uma 
lista numerada. Esse último recurso é útil se você modificar a lista, 
dado que não precisa renumerá-la você mesmo.

As listas numeradas e tabelas se iniciam com o comando @@ apropriado no 
início de uma linha, e finalizam-se com o correspondente @code{@@end} 
sozinho em uma linha. Os comandos de tabela e lista de itens também 
exigem que você escreva informação de formatação na mesma linha do 
comando @@ de inicialização.

Inicie uma lista numerada, por exemplo, com um comando 
@code{@@enumerate} e finalize a lista com um comando 
@code{@@end enumerate}. Inicie uma lista de itens com um comando 
@code{@@itemize}, seguido na mesma linha por um comando de formatação 
como @code{@@bullet}, e finalize a lista com um comando 
@code{@@end itemize}.
@findex fim

Preceda cada elemento de uma lista com um comando @code{@@item} ou 
@code{@@itemx}.

@sp 1
@noindent
Aqui está uma lista de itens dos diferentes tipos de tabela e listas:

@itemize @bullet
@item
Listas de itens com e sem marcações.

@item
Listas numeradas, usando números ou letras.

@item
Tabelas de duas colunas com realçamento.
@end itemize

@sp 1
@noindent
Aqui está uma lista numerada com os mesmos itens:

@enumerate
@item
Listas de itens com e sem marcações.

@item
Listas numeradas, usando números ou letras.

@item
Tabelas de duas colunas com realçamento.
@end enumerate

@sp 1
@noindent
E aqui está uma tabela de duas colunas com os mesmos itens e seus 
comandos @w{@@}:

@table @code
@item @@itemize
Listas de itens com e sem marcações.

@item @@enumerate
Listas numeradas, usando números ou letras.

@item @@table
@itemx @@ftable
@itemx @@vtable
Tabelas de duas colunas, opcionalmente com indexação.
@end table


@node @code{@@itemize}
@section @code{@@itemize}: Construindo Uma Lista de Itens
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.2 - @itemize: Construindo Uma Lista de Itens

@anchor{itemize} @c nome antigo
@findex itemize
@cindex Itemization

O comando @code{@@itemize} produz uma sequência de ``itens'', cada um 
iniciando com uma bola ou outra marca dentro da margem esquerda, e 
geralmente recuados.

@cindex @code{@@w}, para itens em branco
Inicie uma lista de itens escrevendo @code{@@itemize} no início de uma 
linha. Siga o comando, na mesma linha, com um caracter ou um comando do 
Texinfo que gera uma marca. Geralmente, você usará @code{@@bullet} após 
@code{@@itemize}, mas você pode usar @code{@@minus}, ou qualquer comando 
ou caracter que resulte em um caracter único no arquivo Info. (Quando 
você escrever o comando de marca como @code{@@bullet} após um comando 
@code{@@itemize}, você pode omitir o @samp{@{@}}). Se você não 
especificar um comando de marca, o padrão é @code{@@bullet}. Se você não 
quer nenhuma marca, mas ainda quer itens lógicos, use @code{@@w@{@}} 
(nesse caso as chaves são obrigatórias).

@findex item
Após o @code{@@itemize}, escreva seus itens, cada um iniciando com 
@code{@@item}. O texto pode seguir na mesma linha que @code{@@item}. O 
texto de um item pode continuar por mais que um parágrafo.

Deveria existir ao menos um @code{@@item} dentro do ambiente 
@code{@@itemize}. Se nenhum estiver presente, @code{makeinfo} emite um 
alerta. Se você apenas deseja texto recuado e não uma lista de itens, 
use @code{@@indentedblock}; @pxref{@code{@@indentedblock}}.

As entradas de índice e comentários que são dados antes de um 
@code{@@item} incluindo o primeiro, são automaticamente movidos 
(internamente) para após o @code{@@item}, de forma que a saída esteja 
como esperada. Historicamente essa tem sido uma prática comum.

Geralmente, você deveria colocar uma linha em branco entre os itens. 
Isso coloca uma linha em branco no arquivo Info. (O @TeX{} insere o 
espaço vertical apropriado em qualquer caso). Exceto quando as entradas 
são muito breves, esses espaços em branco fazem a lista ter uma 
aparência melhor.

Aqui está um exemplo do uso de @code{@@itemize}, seguido pela saída que 
esse comando produz. O @code{@@bullet} produz um @samp{*} em Info e um 
ponto redondo em outros formatos de saída.

@example
@group
@@itemize @@bullet
@@item
Algum texto para foo.

@@item
Algum texto
para bar.
@@end itemize
@end group
@end example

@noindent
Isso produz:

@quotation
@itemize @bullet
@item
Algum texto para foo.

@item
Algum texto
para bar.
@end itemize
@end quotation

As listas de itens podem ser incorporadas em outras listas de itens. 
Aqui está uma lista marcada com traços embutida em uma lista marcada com 
marcadores:

@example
@group
@@itemize @@bullet
@@item
Primeiro item.

@@itemize @@minus
@@item
Item interno.

@@item
Segundo item interno.
@@end itemize

@@item
Segundo item externo.
@@end itemize
@end group
@end example

@noindent
Isso produz:

@quotation
@itemize @bullet
@item
Primeiro item.

@itemize @minus
@item
Item interno.

@item
Segundo item interno.
@end itemize

@item
Segundo item externo.
@end itemize
@end quotation


@node @code{@@enumerate}
@section @code{@@enumerate}: Fazendo Uma Lista Numerada ou Uma Com Letras
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.3 - @code{@@enumerate}: Fazendo Uma Lista Numerada ou Uma Com Letras

@anchor{enumerate} @c nome antigo
@findex enumerar
@cindex Enumeração

@code{@@enumerate} é como @code{@@itemize} (@pxref{@code{@@itemize}}), 
exceto que os rótulos nos itens são números inteiros sucessivos ou 
letras em vez de marcadores.

Escreva o comando @code{@@enumerate} no início de uma linha. O comando 
não exige um argumento, mas aceita ou um número ou uma letra como uma 
opção. Sem um argumento, @code{@@enumerate} inicia a lista com o número 
@samp{1}. Com um argumento numérico, como @samp{3}, o comando inicia a 
lista com aquele número. Com uma letra maiúscula ou minúscula, como 
@samp{A} ou @samp{a}, o comando inicia a lista com aquela letra.

Escreva o texto da lista numerada da mesma maneira que uma lista de 
itens: escreva a linha iniciando com @code{@@item} no início de cada 
item na enumeração. Está OK ter texto seguindo o @code{@@item}, e o 
texto para um item pode continuar por vários parágrafos.

Você deveria colocar uma linha em branco entre as entradas na lista. 
Isso geralmente torna mais fácil ler o arquivo Info.

@need 1500
Aqui está um exemplo do @code{@@enumerate} sem um argumento:

@example
@group
@@enumerate
@@item
Causas subjacentes.

@@item
Causas imediatas.
@@end enumerate
@end group
@end example

@noindent
Isso produz:

@enumerate
@item
Causas subjacentes.

@item
Causas imediatas.
@end enumerate
@sp 1
Aqui está um exemplo com um argumento de @kbd{3}:
@sp 1
@example
@group
@@enumerate 3
@@item
Causas predisponentes.

@@item
Causas precipitantes.

@@item
Causas perpetuantes.
@@end enumerate
@end group
@end example

@noindent
Isso produz:

@enumerate 3
@item
Causas predisponentes.

@item
Causas precipitantes.

@item
Causas perpetuantes.
@end enumerate
@sp 1
Aqui está um resumo breve das alternativas. O resumo é construído usando 
@code{@@enumerate} com um argumento de @kbd{a}.

@sp 1
@enumerate a
@item
@code{@@enumerate}

Sem um argumento, produz uma lista numerada, com o primeiro item 
numerado@tie{}1.

@item
@code{@@enumerate @var{unsigned-integer}}

Com um argumento numérico (não sinalado), inicia uma lista numerada com 
aquele número. Você pode usar isso para continuar uma lista que você 
interrompeu com outro texto.

@item
@code{@@enumerate @var{upper-case-letter}}

Com uma letra maiúscula como argumento, inicia uma lista na qual cada 
item é marcado por uma letra, iniciando com aquela letra maiúscula.

@item
@code{@@enumerate @var{lower-case-letter}}

Com uma letra minúscula como argumento, inicia uma lista na qual cada 
item é marcado por uma letra, iniciando com aquela letra minúscula.
@end enumerate

Você também pode aninhar listas enumeradas, como em uma estrutura de 
tópicos.


@node Tabelas de Duas Colunas
@section Construindo Uma Tabela de Duas Colunas
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.4 - Construindo Uma Tabela de Duas Colunas

@cindex Tabelas, construindo duas colunas
@findex tabela

@code{@@table} é similar a @code{@@itemize} (@pxref{@code{@@itemize}}), 
mas permite especificar um nome ou uma linha de título para cada item. O 
comando @code{@@table} é usado para produzir tabelas de duas colunas, e 
é especialmente útil para glossários, exibições explicativas, e resumos 
de opções de linha de comando.

@menu
* @code{@@table}::                      Como construir uma tabela de duas colunas.
* @code{@@ftable @@vtable}::            Indexamento automático para tabelas de duas colunas.
* @code{@@itemx}::                      Como colocar mais entradas na primeira coluna.
@end menu

@node @code{@@table}
@subsection Usando o Comando @code{@@table}
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.4 - Construindo Uma Tabela de Duas Colunas
@c Subseção 9.4.1 - Usando o Comando @table

@anchor{table} @c nome antigo

@cindex Listas de definição, compondo
Use o comando @code{@@table} para produzir uma tabela de duas colunas. 
Esse comando tipicamente é usado quando você tem uma lista de itens e um 
texto breve com cada um, como uma lista de definições.

Escreva o comando @code{@@table} no início de uma linha, após uma linha 
em branco, e siga-o, na mesma linha, com um argumento que é um comando 
de ``indicação'', como @code{@@code}, @code{@@samp}, @code{@@var}, 
@code{@@option}, ou @code{@@kbd} (@pxref{Indicando}). Esse comando será 
aplicado ao texto na primeira coluna. Por exemplo, @code{@@table @@code} 
fará com que o texto na primeira coluna seja produzido como se ele 
tivesse sido o argumento para um comando @code{@@code}.

@anchor{@code{@@asis}} @c nome do comando com @, para consistência
@findex asis
Você pode usar o comando @code{@@asis} como um argumento para 
@code{@@table}. @code{@@asis} é um comando que não faz nada: se você 
usar esse comando após @code{@@table}, as entradas da primeira coluna 
são exibidas sem realce adicional (``como está'').

O comando @code{@@table} funciona com outros comandos além daqueles 
mencionados explicitamente aqui. Entretanto, você só pode usar comandos 
predefinidos do Texinfo que recebam um argumento entre chaves. Você não 
pode confiavelmente usar um comando novo definido com @code{@@macro}, 
embora um @code{@@alias} seja aceitável (para um comando predefinido 
adequado). @xref{Definindo Novos Comandos Texinfo}.

@findex item
Inicie cada entrada da tabela com um comando @code{@@item} no início de 
uma linha. Escreva o texto para a primeira coluna na mesma linha que o 
comando @code{@@item}. Escreva o texto para a segunda coluna na linha 
seguinte à linha @code{@@item} e em linhas subsequentes. Você pode 
escrever quantas linhas de texto de apoio desejar, até mesmo vários 
parágrafos. Mas, somente o texto na mesma linha que @code{@@item} será 
colocado na primeira coluna (incluindo quaisquer notas de rodapé). Você 
não precisa digitar nada para uma segunda coluna vazia.

Normalmente, você deveria colocar uma linha em branco antes de uma linha 
@code{@@item}, (exceto a primeira). Isso coloca uma linha em branco no 
arquivo Info. Exceto quando as entradas são muito breves, uma linha em 
branco parece melhor. Finalize a tabela com uma linha consistindo de 
@code{@@end table}, seguido por uma linha em branco. O @TeX{} sempre 
iniciará um parágrafo novo após a tabela, de forma que a linha em branco 
é necessária para que a saída Info seja análoga.

@need 1500
Por exemplo, a tabela seguinte realça o texto na primeira coluna com o 
comando @code{@@samp}:

@example
@group
@@table @@samp
@@item foo
Este é o texto para
@@samp@{foo@}.

@@item bar
Texto para @@samp@{bar@}.
@@end table
@end group
@end example

@noindent
Isso produz:

@table @samp
@item foo
Este é o texto para
@samp{foo}.
@item bar
Texto para @samp{bar}.
@end table

Se você quer listas dois ou mais itens nomeados com um bloco único de 
texto, use o comando @code{@@itemx}. (@xref{@code{@@itemx}}).

O comando @code{@@table} (@pxref{@code{@@table}}) não é suportado dentro 
do @code{@@display}. Dado que @code{@@display} é orientado a linha, não 
faz sentido usá-los juntos. Se você deseja recuar uma tabela, tente 
@code{@@quotation} (@pxref{@code{@@quotation}}) ou 
@code{@@indentedblock} (@pxref{@code{@@indentedblock}}).


@node @code{@@ftable @@vtable}
@subsection @code{@@ftable} e @code{@@vtable}
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.4 - Construindo Uma Tabela de Duas Colunas
@c Subseção 9.4.2 - @ftable e @vtable

@anchor{ftable vtable} @c nome antigo
@findex ftable
@findex vtable
@cindex Tabelas com indexação
@cindex Indexando entradas de tabela automaticamente

Os comandos @code{@@ftable} e @code{@@vtable} são os mesmos que o 
comando @code{@@table}, exceto que @code{@@ftable} automaticamente 
insere cada um dos itens na primeira coluna da tabela no índice de 
funções e @code{@@vtable} automaticamente insere cada um dos itens na 
primeira coluna da tabela no índice de variáveis. Apenas os itens na 
mesma linha que os comandos @code{@@item} ou @code{@@itemx} são 
indexados, e são indexados exatamente na forma em que aparecem nessa 
linha. @xref{Índices}, para mais informação acerca de índices.

Inicie uma tabela de duas colunas usando @code{@@ftable} ou 
@code{@@vtable} escrevendo o comando @@ no início de uma linha, seguido 
na mesma linha por um argumento que é um comando do Texinfo, como 
@code{@@code}, exatamente como você faria para um comando 
@code{@@table}; e termine a tabela com um comando @code{@@end ftable} ou 
@code{@@end vtable} sozinho em uma linha.

Veja o exemplo para @code{@@table} na seção anterior.


@node @code{@@itemx}
@subsection @code{@@itemx}: Segundo e Itens Subsequentes
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.4 - Construindo Uma Tabela de Duas Colunas
@c Subseção 9.4.3 - @itemx: Segundo e Itens Subsequentes

@anchor{itemx} @c nome antigo
@cindex Dois itens nomeados para @code{@@table}
@findex itemx

Use o comando @code{@@itemx} dentro de uma tabela quando você tiver duas 
ou mais entradas de primeira coluna para o mesmo item, cada uma das 
quais deveria aparecer sozinha em uma linha.

Use @code{@@item} para a primeira entrada, e @code{@@itemx} para todas 
as entradas subsequentes; @code{@@itemx} sempre deve seguir um comando 
@code{@@item}, sem linhas em branco entre eles.

O comando @code{@@itemx} funciona exatamente como @code{@@item}, exceto 
que não gera espaço vertical extra acima do texto da primeira coluna. Se 
você tiver múltiplos comandos @code{@@itemx} consecutivos, não insira 
quaisquer linhas em branco entre eles.

Por exemplo,

@example
@group
@@table @@code
@@item upcase
@@itemx downcase
Essas duas funções aceitam um caracter ou uma sequência de caracteres 
como argumento, e retornam o correspondente caracter ou a sequência de 
caracteres escritos em letras maiúsculas (minúsculas).
@@end table
@end group
@end example

@noindent
Isso produz:

@table @code
@item upcase
@itemx downcase
Essas duas funções aceitam um caracter ou uma sequência de caracteres 
como argumento, e retornam o correspondente caracter ou a sequência de 
caracteres escritos em letras maiúsculas (minúsculas).
@end table

@noindent
(Note também que esse exemplo ilustra texto de apoio multi linha em uma 
tabela de duas colunas).


@node Tabelas Multi Colunas
@section @code{@@multitable}: Tabelas Multi Colunas
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.5 - @multitable: Tabelas Multi Colunas

@findex multitabela
@cindex Tabelas, construindo multi coluna

@code{@@multitable} permite que você construa tabelas com qualquer 
número de colunas, com cada coluna tendo qualquer largura que você 
goste.

Você define as larguras da coluna em uma linha @code{@@multitable} 
sozinha, e escreve cada linha da atual tabela seguindo um comando 
@code{@@item}, com colunas separadas por um comando @code{@@tab}. 
Finalmente, @code{@@end multitable} completa a tabela. Detalhes nas 
seções abaixo.

@menu
* Larguras de Colunas Multi Tabelas::   Definindo tamanhos de coluna multi tabela.
* Linhas de Multi Tabelas::             Definindo linhas multi tabela, com exemplos.
@end menu

@node Larguras de Colunas Multi Tabelas
@subsection Larguras de Colunas Multi Tabelas
@cindex Multitable column widths
@cindex Column widths, defining for multitables
@cindex Widths, defining multitable column
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.5 - @multitable: Tabelas Multi Colunas
@c Subseção 9.5.1 - Larguras de Colunas Multi Tabelas

Você pode definir as larguras de coluna para uma multi tabela de duas 
maneiras: como frações do comprimento da linha; ou com uma linha de 
protótipo. A mesclagem dos dois métodos não é suportada. Em qualquer 
caso, as larguras são definidas inteiramente na mesma linha que o 
comando @code{@@multitable}.

@enumerate
@item
@findex fraçõescolunas
@cindex Comprimento de linha, larguras de coluna como fração de
Para especificar larguras de coluna como frações do comprimento de 
linha, escreva @code{@@columnfractions} e os números decimais 
(presumivelmente menor que 1; um zero no início é permitido e ignorado) 
após o comando @code{@@multitable}, como em:

@example
@@multitable @@columnfractions .33 .33 .33
@end example

As frações não precisam somar exatamente a 1.0, como essas não fazem. 
Isso permite produzir tabelas que não precisam do comprimento total da 
linha.

@item
@cindex Linha de protótipo, larguras de coluna definidas por
Para especificar uma linha de protótipo, escreva a entrada mais longa 
para cada coluna entre chaves após o comando @code{@@multitable}. Por 
exemplo:

@example
@@multitable @{algum texto para a coluna um@} @{para a coluna dois@}
@end example

@noindent
A primeira coluna terá então a largura do conjunto de caracteres `algum 
texto para a coluna um' e a segunda coluna a largura de `para a coluna 
dois'.

As entradas de protótipo não precisam aparecer na própria tabela.

Embora tenhamos usado texto simples nesse exemplo, as entradas de 
protótipo podem conter comandos do Texinfo; comandos de marcação, como 
@code{@@code}, são particularmente prováveis de serem úteis.

@end enumerate


@node Linhas de Multi Tabelas
@subsection Linhas de Multi Tabelas
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.5 - @multitable: Tabelas Multi Colunas
@c Subseção 9.5.2 - Linhas de Multi Tabelas

@cindex Linhas de multi tabelas
@cindex Linhas, de uma multi tabela

@findex item
@findex tab
Após o comando @code{@@multitable} definindo as larguras de coluna (veja 
a seção anterior), você inicia cada linha no corpo de uma multi tabela 
com @code{@@item}, e separa as entradas de coluna com @code{@@tab}. As 
quebras de linha não são especiais dentro do corpo da tabela, e você 
pode quebrar linhas de entrada em seu arquivo fonte se necessário.

@findex headitem
@cindex Linha de cabeçalho, em tabela
@cindex Marcação @code{<thead>} do HTML/XML
Você também pode usar @code{@@headitem} em vez de @code{@@item} para 
produzir uma @dfn{linha de cabeçalho}. A saída do @TeX{} para tal linha 
é em negrito, e a saída HTML e Docbook usa a marcação @code{<thead>}. Em 
Info, a linha de cabeçalho é seguida por uma linha separadora feita de 
traços (caracteres @samp{-}).

@findex headitemfont
@cindex Fonte para linhas de cabeçalho multi tabela
O comando @code{@@headitemfont} pode ser usado em modelos quando as 
entradas em uma linha @code{@@headitem} precisarem ser usadas em um 
modelo. É um sinônimo para @code{@@b}, mas usar @code{@@headitemfont} 
evita qualquer dependência daquele estilo específico de fonte, no caso 
de fornecemos uma maneira de alterá-lo no futuro.

Aqui está um exemplo completo de uma tabela multi coluna (o texto é 
originário de @cite{O Manual do GNU Emacs}, 
@pxref{Split Window,, Splitting Windows, emacs, The GNU Emacs Manual}): @c Referência externa. Manter sem alteração!

@example
@@multitable @@columnfractions .15 .45 .4
@@headitem Tecla @@tab Comando @@tab Descrição
@@item C-x 2
@@tab @@code@{split-window-vertically@}
@@tab Divide a janela selecionada em duas janelas, 
com uma acima da outra.
@@item C-x 3
@@tab @@code@{split-window-horizontally@}
@@tab Divide a janela selecionada em duas janelas 
posicionadas lado a lado.
@@item C-Mouse-2
@@tab
@@tab Na linha de modo ou barra de rolagem de uma janela, 
divide aquela janela.
@@end multitable
@end example

@noindent
produz:

@multitable @columnfractions .15 .45 .4
@headitem Tecla @tab Comando @tab Descrição
@item C-x 2
@tab @code{split-window-vertically}
@tab Divide a janela selecionada em duas janelas, 
com uma acima da outra.
@item C-x 3
@tab @code{split-window-horizontally}
@tab Divide a janela selecionada em duas janelas 
posicionadas lado a lado.
@item C-Mouse-2
@tab
@tab Na linha de modo ou barra de rolagem de uma janela, 
divide aquela janela.
@end multitable


@node Exibições Especiais
@chapter Exibições Especiais
@cindex Special displays
@c Capítulo 10 - Exibições Especiais

Os comandos neste capítulo permitem escrever texto que é especialmente 
exibido (permissão de formato de saída), fora do fluxo normal de 
documento.

Um conjunto de tais comandos é para a criação de ``flutuadores'', isto 
é, figuras, tabelas, e afins, configuradas a partir do texto principal, 
possivelmente numeradas, rotuladas, e (ou) referenciadas a partir de 
outro lugar no documento. As imagens frequentemente são incluídas nessas 
exibições.

Outro grupo de comandos é para a criação de notas de rodapé em Texinfo.

@menu
* Flutuadores::                  Figuras, tabelas, e afins.
* Imagens::                      Incluindo gráficos e imagens.
* Notas de Rodapé::              Escrevendo notas de rodapé.
@end menu


@node Flutuadores
@section Flutuadores
@cindex Flutuadores, em geral
@c Capítulo 10 - Exibições Especiais
@c Seção 10.1 - Flutuadores

Um @dfn{flutuador} é uma exibição que é configurada a partir do texto 
principal. É tipicamente rotulado como sendo uma ``Figura'', ``Tabela'', 
``Exemplo'' ou algum tipo similar.

@cindex Flutuando, ainda não implementado
Um flutuador é assim nomeado porque, teoricamente, pode ser movido para 
o pé ou topo da página atual, ou para uma página seguinte, na saída 
impressa. (Flutuação não faz sentido em outros formatos de saída). Na 
presente versão de Texinfo, entretanto, essa flutuação infelizmente 
ainda não está implementada. Em vez disso, o material flutuante é 
simplesmente produzido na localização atual, mais ou menos como se fosse 
um @code{@@group} (@pxref{@code{@@group}}).

@menu
* @code{@@float}::                      Produzindo material que flutua.
* @code{@@caption @@shortcaption}::     Especificando descrições para flutuações.
* @code{@@listoffloats}::               Um Sumário para flutuações.
@end menu


@node @code{@@float}
@subsection @code{@@float} [@var{tipo}][,@var{rótulo}]: Material Flutuante
@c Capítulo 10 - Exibições Especiais
@c Seção 10.1 - Flutuadores
@c Subseção 10.1.1 - @float [tipo][,rótulo]: Material Flutuante

@anchor{float} @c nome antigo
@findex float
@cindex Ambiente float

Para produzir material flutuante, coloque o material que você quer que 
seja exibido separado entre os comandos @code{@@float} e 
@code{@@end float}, sozinhos em suas linhas.

Material flutuante geralmente usa @code{@@image} para exibir um gráfico 
já existente (@pxref{Imagens}), ou @code{@@multitable} para exibir uma 
tabela (@pxref{Tabelas Multi Colunas}). Entretanto, o conteúdo do 
flutuador podem ser qualquer coisa. Aqui está um exemplo com texto 
simples:

@example
@@float Figura,fig:ex1
Este é um flutuador de exemplo.
@@end float
@end example

@noindent
E a saída:

@float Figura,fig:ex1
Este é um flutuador de exemplo.
@end float

Como mostrado no exemplo, @code{@@float} recebe dois argumentos 
(separados por vírgula), @var{tipo} e @var{rótulo}. Ambos são opcionais.

@table @var
@item tipo
Especifica a classe do flutuador; tipicamente uma palavra como 
``Figura'', ``Tabela'', etc. Se não for dada, e @var{rótulo} for, 
quaisquer referências cruzadas simplesmente usarão um número despojado.

@item rótulo
Especifica um rótulo de referência cruzada para este flutuador. Se dado, 
a este flutuador é automaticamente dado um número, e aparecerá em 
qualquer saída @code{@@listoffloats} (@pxref{@code{@@listoffloats}}). 
Referências cruzadas a @var{rótulo} são permitidas.

@cindex Flutuadores, fazendo não numerados
@cindex Flutuador não numerado, criando
Por outro lado, se @var{rótulo} não for dado, então o flutuador não será 
numerado e consequentemente não aparecerá na saída @code{@@listoffloats} 
ou ser referenciável.
@end table

@noindent 
Ordinariamente, você especifica ambos @var{tipo} e @var{rótulo}, para 
obter um flutuador rotulado e numerado.

@cindex Flutuadores, numeração de
@cindex Numeração de flutuadores
Em Texinfo, todos os flutuadores são numerados na mesma maneira: com o 
número do capítulo (ou letra do apêndice), um ponto, e o número do 
flutuador, o qual simplesmente conta 1, 2, 3, @dots{}, e é zerado a cada 
capítulo. Cada tipo de flutuador é contado independentemente.

Os flutuadores dentro de @code{@@unnumbered}, ou fora de qualquer 
capítulo, são numerados simplesmente consecutivamente a partir de 1.

Essas convenções de numeração não são, atualmente, modificáveis.


@node @code{@@caption @@shortcaption}
@subsection @code{@@caption} e @code{@@shortcaption}
@c Capítulo 10 - Exibições Especiais
@c Seção 10.1 - Flutuadores
@c Subseção 10.1.2 - @caption e @shortcaption

@anchor{caption shortcaption} @c nome antigo
@findex caption
@findex shortcaption
@cindex Captions, para flutuadores
@cindex Short captions, para listas de flutuadores

Você pode escrever um @code{@@caption} em qualquer lugar dentro de um 
ambiente @code{@@float}, para definir uma legenda para o flutuador.  Não 
é permitido em qualquer outro contexto.  @code{@@caption} recebe somente 
um argumento, envolvido em chaves.  Aqui está um exemplo:

@example
@@float
Um exemplo de flutuador, com caption.
@@caption@{Caption para exemplo de flutuador.@}
@@end float
@end example

@noindent A saída é:

@float
Um exemplo de flutuador, com caption.
@caption{Caption para exemplo de flutuador.}
@end float

@code{@@caption} pode aparecer em qualquer lugar dentro do flutuador; 
@code{@@caption} não é processado até o @code{@@end float}.  O texto do 
caption geralmente é uma sentença ou duas, porém pode consistir de 
vários parágrafos se necessário.

Na saída, o caption sempre aparece abaixo do flutuador; isso atualmente 
não é modificável.  O caption é precedido pelo número e/ou tipo do 
flutuador, conforme especificado para o comando @code{@@float} 
(veja-se a seção anterior).

O comando @code{@@shortcaption} igualmente pode ser usado somente dentro 
de @code{@@float}, e recebe somente um argumento dentro de chaves.  O 
texto curto de caption é usado em vez do texto de caption em uma lista 
de flutuadores (veja-se a próxima seção).  Assim, você pode escrever um 
caption longo para o documento principal, e um título curto aparecer na 
lista de flutuadores.  Por exemplo:

@example
@@float
... conforme acima ...
@@shortcaption@{Texto para a lista de flutuadores.@}
@@end float
@end example

O texto para @code{@@shortcaption} pode não conter comentários 
(@code{@@c}), texto literal (@code{@@verb}), ambientes como 
@code{@@example}, notas de rodapé (@code{@@footnote}) ou outras 
construções complexas.  As mesmas restrições se aplicam ao 
@code{@@caption} a menos que exista um @code{@@shortcaption}.


@node @code{@@listoffloats}
@subsection @code{@@listoffloats}: Tabelas de Conteúdos para Flutuadores
@c Capítulo 10 - Exibições Especiais
@c Seção 10.1 - Flutuadores
@c Subseção 10.1.3 - @listoffloats: Tabelas de Conteúdos para Flutuadores

@anchor{listoffloats}@c nome antigo
@findex listoffloats
@cindex List of floats
@cindex Floats, list of
@cindex Table of contents, for floats

Você pode escrever um comando @code{@@listoffloats} para gerar uma lista 
de flutuadores para um dado tipo de flutuador (@pxref{@code{@@float}}), 
semelhante à Tabela de Conteúdo geral do documento. Tipicamente, o 
comando é escrito no nodo @code{@@unnumbered} dele próprio para prover 
um cabeçalho e estrutura, mais como @code{@@printindex} 
(@pxref{Imprimindo Índices e Menus}).

@code{@@listoffloats} recebe um argumento opcional, o tipo de flutuador. 
Eis um exemplo:

@example
@@node List of Figures
@@unnumbered List of Figures
@@listoffloats Figure
@end example

@noindent E aqui está com o que se parece a saída a partir de 
@code{@@listoffloats}, dada a figura de exemplo anterior neste capítulo 
(a saída Info está formatada como um menu):

@display
@ifinfo
*      Figure 12.1:      fig:ex1.
@end ifinfo
@ifnotinfo
@listoffloats Figure
@end ifnotinfo
@end display

Sem qualquer argumento, @code{@@listoffloats} gera uma lista de 
flutuadores para os quais nenhum tipo de flutuador foi especificado, 
isto é, sem primeiro argumento para o comando @code{@@float} 
(@pxref{@code{@@float}}).

Cada linha na lista de flutuadores contém o tipo de flutuador (se 
algum), o número do flutuador, e a legenda, se alguma---o argumento 
@code{@@shortcaption}, se foi especificado, do contrário o argumento 
@code{@@caption}. Em Info, o resultado é um menu onde cada flutuador 
pode ser selecionado. Em HTML, cada linha é um link para o flutuador. Em 
saída impressa, o número da página é incluído.

Flutuadores não numerados (aqueles sem rótulos de referência cruzada) 
são omitidos da lista de flutuadores.


@node Imagens
@section Inserindo Imagens
@c Capítulo 10 - Exibições Especiais
@c Seção 10.2 - Inserindo Imagens

@cindex Images, inserting
@cindex Pictures, inserting
@findex image

Você pode inserir uma imagem dada em um arquivo externo com o comando 
@code{@@image}. Apesar de imagens poderem ser usadas em qualquer lugar, 
incluindo o meio de um parágrafo, nós as descrevemos neste capítulo dado 
que elas (as imagens) são mais frequentemente parte de uma figura 
exibida ou exemplo.

@menu
* Sintaxe da Imagem::
* Escalonamento da Imagem::
@end menu


@node Sintaxe da Imagem
@subsection Sintaxe da Imagem
@c Capítulo 10 - Exibições Especiais
@c Seção 10.2 - Inserindo Imagens
@c Subseção 10.2.1 - Sintaxe da Imagem

Aqui está a sinopse do comando @code{@@image}:

@example
@@image@{@var{filename}@r{[,} @var{width}@r{[,} @var{height}@r{[,} @var{alttext}@r{[, }@var{extension}@r{]]]]}@}
@end example

@cindex Formats for images
@cindex Image formats
O argumento @var{filename} é obrigatório, e não deve ter uma extensão, 
pois os diferentes processadores suportam formatos diferentes:

@itemize @bullet
@item
@pindex eps image format
@TeX{} (saída DVI) lê o arquivo @file{@var{filename}.eps}
(formato PostScript Encapsulado).

@item
@pindex pdftex@r{, and images}
@pindex png image format
@pindex jpeg image format
@pindex pdf image inclusions
pdf@TeX{} Lê @file{@var{filename}.pdf}, @file{@var{filename}.png}, 
@file{@var{filename}.jpg}, ou @file{@var{filename}.jpeg} (nessa ordem). 
Também tenta as versões em letras maiúsculas das extensões. O formato 
PDF não suporta imagens EPS, de forma que essas devem ser convertidas 
primeiro.

@item
Para Info, @code{makeinfo} inclui @file{@var{filename}.txt} literal 
(mais ou menos como se estivesse em @code{@@verbatim}). A saída Info 
também pode incluir uma referência para @file{@var{filename}.png} ou 
@file{@var{filename}.jpg}. (Veja-se abaixo).

@item
Para HTML, @code{makeinfo} emite uma referência para 
@file{@var{filename}.png}, @file{@var{filename}.jpg}, 
@file{@var{filename}.jpeg} ou @file{@var{filename}.gif} (nessa ordem). 
Se nenhum desses exitir, então dá um erro, e emite uma referência para 
@file{@var{filename}.jpg} de qualquer maneira.

@item
@cindex SVG images, used in Docbook
Para Docbook, @code{makeinfo} emite referências para 
@file{@var{filename}.eps}, @file{@var{filename}.gif} 
@file{@var{filename}.jpeg}, @file{@var{filename}.jpg}, 
@file{@var{filename}.pdf}, @file{@var{filename}.png} e 
@file{@var{filename}.svg}, para cada arquivo encontrado. Também, 
@file{@var{filename}.txt} é incluído literalmente, se presente. 
(Supõe-se que o processador Docbook subsequente escolha o adequado).

@item
Para saída Info e HTML, @code{makeinfo} usa o quinto argumento opcional 
@var{extension} para @code{@@image} para a extensão de nome de arquivo, 
se for especificado e o arquivo for encontrado. Qualquer ponto inicial 
deveria ser incluído em @var{extension}. Por exemplo:

@pindex XPM image format
@example
@@image@{foo,,,,.xpm@}
@end example

@end itemize

Se você deseja instalar arquivos de imagens para uso por leitores Info, 
então recomenda-se colocá-los em um subdiretório como 
@samp{@var{foo}-figures} para um pacote @var{foo}. A cópia dos arquivos 
para @code{$(infodir)/@var{foo}-figures/} deveria ser feita em seu 
@code{Makefile}.

Os argumentos @var{width} e @var{height} estão descritos na próxima 
seção.

Para saída @TeX{}, se uma imagem for a única coisa em um parágrafo, ela 
ordinariamente será exibida em uma linha própria, respeitando o recuo 
atual do ambiente, porém sem o recuo normal do parágrafo. Se você quiser 
a imagem centralizada, então use @code{@@center} 
(@pxref{@code{@@titlefont @@center @@sp}}).

@cindex Alt attribute for images
@cindex Images, alternate text for
@findex @sortas{-} -@r{ (in image alt string)} @c CONSERTE-ME
Para saída HTML, @code{makeinfo} configura o @dfn{alt attribute} para 
imagens inline para o (quarto) argumento opcional @var{alttext} para 
@code{@@image}, se fornecido. Se não fornecido, então @code{makeinfo} 
usa o nome completo de arquivo da imagem sendo exibida. A @var{alttext} 
é processada como texto Texinfo, de forma que caracteres especiais tais 
como @samp{"} e @samp{<} e @samp{&} são escapadas na saída HTML; também, 
você pode obter uma sequência @code{alt} vazia com @code{@@-} (um 
comando que não produz saída; @pxref{@code{@@- @@hyphenation}}).

Para saída Info, a sequência @code{alt} também é processada como texto 
de Texinfo e saída. Nesse caso, @samp{\} é escapada como @samp{\\} e 
@samp{"} como @samp{\"}; outros escapes não são feitos.

Em saída Info, @code{makeinfo} escreve uma referência para o arquivo 
binário de imagem (tentando @var{filename} com a extensão 
@file{@var{extension}}, @file{@var{.extension}}, @file{.png}, ou 
@file{.jpg}, nessa ordem) se um existir. Também incluir literalmente o 
arquivo @file{.txt} se um existir. Dessa maneira, os leitores Info que 
podem exibir imagens (tais como o navegador Emacs Info, sendo executado 
sob X) podem fazer isso, ao passo que leitores Info que somente podem 
usar texto (tais como o leitor autônomo Info) podem exibir a versão 
textual.

@cindex @samp{^@@^H} for images in Info
A implementação para isso é colocar o seguinte construtor na saída de 
Info:

@example
^@@^H[image src="@var{binaryfile}" text="@var{txtfile}"
           alt="@var{alttext} ... ^@@^H]
@end example

@noindent onde @samp{^@@} e @samp{^H} significam os caracteres atuais de 
controle ``null'' e ``backspace''. Se um dos arquivos não estiver 
presente, então o correspondente argumento é omitido.

A justificativa para se mencionar isso aqui é que navegadores Info mais 
antigos (essa característica foi introduzida na versão 4.6 de Texinfo) 
exibirão o acima literalmente, o que, apesar de não ser agradável, não 
deveria ser danoso.


@node Escalonamento da Imagem
@subsection Escalonamento da Imagem
@c Capítulo 10 - Exibições Especiais
@c Seção 10.2 - Inserindo Imagens
@c Subseção 10.2.2 - Escalonamento da Imagem

@cindex Images, scaling
@cindex Scaling images
@cindex Width of images
@cindex Height of images
@cindex Aspect ratio of images
@cindex Distorting images
Os argumentos opcionais @var{width} e @var{height} para o comando 
@code{@@image} (veja-se a seção anterior) especificam o tamanho para o 
qual escalonar a imagem. Eles somente são levados em consideração no 
@TeX{}. Se nenhum for especificado, a imagem será apresentada no tamanho 
natural dela (fornecido no arquivo); se somente um for especificado, o 
outro será escalonado proporcionalmente; e se ambos forem especificados, 
ambos serão respeitados, portanto provavelmente distorcendo a imagem 
original mudando a taxa de aspecto dela.

@cindex Dimensions and image sizes
@var{width} e @var{height} podem ser especificados usando qualquer 
dimensão @TeX{} válida, a saber:

@table @asis
@item pt
@cindex Points (dimension)
ponto (72.27pt = 1in)
@item pc
@cindex Picas
pica (1pc = 12pt)
@item bp
@cindex Big points
ponto grande (72bp = 1in)
@item in
@cindex Inches
polegada
@item cm @c CONSERTE-ME
@cindex Centimeters
centímetro (2.54cm = 1in)
@item mm
@cindex Millimeters
milímetro (10mm = 1cm)
@item dd
@cindex Did@^ot points
ponto de did@^ot (1157dd = 1238pt)
@item cc
@cindex Ciceros
cicero (1cc = 12dd)
@item sp
@cindex Scaled points
ponto escalado (65536sp = 1pt)
@end table

@pindex ridt.eps
Por exemplo, o seguinte dimensionará um arquivo @file{ridt.eps} para uma 
polegada verticalmente, com a largura dimensionada proporcionalmente:

@example
@@image@{ridt,,1in@}
@end example

@pindex epsf.tex
Para que o @code{@@image} funcione com o @TeX{}, o arquivo 
@file{epsf.tex} deve ser instalado em algum lugar onde o @TeX{} possa 
encontrá-lo. (O local padrão é 
@file{@var{texmf}/tex/generic/dvips/epsf.tex}, onde @var{texmf} é a raiz 
da árvore de diretórios do teu @TeX{}). Esse arquivo está incluído na 
distribuição Texinfo e também está disponível a partir de 
@uref{ftp://tug.org/tex/epsf.tex}, entre outros lugares.

@code{@@image} pode ser usado dentro de uma linha e também para figuras 
exibidas. Portanto, se você pretende que ele seja exibido, assegure-se 
de deixar uma linha em branco antes do comando, ou a saída gerada será 
executada no texto anterior.


Atualmente, o dimensionamento de imagem está implementado somente no 
@TeX{}, não em HTML ou qualquer outro tipo de saída gerada.


@node Notas de Rodapé
@section Notas de Rodapé
@cindex Notas de Rodapé
@findex footnote

Uma @dfn{nota de rodapé} serve para uma referência que documenta ou 
elucida o texto principal. @footnote{Uma nota de rodapé deveria 
complementar ou expandir o texto principal, mas o(a) leitor(a) não 
deveria precisar ler uma nota de rodapé para entender o texto principal. 
Para uma discussão completa das notas de rodapé, veja-se
@cite{The Chicago Manual of Style},
publicado pela University of Chicago Press}.

As notas de rodapé distraem; use-as com moderação, no máximo, e é melhor 
evitá-las completamente.  As referências bibliográficas padrão 
geralmente são melhor colocadas em uma bibliografia, ao final de um 
documento, em vez de nas notas de rodapé.

@menu
* Comandos de Notas de Rodapé::           Como escrever uma nota de rodapé no Texinfo.
* Estilos de Notas de Rodapé::             Controlando como notas de rodapé aparecem no Info.
@end menu


@node Comandos de Notas de Rodapé
@subsection Comandos de Notas de Rodapé

No Texinfo, as notas de rodapé são criadas com o comando 
@code{@@footnote}. Esse comando é seguido imediatamente por uma chave 
esquerda, depois pelo texto da nota de rodapé e por uma chave direita 
finalizante.  As notas de rodapé podem ter qualquer comprimento (elas 
serão divididas entre páginas, se necessário), mas geralmente são 
curtas. O modelo é:

@example
texto principal@@footnote@{@var{texto da nota de rodapé}@}
@end example

Conforme mostrado aqui, o comando @code{@@footnote} deveria vir logo 
após o texto sendo anotado, sem espaço intermediário; caso contrário, o 
marcador de nota de rodapé poderá acabar iniciando uma linha.

Por exemplo, esta cláusula é seguida por uma amostra de nota de 
rodapé@footnote{Aqui está a amostra de nota de rodapé.}; no fonte do 
Texinfo, se parece com isto:

@example
@dots{}uma amostra de nota de rodapé@@footnote@{Aqui está a amostra de 
nota de rodapé.@}; no fonte do Texinfo@dots{}
@end example

Como você pode ver, esse fonte inclui dois sinais de pontuação próximos 
um do outro; nesse caso, @samp{.@};} é a sequência. Isso é normal (o 
primeiro termina a nota de rodapé e o segundo pertence à frase sendo 
anotada), de forma que não se preocupe, pois pode parecer estranho. 
(Outro estilo, perfeitamente aceitável, é colocar a nota de rodapé 
depois da pontuação pertencente à frase, como em 
@samp{;@@footnote@{...}).

Em um manual ou livro impresso, a marca de referência para uma nota de 
rodapé é um número pequeno e sobrescrito; o texto da nota de rodapé 
aparece na parte inferior da página, abaixo de uma linha horizontal.

No Info, a marca de referência para uma nota de rodapé é um par de 
parênteses com o número da nota de rodapé entre eles, assim: @samp{(1)}.  
A marca de referência é seguida por um link de referência cruzada para o 
texto da nota de rodapé se as notas de rodapé forem colocadas em Nodos 
separados (@pxref{Estilos de Notas de Rodapé}).

Na saída gerada HTML, as referências às notas de rodapé geralmente são 
marcadas com um número pequeno e sobrescrito que é renderizado como um 
link de hipertexto para o texto da nota de rodapé.

@cindex Critical editions
@cindex Nested footnotes
As notas de rodapé não podem ser aninhadas e não podem aparecer em 
títulos de seção de qualquer tipo ou em outros locais ``incomuns''.

Uma dica final: as notas de rodapé no argumento de um comando 
@code{@@item} para um @code{@@table} devem estar inteiramente na mesma 
linha que o @code{@@item} (como de costume).  @xref{Tabelas de Duas Colunas}.


@node Estilos de Notas de Rodapé
@subsection Estilos de Notas de Rodapé

O Info tem dois estilos de nota de rodapé, que determinam onde o texto 
da nota de rodapé está localizado:

@itemize @bullet
@cindex @samp{@r{End}} node footnote style
@item
No estilo de nó `Fim', todas as notas de rodapé de um nó são colocadas 
no final desse nó. As notas de rodapé são separadas do resto do nó por 
uma linha de traços com a palavra @samp{Notas de rodapé} dentro dela.  
Cada nota de rodapé começa com uma marca de referência @samp{(@var{n})}.

@need 700
@noindent
Aqui está um exemplo da saída gerada do Info para uma nota de rodapé no 
estilo de fim de nó:

@example
@group
--------- Notas de rodapé ---------

(1)  Aqui está uma amostra de nota de rodapé.
@end group
@end example

@cindex @samp{@r{Separate}} footnote style
@item
No estilo de nó `Separado', todas as notas de rodapé para um nó são 
colocadas em um nó próprio construído automaticamente.  Nesse estilo, 
uma ``referência de nota de rodapé'' segue cada marca de referência 
@samp{(@var{n})} no corpo do nó.  A referência da nota de rodapé é na 
verdade uma referência cruzada que você usa para chegar ao nó da nota de 
rodapé.

O nome do nó com as notas de rodapé é construído anexando-se 
@w{@samp{-Footnotes}} ao nome do nó que contém as notas de rodapé. 
(Consequentemente, o nó das notas de rodapé para o nó @file{Footnotes} é 
@w{@file{Footnotes-Footnotes}})! O nó das notas de rodapé tem um 
ponteiro de nó `Up' que leva de volta ao nó ancestral dele.

@noindent
Aqui está como a primeira nota de rodapé neste manual aparenta depois de 
ser formatada para o Info no estilo de nó separado:

@smallexample
@group
Arquivo: texinfo.info  Nó: Visão Geral-Footnotes, Acima: Visão Geral

(1) A primeira sílaba de "Texinfo" é pronunciada como "speck", não
"hex". @dots{}
@end group
@end smallexample
@end itemize

A menos que teu documento tenha notas de rodapé longas e importantes 
(como em, por diga-se, @cite{Decline and Fall @dots{}} de Gibbon), nós 
recomendamos o estilo @samp{end}, pois ele é mais simples para 
leitores(as) seguirem.

@findex footnotestyle
Use o comando @code{@@footnotestyle} para especificar um estilo de nota 
de rodapé de um arquivo do Info.  Escreva esse comando no início de uma 
linha seguido por um argumento, seja @samp{end} para o estilo de nó 
final ou @samp{separate} para o estilo do nó separado.

@need 700
Por exemplo,

@example
@@footnotestyle end
@end example
@noindent
ou
@example
@@footnotestyle separate
@end example

Escreva um comando @code{@@footnotestyle} antes ou logo depois da linha 
de fim de cabeçalho no início de um arquivo Texinfo.  (Você deveria 
incluir qualquer comando @code{@@footnotestyle} entre as linhas de 
início de cabeçalho e fim de cabeçalho, de forma que os comandos de 
formatação de região formatem as notas de rodapé conforme especificado).

Em HTML, quando o estilo da nota de rodapé for @samp{end}, ou se a saída 
gerada não for dividida, as notas de rodapé são colocadas no final da 
saída gerada. Se configurado como @samp{separate} e a saída gerada for 
dividida, elas serão colocadas em um arquivo separado.


@node Índices
@chapter Índices
@cindex Índices

Usando o Texinfo, você consegue gerar índices sem ter que ordenar e 
agrupar as entradas manualmente.  Em um índice, as entradas são listadas 
em ordem alfabética, juntamente com informações acerca de como encontrar 
a discussão de cada entrada.  Em um manual impresso, essas informações 
consistem de números de páginas.  Em um arquivo Info, essa informação é 
uma entrada de menu que leva para o primeiro nó referenciado.

O Texinfo fornece vários tipos predefinidos de índice: um índice para 
funções, um índice para variáveis, um índice para conceitos e assim por 
diante. Você pode combinar índices ou usá-los para outros fins que não 
os canônicos. Por último, você consegue definir teus próprios novos 
índices.


@menu
* Entradas de Índice::           Escolha palavras diferentes para entradas de índice.
* Índices Predefinidos::         Use índices diferentes para tipos diferentes de entradas.
* Comandos de Indexação::        Como fazer uma entrada de índice.
* Imprimindo Índices e Menus::   Como imprimir um índice em cópia impressa e gerar menus de índice no Info.
* Combinando Índices::           Como combinar índices.
* Novos Índices::                Como definir teus próprios índices.
@end menu


@node Índices Predefinidos
@section Índices Predefinidos

Texinfo fornece seis índices predefinidos.  Aqui estão os significados 
nominais deles, abreviações e os correspondentes comandos de entrada de 
índice:

@table @samp
@item cp
@cindex @code{cp} (concept) index
@findex cindex
(@code{@@cindex}) índice de conceito, para conceitos gerais.
@item fn
@cindex @code{fn} (function) index
@findex findex
(@code{@@findex}) índice de função, para nomes de funções e semelhantes 
a funções (como pontos de entrada de bibliotecas).
@item ky
@cindex @code{ky} (keystroke) index
@findex kindex
(@code{@@kindex}) índice de pressionamento de tecla, para comandos de 
teclado.
@item pg
@cindex @code{pg} (program) index
@findex pindex
(@code{@@pindex}) índice de programas, para nomes de programas.
@item tp
@cindex @code{tp} (data type) index
@findex tindex
(@code{@@tindex}) índice de tipo de dados, para nomes de tipos (como 
estruturas definidas em arquivos de cabeçalho).
@item vr
@cindex @code{vr} (variable) index
@findex vindex
(@code{@@vindex}) índice de variáveis, para nomes de variáveis ​​(como 
variáveis ​​globais de bibliotecas).
@end table

@noindent
Nem todo manual precisa de tudo isso, e a maioria dos manuais usa 
somente dois ou três, no máximo.  O presente manual, por exemplo, tem 
dois índices: um índice de conceito e um índice de comando @@ (que na 
verdade é o índice de função, mas é chamado de índice de comando no 
cabeçalho de capítulo).

Você não é obrigado(a) a usar os índices predefinidos estritamente para 
os fins canônicos deles.  Por exemplo, suponha que você deseje indexar 
algumas macros do pré-processador C.  Você poderia colocá-las no índice 
de função junto com as funções reais, apenas escrevendo comandos 
@code{@@findex} para elas; então, quando você imprimir o ``Índice de 
Função'' como um capítulo não numerado, você poderia dar a ele o título 
de `Índice de Função e Macro' e tudo seria consistente para o(a) 
leitor(a).

Por outro lado, é melhor não se afastar muito do significado dos índices 
predefinidos.  Do contrário, caso o teu texto seja combinado com outro 
texto proveniente de outros manuais, as entradas de índice não 
corresponderão.  Em vez disso, defina teu próprio novo índice 
(@pxref{Novos Índices}).

Nós recomendamos ter um índice no documento final sempre que possível, 
independentemente de quantos índices de fonte você usar, pois assim 
os(as) leitores(as) terão somente um lugar para procurar.  Dois ou mais 
índices de fonte podem ser combinados em um índice de saída gerada, 
usando-se os comandos @code{@@synindex} ou @code{@@syncodeindex} 
(@pxref{Combinando Índices}).


@node Comandos de Indexação
@section Definindo as Entradas de um Índice

@cindex Definindo entradas de indexação
@cindex Index entries, definindo
@cindex Entradas para um índice
@cindex Especificando entradas de índice
@cindex Criando entradas de índice

Os dados para criar um índice vem de muitos comandos individuais de 
indexação espalhados pelo arquivo fonte do Texinfo.  Cada comando diz 
para adicionar uma entrada para um índice específico; depois da 
formatação, o índice fornecerá o número da página atual ou o nome do nó 
como a referência.

Uma entrada de índice consiste de um comando de indexação no início de 
uma linha seguido, no restante da linha, pela entrada.

Por exemplo, esta seção começa com as seguintes cinco entradas para o 
índice de conceito:

@example
@@cindex Definindo entradas de indexação
@@cindex Entradas de índice, definindo
@@cindex Entradas para um índice
@@cindex Especificando entradas de índice
@@cindex Criando entradas de índice
@end example

Cada índice predefinido tem o próprio comando dele de 
indexação---@code{@@cindex} para o índice de conceito, @code{@@findex} 
para o índice de função e assim por diante, conforme listado na seção 
anterior.

As entradas do índice deveriam preceder o material visível que está 
sendo indexado.  Por exemplo:

@example
@@cindex alô
Alô, você!
@end example

@noindent Entre outros motivos, dessa forma, seguir os links de 
indexação (em qualquer contexto) acaba antes do material, onde os(as) 
leitores(as) querem estar, e não depois.

@cindex Tipos de fonte de índice
Por padrão, as entradas para um índice de conceito são impressas em uma 
fonte romana pequena e as entradas para os outros índices são impressas 
em uma fonte @code{@@code} pequena. Você pode mudar a forma como parte 
de uma entrada é impressa com os comandos usuais do Texinfo, como 
@code{@@file} para nomes de arquivos (@pxref{Marcando Texto}) e 
@code{@@r} para a fonte normal roman (@pxref{Fontes}).

@findex sortas
@cindex ordenar chaves para entradas de índice
@cindex ordenamento de índice
Para a saída gerada impressa, você pode especificar uma chave explícita 
de ordenação para uma entrada de índice usando @code{@@sortas} 
imediatamente depois do comando de índice.  Por exemplo:
@samp{@@findex @@sortas@{\@} \ @@r@{(literal \ em @@code@{@@@@math@})}
ordena a entrada de índice que isso produz sob barra invertida.


@vindex txiindexbackslashignore
@vindex txiindexhyphenignore
@vindex txiindexlessthanignore
@vindex txiindexatsignignore
Para reduzir a quantidade de chaves de ordenação que você precisa 
fornecer explicitamente, você pode optar por ignorar determinados 
caracteres nas entradas de índice para fins de ordenação.  Os caracteres 
que você pode, atualmente, optar por ignorar são @samp{\}, @samp{-}, 
@samp{<} e @samp{@@}, que são ignorados fornecendo-se como argumento 
para o comando @code{@@ set}, respectivamente, 
@code{txiindexbackslashignore}, @code{txiindexhyphenignore}, 
@code{txiindexlessthanignore} e @code{txiindexatsignignore}.  Por 
exemplo, especificar @samp{@@set txiindexbackslashignore} faz com que a 
entrada @samp{\mathopsup} no índice para este manual seja ordenada como 
se fosse @samp{mathopsup}, de forma que apareça entre as outras entradas 
que começam com ` M'.


@quotation Cuidado
Não use dois pontos em uma entrada de índice.  No Info, dois pontos 
separam o nome da entrada de menu do nome do nó, portanto, dois pontos 
na própria entrada confundem o Info.  @xref{Partes de Menu}, para mais 
informações relativas a estrutura de uma entrada de menu.
@end quotation

@node Entradas de Índice
@section Criando Entradas de Índice
@cindex Entradas de índice, criando
@cindex Entradas, criando índice

@cindex Escrevendo entradas de índice
@cindex Entradas de índice, conselhos sobre redação
@cindex Conselhos sobre escrever entradas
@cindex Capitalização de entradas de índice
As entradas do índice de conceito consistem de texto.  A melhor maneira 
de escrever um índice é a de elaborar entradas que sejam concisas, mas 
claras.  Se você puder fazer isso, o índice geralmente parecerá melhor 
se as entradas forem escritas exatamente como apareceriam no meio de uma 
frase, ou seja, colocando em maiúscula somente nomes próprios e siglas 
que sempre exigem letras maiúsculas. Essa é a convenção de caso que nós 
usamos na maioria dos índices dos manuais GNU.

Se você não sabe como tornar uma entrada concisa, mas clara, torne-a 
mais longa e clara---não concisa e confusa.  Se muitas das entradas 
tiverem várias palavras, o índice poderá parecer melhor se você usar uma 
convenção diferente: colocar em maiúscula a primeira palavra de cada 
entrada.  Qualquer que seja a convenção de caso que você usar, use-a de 
consistentemente.

Em qualquer caso, nunca coloque em maiúscula um nome que diferencia 
maiúsculas de minúsculas, como um nome de função da C ou Lisp ou um 
comando de shell; isso seria um erro ortográfico.  As entradas em 
índices diferentes do índice de conceito são nomes de símbolos em 
linguagens de programação ou nomes de programas; esses nomes geralmente 
diferenciam maiúsculas de minúsculas, de forma que use letras maiúsculas 
e minúsculas conforme exigido.

@cindex Entradas de índice exclusivas
É uma boa ideia tornar as entradas do índice exclusivas sempre que 
possível. Dessa forma, as pessoas que usam a saída gerada impressa ou o 
preenchimento on-line das entradas do índice não enxergarão listas 
indiferenciadas.  Considere essa uma oportunidade para tornar mais 
específicas entradas de índice idênticas, de forma que os(as) 
leitores(as) consigam encontrar mais facilmente o lugar exato que 
procuram.

Quando você estiver criando entradas de índice, é uma boa prática pensar 
nas diferentes maneiras pelas quais as pessoas podem procurar algo.  
Pessoas diferentes @emph{não} pensam nas mesmas palavras quando procuram 
algo.  Um índice útil terá itens indexados sob todas as palavras 
diferentes que as pessoas possam usar.  Por exemplo, um(a) leitor(a) 
pode pensar que é óbvio que os nomes de duas letras para índices 
deveriam ser listados sob ``Índices, nomes de duas letras, uma vez que 
``Índices'' são o conceito geral.  Todavia, outro(a) leitor(a) pode 
lembrar-se do conceito específico de nomes de duas letras e procurar a 
entrada listada como ``Nomes de duas letras para índices''.  Um bom 
índice terá ambas as entradas e ajudará ambos(as) os(as) leitores(as).

Assim como a composição tipográfica, a construção de um índice é uma 
arte especializada, cujas sutilezas possivelmente não sejam apreciadas 
até que você precise fazê-la você mesmo(a).


@node Imprimindo Índices e Menus
@section Imprimindo Índices e Menus
@cindex Imprimindo um index
@cindex Índices, imprimindo e menus
@cindex Gerando menus com índices
@cindex Menus gerados com índices
Imprimir um índice significa incluí-lo como parte de um manual ou 
arquivo do Info. Isso não acontece automaticamente apenas porque você 
usa @code{@@cindex} ou outros comandos de geração de entrada de índice 
no arquivo Texinfo; esses apenas faz com que os dados brutos do índice 
sejam acumulados.  Para gerar um índice, você precisa incluir o comando 
@code{@@printindex} no local no documento onde deseja que o índice 
apareça.  Além disso, como parte do processo de criação de um manual 
impresso, você precisa executar um programa chamado @code{texindex} 
(@pxref{Cópia Impressa}) para ordenar os dados brutos para produzir um 
arquivo de índice ordenado.  O arquivo de índice ordenado é o que 
realmente é usado para imprimir o índice.

Texinfo oferece seis tipos de índices predefinidos, que são suficientes 
na maioria dos casos.  @xref{Índices}, para informações a respeito 
disso, bem como para definir teus próprios novos índices, combinar 
índices e, o mais importante, conselhos sobre escrever as reais entradas 
do índice.  Esta seção foca na impressão de índices, o que é feito com o 
comando @code{@@printindex}.

@findex printindex
@code{@@printindex} recebe um argumento, uma abreviatura de índice de 
duas letras.  Ele lê o correspondente arquivo ordenado de índice (para 
saída gerada impressa) e o formata apropriadamente em um índice.

O comando @code{@@printindex} não gera um título de capítulo para o 
índice, pois manuais diferentes tem necessidades diferentes. 
Consequentemente, você deveria preceder o comando @code{@@printindex} 
com um adequado comando de seção ou capítulo (geralmente 
@code{@@appendix} ou @code{@@unnumbered}) para fornecer o título do 
capítulo e colocar o índice no tabela de conteúdo.  Preceda o título do 
capítulo com uma linha @code{@@node} como de costume.

Por exemplo:

@smallexample
@group
@@node Índice Variável
@@unnumbered Índice Variável

@@printindex vr
@end group

@group
@@node Índice de Conceito
@@unnumbered Índice de Conceito

@@printindex cp
@end group
@end smallexample

Se você tiver mais que um índice, nós recomendamos colocar o índice de 
conceito por último.

@itemize
@item
Na saída gerada impressa, @code{@@printindex} produz um índice 
tradicional de duas colunas, com líderes de pontos entre os termos do 
índice e os números das páginas.

@item
Na saída gerada do Info, @code{@@printindex} produz um menu especial 
contendo o número da linha da entrada, relativo ao início do nó.  
Leitores(as) do Info podem usar isso para ir para a linha exata de uma 
entrada, não apenas para o nó que a contém.  (Leitores(as) mais 
antigos(as) do Info irão apenas para o nó). Aqui está um exemplo:

@smallexample
* Primeira entrada de índice:   Topo.   (linha  7)
@end smallexample

@noindent O número real de espaços é variável, para justificar à direita 
o número da linha; foi reduzido aqui para que a linha caiba no manual 
impresso.

@item
Na saída gerada de texto simples, @code{@@printindex} produz o mesmo 
menu, mas os números das linhas são relativos ao início do arquivo, pois 
isso é mais conveniente para esse formato.

@item
Na saída gerada de HTML, @code{@@printindex} produz links para as 
entradas do índice.

@item
Na saída gerada XML e Docbook, ele simplesmente registra o índice a ser 
impresso.
@end itemize


@node Combinando Índices
@section Combinando Índices
@cindex Combinando índices
@cindex Índices, combinando-os

Às vezes você irá querer combinar dois índices, como funções e 
conceitos, talvez porque tenha poucas entradas suficientes que um índice 
separado pareceria bobo.

Você poderia colocar funções no índice de conceito escrevendo comandos 
@code{@@cindex} para elas em vez de comandos @code{@@findex} e produzir 
um manual consistente imprimindo o índice de conceito com o título 
`Índice de Função e Conceito' e não imprimir o `Índice de Função'; mas 
esse não é um procedimento robusto.  Ele funciona somente se o teu 
documento nunca for incluído como parte de outro documento que seja 
projetado para ter um índice de função separado; se o teu documento 
fosse incluído em tal documento, as funções oriundas do teu documento e 
aquelas oriundas do outro não terminariam juntas.  Além disso, para 
fazer com que os teus nomes de funções apareçam na fonte correta no 
índice de conceito, você precisaria colocar cada uma delas entre chaves 
de @code{@@code}.

@menu
* @code{@@syncodeindex}::               Como mesclar dois índices, usando a fonte @code{@@code} para o índice mesclado.
* @code{@@synindex}::                   Como mesclar dois índices, usando a fonte romana para o índice mesclado.
@end menu


@node @code{@@syncodeindex}
@subsection @code{@@syncodeindex}: Combinando índices usando @code{@@code}

@anchor{syncodeindex}@c antigo nome
@findex syncodeindex

Quando quiser combinar funções e conceitos em um índice, você deveria 
indexar as funções com @code{@@findex} e indexar os conceitos com 
@code{@@cindex} e usar o comando @code{@@syncodeindex} para redirecionar 
as entradas do índice de função para o índice de conceito.

O comando @code{@@syncodeindex} recebe dois argumentos; eles são o nome 
do índice para redirecionar e o nome do índice para o qual 
redirecioná-lo. O modelo se parece com isto:

@example
@@syncodeindex @var{from} @var{to}
@end example
@cindex Nomes predefinidos para índices
@cindex Nomes de duas letras para índices
@cindex Índices, nomes de duas letras
@cindex Nomes para índices
Para esse propósito, para os índices são dados nomes de duas letras:

@table @samp
@item cp
índice de conceito
@item fn
índice de função
@item vr
índice de variável
@item ky
índice de tecla
@item pg
índice de programa
@item tp
índice de tipo de dados
@end table

Escreva um comando @code{@@syncodeindex} antes ou logo depois da linha 
de fim do cabeçalho no início de um arquivo Texinfo. Por exemplo, para 
mesclar um índice de função com um índice de conceito, escreva o 
seguinte:

@example
@@syncodeindex fn cp
@end example

@noindent
Isso fará com que todas as entradas designadas para o índice de função 
sejam mescladas com o índice de conceito.

Para mesclar ambos, um índice de variáveis ​​e um índice de função, em um 
índice de conceito, escreva o seguinte:

@example
@group
@@syncodeindex vr cp
@@syncodeindex fn cp
@end group
@end example

@cindex Fontes para índices
O comando @code{@@syncodeindex} coloca todas as entradas oriundas do 
índice `from' (o índice redirecionado) na fonte @code{@@code}, 
substituindo qualquer fonte padrão que seja usada pelo índice para o 
qual as entradas são agora direcionadas. Dessa forma, se você direcionar 
nomes de funções oriundas de um índice de função para um índice de 
conceito, todos os nomes de funções serão impressos na fonte 
@code{@@code} como você esperaria.


@node @code{@@synindex}
@subsection @code{@@synindex}: Combinando índices

@anchor{synindex}@c nome antigo
@findex synindex

O comando @code{@@synindex} é quase o mesmo que o comando 
@code{@@syncodeindex}, exceto que não coloca as entradas do índice 
`from' na fonte @code{@@code}; em vez disso, coloca-os na fonte romana. 
Assim, você usa @code{@@synindex} ao mesclar um índice de conceito em um 
índice de função.

@xref{Imprimindo Índices e Menus}, para informações acerca de imprimir 
um índice no final de um livro ou criar um menu de índice em um arquivo 
Info.


@node Novos Índices
@section Definindo Novos Índices

@cindex Definindo novos índices
@cindex Índices, definindo novos
@cindex Novos índices, definindo
@findex defindex
@findex defcodeindex

Além dos índices predefinidos (@pxref{Índices Predefinidos}), você pode 
usar os comandos @code{@@defindex} e @code{@@defcodeindex} para definir 
novos índices. Esses comandos criam novos comandos @@ de indexação com 
os quais você marca entradas de índice. O comando @code{@@defindex} é 
usado assim:

@example
@@defindex @var{name}
@end example

Novos nomes de índice geralmente são palavras de duas letras, como @samp{au}.
Por exemplo:

@example
@@defindex au
@end example

Isso define um novo índice, chamado o índice @samp{au}. Ao mesmo tempo, 
ele cria um novo comando de indexação, @code{@@auindex}, que você pode 
usar para criar entradas de índice. Use esse novo comando de indexação 
da mesma forma que usaria um comando de indexação predefinido.

Por exemplo, aqui está um título de seção seguido por uma entrada de 
índice de conceito e duas entradas de índice @samp{au}.

@example
@@section Semântica Cognitiva
@@cindex esquemas de imagem cinestésica
@@auindex Johnson, Mark
@@auindex Lakoff, George
@end example

@noindent
(Evidentemente, @samp{au} aqui serve como uma abreviação para ``autor''.)

Texinfo constrói o novo comando de indexação concatenando o nome do 
índice com @samp{index}; portanto, definir um índice @samp{xy} leva à 
criação automática de um comando @code{@@xyindex}.

Use o comando @code{@@printindex} para imprimir o índice, como você faz 
com índices predefinidos. Por exemplo:

@example
@group
@@node Índice de Autor
@@unnumbered Índice de Autor

@@printindex au
@end group
@end example

O @code{@@defcodeindex} é como o comando @code{@@defindex}, exceto que, 
na saída impressa, ele imprime entradas em uma fonte @code{@@code} por 
padrão, em vez de uma fonte romana.

Você deveria definir novos índices antes da linha de fim de cabeçalho de 
um arquivo Texinfo e (é claro) antes de quaisquer comandos 
@code{@@synindex} ou @code{@@syncodeindex}
(@pxref{Cabeçalho do Arquivo do Texinfo}).

Conforme mencionado anteriormente (@pxref{Índices Predefinidos}), nós 
recomendamos ter um índice unitário no documento final sempre que 
possível, independentemente de quantos índices de fonte você usar, pois 
assim leitores(as) terão somente um lugar para procurar.

Ao criar um índice, @TeX{} cria um arquivo cuja extensão é o nome do 
índice (@pxref{Nomes dos arquivos de índice}). Portanto, você deveria 
evitar usar nomes de índices que colidam com extensões usadas para 
outros propósitos, tais como @samp{.aux} ou @samp{.xml}. 
@command{makeinfo} já informa um erro se um novo índice conflitar com um 
nome de extensão bem conhecido.


@node Inserções
@chapter Inserções Especiais
@cindex Inserindo caracteres especiais e símbolos
@cindex Inserções especiais

Texinfo fornece vários comandos para inserir caracteres que tenham 
significado especial no Texinfo, tais como colchetes, e para outros 
elementos gráficos que não correspondem a caracteres simples que você 
pode digitar.

@iftex
Esses são:

@itemize @bullet
@item Os caracteres especiais do Texinfo: @samp{@@ @{@} , \ #}.
@item Espaço em branco dentro e ao redor de uma frase.
@item Acentos.
@item Pontos e balas.
@item O logotipo @TeX{} e o símbolo de direitos autorais.
@item Os símbolos de moeda euro e libras.
@item O símbolo de graus.
@item O sinal de menos.
@item Expressões matemáticas.
@item Glifos para exemplos de programação: avaliação, macros, erros, etc.
@item Notas de rodapé.
@end itemize
@end iftex

@menu
* Caracteres Especiais::                  Inserindo @@ @{@} , \ #
* Inserindo Caracteres de Citação::       Inserindo aspas a esquerda e a direita, em código.
* Inserindo Espaço::                      Inserindo a quantidade correta de espaços em branco.
* Inserindo Acentos::                     Inserindo acentos e caracteres especiais.
* Inserindo Aspas::                       Inserindo aspas.
* Inserindo Subscritos e Sobrescritos::   Inserindo sub/sobrescritos.
* Inserindo Fórmulas Matemáticas::        Formatando expressões matemáticas.
* Glifos para Texto::                     Inserindo pontos, bullets, símbolos de moedas, etc.
* Glifos para Programação::               Indicando resultados de avaliação, expansão de macros, erros, etc.
* Inserindo Unicode::                     Inserindo um caractere Unicode por ponto de código.
@end menu


@node Caracteres Especiais
@section Caracteres Especiais: Inserindo @@ @{@} , \ #
@anchor{Braces Atsign}@c nomes anteriores para este nó
@anchor{Atsign Braces Comma}
@cindex Caracteres especiais, inserindo
@cindex Comandos para inserir caracteres especiais

@samp{@@} e chaves são os caracteres especiais básicos no Texinfo. Para 
inserir esses caracteres de forma que apareçam no texto, você precisa 
colocar um @samp{@@} na frente desses caracteres para evitar que o 
Texinfo os interprete mal. Comandos alfabéticos também são fornecidos.

Os demais caracteres (vírgula, barra invertida, cerquilha) são especiais 
somente em contextos restritos, conforme explicado nas respectivas 
seções.

@menu
* Inserindo um Símbolo Arroba::         @code{@@@@}, @code{@@atchar@{@}}.
* Inserindo Chaves::                    @code{@@@{ @@@}}, @code{@@l rbracechar@{@}}.
* Inserindo Uma Vírgula::               , and @code{@@comma@{@}}.
* Inserindo uma Barra Invertida::       \ and @code{@@backslashchar@{@}}.
* Inserindo um Símbolo Cerquilha::      # and @code{@@hashchar@{@}}.
@end menu


@node Inserindo um Símbolo Arroba
@subsection Inserindo `@@' com @code{@@@@} e @code{@@atchar@{@}}
@cindex Símbolo arroba, inserindo
@cindex Inserindo @@ @r{(literal @samp{@@})}
@findex @sortas{@@} @@ @r{(literal @samp{@@})} @c CONSERTE-ME
@findex atchar@{@} @r{(literal @samp{@@})}

@code{@@@@} produz um caractere @samp{@@} na saída gerada. Não coloque 
colchetes depois de um comando @code{@@@@}.

@code{@@atchar@{@}} também produz um caractere @samp{@@} na saída 
gerada. Ele precisa de colchetes seguintes, como de costume para 
comandos alfabéticos. Em Condicionais inline
(@pxref{Condicionais Inline}), pode ser necessário evitar usar o 
caractere literal @samp{@@} no fonte (e possivelmente seja mais claro em 
outros contextos).


@node Inserindo Chaves
@subsection Inserindo `@{ `@}' com @code{@@@{ @@@}} e @code{@@l rbracechar@{@}}

@findex @{ @r{(literal @samp{@{})}
@findex @} @r{(literal @samp{@}})}
@findex lbracechar@{@} @r{(literal @samp{@{})}
@findex rbracechar@{@} @r{(literal @samp{@}})}
@cindex Colchetes, inserindo

@code{@@@{} produz um @samp{@{} na saída gerada e @code{@@@}} produz um 
@samp{@}}. Não coloque colchetes depois de um comando @code{@@@{} ou 
@code{@@@}}.

@code{@@lbracechar@{@}} e @code{@@rbracechar@{@}} também produzem 
caracteres @samp{@{} e @samp{@}} unitários na saída gerada. Eles 
precisam de colchetes seguintes, como de costume para comandos 
alfabéticos. Em Condicionais inline (@pxref{Condicionais Inline}), pode 
ser necessário evitar usar caracteres de colchetes literais no fonte (e 
possivelmente seja mais claro em outros contextos).


@node Inserindo Uma Vírgula
@subsection Inserindo `,' com @code{@@comma@{@}}

@findex vírgula
@cindex Vírgula, inserindo

Normalmente, uma vírgula `,' é um caractere normal que pode ser 
simplesmente digitado em tua entrada onde você precisar dela.

No entanto, Texinfo usa a vírgula como um caractere especial somente em 
um contexto: para separar argumentos para aqueles comandos do Texinfo, 
como @code{@@acronym} (@pxref{@code{@@acronym}}) e @code{@@xref} 
(@pxref{Referências Cruzadas}), bem como macros definidas por usuário(a) 
(@pxref{Definindo Macros}), que levam mais que um argumento.
@c CONSERTE-ME
Como um caractere de vírgula confundiria a análise do Texinfo para esses 
comandos, você precisa usar o comando @samp{@@comma@{@}} se quiser 
passar uma vírgula real. Aqui estão alguns exemplos:

@example
@@acronym@{ABC, Uma @@comma@{@} bizarra@}
@@xref@{Vírgula,, O símbolo @@comma@{@}@}
@@mymac@{Um argument@@comma@{@} contendo uma vírgula@}
@end example

Embora @samp{@@comma@{@}} possa ser usada em praticamente qualquer 
lugar, não existe necessidade dela em nenhum lugar, exceto nesse caso 
incomum.

(Incidentalmente, o nome @samp{@@comma} carece do sufixo @samp{char} 
usado nos comandos complementares dele somente por razões históricas. 
Não pareceu importante o suficiente para definir um sinônimo).


@node Inserindo uma Barra Invertida
@subsection Inserindo `\' com @code{@@backslashchar@{@}}

@findex backslashchar
@cindex Barra invertida, inserindo

Normalmente, uma barra invertida `\' é um caractere normal no Texinfo 
que pode ser simplesmente digitado em tua entrada onde você precisar. O 
resultado é o de compor a barra invertida oriunda da fonte da máquina de 
escrever.

Porém, Texinfo usa a barra invertida como um caractere especial em um 
contexto restrito: para delimitar argumentos formais nos corpos de 
macros definidas por usuário(a) (@pxref{Definindo Macros}).

Devido aos caprichos da análise de argumentos de macro, é mais confiável 
passar um comando alfabético que produza uma barra invertida em vez de 
usar uma \ literal. Daí @code{@@backslashchar@{@}}. Aqui está um exemplo 
de chamada de macro:

@example
@@mymac@{Um argument@@backslashchar@{@} com uma barra invertida@}
@end example

@findex \backslash
Documentos do Texinfo também podem usar \ como um caractere de comando 
dentro de @code{@@math} (@pxref{Inserindo Fórmulas Matemáticas}). Nesse 
caso, @code{@@\} ou @code{\backslash} produz uma barra invertida 
``matematicista'' (proveniente da fonte do símbolo matemático), enquanto 
@code{@@backslashchar@{@}} produz uma barra invertida de máquina de 
escrever como sempre.

Embora @samp{@@backslashchar@{@}} possa ser usado em praticamente 
qualquer lugar, não existe necessidade dele, exceto nesses casos 
incomuns.


@node Inserindo um Símbolo Cerquilha
@subsection Inserindo `#' com @code{@@hashchar@{@}}

@findex hashchar@{@} @r{(literal @samp{#})}
@cindex Inserindo #
@cindex Símbolo cerquilha, inserindo

Normalmente, uma cerquilha `#' é um caractere normal no Texinfo que pode 
ser simplesmente digitado em tua entrada onde você precisar. O resultado 
é o de compor o caractere cerquilha oriundo da fonte atual.

@cindex Símbolo de número, inserindo
@cindex Octotherp, inserindo
@cindex Sinal sustenido (não), inserindo
Esse caractere tem muitos outros nomes, variando de acordo com a 
localidade, como ``sinal numérico'', ``libra'' e ``octothorp''. Às vezes 
também é chamado de ``sustenido'' ou ``sinal sustenido'', uma vez que se 
assemelha vagamente ao símbolo musical com esse nome. Em situações onde 
Texinfo é usado, ``cerquilha'' é o mais comum em nossa experiência.

No entanto, Texinfo usa o caractere cerquilha como um caractere especial 
em um contexto restrito: para introduzir a chamada diretiva @code{#line} 
e variantes (@pxref{External Macro Processors}).

Portanto, para a finalidade de compor um caractere cerquilha real em tal 
local (por exemplo, em um programa que precisa de documentação acerca de 
@code{#line}), é necessário usar @code{@@hashchar@{@}} ou alguma outra 
construção. Aqui está um exemplo:

@example
@@hashchar@{@} 10 "exemplo.c"
@end example

Embora @samp{@@hashchar@{@}} possa ser usado em praticamente qualquer 
lugar, não existe necessidade dele em nenhum lugar, exceto nesse caso 
incomum.

@node Inserindo Caracteres de Citação
@section Inserindo Caracteres de Citação

@cindex Inserindo caracteres de citação
@cindex Caracteres de citação, inserindo

Conforme explicado na seção anterior acerca de convenções gerais de 
entrada do Texinfo (@pxref{Convenções}), arquivos fonte do Texinfo usam 
o caractere ASCII @code{`} (decimal 96) para produzir uma aspa esquerda 
(`), e o ASCII @code{'} (decimal 39) para produzir uma aspa direita ('). 
Duplicar esses caracteres de entrada (@code{``} e @code{''}) produz 
aspas duplas (`` e ''). Essas são as convenções usadas pelo @TeX{}.

Isso funciona bem para texto. No entanto, em exemplos de código de 
computador, leitores(as) são especialmente propensos(as) a recortar e 
colar o texto literalmente---e, infelizmente, alguns visualizadores de 
documentos estragarão esses caracteres. (O leitor livre de PDF 
@command{xpdf} funciona bem, mas outros leitores de PDF, tanto livres 
quanto não livres, tem problemas).

Se isso for uma preocupação para você, Texinfo fornece estes dois 
comandos:

@table @code
@item @@codequoteundirected @var{on-off}
@findex codequoteundirected
@cindex aspas simples indirecionadas
faz com que a saída gerada para o caractere @code{'} em ambientes de 
código seja a aspa simples indirecionada, como esta:

@set txicodequoteundirected on
@code{'}.
@set txicodequoteundirected off

@item @@codequotebacktick @var{on-off}
@findex codequotebacktick
@cindex crase
@cindex acento grave, autônomo
faz com que a saída gerada para o caractere @code{`} em ambientes de 
código seja o caractere crase (acento grave autônomo), assim:

@set txicodequotebacktick on
@code{`}.
@set txicodequotebacktick off
@end table

Se você quiser essas configurações somente para parte do documento, 
@code{@@codequote... off} restaurará o comportamento normal, como em 
@code{@@codequoteundirected off}.

Essas configurações afetam @code{@@code}, @code{@@example}, 
@code{@@kbd}, @code{@@samp}, @code{@@verb} e @code{@@verbatim}.  
@xref{Realçamento Útil}.

@vindex txicodequoteundirected@r{, obsolete variable}
@vindex txicodequotebacktick@r{, obsolete variable}

Esse recurso costumava ser controlado usando-se @code{@@set} para mudar 
os valores das variáveis ​​correspondentes @code{txicodequoteundirected} e 
@code{txicodequotebacktick}; elas ainda são suportadas, mas a interface 
de comando é preferida.


@node Inserindo Espaço
@section Inserindo Espaço

@cindex Inserindo espaço
@cindex Espaço, inserindo

As seções a seguir descrevem comandos que controlam espaçamentos de 
vários tipos dentro e depois de frases.

@menu
* Espaços Múltiplos::               Inserindo múltiplos espaços.
* Não Finalizando Uma Frase::       Algumas vezes um ponto ``.'' não finaliza uma frase.
* Finalizando Uma Frase::           Algumas vezes finaliza.
* @code{@@frenchspacing}::          Especificando espaçamento de fim de frase.
* @code{@@dmn}::                    Formatando uma dimensão.
@end menu


@node Espaços Múltiplos
@subsection Espaços Múltiplos

@cindex Espaços múltiplos
@cindex Espaço em branco, inserindo
@cindex Espaço, inserindo horizontal
@findex <space>
@findex <tab>
@findex <newline>

Normalmente, vários caracteres de espaço em branco (espaço, tabulação e 
nova linha) são recolhidos em um espaço.

Ocasionalmente, você pode querer produzir vários espaços consecutivos, 
seja para fins de exemplo (por exemplo, o que teu programa faz com 
vários espaços como entrada), ou meramente para fins de aparência em 
títulos ou listas. Texinfo suporta três comandos: @code{@@@kbd{SPACE}}, 
@code{@@@kbd{TAB}} e @code{@@@kbd{NL}}, todos os quais inserem um espaço 
na saída gerada. (Aqui, @code{@@@kbd{SPACE}} representa um caractere 
@samp{@@} seguido por um espaço, ou seja, @samp{@@ }, @kbd{TAB} 
representa um caractere de tabulação, e @code{@@@kbd{NL}} representa um 
caractere @samp{@@} e fim de linha, ou seja, quando @samp{@@} é o último 
caractere em uma linha).

Por exemplo,
@example
Exemplo@@ @@ @@ @@
espaçoso.
@end example

@noindent produz

@example
Exemplo@ @ @ @
espaçoso.
@end example

Outros usos possíveis de @code{@@@kbd{SPACE}} foram subsumidos por 
@code{@@multitable} (@pxref{Tabelas Multi Colunas}).

Não coloque chaves depois de nenhum desses comandos.

Para produzir um espaço inquebrável, veja-se @ref{@code{@@tie}}.


@node Não Finalizando Uma Frase
@subsection Não Finalizando Uma Frase

@cindex Não finalizando uma frase
@cindex Pontuação sem fim de frase
@cindex Pontos, inserindo
@cindex Espaçamento, no meio de frases
Quando um ponto, ponto de exclamação ou ponto de interrogação estão no 
final de uma frase, um pouco mais de espaço é inserido depois deles em 
um manual tipográfico.

@findex <colon> @r{(suppress end-of-sentence space)}
@findex :
Geralmente, Texinfo consegue determinar automaticamente quando um ponto 
termina uma frase. No entanto, comandos especiais são necessários em 
algumas circunstâncias. Use o comando @code{@@:} depois de um ponto, 
ponto de interrogação, ponto de exclamação ou dois pontos que não 
deveriam ser seguidos por espaço extra. Isso é necessário nas seguintes 
situações:

@enumerate
@item Depois de um ponto que finalize uma abreviação em minúscula que
não esteja no final de uma frase.

@item Quando uma observação entre parênteses no meio de uma frase (como
esta!)@: terminar com um ponto, ponto de exclamação ou ponto de 
interrogação, @code{@@:} deveria ser usado depois do parêntese direito. 
Da mesma forma para colchetes direitos e aspas direitas (ambas, simples 
e duplas).

@end enumerate

Por exemplo:

@example
@samp{foo vs.@@: bar (ou?)@@: baz},
@end example

@noindent
A primeira linha abaixo mostra a saída gerada e, para comparação, a 
segunda linha mostra o espaçamento quando os comandos @samp{@@:} não 
foram usados.

@quotation
foo vs.@: bar (ou?)@: baz@*
foo vs. bar (ou?) baz
@end quotation

@iftex
Se você olhar atentamente, verá um pouco de espaço não essencial depois 
de @samp{vs.}@: e @samp{(ou?)}@:.

@end iftex

Possivelmente te ajude lembrar o que @code{@@:} faz imaginando que ele 
representa um caractere minúsculo invisível que impede que uma palavra 
termine com um ponto final.

Alguns comandos do Texinfo forçam espaçamento normal entre palavras, de 
forma que você não tenha que inserir @code{@@:} onde normalmente faria. 
Esses são os comandos de realçamento semelhantes a código, @code{@@var}, 
@code{@@abbr} e @code{@@acronym} (@pxref{Realçamento Útil}). Por 
exemplo, em @samp{@@code@{foo. bar@}} o ponto não é considerado ser o 
fim de uma frase, e nenhum espaço extra é inserido.

@code{@@:} não tem efeito na saída HTML ou Docbook.


@node Finalizando Uma Frase
@subsection Finalizando Uma Frase

@cindex Finalizando Uma Frase
@cindex Frase, pontuação final

@findex . @r{(fim de frase)}
@findex ! @r{(fim de frase)}
@findex ? @r{(fim de frase)}
@cindex Espaçamento, ao final de frases
Como mencionado acima, Texinfo normalmente insere espaço adicional 
depois do fim de uma frase. Ele usa a mesma heurística para isso que o 
@TeX{}: uma frase termina com um ponto final, ponto de exclamação ou 
ponto de interrogação, precedido ou seguido por pontuação opcional de 
fechamento, e, então, espaço em branco, e @emph{não} precedido por uma 
letra maiúscula.

Use @code{@@.}@: em vez de um ponto, @code{@@!}@: em vez de um ponto de 
exclamação e @code{@@?}@: em vez de um ponto de interrogação ao final de 
uma frase que termine com uma letra maiúscula. Não coloque chaves depois 
de quaisquer desses comandos. Por exemplo:

@example
Dê para M.I.B. e para M.E.W@@. Também, dê para R.J.C@@.
Dê para M.I.B. e para M.E.W. Também, dê para R.J.C.
@end example

@noindent
A saída gerada segue. Na saída gerada impressa e no Info, você pode ver 
o espaço em branco extra desejado depois do @samp{W} na primeira linha.

@quotation
Dê para M.I.B. e para M.E.W@. Também, dê para R.J.C@.@*
Dê para M.I.B. e para M.E.W. Também, dê para R.J.C.
@end quotation

Na saída gerada de HTML, @code{@@.}@: é equivalente a um simples 
@samp{.}; o mesmo vale para @code{@@!}@: e @code{@@?}@:.

@cindex Pontuação de fechamento e finalização de frase
A ``pontuação de fechamento'' mencionada acima é definida como um 
parêntese direito (@samp{)}, colchete direito (@samp{]}, ou aspa 
direita, simples ou dupla (@samp{'} e @samp{''}; as muitas aspas 
direitas Unicode adicionais possíveis não estão incluídas). Esses 
caracteres podem ser considerados como invisíveis com respeito a se um 
determinado ponto finaliza uma frase. (Essa é a mesma regra que @TeX{}). 
Por exemplo, os pontos em @samp{foo.) Bar} e @samp{foo.'' Bar} finalizam 
frases.

Os significados de @code{@@:} e @code{@@.}, etc.@: no Texinfo são 
projetados para funcionar bem com os comandos de movimento de frase do 
Emacs (@pxref{Sentences,,, emacs, O Manual do GNU Emacs}). Possivelmente 
ajude imaginar que o @samp{@@} em @samp{@@.}, etc., é uma letra 
minúscula invisível `a' que torna uma letra maiúscula antes dela 
irrelevante para os propósitos de decidir se o ponto final termina a 
frase.

Alguns comandos do Texinfo não são considerados como sendo uma 
abreviação, mesmo que possam terminar com uma letra maiúscula quando 
expandidos, de forma que você não tenha que inserir @code{@@.} e 
acompanhantes. Notavelmente, esse é o caso para comandos de realçamento 
semelhantes a código, argumentos @code{@@var} terminando com uma letra 
maiúscula, @code{@@LaTeX} e @code{@@TeX}. Por exemplo, essa frase 
terminou com @samp{... @@code@{@@@@TeX@}.}; @code{@@.} não foi 
necessário. Da mesma forma, em @code{... @@var@{VARNAME@}. Texto} o 
ponto depois de @var{VARNAME} termina a frase; não existe necessidade de 
usar @code{@@.}.


@node @code{@@frenchspacing}
@subsection @code{@@frenchspacing} @var{val}: Controle de Espaçamento de Frase

@anchor{frenchspacing}@c Nome antigo
@findex frenchspacing
@cindex Espaçamento francês
@cindex Frases, espaçamento depois
@cindex Espaço, depois de frases

Na tipografia americana, é tradicional e correto colocar espaço extra ao 
final de uma frase. Esse é o padrão no Texinfo (implementado no Info e 
na saída gerada impressa; para HTML, nós não tentamos substituir o 
navegador). Na tipografia francesa (e outras), esse espaço extra é 
errado; todos os espaços são uniformes.

Portanto, Texinfo fornece o comando @code{@@frenchspacing} para 
controlar o espaçamento depois da pontuação. Ele lê o resto da linha 
como argumento, que precisa ser a única palavra @samp{on} ou @samp{off} 
(sempre essas palavras, independentemente do idioma do documento). Aqui 
está um exemplo:

@example
@@frenchspacing on
Isso é texto. Duas frases. Três frases. Espaçamento francês.

@@frenchspacing off
Isso é texto. Duas frases. Três frases. Espaçamento não francês.
@end example

@noindent produz:

@frenchspacing on
Isso é texto. Duas frases. Três frases. Espaçamento francês.

@frenchspacing off
Isso é texto. Duas frases. Três frases. Espaçamento não francês.

@code{@@frenchspacing} também afeta a saída gerada depois de @code{@@.}, 
@code{@@!} e @code{@@?} (@pxref{Finalizando Uma Frase}).

@code{@@frenchspacing} não tem efeito na saída gerada de HTML ou 
Docbook; para XML, ele gera uma transliteração dele mesmo 
(@pxref{Formatos de Saída}).


@node @code{@@dmn}
@subsection @code{@@dmn}@{@var{dimension}@}: Formatar uma dimensão

@anchor{dmn}@c nome antigo
@cindex Espaço fino entre número, dimensão
@cindex Formatação de dimensão
@cindex Formatar uma dimensão
@findex dmn

Você pode usar o comando @code{@@dmn} para formatar uma dimensão com um 
pouco de espaço extra na saída gerada impressa. Ou seja, ao ver 
@code{@@dmn}, @TeX{} insere apenas espaço suficiente para a composição 
adequada; em outros formatos da saída gerada, os comandos de formatação 
não inserem espaço algum.

Para usar o comando @code{@@dmn}, escreva o número e depois siga-o 
imediatamente, sem espaço intermediário, por @code{@@dmn}, e depois pela 
dimensão entre chaves. Por exemplo,

@example
Papel A4 tem 8,27@@dmn@{in@} de largura.
@end example

@noindent
produz

@quotation
Papel A4 tem 8,27@dmn{in} de largura.
@end quotation

Nem todo mundo usa esse estilo. Algumas pessoas preferem 
`8.27@tie{}in.'@: ou `8.27@tie{}inches'. Nesses casos, no entanto, você 
precisa usar @code{@@tie} (@pxref{@code{@@tie}}) ou @code{@@w} 
(@pxref{@code{@@w}}) de forma que nenhuma quebra de linha possa ocorrer 
entre o número e a dimensão. Além disso, se você escrever um ponto 
depois de uma abreviação dentro de uma frase (como com `in.'@: acima), 
você deveria escrever @samp{@@:} depois do ponto para evitar que @TeX{} 
insira espaços em branco extras, como mostrado aqui.
@xref{Não Finalizando Uma Frase}.


@node Inserindo Acentos
@section Inserindo Acentos

@cindex Inserindo acentos
@cindex Acentos, inserindo
@cindex Acentos flutuantes, inserindo

Aqui está uma tabela com os comandos que Texinfo fornece para inserir 
acentos flutuantes. Eles todos precisam de um argumento, o caractere a 
ser acentuado, que pode ou ser fornecido entre chaves como de costume 
(@code{@@'@{e@}}), ou, como um caso especial, as chaves podem ser 
omitidas, em cujo caso o argumento é o próximo caractere (@code{@@'e}). 
Isso é para tornar o fonte o mais conveniente possível para digitar-se e 
ler-se, já que caracteres acentuados são muito comuns em alguns idiomas.

Se o comando for alfabético, como @code{@@dotaccent}, então precisa 
existir um espaço entre o nome do comando e o argumento se chaves não 
forem usadas. Se o comando for não alfabético, como @code{@@'}, então 
precisa @emph{não} existir um espaço; o argumento é o exato próximo 
caractere.

Exceção: o argumento para @code{@@tieaccent} precisa ser colocado entre 
chaves (já que são dois caracteres em vez de um).

Para obter a saída gerada dos verdadeiros caracteres acentuados no Info, 
não apenas as transliterações ASCII, é necessário especificar-se 
@code{@@documentencoding} com uma codificação que suporte os caracteres 
exigidos (@pxref{@code{@@documentencoding}}). Nesse caso, você também 
pode usar caracteres não ASCII (por exemplo, pré-acentuados) no arquivo 
fonte.

@findex " @r{(umlaut accent)}
@cindex Acento trema
@findex ' @r{(acute accent)}
@cindex Acento agudo
@findex = @r{(macron accent)}
@cindex Acento Macron
@findex ^ @r{(circumflex accent)}
@cindex Acento circunflexo
@findex ` @r{(grave accent)}
@cindex Acento grave
@findex ~ @r{(tilde accent)}
@cindex Acento til
@findex , @r{(cedilla accent)}
@cindex Acento cedilha
@findex dotaccent
@cindex Acento ponto
@findex H @r{(Hungarian umlaut accent)}
@cindex Acento trema húngaro
@findex ogonek
@cindex Diacrítico Ogonek
@findex ringaccent
@cindex Acento de anel
@findex tieaccent
@cindex Acento de ligação posterior
@findex u @r{(breve accent)}
@cindex Acento breve
@findex ubaraccent
@cindex Acento abaixo da barra
@findex udotaccent
@cindex Acento sublinhado
@findex v @r{(caron)}
@cindex Acento Hacek
@cindex Acento Check
@cindex Caron
@multitable {@t{@@questiondown@{@}}} {Output} {acento caron/hacek/check}
@headitem Comando           @tab Saída gerada   @tab O quê
@item @t{@@"o}              @tab @"o            @tab acento trema
@item @t{@@'o}              @tab @'o            @tab acento agudo
@item @t{@@,@{c@}}          @tab @,{c}          @tab acento cedilha
@item @t{@@=o}              @tab @=o            @tab acento macron/overbar
@item @t{@@^o}              @tab @^o            @tab acento circunflexo
@item @t{@@`o}              @tab @`o            @tab acento grave
@item @t{@@~o}              @tab @~o            @tab acento til
@item @t{@@dotaccent@{o@}}  @tab @dotaccent{o}  @tab acento overdot
@item @t{@@H@{o@}}          @tab @H{o}          @tab longo trema húngaro
@item @t{@@ogonek@{a@}}     @tab @ogonek{a}     @tab ogonek
@item @t{@@ringaccent@{o@}} @tab @ringaccent{o} @tab acento ring
@item @t{@@tieaccent@{oo@}} @tab @tieaccent{oo} @tab acento de ligação posterior
@item @t{@@u@{o@}}          @tab @u{o}          @tab acento breve
@item @t{@@ubaraccent@{o@}} @tab @ubaraccent{o} @tab acento underbar
@item @t{@@udotaccent@{o@}} @tab @udotaccent{o} @tab acento underdot
@item @t{@@v@{o@}}          @tab @v{o}          @tab acento caron/hacek/check
@end multitable

Esta tabela lista os comandos do Texinfo para inserir outros caracteres 
comumente usados ​​em idiomas diferentes do inglês.

@findex questiondown
@cindex @questiondown{}
@findex exclamdown
@cindex @exclamdown{}
@findex aa
@cindex @aa{}
@findex AA
@cindex @AA{}
@findex ae
@cindex @ae{}
@findex AE
@cindex @AE{}
@cindex Icelandic
@cindex Eth
@findex dh
@cindex @dh{}
@findex DH
@cindex @DH{}
@findex dotless
@cindex @dotless{i} (dotless i)
@cindex @dotless{j} (dotless j)
@cindex Dotless i, j
@findex l
@cindex @l{}
@findex L
@cindex @L{}
@findex o
@cindex @o{}
@findex O
@cindex @O{}
@findex oe
@cindex @oe{}
@findex OE
@cindex @OE{}
@cindex Romance ordinals
@cindex Ordinals, Romance
@cindex Feminine ordinal
@findex ordf
@cindex @ordf{}
@cindex Masculine ordinal
@findex ordm
@cindex @ordm{}
@findex ss
@cindex @ss{}
@cindex Es-zet
@cindex Sharp S
@cindex German S
@cindex Thorn
@findex th
@cindex @th{}
@findex TH
@cindex @TH{}
@multitable {@t{@@questiondown@{@}}} {oe OE} {es-zet or sharp S}
@item @t{@@exclamdown@{@}}      @tab @exclamdown{}   @tab ! de cabeça para baixo
@item @t{@@questiondown@{@}}    @tab @questiondown{} @tab ? de cabeça para baixo
@item @t{@@aa@{@} @@AA@{@}}     @tab @aa{} @AA{}     @tab a,A com círculo
@item @t{@@ae@{@} @@AE@{@}}     @tab @ae{} @AE{}     @tab ligaduras ae,AE
@item @t{@@dh@{@} @@DH@{@}}     @tab @dh{} @DH{}     @tab eth islandês
@item @t{@@dotless@{i@}}        @tab @dotless{i}     @tab i sem ponto
@item @t{@@dotless@{j@}}        @tab @dotless{j}     @tab j sem ponto
@item @t{@@l@{@} @@L@{@}}       @tab @l{} @L{}       @tab L,l suprimido
@item @t{@@o@{@} @@O@{@}}       @tab @o{} @O{}       @tab O,o com barra
@item @t{@@oe@{@} @@OE@{@}}     @tab @oe{} @OE{}     @tab ligaduras de oe,OE
@item @t{@@ordf@{@} @@ordm@{@}} @tab @ordf{} @ordm{} @tab Ordinais espanhóis
@item @t{@@ss@{@}}              @tab @ss{}           @tab es-zet ou sharp S
@item @t{@@th@{@} @@TH@{@}}     @tab @th{} @TH{}     @tab thorn islandês
@end multitable


@node Inserindo Aspas
@section Inserindo Aspas
@cindex Inserindo aspas
@cindex Aspas, inserindo

@cindex Caracteres de citação (`'), no fonte
Use caracteres de aspas simples duplicadas para iniciar e terminar 
citações:
@w{@t{`@w{}`@dots{}'@w{}'}}. @TeX{} converte duas aspas simples para 
marcas duplicadas de citação à esquerda e à direita,
@c isso aparece como "assim" no Info, o que é simplesmente confuso.
@iftex
``assim'',
@end iftex
e Info converte caracteres duplicados de aspas simples para aspas duplas 
ASCII: @w{@t{`@w{}`@dots{}'@w{}'}} se torna @w{@t{"@dots{}"}}.

Ocasionalmente, você pode precisar produzir duas aspas simples 
consecutivas; por exemplo, ao documentar uma linguagem de computador 
como Maxima, onde @t{'@w{}'} é um comando válido. Você pode fazer isso 
com a entrada @t{'@@w@{@}'}; o comando vazio @code{@@w} interrompe a 
combinação nos caracteres de aspas duplas.

@cindex Caracteres Unicode de citação
@cindex Acento grave, versus aspa esquerda
O caractere de aspa esquerda (@t{`}, código ASCII 96) usado no Texinfo é 
um acento grave nos padrões de conjunto de caracteres ANSI e ISO. Nós o 
usamos como um caractere de aspas porque assim é como @TeX{} está 
configurado, por padrão.

Texinfo suporta várias outras aspas usadas em idiomas diferentes do 
inglês. Abaixo está uma tabela com os comandos que Texinfo fornece para 
inserir aspas.

@cindex UTF-8
@cindex ISO 8859-15
@cindex Latin 9
@cindex ISO 8859-1
@cindex Latin 1

Para a finalidade de se obter os símbolos para as aspas na saída gerada 
codificada do Info, é necessário especificar-se
@code{@@documentencoding UTF-8}. (@xref{@code{@@documentencoding}}).
Guillemets duplos também estão presentes na ISO 8859-1 (também conhecida 
como Latin@tie{}1) e na ISO 8859-15 (também conhecida como 
Latin@tie{}9).

@cindex Fontes modernas de Computador Europeu
@cindex EC fontes
As fontes padrão do @TeX{} suportam as aspas usuais usadas em inglês 
(aquelas produzidas com aspas simples de ASCII unitárias e duplicadas). 
Para as outras aspas, @TeX{} usa fontes European Computer Modern (EC) 
(@file{ecrm1000} e outras variantes). Essas fontes estão disponíveis 
gratuitamente, é claro; você pode baixá-las a partir de 
@url{http://ctan.org/pkg/ec}, entre outros lugares.

@cindex Fontes CM-Super
As fontes livres EC são fontes bitmap criadas com Metafont. 
Especialmente para visualização on-line, as versões Type@tie{}1 (vetor) 
das fontes são preferíveis; elas estão disponíveis no pacote de fontes 
CM-Super (@url{http://ctan.org/pkg/cm-super}).

Ambas as distribuições incluem instruções de instalação.

@cindex Aspas simples
@cindex Aspas duplas
@cindex Aspas à esquerda
@cindex Aspas à direita
@findex quotedblleft
@cindex `@w{}`
@findex quoteleft
@cindex `
@cindex " (caractere de aspas duplas não direcionadas)
@findex quotedblright
@cindex '@w{}'
@findex quoteright
@cindex '
@cindex Aspas duplas baixo-9
@cindex Aspas simples baixo-9
@findex quotedblbase
@cindex @quotedblbase{} (aspas duplas baixo-9)
@findex quotesinglbase
@cindex @quotesinglbase{} (aspas simples baixo-9)
@cindex Aspas angulares
@cindex Guillemets
@cindex Guillemots
@cindex Aspas francesas
@cindex Aspas, francesas
@cindex Aspas alemãs
@cindex Aspas, alemãs
@cindex Guillemets duplos
@cindex Guillemets simples
@cindex Aspas de ângulo duplo
@cindex Aspas angulares simples
@cindex Aspas de ângulo apontando para a esquerda
@cindex Aspas de ângulo apontando para a direita
@cindex Aspas duplas de ângulo apontando para a esquerda
@cindex Aspas duplas de ângulo apontando para a direita
@cindex Aspas simples de ângulo apontando para a esquerda
@cindex Aspas simples de ângulo apontando para a direita
@findex guillemetleft
@findex guillemotleft
@cindex @guillemetleft{}
@findex guillemetright
@findex guillemotright
@cindex @guillemetright{}
@findex guilsinglleft
@cindex @guilsinglleft{}
@findex guilsinglright
@cindex @guilsinglright{}
@c A terceira coluna não tem o texto completo no protótipo,
@c de forma que a saída gerada do Info cabe em 72 colunas.
@multitable {@t{@@quotedblright@{@} '@w{}'}} {Glyph} {Aspas duplas apontando para a direita}
@headitem Comando                    @tab Glifo             @tab Nome Unicode (ponto)
@item @verb{.@quotedblleft{} ``.}    @tab @quotedblleft{}   @tab Aspas duplas esquerdas (U+201C)
@item @verb{.@quotedblright{} ''.}   @tab @quotedblright{}  @tab Aspas duplas direitas (U+201D)
@item @verb{.@quoteleft{} `.}        @tab @quoteleft{}      @tab Aspas simples esquerdas (U+2018)
@item @verb{.@quoteright{} '.}       @tab @quoteright{}     @tab Aspas simples direitas (U+2019)
@item @t{@@quotedblbase@{@}}         @tab @quotedblbase{}   @tab Aspas duplas baixo-9 (U+201E)
@item @t{@@quotesinglbase@{@}}       @tab @quotesinglbase{} @tab Aspas simples baixo-9 (U+201A)
@item @t{@@guillemetleft@{@}}        @tab @guillemetleft{}  @tab Aspas duplas apontando para a esquerda (U+00AB)
@item @t{@@guillemetright@{@}}       @tab @guillemetright{} @tab Aspas duplas apontando para a direita (U+00BB)
@item @t{@@guilsinglleft@{@}}        @tab @guilsinglleft{}  @tab Aspas simples apontando para a esquerda (U+2039)
@item @t{@@guilsinglright@{@}}       @tab @guilsinglright{} @tab Aspas simples apontando para a direita (U+203A)
@end multitable

@cindex Auk, espécies de pássaro
Para as aspas de ângulo duplo, nomes de glifos da Adobe e @LaTeX{} 
também são suportados: @code{@@guillemotleft} e @code{@@guillemotright}. 
Esses nomes estão incorretos; um ``guillemot'' é uma espécie de pássaro 
(um tipo de auk).

As tradições para o uso de aspas variam muito entre os idiomas 
(@url{http://en.wikipedia.org/wiki/Quotation_mark}). Texinfo não fornece 
comandos ou configurações para composição de aspas de acordo com as 
numerosas tradições. Portanto, você tem que escolher os comandos 
apropriados para o idioma do teu manual. Às vezes, apelidos 
(@pxref{@code{@@alias}}) podem simplificar o uso e tornar o código-fonte 
mais legível. Por exemplo, em alemão, @code{@@quotedblbase} é usado para 
as aspas duplas à esquerda, e as aspas duplas à direita são o glifo 
produzido por @code{@@quotedblleft}, o que é contraintuitivo. Portanto, 
nesse caso, os seguintes apelidos seriam convenientes:

@example
@@alias lgqq = quotedblbase
@@alias rgqq = quotedblleft
@end example


@node Inserindo Subscritos e Sobrescritos
@section @code{@@sub} e @code{@@sup}: Inserindo Subscritos e Sobrescritos

@findex sub
@findex sup
@cindex Subscritos e sobrescritos, texto

Você consegue inserir subscritos e sobrescritos, em texto ou matemática, 
com os comandos @code{@@sub} e @code{@@sup}. (Para outras expressões 
matemáticas, veja-se a próxima seção). Por exemplo, aqui está um 
subscrito e sobrescrito puramente textual:

@example
aqui@@sub@{abaixo@}@@sup@{acima@}
@end example

@noindent produz:

@display
aqui@sub{abaixo}@sup{acima} @c CONSERTE-ME
@end display

@cindex Fonte itálica matemática
Dentro de @code{@@math}, @code{@@sub} e @code{@@sup} produzem subscritos 
e sobrescritos matemáticos. Isso usa uma fonte diferente na saída gerada 
do @TeX{} (itálico de matemática, em vez de itálico de texto); não faz 
diferença nos outros formatos de saída. Aqui está um exemplo:

@example
@@math@{e@@sup@{x@}@}
@end example

@noindent produz:

@display
@math{e@sup{x}}
@end display

No Info e texto simples, independentemente de ser usado dentro de 
@code{@@math}, @code{@@sub@{@var{texto}@}} é gerado como 
@samp{_@{@var{texto}@}} e @code{@@sup@{@var{texto}@}} como 
@samp{^@{@var{texto}@}}, incluindo as chaves literais (para marcar o 
início e o fim do texto de ``script'' para o(a) leitor(a)).

Quando o formato da saída gerada (e o programa de exibição) permite 
(matemática do @TeX{}, HTML), o sobrescrito é configurado acima do 
subscrito quando ambos os comandos forem fornecidos consecutivamente.


@node Inserindo Fórmulas Matemáticas
@section @code{@@math}: Inserindo Expressões Matemáticas

@anchor{math}@c nome antigo
@findex math
@cindex Expressões matemáticas, inserindo
@cindex Fórmulas, matemática

Você consegue escrever uma expressão matemática curta com o comando 
@code{@@math}. Escreva a expressão matemática entre chaves, assim:

@example
@@math@{(a + b) = (b + a)@}
@end example

@iftex
@noindent Isso produz o seguinte no @TeX{}:

@display
@math{(a + b) = (b + a)}
@end display

@noindent e o seguinte em outros formatos:
@end iftex
@ifnottex
@noindent Isso produz o seguinte no Info e em HTML:
@end ifnottex

@example
(a + b) = (b + a)
@end example

@cindex MathML, não usado
O comando @code{@@math} não tem efeito especial na saída gerada de Info 
e de HTML. @command{makeinfo} expande quaisquer comandos @@ como de 
costume, mas não tenta usar (ou produzir) boa formatação matemática de 
forma alguma (sem uso de MathML, etc.). A saída gerada de HTML é 
delimitada por @code{<em>...</em>}, mas nada mais.

@findex \mathopsup
No entanto, no que diz respeito à saída gerada do @TeX{}, comandos 
matemáticos simples do @TeX{} são permitidos no @code{@@math}, começando 
com @samp{\}. Em essência, o @code{@@math} comuta para o modo matemático 
simples do @TeX{}. (Exceção: o comando simples do @TeX{} @code{\sup}, 
que tipografa o nome do operador matemático `sup', precisa ser acessado 
como @code{\mathopsup}, devido ao conflito com o comando @code{@@sup} do 
Texinfo).

Isso permite que você use todas as sequências de controle matemático 
simples do @TeX{} para símbolos, funções e assim por diante, e assim 
obtenha a formatação adequada na saída gerada do @TeX{}, pelo menos.

Os comandos @code{@@sub} e @code{@@sup} descritos na seção anterior 
produzem subscritos e sobrescritos na saída gerada de HTML, bem como no 
@TeX{}; os caracteres simples do @TeX{} @code{_} e @code{^} para 
subscritos e sobrescritos são reconhecidos pelo @TeX{} dentro do 
@code{@@math}, mas não fazem nada de especial em HTML ou outros formatos 
de saída.

É melhor usar @samp{\} em vez de @samp{@@} para quaisquer comandos 
matemáticos desse tipo; caso contrário, @command{makeinfo} reclamará. 
Por outro lado, @command{makeinfo} permite entrada com chaves 
correspondentes (inescapadas), como @samp{k_@{75@}}; ele reclama acerca 
dessas chaves vazias na entrada regular.

Aqui está um exemplo:

@example
@@math@{\sin 2\pi \equiv \cos 3\pi@}
@end example

@iftex
@noindent que se parece com isto no @TeX{}:
@display
@math{\sin 2\pi \equiv \cos 3\pi}
@end display

@noindent mas
@end iftex
@noindent que se parece com a entrada no Info e em HTML:
@example
\sin 2\pi \equiv \cos 3\pi
@end example

@findex @sortas{\} \ @r{(\ literal em @code{@@math})} @c CONSERTE-ME
Como @samp{\} é um caractere de escape dentro de @code{@@math}, você 
pode usar @code{@@\} para obter uma barra invertida literal (@code{\\} 
funcionará no @TeX{}, mas você obteria os dois caracteres literais 
@samp{\\} no Info). @code{@@\} não está definido fora de @code{@@math}, 
pois uma @samp{\} normalmente produz uma @samp{\} literal (máquina de 
escrever). Você também pode usar @code{@@backslashchar@{@}} em qualquer 
modo para obter uma barra invertida de máquina de escrever. 
@xref{Inserindo uma Barra Invertida}.

@cindex Equações exibidas
@cindex Equações, exibidas
Para equações exibidas, você precisa, no presente, usar @TeX{} 
diretamente (@pxref{Comandos do Formatador Bruto}).

@node Glifos para Texto
@section Glifos para Texto

@anchor{Glyphs}@c nome antigo
@anchor{TeX and copyright}@c outro nodo antigo, agora dividido em dois
@cindex Glifos para texto
@cindex Glifos textuais

Texinfo tem suporte para alguns glifos adicionais que são comumente 
usados ​​em texto impresso, mas não disponíveis em ASCII@. Claro, existem 
muitos milhares mais. É possível usar caracteres Unicode como estão no 
que diz respeito ao @code{makeinfo}, mas o @TeX{} não é tão sortudo.

@menu
* @code{@@TeX @@LaTeX}::                As logomarcas do @TeX{}.
* @code{@@copyright}::                  O símbolo de direitos autorais (c em um círculo).
* @code{@@registeredsymbol}::           O símbolo de marca registrada (R em um círculo).
* @code{@@dots}::                       Como inserir reticências: @dots{} e @enddots{}
* @code{@@bullet}::                     Como inserir um marcador: @bullet{}
* @code{@@euro}::                       Como inserir o símbolo da moeda Euro.
* @code{@@pounds}::                     Como inserir o símbolo da moeda Libras.
* @code{@@textdegree}::                 Como inserir o símbolo de Graus.
* @code{@@minus}::                      Como inserir um sinal de menos.
* @code{@@geq @@leq}::                  Como inserir os sinais maior/menor que ou igual a.
@end menu


@node @code{@@TeX @@LaTeX}
@subsection @code{@@TeX}@{@} (@TeX{}) e @code{@@LaTeX}@{@} (@LaTeX{})

@anchor{tex}@c nome antigo
@findex TeX
@findex LaTeX
@cindex Logos, @TeX{}
@cindex Logomarca do @TeX{}
@cindex Logomarca do @LaTeX{}

Use o comando @code{@@TeX@{@}} para gerar `@TeX{}'. Em um manual 
impresso, esse é um logotipo especial que é diferente de três letras 
comuns. No Info, ele se parece apenas com @samp{TeX}.

Da mesma forma, use o comando @code{@@LaTeX@{@}} para gerar `@LaTeX{}', 
que é ainda mais especial em manuais impressos (e diferente do incorreto 
@code{La@@TeX@{@}}. No Info, o resultado é apenas @samp{LaTeX}. 
(@LaTeX{} é outro pacote de macro criado com fundamento no @TeX{}, muito 
vagamente análogo ao Texinfo, pois enfatiza a estrutura lógica, mas 
muito (muito) maior).

A grafia desses comandos é incomum no Texinfo, pois eles usam ambas, 
letras maiúsculas e minúsculas.


@node @code{@@copyright}
@subsection @code{@@copyright@{@}} (@copyright{})

@anchor{copyright symbol}@c nome antigo
@findex copyright
@cindex Símbolo de copyright

Use o comando @code{@@copyright@{@}} para gerar o símbolo de copyright, 
`@copyright{}'. Onde possível, esse é um @samp{c} dentro de um círculo; 
no Info, isso é @samp{(C)}.

Juridicamente, não é necessário usar o símbolo de direitos autorais; a 
palavra em inglês `Copyright' é suficiente, de acordo com tratado 
internacional.


@node @code{@@registeredsymbol}
@subsection @code{@@registeredsymbol@{@}} (@registeredsymbol{})

@anchor{registered symbol}@c nome antigo
@findex registeredsymbol
@cindex Símbolo Registrado

Use o comando @code{@@registeredsymbol@{@}} para gerar o símbolo de 
Registrado, `@registeredsymbol{}'. Onde possível, esse é um @samp{R} 
dentro de um círculo; no Info, isso é @samp{(R)}.


@node @code{@@dots}
@subsection @code{@@dots} (@dots{}) e @code{@@enddots} (@enddots{})

@anchor{dots}@c nome antigo
@findex dots
@findex enddots
@cindex Inserindo pontos
@cindex Inserindo reticências
@cindex Pontos, inserindo
@cindex Reticências, inserindo

@anchor{Dots Bullets}@c nome antigo

Uma @dfn{ellipsis} (uma sequência de pontos) seria espaçada 
incorretamente quando tipografada como uma sequência de pontos, de forma 
que um comando especial é usado no Texinfo: use o comando 
@code{@@dots@{@}} para gerar uma reticência normal, que são três pontos 
em uma linha, apropriadamente espaçados @dots{} assim. Para enfatizar: 
não escreva simplesmente três pontos no arquivo de entrada; isso 
funcionaria para a saída gerada do arquivo do Info, mas produziria a 
quantidade errada de espaço entre os pontos no manual impresso.
@c CONSERTE-ME
O comando @code{@@enddots@{@}} gera reticências no final da frase, que 
também tem três pontos, mas com espaçamento diferente depois, @enddots{} 
. Observe atentamente para ver a diferença.

Aqui está uma reticência: @dots{} .
Aqui estão três pontos em uma linha: ... .

Na saída gerada impressa (e geralmente em HTML), os três pontos em uma 
linha estão muito mais próximos um ao outro que os pontos nas 
reticências.


@node @code{@@bullet}
@subsection @code{@@bullet} (@bullet{})

@anchor{bullet}@c nome antigo
@findex bullet

Use o comando @code{@@bullet@{@}} para gerar um ponto redondo grande, ou 
o mais próximo possível de um. No Info, um asterisco é usado. Aqui está 
um marcador: @bullet{}

Ao usar @code{@@bullet} em @code{@@itemize}, você não precisa digitar as 
chaves, porque @code{@@itemize} as fornece.
(@pxref{@code{@@itemize}}).


@node @code{@@euro}
@subsection @code{@@euro} (@euro{}): Símbolo da Moeda Euro

@anchor{euro}@c nome antigo
@findex euro
@cindex Símbolo do Euro, produzindo

Use o comando @code{@@euro@{@}} para gerar `@euro{}'. Onde possível, 
esse é o símbolo da moeda Euro. Caso contrário, a palavra @samp{Euro} é 
usada.

Texinfo não pode magicamente sintetizar suporte para o símbolo do Euro 
onde o sistema subjacente (fontes, software, o que for) não o suporta. 
Portanto, você pode achar preferível usar a palavra ``Euro''. (Em 
contextos bancários, a abreviação para o Euro é EUR).

@cindex ISO 8859-15, e Euro
@cindex Latin 9, e Euro
Para a finalidade de obter o símbolo do Euro na saída gerada codificada 
do Info, por exemplo, é necessário especificar
@code{@@documentencoding ISO-8859-15} ou @code{@@documentencoding UTF-8} 
(@xref{@code{@@documentencoding}}). O símbolo do Euro está na ISO 
8859-15 (também conhecida como Latin@tie{}9) e @emph{não} está na mais 
amplamente usada ISO 8859-1 (Latin@tie{}1).

@pindex feymr10
@cindex fonte Euro
O símbolo do Euro não existe nas fontes padrão do @TeX{} (que foram 
projetadas antes da existência jurídica do Euro). Portanto, o @TeX{} usa 
uma fonte adicional, chamada @code{feymr10} (junto com outras 
variáveis). Ela está disponível gratuitamente, é claro; você consegue 
baixá-la a partir de @url{http://ctan.org/pkg/eurosym}, entre outros 
lugares. A distribuição inclui instruções de instalação.


@node @code{@@pounds}
@subsection @code{@@pounds} (@pounds{}): Libras esterlinas

@anchor{pounds}@c nome antigo
@findex libras
@cindex Libras, símbolo

Use o comando @code{@@pounds@{@}} para gerar `@pounds{}'. Onde possível, 
esse é o símbolo para a Libra esterlina, moeda britânica. Caso 
contrário, é @samp{#}.


@node @code{@@textdegree}
@subsection @code{@@textdegree} (@textdegree{}): símbolo de Graus

@anchor{textdegree}@c nome antigo
@findex textdegree
@cindex símbolo de Graus

Use o comando @code{@@textdegree@{@}} para gerar `@textdegree{}'. Onde 
possível, esse é o símbolo normal para Graus. Caso contrário, é um 
@samp{o}.


@node @code{@@minus}
@subsection @code{@@minus} (@minus{}): Inserindo um Sinal de Menos

@anchor{minus}@c nome antigo
@findex minus
@cindex Sinal de menos

@cindex Em dash, compared to minus sign
@cindex Hyphen, compared to minus
Use o comando @code{@@minus@{@}} para gerar um sinal de menos. Em uma 
fonte de largura fixa, isso é um hífen, mas em uma fonte proporcional, o 
símbolo tem o comprimento habitual para um sinal de menos---um pouco 
mais longo que um hífen, mais curto que um travessão:

@display
@samp{@minus{}} é um sinal de menos gerado com @samp{@@minus@{@}},

`-' é um hífen gerado com o caractere @samp{-},

`---' é um travessão para texto.
@end display

@noindent
Na fonte de largura fixa usada pelo Info, @code{@@minus@{@}} é o mesmo 
que um hífen.

Você deveria não usar @code{@@minus@{@}} dentro de @code{@@code} ou 
@code{@@example} porque a distinção de largura não é feita na fonte de 
largura fixa que eles usam.

Ao usar @code{@@minus} para especificar a marca que inicia cada entrada 
em uma lista de itens, você não precisa digitar as chaves 
(@pxref{@code{@@itemize}}).

Se você realmente quer tipografar alguma matemática que faça uma 
subtração, é melhor usar @code{@@math}. Então o caractere regular 
@samp{-} produz um sinal de menos, como em @code{@@math@{a-b@}} 
(@pxref{Inserindo Fórmulas Matemáticas}).


@node @code{@@geq @@leq}
@subsection @code{@@geq} (@geq{}) e @code{@@leq} (@leq{}): Inserindo Relações

@anchor{geq leq}@c nome antigo
@findex geq
@findex leq

Use os comandos @code{@@geq@{@}} e @code{@@leq@{@}} para gerar sinais de 
maior/menor que ou igual a, `@geq{}' e `@leq{}'. Quando esses símbolos 
não estão disponíveis, as sequências ASCII @samp{>=} e @samp{<=} são 
geradas.


@node Glifos para Programação
@section Glifos para Programação

@cindex Glifos para programação
@cindex Exemplos, glifos para
@cindex Programação, glifos para

No Texinfo, o código frequentemente é ilustrado em exemplos que são 
delimitados por @code{@@example} e @code{@@end example}, ou por 
@code{@@lisp} e @code{@@end lisp}. Em tais exemplos, você pode indicar 
os resultados da avaliação ou uma expansão usando @samp{@result{}} ou 
@samp{@expansion{}}. Da mesma forma, existem comandos para inserir 
glifos para indicar saída gerada impressa, mensagens de erro, 
equivalência de expressões, o local do ponto em um editor e sequências 
de operação da GUI.

Os comandos de inserção de glifos não precisam ser usados dentro d​e um 
exemplo, mas na maioria das vezes são. Todos os comandos de inserção de 
glifos são seguidos por chaves vazias.

@menu
* Sumário de Glifos::
* @code{@@result}::                     Como exibir o resultado da expressão.
* @code{@@expansion}::                  Como indicar uma expansão.
* @code{@@print}::                      Como indicar saída gerada.
* @code{@@error}::                      Como indicar uma mensagem de erro.
* @code{@@equiv}::                      Como indicar equivalência.
* @code{@@point}::                      Como indicar o local do ponto.
* Sequências de Clique::                Inserindo sequências de uso da GUI.
@end menu


@node Súmario de Glifos
@subsection Súmario de Glifos

Aqui está um resumo dos comandos de glifo:

@table @asis
@item @result{}
@code{@@result@{@}} indica o resultado de uma expressão.

@item @expansion{}
@code{@@expansion@{@}} indica os resultados de uma expansão de macro.

@item @print{}
@code{@@print@{@}} indica saída impressa.

@item @error{}
@code{@@error@{@}} indica que o texto seguinte é uma mensagem de erro.

@item @equiv{}
@code{@@equiv@{@}} indica a equivalência exata de duas formas.

@item @point{}
@code{@@point@{@}} mostra o local do ponto.

@item @clicksequence{A @click{} B}
@code{@@clicksequence@{A @@click@{@} B} indica uma sequência de operação 
da GUI: primeiro A, depois clicar em B, ou escolher B em um menu, ou 
então selecioná-lo.
@end table


@node @code{@@result}
@subsection @code{@@result@{@}} (@result{}): Resultado de uma Expressão

@anchor{result}@c nome antigo
@findex result
@cindex Resultado de uma expressão
@cindex Indicando avaliação
@cindex Glifo de avaliação
@cindex Valor de uma expressão, indicando

Use o comando @code{@@result@{@}} para indicar o resultado da avaliação 
de uma expressão.

O comando @code{@@result@{@}} é exibido como @samp{@result{}}, uma seta 
com haste dupla ou (quando essa não estiver disponível) como a sequência 
ASCII @samp{=>}.

Assim, o seguinte,

@lisp
(cdr '(1 2 3))
    @result{} (2 3)
@end lisp

@noindent
pode ser lido como ``@code{(cdr '(1 2 3))} avalia para @code{(2 3)}''.


@node @code{@@expansion}
@subsection @code{@@expansion@{@}} (@expansion{}): Indicando uma Expansão

@anchor{expansion}@c nome antigo
@cindex Expansão, Indicando
@cindex Expansão de Macro, indicando
@findex expansion

Quando uma expressão é uma chamada de macro, ela se expande para uma 
nova expressão. Você pode indicar o resultado da expansão com o comando 
@code{@@expansion@{@}}.

O comando @code{@@expansion@{@}} é exibido como @samp{@expansion{}}, uma 
seta longa com uma base plana ou (quando essa não estiver disponível) 
como a sequência ASCII @samp{==>}.

@need 700
Por exemplo, o seguinte

@example
@group
@@lisp
(third '(a b c))
    @@expansion@{@} (car (cdr (cdr '(a b c))))
    @@result@{@} c
@@end lisp
@end group
@end example

@noindent
produz

@lisp
@group
(third '(a b c))
    @expansion{} (car (cdr (cdr '(a b c))))
    @result{} c
@end group
@end lisp

@noindent
que pode ser lido como:

@quotation
@code{(third '(a b c))} expande para @code{(car (cdr (cdr '(a b c))))};
o resultado da avaliação da expressão é @code{c}.
@end quotation

@noindent
Frequentemente, como nesse caso, um exemplo aparenta melhor se os 
comandos @code{@@expansion@{@}} e @code{@@result@{@}} forem recuados.


@node @code{@@print}
@subsection @code{@@print@{@}} (@print{}): Indicando Saída Gerada

@anchor{Print Glyph}@c nome antigo
@findex print
@cindex Saída impressa, indicando

Às vezes, uma expressão gerará saída durante a execução dela. Você pode 
indicar tal saída exibida com o comando @code{@@print@{@}}.

O comando @code{@@print@{@}} é exibido como @samp{@print{}}, um traço 
horizontal encostado em uma barra vertical ou (quando isso não estiver 
disponível) a sequência ASCII @samp{-|}.

No exemplo a seguir, o texto impresso é indicado com @samp{@print{}}, e 
o valor da expressão segue na última linha.

@lisp
@group
(progn (print 'foo) (print 'bar))
    @print{} foo
    @print{} bar
    @result{} bar
@end group
@end lisp

@noindent
Em um arquivo fonte do Texinfo, esse exemplo é escrito como segue:

@lisp
@group
@@lisp
(progn (print 'foo) (print 'bar))
    @@print@{@} foo
    @@print@{@} bar
    @@result@{@} bar
@@end lisp
@end group
@end lisp


@node @code{@@error}
@subsection @code{@@error@{@}} (@error{}): Indicando uma Mensagem de Erro

@anchor{Error Glyph}@c nome antigo
@cindex Mensagem de erro, indicando
@findex error

Um pedaço de código pode causar um erro quando você o avalia. Você pode 
designar a mensagem de erro com o comando @code{@@error@{@}}.

O comando @code{@@error@{@}} é exibido como @samp{@error{}}, a palavra 
`error' em uma caixa na saída impressa, a palavra error seguida por uma 
seta em outros formatos ou (quando nenhuma seta estiver disponível) 
@samp{error-->}.

@need 700
Assim,

@example
@@lisp
(+ 23 'x)
@@error@{@} Argumento de tipo errado: integer-or-marker-p, x
@@end lisp
@end example

@noindent
produz

@lisp
(+ 23 'x)
@error{} Argumento de tipo errado: integer-or-marker-p, x
@end lisp

@noindent
Isso indica que a seguinte mensagem de erro é impressa quando você 
avalia a expressão:

@lisp
Argumento de tipo errado: integer-or-marker-p, x
@end lisp

A própria palavra @samp{@error{}} não é parte da mensagem de erro.


@node @code{@@equiv}
@subsection @code{@@equiv@{@}} (@equiv{}): Indicando Equivalência

@anchor{Equivalence}@c nome antigo
@cindex Equivalência, indicando
@findex equiv

Às vezes, duas expressões produzem resultados idênticos. Você pode 
indicar a equivalência exata de duas formas com o comando 
@code{@@equiv@{@}}. O comando @code{@@equiv@{@}} é exibido como 
@samp{@equiv{}}, um sinal de equivalência matemática padrão (três linhas 
horizontais paralelas) ou (quando isso não estiver disponível) como a 
sequência ASCII @samp{==}.

Assim,

@example
@@lisp
(make-sparse-keymap) @@equiv@{@} (list 'keymap)
@@end lisp
@end example

@noindent
produz

@lisp
(make-sparse-keymap) @equiv{} (list 'keymap)
@end lisp

@noindent
Isso indica que avaliar @code{(make-sparse-keymap)} produz resultados 
idênticos à avaliação de @code{(list 'keymap)}.


@node @code{@@point}
@subsection @code{@@point@{@}} (@point{}): Indicando Ponto em um Buffer

@anchor{Point Glyph}@c nome antigo
@cindex Ponto, indicando em um buffer
@findex point

Às vezes, você precisa mostrar um exemplo de texto em um buffer do 
Emacs. Em tais exemplos, a convenção é a de incluir o conteúdo inteiro 
do buffer em questão entre duas linhas de traços contendo o nome do 
buffer.

Você pode usar o comando @samp{@@point@{@}} para mostrar o local do 
ponto no texto no buffer. (O símbolo para ponto, é claro, não é parte do 
texto no buffer; ele indica o lugar @emph{entre} dois caracteres onde o 
ponto está localizado).

O comando @code{@@point@{@}} é exibido como @samp{@point{}}, uma estrela 
pontiaguda ou (quando essa não estiver disponível) a sequência ASCII 
@samp{-!-}.

O exemplo a seguir mostra o conteúdo do buffer @file{foo} antes e depois 
de avaliar um comando Lisp para inserir a palavra @code{changed}.

@example
@group
---------- Buffer: foo ----------
Este é o @point{}conteúdo de foo.
---------- Buffer: foo ----------

@end group
@end example

@example
@group
(inserção "changed ")
    @result{} nil
---------- Buffer: foo ----------
Este é o @point{}conteúdo mudado de foo.
---------- Buffer: foo ----------

@end group
@end example

Em um arquivo fonte do Texinfo, o exemplo é escrito assim:

@example
@@example
---------- Buffer: foo ----------
Este é o @@point@{@}conteúdo de foo.
---------- Buffer: foo ----------

(inserção "changed ")
    @@result@{@} nil
---------- Buffer: foo ----------
Este é o @@point@{@}conteúdo mudado de foo.
---------- Buffer: foo ----------
@@end example
@end example


@node Sequências de Clique
@subsection Sequências de Clique

@cindex Sequências de cliques
@cindex Cliques, Sequência
@cindex Sequência de cliques da GUI

@findex clicksequence
Ao documentar interfaces gráficas, é necessário descrever sequências 
como `Clique em @samp{Arquivo}, depois escolha @samp{Abrir}, depois 
@dots{}'. O Texinfo oferece os comandos @code{@@clicksequence} e 
@code{click} para representar isso, normalmente usados ​​assim:

@example
@dots{} @@clicksequence@{Arquivo @@click@{@} Abrir@} @dots{}
@end example

@noindent
que produz:

@display
@dots{} @clicksequence{Arquivo @click{} Abrir} @dots{}
@end display

@findex click
@findex arrow
O comando @code{@@click} produz uma seta para a direita por padrão; esse 
glifo também está disponível independentemente por meio do comando 
@code{@@arrow@{@}}.

@findex clickstyle
Você pode mudar o glifo produzido por @code{@@click} com o comando 
@code{@@clickstyle}, que recebe um nome de comando como o único 
argumento dele no resto da linha, muito parecido com @code{@@itemize} e 
amigos (@pxref{@code{@@itemize}}). O comando deveria produzir um glifo, 
e as chaves vazias usuais @samp{@{@}} são omitidas. Aqui está um 
exemplo:

@example
@@clickstyle @@result
@dots{} @@clicksequence@{Arquivo @@click@{@} Abrir@} @dots{}
@end example

@noindent
agora produz:

@display
@clickstyle @result
@dots{} @clicksequence{Arquivo @click{} Abrir} @dots{}
@end display


@node Inserindo Unicode
@section Inserindo Unicode: @code{@@U}

@cindex Unicode caractere, inserindo
@cindex Ponto de código de caractere Unicode, inserindo por
@findex U

O comando @code{@@U@{@var{hex}@}} insere uma representação do caractere 
Unicode U+@var{hex}. Por exemplo, @code{@@U@{0132@}} insere a ligadura 
holandesa `IJ' (pobremente mostrada aqui como simplesmente as duas 
letras `I' e `J').

O valor @var{hex} deveria ter pelo menos quatro dígitos hexadecimais; 
zeros à esquerda @emph{não} são adicionados. Em geral, @var{hex} precisa 
especificar um caractere Unicode normal válido; por exemplo, U+10FFFF (o 
último ponto de código) é inválido por definição e, portanto, não pode 
ser inserido dessa forma.

@cindex ASCII, portabilidade de documentos fonte, usando
@code{@@U} é útil para inserir glifos ocasionais para os quais Texinfo 
não tem comando dedicado, ao mesmo tempo em que permite que o fonte do 
Texinfo permaneça puramente ASCII de 7 bits para máxima portabilidade.

@cindex Unicode e @TeX{}
Esse comando tem muitas limitações---as mesmas limitações de inserir 
caracteres Unicode em UTF-8 ou outra forma binária. Primeiro e mais 
importante, @TeX{} não sabe nada acerca da maioria do Unicode. Suportar 
glifos adicionais específicos mediante solicitação é possível, mas não é 
viável para @file{texinfo.tex} suportar scripts adicionais inteiros 
(japonês, urdu, @dots{}). O comando @code{@@U} não faz nada para mudar 
isso. Se o caractere especificado não for suportado no @TeX{}, um erro 
será dado. (@xref{@code{@@documentencoding}}).

@cindex Referência de entidade em HTML et al.
@cindex @samp{&#x@var{hex};}, saída oriunda de @code{@@U}
Em HTML, XML e Docbook, a saída proveniente de @code{@@U} é sempre uma 
referência de entidade do formato @samp{&#x@var{hex};}, como em 
@samp{&#x0132;} para o exemplo acima. Isso deveria funcionar mesmo 
quando um documento HTML usa alguma outra codificação (digamos, 
Latin@tie{}1) e o caractere fornecido não é suportado nessa codificação.

@cindex UTF-8, saída oriunda de @code{@@U}
No Info e em texto simples, se a codificação do documento for 
especificada explicitamente como UTF-8, a saída será a representação 
UTF-8 do caractere U+@var{hex} (presumindo que seja um caractere 
válido). Em todos os outros casos, a saída é a sequência ASCII 
@samp{U+@var{hex}}, como nos seis caracteres ASCII @samp{U+0132} para o 
exemplo acima.

Isso é tudo. Sem mágica!


@node Quebras
@chapter Forçando e Impedindo Quebras

@cindex Forçando quebras de linha e de página
@cindex Fazendo quebras de linha e de página
@cindex Impedindo quebras de linha e de página
@cindex Quebras de linha, estranhas
@cindex Quebras de página, estranhas

Quebras de linha e de página às vezes podem ocorrer no lugar `errado' em 
uma ou outra forma de saída. Cabe inteiramente a você garantir que o 
texto aparente corretamente em todos os formatos de saída.

Por exemplo, em um manual impresso, quebras de página podem ocorrer 
estranhamente no meio de um exemplo; para impedir isso, você pode manter 
o texto unido usando um comando de agrupamento que impede que o texto 
seja dividido em duas páginas. Por outro lado, você pode querer forçar 
uma quebra de página onde nenhuma ocorreria normalmente.

You can use the break, break prevention, or pagination commands to fix 
problematic line and page breaks.

Você pode usar os comandos de Quebra, Prevenção de Quebra ou Paginação 
para corrigir quebras de linha e de página problemáticas.

@menu
* Comandos de Quebra::                  Resumo dos comandos relacionados a quebra.
* Quebras de Linha::                    Forçando quebras de linha.
* @code{@@- @@hyphenation}::            Ajudando @TeX{} com pontos de hifenação.
* @code{@@allowcodebreaks}::            Controlando quebras de linhas dentro do texto de @@code.
* @code{@@w}::                          Impedindo quebras de linha indesejadas no texto.
* @code{@@tie}::                        Inserindo um inquebrável, porém variante espaço.
* @code{@@sp}::                         Inserindo linhas em branco.
* @code{@@page}::                       Forçando o início de uma página nova.
* @code{@@group}::                      Impedindo quebras de página indesejadas.
* @code{@@need}::                       Outra maneira de impedir quebras de página indesejadas.
@end menu


@node Comandos de Quebra
@section Comandos de Quebra

Os comandos de quebra criam ou permitem quebras de linha e de parágrafo:

@table @code
@item @@*
Força uma quebra de linha.

@item @@sp @var{n}
Pula @var{n} linhas em branco.

@item @@-
Insire um hífen opcional.

@item @@hyphenation@{@var{palavras hi-fe-na-das}@}
Define pontos de hífen em @var{palavras hi-fe-na-das}.
@end table

Esses comandos mantém o texto unido em uma linha:

@table @code
@item @@w@{@var{text}@}
Impede que @var{texto} seja dividido e hifenizado em duas linhas.

@item @@tie@{@}
Insere um espaço entre palavras normal no qual uma quebra de linha não 
possa ocorrer.
@end table

Os comandos de paginação aplicam-se somente para a saída impressa, uma 
vez que outros formatos de saída não tem páginas.

@table @code
@item @@page
Inicia uma nova página.

@item @@group
Mantém unido o texto que precisa aparecer em uma página.

@item @@need @var{mils}
Inicia uma nova página se não existir espaço suficiente nesta.
@end table


@node Quebras de Linha
@section @code{@@*} e @code{@@/}: Gerar e Permitir Quebras de Linha

@findex * @r{(force line break)}
@findex / @r{(allow line break)}
@cindex Quebras de linha, controlando
@cindex Controlando quebras de linha
@cindex Quebras em uma linha
@cindex Forçar quebra de linha
@cindex Permitir quebra de linha

O comando @code{@@*} força uma quebra de linha em todos os formatos de 
saída.
O comando @code{@@/} permite uma quebra de linha (somente manual 
impresso).

Aqui está um exemplo com @code{@@*}:

@example
Esta frase está dividida @@*em duas linhas.
@end example

@noindent produz

@example
@group
Esta frase está dividida
em duas linhas.
@end group
@end example

O comando @code{@@/} pode ser útil em URLs longas ou outros 
identificadores onde o @TeX{} não consiga encontrar um bom lugar para 
quebrar. O @TeX{} automaticamente quebrará as URLs nos lugares naturais 
(@pxref{Quebra de Linha de URL}), de forma que use @code{@@/} somente se 
você precisar. @code{@@/} não tem efeito no outro formato de saída.


@node @code{@@- @@hyphenation}
@section @code{@@-} e @code{@@hyphenation}: Ajudando @TeX{} Hifenizar

@anchor{- and hyphenation}@c nome antigo
@findex @sortas{-} - @r{(discretionary hyphen)} @c CONSERTE-ME
@findex hyphenation
@cindex Hifenização, ajudando @TeX{} a fazer
@cindex Ajuste fino, e hifenização

Embora o algoritmo de hifenização do @TeX{} geralmente seja muito bom, 
ele perde pontos de hifenização úteis de vez em quando. (Ou, muito mais 
raramente, insere uma hifenização incorreta). Então, para documentos com 
um vocabulário incomum ou ao fazer ajustes finos para uma edição 
impressa, você possivelmente queira ajudar o @TeX{}. Texinfo suporta 
dois comandos para isso:

@table @code
@item @@-
Insere um hífen discricionário, ou seja, um lugar onde @TeX{} pode (mas 
não precisa) hifenizar. Isso é especialmente útil quando você percebe 
que um hbox cheio demais é devido a @TeX{} carecer de uma hifenização 
(@pxref{hboxes lotados}). @TeX{} não inserirá ele próprio quaisquer 
pontos de hifenização em uma palavra contendo @code{@@-}.

@item @@hyphenation@{@var{palavras hi-fe-na-das}@}
Diz ao @TeX{} como hifenizar @var{palavras hi-fe-na-das}. Como mostrado, 
você coloca um @samp{-} em cada ponto de hifenização. Por exemplo:
@example
@@hyphenation@{man-u-scrito man-u-scritos@}
@end example
@noindent @TeX{} só usa os pontos de hifenização especificados quando as
palavras correspondem exatamente, portanto forneça todas as variantes
necessárias, como plurais.
@end table

Info, HTML e outras saídas não @TeX{} não são hifenizadas, de forma que 
nenhum desses comandos tem qualquer efeito ali.


@node @code{@@allowcodebreaks}
@section @code{@@allowcodebreaks}: Controle Quebras de Linha no @code{@@code}

@anchor{allowcodebreaks}@c nome antigo
@findex allowcodebreaks
@cindex Quebras, dentro @code{@@code}
@cindex @sortas{-} -, ponto de interrupção dentro do @code{@@code} @c CONSERTE-ME
@cindex Hífen, ponto de interrupção dentro do @code{@@code}
@cindex Traço, ponto de interrupção dentro do @code{@@code}
@cindex _, ponto de interrupção dentro do @code{@@code}
@cindex Sublinhado, ponto de interrupção dentro do @code{@@code}

Normalmente, @TeX{} considera a quebra de linhas nos caracteres @samp{-} 
e @samp{_} dentro do @code{@@code} e comandos relacionados 
(@pxref{@code{@@code}}), mais ou menos como se fossem pontos de 
hifenização ``vazios''.

Isso é necessário, pois muitos manuais, especialmente para linguagens da 
família Lisp, precisam documentar identificadores muito longos. Por 
outro lado, alguns manuais não tem esse problema, e você pode não 
desejar permitir uma quebra de linha no sublinhado em, por exemplo, 
@code{SIZE_MAX}, ou pior ainda, depois de qualquer um dos quatro 
sublinhados em @code{__typeof__}.

Assim, Texinfo fornece este comando:

@example
@@allowcodebreaks false
@end example

@noindent para impedir quebras em @samp{-} ou @samp{_} dentro de
@code{@@code}. Você pode voltar a permitir tais quebras com
@code{@@allowcodebreaks true}. Escreva esses comandos em linhas
dedicadas.

Esses comandos podem ser dados em qualquer lugar no documento. Por 
exemplo, você pode ter apenas um parágrafo problemático onde precisa 
desativar as quebras, mas quer elas em geral, ou vice-versa.

Esse comando não tem efeito, exceto em saídas HTML e @TeX{}.


@node @code{@@w}
@section @code{@@w}@{@var{text}@}: Impedir Quebras de Linha

@anchor{w}@c nome antigo
@findex w
@cindex Quebras de linha, impedindo

@code{@@w@{@var{texto}@}} produz @var{texto}, ao mesmo tempo que proíbe quebras
de linha dentro de @var{texto}.

@cindex Espaço inquebrável, fixo
@cindex Inquebrável, espaço fixo
Assim, você pode usar @code{@@w} para produzir um espaço inquebrável, fixado na
largura de um espaço normal interpalavras:

@example
@@w@{ @} @@w@{ @} @@w@{ @} recuo.
@end example

@noindent produz:

@display
@w{ } @w{ } @w{ } recuo.
@end display

O espaço oriundo de @code{@@w@{@w{ }@}}, além de ser inquebrável, também não
estica nem encolhe. Às vezes isso é o que você quer, por exemplo, se estiver
fazendo recuo manual. No entanto, normalmente você quer um espaço normal
interpalavra que estica e encolhe (na saída impressa); para isso, veja o
comando @code{@@tie} na próxima seção.
@c CONSERTE-ME
@cindex Hifenização, impedindo
Você também pode usar o comando @code{@@w} para impedir que o @TeX{} hifenize
automaticamente um nome longo ou uma frase que esteja perto do fim de uma
linha. @command{makeinfo} nunca hifeniza palavras.
@c CONSERTE-ME
@cindex Expansão de palavras-chave, impedindo
@cindex Palavras-chave de controle de versão, impedindo expansão de
@cindex Expansão de $Id, impedindo
Você também pode usar @code{@@w} para evitar expansão indesejada de
palavras-chave em sistemas de controle de fonte. Por exemplo, para escrever
literalmente @t{@w{$}Id$} no teu documento, use @code{@@w@{$@}Id$}. No entanto,
esse truque não é eficaz no Info ou na saída de texto simples.


@node @code{@@tie}
@section @code{@@tie@{@}}: Inserindo um Espaço Inquebrável

@anchor{tie}@c nome antigo
@findex tie @r{(unbreakable interword space)}
@cindex Espaço amarrado
@cindex Espaço inquebrável, variável
@cindex Inquebrável, espaço variável

O comando @code{@@tie@{@}} produz um espaço normal interpalavra no qual uma
quebra de linha possivelmente não ocorra. Sempre escreva-o com as seguintes
chaves (vazias), como de costume para comandos usados ​​dentro de um
parágrafo. Aqui está um exemplo:

@example
@@TeX@{@} foi escrito por Donald E.@@tie@{@}Knuth.
@end example

@noindent produz:

@display
@TeX{} foi escrito por Donald E.@tie{}Knuth.
@end display

Existem duas diferenças importantes entre @code{@@tie@{@}} e
@code{@@w@{@w{ }@}}:

@itemize
@item
O espaço produzido por @code{@@tie@{@}} será esticado e encolhido ligeiramente
junto com os espaços normais entre palavras no parágrafo; o espaço produzido
por @code{@@w@{@w{ }@}} não variará.

@item
@code{@@tie@{@}} permite hifenização das palavras ao redor, enquanto
@code{@@w@{@w{ }@}} inibe a hifenização dessas palavras (por razões
@TeX{}nológicas, ou seja, porque produz um @samp{\hbox}).
@end itemize


@node @code{@@sp}
@section @code{@@sp} @var{n}: Inserir Linhas em Branco

@anchor{sp}@c nome antigo
@findex sp @r{(line spacing)}
@cindex Espaço, inserindo vertical
@cindex Linhas em branco
@cindex Espaçamento entre linhas

Uma linha que começa com e contém somente @code{@@sp @var{n}} gera @var{n}
linhas de espaço em branco tanto no manual impresso quanto no arquivo Info.
@code{@@sp} também força uma quebra de parágrafo. Por exemplo,

@example
@@sp 2
@end example

@noindent
gera duas linhas em branco.

O comando @code{@@sp} é usado mais frequentemente na página de título.


@node @code{@@page}
@section @code{@@page}: Comece uma Nova Página

@anchor{page}@c nome antigo
@findex page
@cindex Quebras de página, forçando

Uma linha contendo somente @code{@@page} inicia uma nova página em um manual
impresso. Em outros formatos, sem o conceito de páginas, ele inicia um novo
parágrafo. Um comando @code{@@page} frequentemente é usado na seção
@code{@@titlepage} de um arquivo do Texinfo para iniciar a página de direitos
autorais.


@node @code{@@group}
@section @code{@@group}: Impedir Quebras de Página

@anchor{group}@c nome antigo
@findex group
@cindex Agrupar (manter texto unido verticalmente)
@cindex Mantendo texto unido verticalmente
@cindex Verticalmente, mantendo texto unido

O comando @code{@@group} (em uma linha dedicada) é usado dentro de um
@code{@@example} ou construção similar para começar um grupo vertical não
divisível, que aparecerá inteiramente em uma página na saída impressa. O grupo
é encerrado por uma linha contendo somente @code{@@end group}. Essas duas
linhas não produzem saída própria e, na saída do arquivo do Info, elas não tem
efeito algum.

@c Uma vez disse que esses ambientes
@c desativam espaçamento vertical entre ``parágrafos''.
@c Também, citação costumava funcionar, mas não no texinfo-2.72
Embora @code{@@group} faça sentido conceitualmente em uma ampla variedade de
contextos, a implementação atual dele funciona confiavelmente somente dentro de
@code{@@example} e variantes, e dentro de @code{@@display}, @code{@@format},
@code{@@flushleft} e @code{@@flushright}. @xref{Citações e Exemplos}. (O que
todos esses comandos tem em comum é que cada linha de entrada produz uma linha
de saída). Em outros contextos, @code{@@group} pode causar espaçamento vertical
anômalo.

@need 750
Essa exigência de formatação significa que você deveria escrever:

@example
@group
@@example
@@group
@dots{}
@@end group
@@end example
@end group
@end example

@noindent
com os comandos @code{@@group} e @code{@@end group} dentro dos comandos
@code{@@example} e @code{@@end example}.

O comando @code{@@group} é mais frequentemente usado para manter um exemplo
junto em uma página. Neste manual Texinfo, mais de 100 exemplos contém texto
que é colocado entre @code{@@group} e @code{@@end group}.

Se você esquecer de encerrar um grupo, poderá receber mensagens de erro
estranhas e incompreensíveis ao executar @TeX{}. Isso ocorre porque @TeX{}
continua tentando colocar o restante do arquivo Texinfo em uma página e não
começa a gerar mensagens de erro até que tenha processado texto considerável. É
uma boa regra prática procurar por um @code{@@end group} ausente se você
receber mensagens de erro incompreensíveis no @TeX{}.


@node @code{@@need}
@section @code{@@need @var{mils}}: Impedir Quebras de Página

@anchor{need}@c nome antigo
@findex need
@cindex Precisa de espaço no final da página
@cindex Mils, argumento para @code{@@need}

Uma linha contendo somente @code{@@need @var{n}} inicia uma nova página em um
manual impresso se menos que @var{n} mils (milésimos de polegada) permanecerem
na página atual. Não use chaves ao redor do argumento @var{n}. O comando
@code{@@need} não tem efeito em outros formatos de saída, pois eles não são
paginados.

@need 800
Este parágrafo é precedido por um comando @code{@@need} que diz ao @TeX{} para
iniciar uma nova página se restarem menos que 800 mils (oito décimos de
polegada) na página. Parece algo assim:

@example
@group
@@need 800
Este parágrafo é precedido por @dots{}
@end group
@end example

@cindex Órfãs, linhas, impedindo
O comando @code{@@need} é útil para evitar órfãs: linhas únicas na parte
inferior das páginas impressas.


@node Comandos de Definição
@chapter Comandos de Definição
@cindex Comandos de definição

O comando @code{@@deffn} e os outros @dfn{comandos de definição} te habilitam a
descrever funções, variáveis, macros, comandos, opções de usuário(a),
formulários especiais e outros tais artefatos em um formato uniforme.

No arquivo Info, uma definição faz com que a categoria da
entidade---`Function', `Variable', ou qualquer outra---apareça no início da
primeira linha da definição, seguida pelo nome e argumentos da entidade. No
manual impresso, o comando faz com que o @TeX{} imprima o nome da entidade e os
argumentos dela na margem esquerda e imprima a categoria próximo da margem
direita. Em ambos os formatos de saída, o corpo da definição é recuado. Além
disso, o nome da entidade é inserido no índice apropriado: @code{@@deffn}
insere o nome no índice de funções, @code{@@defvr} insere-o no índice de
variáveis, e assim por diante (@pxref{Índices Predefinidos}).

Um manual não precisa e não deveria conter mais que uma definição para um nome
dado. Um anexo contendo um resumo deveria usar @code{@@table} em vez dos
comandos de definição.

@menu
* Modelos de Comando de Definição::                 Escrevendo descrições utilizando comandos de definição.
* Linhas de Continuação de Comando de Definição::   Continuando o cabeçalho por sobre linhas de fonte.
* Argumentos Opcionais::                            Manuseando argumentos opcionais e repetidos.
* @code{@@deffnx}::                                 Agrupe duas ou mais `primeiras' linhas.
* Comandos de Definição em Detalhe::                Referência para todos os comandos de definição.
* Convenções de Comando de Definição::              Convenções para a escrita de definições.
* Definição de Função de Amostra::                  Um exemplo.
@end menu


@node Modelos de Comando de Definição
@section O Modelo Para Uma Definição
@cindex Definição, modelo
@cindex Modelo para uma definição

O comando @code{@@deffn} é usado para definições de entidades que se assemelham
a funções. Para escrever uma definição usando o comando @code{@@deffn}, escreva
o comando @code{@@deffn} no início de uma linha e siga-o na mesma linha pela
categoria da entidade, o nome da entidade em si e os argumentos dela (se
existirem). Em seguida, escreva o corpo da definição nas linhas seguintes.
(Você pode embutir exemplos no corpo). Finalmente, termine a definição com um
comando @code{@@end deffn} escrito em uma linha própria.

Os outros comandos de definição seguem o mesmo formato: uma linha com o comando
@code{@@def@dots{}} e quaisquer argumentos apropriados para esse comando; o
corpo da definição; e uma linha @code{@@end} correspondente.

O modelo para uma definição se parece com isto:

@example
@group
@@deffn @var{categoria} @var{nome} @var{argumentos}@dots{}
@var{corpo-da-definição}
@@end deffn
@end group
@end example

@need 700
@noindent
Por exemplo,

@example
@group
@@deffn Command forward-word count
Esse comando move o ponto para frente @@var@{count@} palavras (ou para trás, se
@@var@{count@} for negativo). @dots{}
@@end deffn
@end group
@end example

@noindent
produz

@quotation
@deffn Command forward-word count
Esse comando move o ponto para frente @var{count} palavras (ou para trás, se
@var{count} for negativo). @dots{}
@end deffn
@end quotation

Coloque o nome da categoria em maiúsculas como um título. Se o nome da
categoria contiver espaços, como na frase `Comando Interativo', coloque-o entre
chaves. Por exemplo:

@example
@group
@@deffn @{Comando Interativo@} isearch-forward
@dots{}
@@end deffn
@end group
@end example

@noindent
Caso contrário, a segunda palavra será confundida com o nome da entidade. Como
regra geral, quando quaisquer dos argumentos na linha de título, @emph{exceto}
o último, forem mais que uma palavra, você precisa colocá-los entre chaves.
Isso também pode ser necessário se o texto contiver comandos, por exemplo,
@samp{@{declaraci@@'on@}} se você estiver escrevendo em espanhol.

Alguns dos comandos de definição são mais gerais que outros. O comando
@code{@@deffn}, por exemplo, é o comando geral de definição para funções e
similares---para entidades que possivelmente recebam argumentos. Quando usa
esse comando, você especifica a categoria à qual a entidade pertence. Três
variações predefinidas e especializadas (@code{@@defun}, @code{@@defmac} e
@code{@@defspec}) especificam a categoria para você: ``Função'', ``Macro'' e
``Forma Especial'' respectivamente. (Em Lisp, uma forma especial é uma entidade
muito parecida com uma função). Similarmente, o comando geral @code{@@defvr} é
acompanhado por diversas variações especializadas para descrever tipos
particulares de variáveis.

@xref{Definição de Função de Amostra}, para um exemplo detalhado de uma
definição de função, incluindo o uso de @code{@@example} dentro da definição.


@node Linhas de Continuação de Comando de Definição
@section Linhas de Continuação de Comando de Definição
@cindex Linhas de continuação em comandos de definição
@cindex Cabeçalhos de comando de definição, continuando
@cindex @sortas{@@} @samp{@@} como continuação em comandos de definição @c CONSERTE-ME

A linha de título de um comando de definição pode ficar muito longa. Portanto,
o Texinfo tem uma sintaxe especial que permite que elas sejam continuadas em
várias linhas do arquivo fonte: um solitário @samp{@@} no final de cada linha a
ser continuada. Aqui está um exemplo:

@example
@@defun fn-name @@
  arg1 arg2 arg3
Essa é a defun básica continuada.
@@end defun
@end example

@noindent produz:

@defun fn-name   arg1 arg2 arg3
Essa é a defun básica continuada.
@end defun

@noindent
Como você pode ver, as linhas contínuas estão combinadas, como se tivessem sido
digitadas em uma linha do fonte.

Embora esse exemplo mostre somente uma continuação de uma linha, as
continuações podem se estender por qualquer número de linhas, da mesma forma;
coloque um @code{@@} no final de cada linha a ser continuada.

@cindex Espaço em branco, recolhido em torno de continuações
@cindex Recolhendo espaços em branco em torno de continuações
Em geral, qualquer número de espaços ou tabulações antes do caractere de
continuação @code{@@} é recolhido em um espaço. Existe uma exceção: os
processadores Texinfo não recolherão totalmente espaços em branco em torno de
uma continuação dentro de chaves. Por exemplo:

@example
@@deffn @{Nome @@
  Categoria@} @dots{}
@end example

@noindent A saída gerada (não mostrada) tem excesso de espaço entre `Nome' e
`Categoria'. Para evitar isso, elimine os espaços em branco indesejados na tua
entrada ou coloque a continuação @code{@@} fora das chaves.

@code{@@} não funciona como um caractere de continuação em @emph{qualquer}
outro contexto. Normalmente, @samp{@@} seguido por um caractere de espaço em
branco (espaço, tabulação, nova linha) produz um espaço normal interpalavra
(@pxref{Espaços Múltiplos}).


@node Argumentos Opcionais
@section Argumentos Opcionais e Repetidos
@cindex Argumentos opcionais e repetidos
@cindex Argumentos repetidos e opcionais
@cindex Argumentos, repetidos e opcionais
@cindex Sintaxe, argumentos opcionais e repetidos
@cindex Caracteres meta-sintáticos para argumentos

@c Isto está consistente com o Manual de Referência da Lisp do Emacs.
Algumas entidades aceitam argumentos opcionais ou repetidos, convencionalmente
especificados usando-se colchetes e reticências: um argumento entre colchetes é
opcional, e um argumento seguido por reticências é opcional e pode ser repetido
mais que uma vez.

Assim, [@var{argumento-opcional}] significa que @var{argumento-opcional} é
opcional e @var{argumentos-repetidos}@code{@dots{}} representa zero ou mais
argumentos. Parênteses são usados ​​quando vários argumentos são
agrupados em níveis adicionais de estrutura de lista na Lisp.

Aqui está a linha @code{@@defspec} de um exemplo de uma forma especial
(complicada) imaginária:

@quotation
@defspec foobar (var [from to [inc]]) body@dots{}
@end defspec
@end quotation

@noindent
In this example, the arguments @var{from} and @var{to} are optional, but must
both be present or both absent.  If they are present, @var{inc} may optionally
be specified as well.  These arguments are grouped with the argument @var{var}
into a list, to distinguish them from @var{body}, which includes all remaining
elements of the form.

Nesse exemplo, os argumentos @var{from} e @var{to} são opcionais, mas ambos
precisam estar presentes ou ambos ausentes. Se estiverem presentes, @var{inc}
opcionalmente pode ser especificado também. Esses argumentos são agrupados com
o argumento @var{var} em uma lista, para distingui-los de @var{body}, que
inclui todos os elementos restantes da forma.

Em um arquivo fonte do Texinfo, essa linha @code{@@defspec} é escrita assim:

@example
@@defspec foobar (var [from to [inc]]) body@@dots@{@}
@end example

@noindent
A função está listada no Índice de Comando e Variável sob @samp{foobar}.


@node @code{@@deffnx}
@section @code{@@deffnx}, et al.: Duas ou Mais `Primeiras' Linhas

@anchor{deffnx}@c nodo antigo
@findex deffnx
@cindex Duas `Primeiras' Linhas para @code{@@deffn}
@cindex Agrupando duas definições juntas
@cindex Definições agrupadas

Para criar duas ou mais linhas `primeira' ou de cabeçalho para uma definição,
siga a primeira linha @code{@@deffn} por uma linha começando com
@code{@@deffnx}. O comando @code{@@deffnx} funciona exatamente como
@code{@@deffn}, exceto que ele não gera espaço em branco vertical extra entre
ele e a linha precedente.

@need 1000
Por exemplo,

@example
@group
@@deffn @{Comando Interativo@} isearch-forward
@@deffnx @{Comando Interativo@} isearch-backward
Esses dois comandos de pesquisa são semelhantes, exceto @dots{}
@@end deffn
@end group
@end example

@noindent
produz

@deffn {Comando Interativo} isearch-forward
@deffnx {Comando Interativo} isearch-backward
Esses dois comandos de pesquisa são semelhantes, exceto @dots{}
@end deffn

@findex defcvx
@findex defivarx
@findex defmacx
@findex defmethodx
@findex defoptx
@findex defopx
@findex defspecx
@findex deftpx
@findex deftypecvx
@findex deftypefnx
@findex deftypefunx
@findex deftypeivarx
@findex deftypemethodx
@findex deftypeopx
@findex deftypevarx
@findex deftypevrx
@findex defunx
@findex defvarx
@findex defvrx
Cada comando de definição tem uma forma `x': @code{@@defunx}, @code{@@defvrx},
@code{@@deftypefunx}, etc.

As formas `x' funcionam similarmente a @code{@@itemx} (@pxref{@code{@@itemx}}).


@node Comandos de Definição em Detalhe
@section Os Comandos de Definição

Texinfo fornece mais que uma dúzia de comandos de definição, todos estão
descritos nesta seção.

Os comandos de definição inserem automaticamente o nome da entidade no índice
apropriado: por exemplo, @code{@@deffn}, @code{@@defun} e @code{@@defmac}
inserem nomes de funções no índice de funções; @code{@@defvr} e @code{@@defvar}
inserem nomes de variáveis ​​no índice de variáveis.

Embora os exemplos a seguir ilustrem principalmente Lisp, os comandos podem ser
usados ​​para outras linguagens de programação.

@menu
* Comandos de Funções::          Comandos para funções e entidades similares.
* Comandos de Variáveis::        Comandos para variáveis e entidades similares.
* Funções Tipadas::              Comandos para funções em linguagens tipadas.
* Variáveis ​​Tipadas::            Comandos para variáveis em linguagens tipadas.
* Tipos de Dados::               O comando de definição para tipos de dados.
* Objetos Abstratos::            Comandos para programação orientada a objetos.
@end menu

@node Comandos de Funções
@subsection Funções e Entidades Similares

Esta seção descreve os comandos para descrever funções e entidades similares:

@table @code
@findex deffn
@item @@deffn @var{categoria} @var{nome} @var{argumentos}@dots{}
O comando @code{@@deffn} é o comando geral de definição para funções, comandos
interativos e entidades similares que podem receber argumentos. Você precisa
escolher um termo para descrever a categoria da entidade sendo definida; por
exemplo, ``Function'' poderia ser usado se a entidade for uma função. O comando
@code{@@deffn} é escrito no início de uma linha e é seguido na mesma linha pela
categoria da entidade sendo descrita, o nome dessa entidade em particular e os
argumentos dela, se existirem. Termine a definição com @code{@@end deffn} em
uma linha própria.

@need 750
Por exemplo, aqui está uma definição:

@example
@group
@@deffn Comando forward-char nchars
Move ponto para frente @@var@{nchars@} caracteres.
@@end deffn
@end group
@end example

@noindent
Isso mostra uma definição bastante concisa para um ``comando'' chamado
@code{forward-char} com um argumento, @var{nchars}.

@code{@@deffn} imprime nomes de argumentos como @var{nchars} em tipo inclinado
na saída impressa, porque nós pensamos nesses nomes como variáveis
​​metassintáticas---elas representam os valores reais dos argumentos.
No texto da descrição, no entanto, escreva um nome de argumento explicitamente
com @code{@@var} para se referir ao valor do argumento. No exemplo acima, nós
usamos @samp{@@var@{nchars@}} dessa forma.

No caso extremamente incomum quando um nome de argumento contiver @samp{--}, ou
outra sequência de caracteres que seja tratada especialmente
(@pxref{Convenções}), use @code{@@code} ao redor dos caracteres especiais. Isso
evita a conversão para traços de ligação e travessões tipográficos.
@c @var também funciona; isso é o que nós costumávamos recomendar.

O modelo para @code{@@deffn} é:

@example
@group
@@deffn @var{categoria} @var{nome} @var{argumentos}@dots{}
@var{corpo-da-definição}
@@end deffn
@end group
@end example

@findex defun
@item @@defun @var{nome} @var{argumentos}@dots{}
O comando @code{@@defun} é o comando de definição para funções. @code{@@defun}
é equivalente a @samp{@@deffn Função @dots{}}. Termine a definição com
@code{@@end defun} em uma linha própria. Assim, o modelo é:

@example
@group
@@defun @var{nome-função} @var{argumentos}@dots{}
@var{corpo-da-definição}
@@end defun
@end group
@end example

@findex defmac
@item @@defmac @var{nome} @var{argumentos}@dots{}
O comando @code{@@defmac} é o comando de definição para macros. @code{@@defmac}
é equivalente a @samp{@@deffn Macro @dots{}} e funciona como @code{@@defun}.

@findex defspec
@item @@defspec @var{nome} @var{argumentos}@dots{}
O comando @code{@@defspec} é o comando de definição para formas especiais. (Na
Lisp, uma forma especial é uma entidade muito parecida com uma função;
@pxref{Special Forms,,, elisp, GNU Emacs Lisp Reference Manual}).
@code{@@defspec} é equivalente a @samp{@@deffn @{Forma Especial@} @dots{}} e
funciona como @code{@@defun}.
@end table

Todos esses comandos criam entradas no índice de funções.


@node Comandos de Variáveis
@subsection Variáveis ​​e Entidades Similares

Aqui estão os comandos para definir variáveis ​​e entidades similares:

@table @code
@findex defvr
@item @@defvr @var{categoria} @var{nome}
O comando @code{@@defvr} é um comando geral de definição para algo como uma
variável---uma entidade que registra um valor. Você precisa escolher um termo
para descrever a categoria da entidade sendo definida; por exemplo,
``Variável'' poderia ser usado se a entidade for uma variável. Escreva o
comando @code{@@defvr} no início de uma linha e siga-o na mesma linha pela
categoria da entidade e o nome da entidade.

Nós recomendamos colocar o nome da categoria em maiúsculas como um título. Se o
nome da categoria contiver espaços, como no nome ``Opção de Usuário(a)'',
coloque-o entre chaves. Caso contrário, a segunda palavra será confundida com o
nome da entidade. Por exemplo,

@example
@group
@@defvr @{Opção de Usuário(a)@} fill-column
Essa variável local e de buffer especifica a largura máxima das linhas preenchidas.
@dots{}
@@end defvr
@end group
@end example

Termine a definição com @code{@@end defvr} em uma linha própria.

O modelo é:

@example
@group
@@defvr @var{categoria} @var{nome}
@var{corpo-da-definição}
@@end defvr
@end group
@end example

@code{@@defvr} cria uma entrada no índice de variáveis ​​para
@var{nome}.

@findex defvar
@item @@defvar @var{nome}
O comando @code{@@defvar} é o comando de definição para variáveis.
@code{@@defvar} é equivalente a @samp{@@defvr Variável @dots{}}.

@need 750
Por exemplo:

@example
@group
@@defvar kill-ring
@dots{}
@@end defvar
@end group
@end example

O modelo é:

@example
@group
@@defvar @var{nome}
@var{corpo-da-definição}
@@end defvar
@end group
@end example

@code{@@defvar} cria uma entrada no índice de variáveis ​​para
@var{nome}.

@findex defopt
@item @@defopt @var{nome}
@cindex Opções de usuário(a), marcando
O comando @code{@@defopt} é o comando de definição para @dfn{opções de
usuário(a)}, ou seja, variáveis ​​destinadas para usuários(as)
mudarem de acordo com o gosto; Emacs tem muitas dessas (@pxref{Variables,,,
emacs, The GNU Emacs Manual}). @code{@@defopt} é equivalente a @samp{@@defvr
@{Opção de Usuário(a)@} @dots{}} e funciona como @code{@@defvar}. Ele cria uma
entrada no índice de variáveis.
@end table


@node Funções Tipadas
@subsection Funções em Linguagens Tipadas

@cindex Funções tipadas
@cindex Funções, em linguagens tipadas

O comando @code{@@deftypefn} e as variações dele são para descrever funções em
linguagens nas quais você precisa declarar tipos de variáveis ​​e
funções, como C e C++.

@table @code
@findex deftypefn
@item @@deftypefn @var{categoria} @var{tipo-dados} @var{nome} @var{argumentos}@dots{}
O comando @code{@@deftypefn} é o comando geral de definição para funções e
entidades similares que podem receber argumentos e que são tipadas. O comando
@code{@@deftypefn} é escrito no início de uma linha e é seguido na mesma linha
pela categoria da entidade sendo descrita, o tipo do valor retornado, o nome
dessa entidade em particular e os argumentos dela, se existirem.

@need 800
@noindent
Por exemplo,

@example
@group
@@deftypefn @{Função de Biblioteca@} int foobar @@
  (int @@var@{foo@}, float @@var@{bar@})
@dots{}
@@end deftypefn
@end group
@end example

produz:

@quotation
@deftypefn {Função de Biblioteca} int foobar  (int @var{foo}, float @var{bar})
@dots{}
@end deftypefn
@end quotation

Isso significa que @code{foobar} é uma ``função de biblioteca'' que retorna um
@code{int}, e os argumentos dela são @var{foo} (um @code{int}) e @var{bar} (um
@code{float}).

Como em linguagens tipadas, os nomes reais dos argumentos são normalmente
espalhados entre nomes de tipos de dados e palavras-chave, Texinfo não consegue
encontrá-los sem ajuda. Você pode (a)@tie{}escrever tudo como texto simples, e
ele será impresso em tipo inclinado; (b)@tie{}usar @code{@@var} para os nomes
de variáveis, que colocará os nomes de variáveis ​​em maiúsculas no
Info e usará a fonte de máquina de escrever inclinada na saída impressa;
(c)@tie{}usar @code{@@var} para os nomes de variáveis ​​e
@code{@@code} para os nomes de tipos e palavras-chave, que serão obedientemente
obedecidos.

O modelo para @code{@@deftypefn} é:

@example
@group
@@deftypefn @var{categoria} @var{tipo-dados} @var{nome} @var{argumentos} @dots{}
@var{corpo-da-descrição}
@@end deftypefn
@end group
@end example

@noindent
Observe que se @var{categoria} ou @var{tipo-dados} for mais de uma palavra,
então ele precisa ser colocado entre chaves para torná-lo um argumento
unitário.

Se você estiver descrevendo um procedimento em uma linguagem que tenha pacotes,
como Ada, você pode considerar usar @code{@@deftypefn} de uma maneira um tanto
contrária à convenção descrita nos parágrafos precedentes. Por exemplo:

@example
@group
@@deftypefn stacks private push @@
       (@@var@{s@}:in out stack; @@
       @@var@{n@}:in integer)
@dots{}
@@end deftypefn
@end group
@end example

@noindent
(Nesses exemplos os argumentos @code{@@deftypefn} são mostrados usando
continuações (@pxref{Linhas de Continuação de Comando de Definição}), mas
poderiam estar em uma linha).

Nesse caso, o procedimento é classificado como pertencente ao pacote
@code{stacks} em vez de classificado como um `procedimento' e o tipo de dados
dele está descrito como @code{private}. (O nome do procedimento é @code{push},
e os argumentos dele são @var{s} e @var{n}).

@code{@@deftypefn} cria uma entrada no índice de funções para @var{nome}.

@item @@deftypefun @var{tipo-dados} @var{nome} @var{argumentos}@dots{}
@findex deftypefun
O comando @code{@@deftypefun} é o comando especializado de definição para
funções em linguagens tipadas. O comando é equivalente a @samp{@@deftypefn
Função @dots{}}. O modelo é:

@example
@group
@@deftypefun @var{tipo} @var{nome} @var{argumentos}@dots{}
@var{corpo-da-descrição}
@@end deftypefun
@end group
@end example

@code{@@deftypefun} cria uma entrada no índice de funções para @var{nome}.

@end table

@cindex Tipo de retorno, linha própria para
@findex deftypefnnewline
Normalmente, o tipo de retorno é impresso na mesma linha que o nome da função e
os argumentos, como mostrado acima. No código-fonte, o estilo GNU é o de
colocar o tipo de retorno em uma linha dedicada. Portanto, Texinfo fornece uma
opção para fazer isso: @code{@@deftypefnnewline on}.

Isso afeta somente funções tipadas---não funções não tipadas, variáveis
​​não tipadas, etc.. Especificamente, afeta os comandos nesta seção e
os comandos análogos para linguagens orientadas a objetos, ou seja,
@code{@@deftypeop} e @code{@@deftypemethod} (@pxref{Métodos Orientados a
Objetos}).

Especificar-se @code{@@deftypefnnewline off} reverte para o padrão.


@node Variáveis ​​Tipadas
@subsection Variáveis ​​em Linguagens Tipadas

@cindex Variáveis tipadas
@cindex Variáveis, em linguagens tipadas

Variáveis ​​em linguagens tipadas são manuseadas de forma similar a
funções em linguagens tipadas. @xref{Funções Tipadas}. O comando geral de
definição @code{@@deftypevr} corresponde a @code{@@deftypefn} e o comando
especializado de definição @code{@@deftypevar} corresponde a
@code{@@deftypefun}.

@table @code
@findex deftypevr
@item @@deftypevr @var{categoria} @var{tipo-dados} @var{nome}
O comando @code{@@deftypevr} é o comando geral de definição para algo como uma
variável em uma linguagem tipada---uma entidade que registra um valor. Você
precisa escolher um termo para descrever a categoria da entidade sendo
definida; por exemplo, ``Variável'' poderia ser usado se a entidade for uma
variável.

O comando @code{@@deftypevr} é escrito no início de uma linha e é seguido na
mesma linha pela categoria da entidade sendo descrita, o tipo de dados e o nome
dessa entidade específica.

@need 800
@noindent
Por exemplo:

@example
@group
@@deftypevr @{Sinalizador Global@} int enable
@dots{}
@@end deftypevr
@end group
@end example

@noindent
produz o seguinte:

@quotation
@deftypevr {Sinalizador Global} int enable
@dots{}
@end deftypevr
@end quotation

@need 800
O modelo é:

@example
@@deftypevr @var{categoria} @var{tipo-dados} @var{nome}
@var{corpo-da-descrição}
@@end deftypevr
@end example

@findex deftypevar
@item @@deftypevar @var{tipo-dados} @var{nome}
O comando @code{@@deftypevar} é o comando especializado de definição para
variáveis ​​em linguagens tipadas. @code{@@deftypevar} é equivalente
a @samp{@@deftypevr Variável @dots{}}. O modelo é:

@example
@group
@@deftypevar @var{tipo-dados} @var{nome}
@var{corpo-da-descrição}
@@end deftypevar
@end group
@end example
@end table

Esses comandos criam entradas no índice de variáveis.

PAREI
@node Tipos de Dados
@subsection Tipos de Dados

Here is the command for data types:

@table @code
@findex deftp
@item @@deftp @var{category} @var{name} @var{attributes}@dots{}
The @code{@@deftp} command is the generic definition command for data
types.  The command is written at the beginning of a line and is
followed on the same line by the category, by the name of the type
(which is a word like @code{int} or @code{float}), and then by names of
attributes of objects of that type.  Thus, you could use this command
for describing @code{int} or @code{float}, in which case you could use
@code{data type} as the category.  (A data type is a category of
certain objects for purposes of deciding which operations can be
performed on them.)

In Lisp, for example,  @dfn{pair} names a particular data
type, and an object of that type has two slots called the
@sc{car} and the @sc{cdr}.  Here is how you would write the first line
of a definition of @code{pair}.

@example
@group
@@deftp @{Data type@} pair car cdr
@dots{}
@@end deftp
@end group
@end example

@need 950
The template is:

@example
@group
@@deftp @var{category} @var{name-of-type} @var{attributes}@dots{}
@var{body-of-definition}
@@end deftp
@end group
@end example

@code{@@deftp} creates an entry in the index of data types.
@end table


@node Objetos Abstratos
@subsection Object-Oriented Programming

@cindex Object-oriented programming

Here are the commands for formatting descriptions about abstract
objects, such as are used in object-oriented programming.  A class is
a defined type of abstract object.  An instance of a class is a
particular object that has the type of the class.  An instance
variable is a variable that belongs to the class but for which each
instance has its own value.

@menu
* Variáveis Orientadas a Objetos::   Variáveis Orientadas a Objetos.
* Métodos Orientados a Objetos::     Métodos Orientados a Objetos.
@end menu


@node Variáveis Orientadas a Objetos
@subsubsection Variáveis Orientadas a Objetos

@cindex Variables, object-oriented

These commands allow you to define different sorts of variables in
object-oriented programming languages.

@table @code
@item @@defcv @var{category} @var{class} @var{name}
@findex defcv
The @code{@@defcv} command is the general definition command for
variables associated with classes in object-oriented programming.  The
@code{@@defcv} command is followed by three arguments: the category of
thing being defined, the class to which it belongs, and its
name.  For instance:

@example
@group
@@defcv @{Class Option@} Window border-pattern
@dots{}
@@end defcv
@end group
@end example

@noindent produz:
@defcv {Class Option} Window border-pattern
@dots{}
@end defcv

@code{@@defcv} creates an entry in the index of variables.

@item @@deftypecv @var{category} @var{class} @var{data-type} @var{name}
@findex deftypecv
The @code{@@deftypecv} command is the definition command for typed
class variables in object-oriented programming.  It is analogous to
@code{@@defcv} with the addition of the @var{data-type} parameter to
specify the type of the instance variable.  Ordinarily, the data type
is a programming language construct that should be marked with
@code{@@code}. For instance:

@example
@group
@@deftypecv @{Class Option@} Window @@code@{int@} border-pattern
@dots{}
@@end deftypecv
@end group
@end example

@noindent produz:

@deftypecv {Class Option} Window @code{int} border-pattern
@dots{}
@end deftypecv

@code{@@deftypecv} creates an entry in the index of variables.

@item @@defivar @var{class} @var{name}
@findex defivar
The @code{@@defivar} command is the definition command for instance
variables in object-oriented programming.  @code{@@defivar} is
equivalent to @samp{@@defcv @{Instance Variable@} @dots{}}.  For
instance:

@example
@group
@@defivar Window border-pattern
@dots{}
@@end defivar
@end group
@end example

@noindent produz:

@defivar Window border-pattern
@dots{}
@end defivar

@code{@@defivar} creates an entry in the index of variables.

@item @@deftypeivar @var{class} @var{data-type} @var{name}
@findex deftypeivar
The @code{@@deftypeivar} command is the definition command for typed
instance variables in object-oriented programming.  It is analogous to
@code{@@defivar} with the addition of the @var{data-type} parameter to
specify the type of the instance variable.  Ordinarily, the data type
is a programming language construct that should be marked with
@code{@@code}. For instance:

@example
@group
@@deftypeivar Window @@code@{int@} border-pattern
@dots{}
@@end deftypeivar
@end group
@end example

@noindent produz:

@deftypeivar Window @code{int} border-pattern
@dots{}
@end deftypeivar

@code{@@deftypeivar} creates an entry in the index of variables.

@end table


@node Métodos Orientados a Objetos
@subsubsection Métodos Orientados a Objetos

@cindex Methods, object-oriented

These commands allow you to define different sorts of function-like
entities resembling methods in object-oriented programming languages.
These entities take arguments, as functions do, but are associated with
particular classes of objects.

@table @code

@findex defop
@item @@defop @var{category} @var{class} @var{name} @var{arguments}@dots{}
The @code{@@defop} command is the general definition command for these
method-like entities.

For example, some systems have constructs called @dfn{wrappers} that
are associated with classes as methods are, but that act more like
macros than like functions.  You could use @code{@@defop Wrapper} to
describe one of these.

Sometimes it is useful to distinguish methods and @dfn{operations}.
You can think of an operation as the specification for a method.
Thus, a window system might specify that all window classes have a
method named @code{expose}; we would say that this window system
defines an @code{expose} operation on windows in general.  Typically,
the operation has a name and also specifies the pattern of arguments;
all methods that implement the operation must accept the same
arguments, since applications that use the operation do so without
knowing which method will implement it.

Often it makes more sense to document operations than methods.  For
example, window application developers need to know about the
@code{expose} operation, but need not be concerned with whether a
given class of windows has its own method to implement this operation.
To describe this operation, you would write:

@example
@@defop Operation windows expose
@end example

The @code{@@defop} command is written at the beginning of a line and
is followed on the same line by the overall name of the category of
operation, the name of the class of the operation, the name of the
operation, and its arguments, if any.

The template is:
@example
@group
@@defop @var{category} @var{class} @var{name} @var{arguments}@dots{}
@var{body-of-definition}
@@end defop
@end group
@end example

@code{@@defop} creates an entry, such as `@code{expose} on
@code{windows}', in the index of functions.

@findex deftypeop
@item @@deftypeop @var{category} @var{class} @var{data-type} @var{name} @var{arguments}@dots{}
The @code{@@deftypeop} command is the definition command for typed
operations in object-oriented programming.  It is similar to
@code{@@defop} with the addition of the @var{data-type} parameter to
specify the return type of the method.  @code{@@deftypeop} creates an
entry in the index of functions.

@item @@defmethod @var{class} @var{name} @var{arguments}@dots{}
@findex defmethod
The @code{@@defmethod} command is the definition command for methods
in object-oriented programming.  A method is a kind of function that
implements an operation for a particular class of objects and its
subclasses.
@ignore
@c ADR: Who cares?!?
@c KB: Oh, I don't know, I think this info is crucial!
In the Lisp Machine, methods actually were functions, but
they were usually defined with @code{defmethod}.
@end ignore

@code{@@defmethod} is equivalent to @samp{@@defop Method @dots{}}.
The command is written at the beginning of a line and is followed by
the name of the class of the method, the name of the method, and its
arguments, if any.

@noindent
For example:
@example
@group
@@defmethod @code{bar-class} bar-method argument
@dots{}
@@end defmethod
@end group
@end example

@noindent
illustrates the definition for a method called @code{bar-method} of
the class @code{bar-class}.  The method takes an argument.

@code{@@defmethod} creates an entry in the index of functions.

@item @@deftypemethod @var{class} @var{data-type} @var{name} @var{arguments}@dots{}
@findex deftypemethod
The @code{@@deftypemethod} command is the definition command for methods
in object-oriented typed languages, such as C++ and Java.  It is similar
to the @code{@@defmethod} command with the addition of the
@var{data-type} parameter to specify the return type of the method.
@code{@@deftypemethod} creates an entry in the index of functions.

@end table

The typed commands are affected by the @code{@@deftypefnnewline}
option (@pxref{Funções Tipadas,, Funções em Linguagens Tipadas}).


@node Convenções de Comando de Definição
@section Conventions for Writing Definitions
@cindex Definition conventions
@cindex Conventions for writing definitions

When you write a definition using @code{@@deffn}, @code{@@defun}, or
one of the other definition commands, please take care to use
arguments that indicate the meaning, as with the @var{count} argument
to the @code{forward-word} function.  Also, if the name of an argument
contains the name of a type, such as @var{integer}, take care that the
argument actually is of that type.


@node Definição de Função de Amostra
@section Uma Definição de Função de Amostra
@cindex Function definitions
@cindex Command definitions
@cindex Macro definitions, programming-language
@cindex Sample function definition

A function definition uses the @code{@@defun} and @code{@@end defun}
commands.  The name of the function follows immediately after the
@code{@@defun} command and it is followed, on the same line, by the
parameter list.

Here is a definition from @ref{Calling Functions,,, elisp, The GNU Emacs
Lisp Reference Manual}.

@quotation
@defun apply function &rest arguments
@code{apply} calls @var{function} with @var{arguments}, just
like @code{funcall} but with one difference: the last of
@var{arguments} is a list of arguments to give to
@var{function}, rather than a single argument.  We also say
that this list is @dfn{appended} to the other arguments.

@code{apply} returns the result of calling @var{function}.
As with @code{funcall}, @var{function} must either be a Lisp
function or a primitive function; special forms and macros
do not make sense in @code{apply}.

@example
(setq f 'list)
    @result{} list
(apply f 'x 'y 'z)
@error{} Wrong type argument: listp, z
(apply '+ 1 2 '(3 4))
    @result{} 10
(apply '+ '(1 2 3 4))
    @result{} 10

(apply 'append '((a b c) nil (x y z) nil))
    @result{} (a b c x y z)
@end example

An interesting example of using @code{apply} is found in the description
of @code{mapcar}.
@end defun
@end quotation

In the Texinfo source file, this example looks like this:

@example
@group
@@defun apply function &rest arguments
@@code@{apply@} calls @@var@{function@} with
@@var@{arguments@}, just like @@code@{funcall@} but with one
difference: the last of @@var@{arguments@} is a list of
arguments to give to @@var@{function@}, rather than a single
argument.  We also say that this list is @@dfn@{appended@}
to the other arguments.
@end group

@group
@@code@{apply@} returns the result of calling
@@var@{function@}.  As with @@code@{funcall@},
@@var@{function@} must either be a Lisp function or a
primitive function; special forms and macros do not make
sense in @@code@{apply@}.
@end group

@group
@@example
(setq f 'list)
    @@result@{@} list
(apply f 'x 'y 'z)
@@error@{@} Wrong type argument: listp, z
(apply '+ 1 2 '(3 4))
    @@result@{@} 10
(apply '+ '(1 2 3 4))
    @@result@{@} 10

(apply 'append '((a b c) nil (x y z) nil))
    @@result@{@} (a b c x y z)
@@end example
@end group

@group
An interesting example of using @@code@{apply@} is found
in the description of @@code@{mapcar@}.
@@end defun
@end group
@end example

@noindent
In this manual, this function is listed in the Command and Variable
Index under @code{apply}.

Ordinary variables and user options are described using a format like
that for functions except that variables do not take arguments.


@node Internacionalização
@chapter Internacionalização

@cindex Internacionalização
Texinfo has some support for writing in languages other than English,
although this area still needs considerable work.  (If you are
yourself helping to translate the fixed strings written to documents,
@pxref{Internacionalização of Document Strings}.)

For a list of the various accented and special characters Texinfo
supports, see @ref{Inserindo Acentos}.

@menu
* @code{@@documentlanguage}::           Declaring the current language.
* @code{@@documentencoding}::           Declaring the input encoding.
@end menu


@node @code{@@documentlanguage}
@section @code{@@documentlanguage @var{ll}[_@var{cc}]}: Set the Document Language
@anchor{documentlanguage}

@findex documentlanguage
@cindex Language, declaring
@cindex Locale, declaring
@cindex Document language, declaring

The @code{@@documentlanguage} command declares the current document
locale.  Write it on a line by itself, near the beginning of the file.

@example
@@documentlanguage @var{ll}[_@var{cc}]
@end example

Include a two-letter ISO@tie{}639-2 language code (@var{ll}) following
the command name, optionally followed by an underscore and two-letter
ISO@tie{}3166 two-letter country code (@var{cc}).  If you have a
multilingual document, the intent is to be able to use this command
multiple times, to declare each language change.  If the command is
not used at all, the default is @code{en_US} for US English.

As with GNU Gettext (@pxref{Top,,, gettext, Gettext}), if the country
code is omitted, the main dialect is assumed where possible.  For
example, @code{de} is equivalent to @code{de_DE} (German as spoken in
Germany).

@cindex Document strings, translation of
For Info and other online output, this command changes the translation 
of various @dfn{document strings} such as ``see'' in cross-references 
(@pxref{Referências Cruzadas}), ``Function' in defuns 
(@pxref{Comandos de Definição}), and so on.  Some strings, such as 
``Node:'', ``Next:'', ``Menu:'', etc., are keywords in Info output, so 
are not translated there; they are translated in other output formats.

@cindex @file{txi-@var{cc}.tex}
For @TeX{}, this command causes a file @file{txi-@var{locale}.tex} to
be read (if it exists).  If @code{@@documentlanguage} argument
contains the optional @samp{_@var{cc}} suffix, this is tried first.
For example, with @code{@@documentlanguage de_DE}, @TeX{} first looks
for @file{txi-de_DE.tex}, then @file{txi-de.tex}.

Such a @file{txi-*} file is intended to redefine the various English
words used in @TeX{} output, such as `Chapter', `See', and so on.  We
are aware that individual words like these cannot always be translated
in isolation, and that a very different strategy would be required for
ideographic (among other) scripts.  Help in improving Texinfo's
language support is welcome.

@cindex Hyphenation patterns, language-dependent
@code{@@documentlanguage} also changes @TeX{}'s current hyphenation
patterns, if the @TeX{} program being run has the necessary support
included.  This will generally not be the case for @command{tex}
itself, but will usually be the case for up-to-date distributions of
the extended @TeX{} programs @command{etex} (DVI output) and
@command{pdftex} (PDF output).  @command{texi2dvi} will use the
extended @TeX{}s if they are available (@pxref{Format with
@command{texi2dvi}}).

In September 2006, the W3C Internacionalização Activity released a
new recommendation for specifying languages:
@url{http://www.rfc-editor.org/rfc/bcp/bcp47.txt}.  When Gettext
supports this new scheme, Texinfo will too.

@cindex ISO 639-2 language codes
@cindex ISO 3166 country codes
@cindex Language codes
@cindex Country codes
Since the lists of language codes and country codes are updated
relatively frequently, we don't attempt to list them here.  The valid
language codes are on the official home page for ISO@tie{}639,
@url{http://www.loc.gov/standards/iso639-2/}.  The country codes and
the official web site for ISO@tie{}3166 can be found via
@url{http://en.wikipedia.org/wiki/ISO_3166}.


@node @code{@@documentencoding}
@section @code{@@documentencoding @var{enc}}: Set Input Encoding

@anchor{documentencoding}@c old name
@findex documentencoding
@cindex Encoding, declaring
@cindex Input encoding, declaring
@cindex Character set, declaring
@cindex Document input encoding

The @code{@@documentencoding} command declares the input document
encoding, and can also affect the encoding of the output.  Write it on
a line by itself, with a valid encoding specification following, near
the beginning of the file.

@example
@@documentencoding @var{enc}
@end example

Texinfo supports these encodings:

@table @code
@item US-ASCII
This has no particular effect, but it's included for completeness.

@item UTF-8
The vast global character encoding, expressed in 8-bit bytes.

@item ISO-8859-1
@itemx ISO-8859-15
@itemx ISO-8859-2
@cindex Euro symbol, and encodings
These specify the standard encodings for Western European (the first
two) and Eastern European languages (the third), respectively.  ISO
8859-15 replaces some little-used characters from 8859-1 (e.g.,
precomposed fractions) with more commonly needed ones, such as the
Euro symbol (@euro{}).

A full description of the encodings is beyond our scope here;
one useful reference is @uref{http://czyborra.com/charsets/iso8859.html}.

@item koi8-r
This is the commonly used encoding for the Russian language.

@item koi8-u
This is the commonly used encoding for the Ukrainian language.

@end table

Specifying an encoding @var{enc} has the following effects:

@cindex Local Variables section, for encoding
@cindex Info output, and encoding
In Info output, a so-called `Local Variables' section 
(@pxref{File Variables,,, emacs, The GNU Emacs Manual}) is output including
@var{enc}.  This allows Info readers to set the encoding
appropriately.  It looks like this:

@example
Local Variables:
coding: @var{enc}
End:
@end example

Also, in Info and plain text output, unless the option
@option{--disable-encoding} is given to @command{makeinfo}, accent
constructs and special characters, such as @code{@@'e}, are output as
the actual 8-bit or UTF-8 character in the given encoding where
possible.

@cindex HTML output, and encodings
@cindex @code{http-equiv}, and charset specification
@cindex @code{<meta>} HTML tag, and charset specification
In HTML output, a @samp{<meta>} tag is output, in the @samp{<head>}
section of the HTML, that specifies @var{enc}.  Web servers and
browsers cooperate to use this information so the correct encoding is
used to display the page, if supported by the system.  That looks like
this:

@example
<meta http-equiv="Content-Type" content="text/html;
     charset=@var{enc}">
@end example

In XML and Docbook output, UTF-8 is always used for the output,
according to the conventions of those formats.

@cindex Computer Modern fonts
In @TeX{} output, the characters which are supported in the standard
Computer Modern fonts are output accordingly.  For example, this
means using constructed accents rather than precomposed glyphs.
Using a missing character generates a warning message, as does
specifying an unimplemented encoding.

Although modern @TeX{} systems support nearly every script in use in
the world, this wide-ranging support is not available in
@file{texinfo.tex}, and it's not feasible to duplicate or incorporate
all that effort.  (Our plan to support other scripts is to create a
@LaTeX{} back-end to @command{texi2any}, where the support is already
present.)

For maximum portability of Texinfo documents across the many different
user environments in the world, we recommend sticking to 7-bit ASCII
in the input unless your particular manual needs a substantial amount
of non-ASCII, e.g., it's written in German.  You can use the
@code{@@U} command to insert an occasional needed character
(@pxref{Inserindo Unicode}).


@node Condicionais
@chapter Texto Condicionalmente Visível
@cindex Conditionally visible text
@cindex Text, conditionally visible
@cindex Visibility of conditional text
@cindex If text conditionally visible

The @dfn{conditional commands} allow you to use different text for
different output formats, or for general conditions that you define.
For example, you can use them to specify different text for the
printed manual and the Info output.

The conditional commands comprise the following categories.

@itemize @bullet
@item
Commands specific to an output format (Info, @TeX{}, HTML, @dots{}).

@item
Commands specific to any output format @emph{excluding} a given
one (e.g., not Info, not @TeX{}, @dots{}).

@item
`Raw' formatter text for any output format, passed straight
through with minimal (but not zero) interpretation of @@-commands.

@item
Format-independent variable substitutions, and testing if a variable
is set or clear.

@end itemize

@menu
* Comandos Condicionais::             Texto para um dado formato.
* Não Comandos Condicionais::         Texto para qualquer outro formato que não um dado.
* Comandos do Formatador Bruto::      Utilizando comandos crus do formatador.
* Condicionais Inline::               Texto condicional delimitado por chaves.
* @code{@@set @@clear @@value}::      Testes de variáveis e substituições.
* Testes para Comandos do Texinfo::   Testando se um comando Texinfo está disponível.
* Aninhamento Condicional::           Utilizando condicionais dentro de condicionais.
@end menu


@node Comandos Condicionais
@section Comandos Condicionais

Texinfo has an @code{@@if@var{format}} environment for each output
format, to allow conditional inclusion of text for a particular output
format.

@findex ifinfo
@code{@@ifinfo} begins segments of text that should be ignored by
@TeX{} when it typesets the printed manual, and by @command{makeinfo}
when not producing Info output.  The segment of text appears only in
the Info file and, for historical compatibility, the plain text
output.

@findex ifdocbook
@findex ifhtml
@findex ifplaintext
@findex iftex
@findex ifxml
The environments for the other formats are analogous:

@table @code
@item @@ifdocbook @dots{} @@end ifdocbook
Text to appear only in the Docbook output.

@item @@ifhtml @dots{} @@end ifhtml
Text to appear only in the HTML output.

@item @@ifplaintext @dots{} @@end ifplaintext
Text to appear only in the plain text output.

@item @@iftex @dots{} @@end iftex
Text to appear only in the printed manual.

@item @@ifxml @dots{} @@end ifxml
Text to appear only in the XML output.
@end table

The @code{@@if@dots{}} and @code{@@end if@dots{}} commands must appear
on lines by themselves in your source file.  The newlines following
the commands are (more or less) treated as whitespace, so that the
conditional text is flowed normally into a surrounding paragraph.

The @code{@@if@dots{}} constructs are intended to conditionalize
normal Texinfo source; @pxref{Comandos do Formatador Bruto}, for using
underlying format commands directly.

Here is an example showing all these Condicionais:

@example
@@iftex
This text will appear only in the printed manual.
@@end iftex
@@ifinfo
However, this text will appear only in Info and plain text.
@@end ifinfo
@@ifhtml
And this text will only appear in HTML.
@@end ifhtml
@@ifplaintext
Whereas this text will only appear in plain text.
@@end ifplaintext
@@ifxml
Notwithstanding that this will only appear in XML@.
@@end ifxml
@@ifdocbook
Nevertheless, this will only appear in Docbook.
@@end ifdocbook
@end example

@noindent
The preceding example produces the following line:

@iftex
This text will appear only in the printed manual.
@end iftex
@ifinfo
However, this text will appear only in Info and plain text.
@end ifinfo
@ifhtml
And this text will only appear in HTML.
@end ifhtml
@ifplaintext
Whereas this text will only appear in plain text.
@end ifplaintext
@ifxml
Notwithstanding that this will only appear in XML@.
@end ifxml
@ifdocbook
Nevertheless, this will only appear in Docbook.
@end ifdocbook

@noindent
Notice that you only see one of the input lines, depending on which
version of the manual you are reading.

@findex errormsg
In complex documents, you may want Texinfo to issue an error message
in some Condicionais that should not ever be processed.  The
@code{@@errormsg@{@var{text}@}} command will do this; it takes one
argument, the text of the error message, which is expanded more or
less as if it were Info text.

We mention @code{@@errormsg@{@}} here even though it is not strictly
related to Condicionais, since in practice it is most likely to be
useful in that context.  Technically, it can be used anywhere.
@xref{External Macro Processors}, for a caveat regarding the line
numbers which @code{@@errormsg} emits in @TeX{}.


@node Não Comandos Condicionais
@section Não Comandos Condicionais
@findex ifnotdocbook
@findex ifnothtml
@findex ifnotinfo
@findex ifnotplaintext
@findex ifnottex
@findex ifnotxml

You can specify text to be included in any output format @emph{other}
than a given one with the @code{@@ifnot@dots{}} environments:

@example
@@ifnotdocbook @dots{} @@end ifnotdocbook
@@ifnothtml @dots{} @@end ifnothtml
@@ifnotinfo @dots{} @@end ifnotinfo
@@ifnotplaintext @dots{} @@end ifnotplaintext
@@ifnottex @dots{} @@end ifnottex
@@ifnotxml @dots{} @@end ifnotxml
@end example

@noindent
The @code{@@ifnot@dots{}} command and the @code{@@end} command must
appear on lines by themselves in your actual source file.

If the output file is being made in the given format, the
region is @emph{ignored}.  Otherwise, it is included.

There is one exception (for historical compatibility):
@code{@@ifnotinfo} text is omitted for both Info and plain text
output, not just Info.  To specify text which appears only in Info and
not in plain text, use @code{@@ifnotplaintext}, like this:

@example
@@ifinfo
@@ifnotplaintext
This will be in Info, but not plain text.
@@end ifnotplaintext
@@end ifinfo
@end example

The regions delimited by these commands are ordinary Texinfo source as
with @code{@@iftex}, not raw formatter source as with @code{@@tex}
(@pxref{Comandos do Formatador Bruto}).


@node Comandos do Formatador Bruto
@section Comandos do Formatador Bruto
@cindex Raw formatter commands

@cindex @TeX{} commands, using ordinary
@cindex Ordinary @TeX{} commands, using
@cindex Commands using raw @TeX{}
@cindex Plain @TeX{}

The @code{@@if@dots{}} Condicionais just described must be used only
with normal Texinfo source.  For instance, most features of plain
@TeX{} will not work within @code{@@iftex}.  The purpose of
@code{@@if@dots{}} is to provide conditional processing for Texinfo
source, not provide access to underlying formatting features.  For
that, Texinfo provides so-called @dfn{raw formatter commands}.  They
should only be used when truly required (most documents do not need
them).

@findex tex
@cindex Category codes, of plain @TeX{}
The first raw formatter command is @code{@@tex}.  You can enter plain
@TeX{} completely, and use @samp{\} in the @TeX{} commands, by
delineating a region with the @code{@@tex} and @code{@@end tex}
commands.  All plain @TeX{} commands and category codes are restored
within a @code{@@tex} region.  The sole exception is that the
@code{@@} character still introduces a command, so that @code{@@end
tex} can be recognized.  Texinfo processors will not output material
in such a region, unless @TeX{} output is being produced.

@findex \gdef @r{within @code{@@tex}}
@findex \globaldefs @r{within @code{@@tex}}
In complex cases, you may wish to define new @TeX{} macros within
@code{@@tex}.  You must use @code{\gdef} to do this, not @code{\def},
because @code{@@tex} regions are processed in a @TeX{} group.  If you
need to make several definitions, you may wish to set
@code{\globaldefs=1} (its value will be restored to zero as usual when
the group ends at @code{@@end tex}, so it won't cause problems with
the rest of the document).

@cindex Equation, displayed, in plain @TeX{}
@cindex Displayed equation, in plain @TeX{}
As an example, here is a displayed equation written in plain @TeX{}:

@example
@@tex
$$ \chi^2 = \sum_@{i=1@}^N
         \left (y_i - (a + b x_i)
         \over \sigma_i\right)^2 $$
@@end tex
@end example

@noindent
The output of this example will appear only in a printed manual.  If
you are reading this in a format not generated by @TeX{}, you will not
see the equation that appears in the printed manual.

@tex
$$ \chi^2 = \sum_{i=1}^N
         \left(y_i - (a + b x_i)
         \over \sigma_i\right)^2 $$
@end tex

@cindex HTML, including raw
@findex ifhtml
@findex html
Analogously, you can use @code{@@ifhtml @dots{} @@end ifhtml} to
delimit Texinfo source to be included in HTML output only, and
@code{@@html @dots{} @@end html} for a region of raw HTML.

@cindex XML, including raw
@findex ifxml
@findex xml
Likewise, you can use @code{@@ifxml @dots{} @@end ifxml} to delimit
Texinfo source to be included in XML output only, and @code{@@xml
@dots{} @@end xml} for a region of raw XML@.  Regions of raw text in
other formats will also be present in the XML output, but with
protection of XML characters and within corresponding elements.  For
example, the raw HTML text:

@example
@group
@@html
<br />
@@end html
@end group
@end example

@noindent
will be included in the XML output as:

@example
@group
<html>
&lt;br /&gt;
</html>
@end group
@end example

@cindex Docbook, including raw
@findex ifdocbook
@findex docbook
Again likewise, you can use @code{@@ifdocbook @dots{} @@end ifdocbook}
to delimit Texinfo source to be included in Docbook output only, and
@code{@@docbook @dots{} @@end docbook} for a region of raw Docbook.

The behavior of newlines in raw regions is unspecified.

In all cases, in raw processing, @code{@@} retains the same meaning as
in the remainder of the document.  Thus, the Texinfo processors must
recognize and even execute, to some extent, the contents of the raw
regions, regardless of the final output format.  Therefore, specifying
changes that globally affect the document inside a raw region leads to
unpredictable and generally undesirable behavior.  For example, using
the @code{@@kbdinputstyle} command inside a raw region is undefined.

The remedy is simple: don't do that.  Use the raw formatter commands
for their intended purpose, of providing material directly in the
underlying format.  When you simply want to give different Texinfo
specifications for different output formats, use the
@code{@@if@dots{}} Condicionais and stay in Texinfo syntax.



@node Condicionais Inline
@section Inline Condicionais: @code{@@inline}, @code{@@inlineifelse}, @code{@@inlineraw}
@findex inlinefmt
@findex inlinefmtifelse
@findex inlineraw
@cindex Condicionais Inline
@cindex Conditional commands, inline
@cindex Brace-delimited conditional text
@cindex Newlines, avoiding in Condicionais
@cindex Whitespace, controlling in Condicionais

Texinfo provides a set of conditional commands with arguments given
within braces:

@table @code
@item @@inlinefmt@{@var{format}, @var{text}@}
Process the Texinfo @var{text} if @var{format} output is being
generated.

@item @@inlinefmtifelse@{@var{format}, @var{then-text}, @var{else-text}@}
Process the Texinfo @var{then-text} if @var{format} output is being
generated; otherwise, process @var{else-text}.

@item @@inlineraw@{@var{format}, @var{text}@}
Similar, but for raw @var{text} (@pxref{Comandos do Formatador Bruto}).
@end table

The supported @var{format} names are:

@example
docbook  html  info  plaintext  tex  xml
@end example

For example,

@example
@@inlinefmt@{html, @@emph@{HTML-only text@}@}
@end example

@noindent is nearly equivalent to

@example
@@ifhtml
@@emph@{HTML-only text@}
@@end ifhtml
@end example

@noindent except that no whitespace is added, as happens in the latter
(environment) case.

In these commands, whitespace is ignored after the comma separating
the arguments, as usual, but is @emph{not} ignored at the end of
@var{text}.

To insert a literal at sign, left brace, or right brace in one of the
arguments, you must use the alphabetic commands @code{@@atchar@{@}}
(@pxref{Inserindo um Símbolo Arroba}), and @code{@@lbracechar@{@}} or
@code{@@rbracechar@{@}} (@pxref{Inserindo Chaves}), or the parsing
will become confused.

With @code{@@inlinefmtifelse}, it is also necessary to use
@code{@@comma@{@}} to avoid mistaking a @samp{,} in the text for the
delimiter.  With @code{@@inlinefmt} and @code{@@inlineraw},
@code{@@comma@{@}} is not required (though it's fine to use it), since
these commands always have exactly two arguments.

For @TeX{}, the processed @var{text} cannot contain newline-delimited
commands.  Text to be ignored (i.e., for non-@TeX{}) can, though.

Two other @code{@@inline...} Condicionais complement the
@code{@@ifset} and @code{@@ifclear} commands; see the next section.


@node @code{@@set @@clear @@value}
@section Flags: @code{@@set}, @code{@@clear}, Condicionais, and @code{@@value}

@anchor{set clear value}@c old name
You can direct the Texinfo formatting commands to format or ignore parts
of a Texinfo file with the @code{@@set}, @code{@@clear}, @code{@@ifset},
and @code{@@ifclear} commands.

Here are brief descriptions of these commands, see the following
sections for more details:

@table @code
@item @@set @var{flag} [@var{value}]
Set the variable @var{flag}, to the optional @var{value} if specified.

@item @@clear @var{flag}
Undefine the variable @var{flag}, whether or not it was previously defined.

@item @@ifset @var{flag}
If @var{flag} is set, text through the next @code{@@end ifset} command
is formatted.  If @var{flag} is clear, text through the following
@code{@@end ifset} command is ignored.

@item @@inlineifset@{@var{flag}, @var{text}@}
Brace-delimited version of @code{@@ifset}.

@item @@ifclear @var{flag}
If @var{flag} is set, text through the next @code{@@end ifclear} command
is ignored.  If @var{flag} is clear, text through the following
@code{@@end ifclear} command is formatted.

@item @@inlineifclear@{@var{flag}, @var{text}@}
Brace-delimited version of @code{@@ifclear}.

@end table

@menu
* @code{@@set @@value}::                 Expand a flag variable to a string.
* @code{@@ifset @@ifclear}::             Format a region if a flag is set.
* @code{@@inlineifset @@inlineifclear}:: Brace-delimited flag Condicionais.
* @code{@@value} Example::              An easy way to update edition information.
@end menu


@node @code{@@set @@value}
@subsection @code{@@set} and @code{@@value}

@anchor{set value}@c old name
@findex set
@findex value
@findex clear

You use the @code{@@set} command to specify a value for a flag, which
is later expanded by the @code{@@value} command.

A @dfn{flag} (aka @dfn{variable}) name is an identifier starting with
an alphanumeric, @samp{-}, or @samp{_}.  Subsequent characters, if
any, may not be whitespace, @samp{@@}, braces, angle brackets, or any
of @samp{~`^+|}; other characters, such as @samp{%}, may work.
However, it is best to use only letters and numerals in a flag name,
not @samp{-} or @samp{_} or others---they will work in some contexts,
but not all, due to limitations in @TeX{}.

The value is the remainder of the input line, and can contain anything.
However, unlike most other commands which take the rest of the line as
a value, @code{@@set} need not appear at the beginning of a line.

Write the @code{@@set} command like this:

@example
@@set foo This is a string.
@end example

@noindent
This sets the value of the flag @code{foo} to ``This is a string.''.

The Texinfo formatters then replace a @code{@@value@{@var{flag}@}}
command with the string to which @var{flag} is set.  Thus, when
@code{foo} is set as shown above, the Texinfo formatters convert this:

@example
@group
@@value@{foo@}
@exdent @r{to this:}
This is a string.
@end group
@end example

You can write a @code{@@value} command within a paragraph; but you
must write a @code{@@set} command on a line of its own.

If you write the @code{@@set} command like this:

@example
@@set foo
@end example

@noindent
without specifying a string, the value of @code{foo} is the empty string.

If you clear a previously set flag with @code{@@clear @var{flag}}, a
subsequent @code{@@value@{flag@}} command will report an error.

For example, if you set @code{foo} as follows:

@example
@@set howmuch very, very, very
@end example

@noindent
then the formatters transform

@example
@group
It is a @@value@{howmuch@} wet day.
@exdent @r{into}
It is a very, very, very wet day.
@end group
@end example

If you write

@example
@@clear howmuch
@end example

@noindent
then the formatters transform

@example
@group
It is a @@value@{howmuch@} wet day.
@exdent @r{into}
It is a @{No value for "howmuch"@} wet day.
@end group
@end example

@code{@@value} cannot be reliably used as the argument to an accent
command (@pxref{Inserindo Acentos}).  For example, this fails:

@example
@@set myletter a
@@'@@value@{myletter@}    @c fails!
@end example


@node @code{@@ifset @@ifclear}
@subsection @code{@@ifset} and @code{@@ifclear}

@anchor{ifset ifclear}@c old name
@findex ifset

When a @var{flag} is set, the Texinfo formatting commands format text
between subsequent pairs of @code{@@ifset @var{flag}} and @code{@@end
ifset} commands.  When the @var{flag} is cleared, the Texinfo formatting
commands do @emph{not} format the text.  @code{@@ifclear} operates
analogously.

Write the conditionally formatted text between @code{@@ifset @var{flag}}
and @code{@@end ifset} commands, like this:

@example
@group
@@ifset @var{flag}
@var{conditional-text}
@@end ifset
@end group
@end example

For example, you can create one document that has two variants, such as
a manual for a `large' and `small' model:

@cindex Shrubbery
@example
You can use this machine to dig up shrubs
without hurting them.

@@set large

@@ifset large
It can also dig up fully grown trees.
@@end ifset

Remember to replant promptly @dots{}
@end example

@noindent
In the example, the formatting commands will format the text between
@code{@@ifset large} and @code{@@end ifset} because the @code{large}
flag is set.

When @var{flag} is cleared, the Texinfo formatting commands do
@emph{not} format the text between @code{@@ifset @var{flag}} and
@code{@@end ifset}; that text is ignored and does not appear in either
printed or Info output.

For example, if you clear the flag of the preceding example by writing
an @code{@@clear large} command after the @code{@@set large} command
(but before the conditional text), then the Texinfo formatting commands
ignore the text between the @code{@@ifset large} and @code{@@end ifset}
commands.  In the formatted output, that text does not appear; in both
printed and Info output, you see only the lines that say, ``You can use
this machine to dig up shrubs without hurting them.  Remember to replant
promptly @dots{}''.

@findex ifclear
If a flag is cleared with a @code{@@clear @var{flag}} command, then
the formatting commands format text between subsequent pairs of
@code{@@ifclear} and @code{@@end ifclear} commands.  But if the flag
is set with @code{@@set @var{flag}}, then the formatting commands do
@emph{not} format text between an @code{@@ifclear} and an @code{@@end
ifclear} command; rather, they ignore that text.  An @code{@@ifclear}
command looks like this:

@example
@@ifclear @var{flag}
@end example


@node @code{@@inlineifset @@inlineifclear}
@subsection @code{@@inlineifset} and @code{@@inlineifclear}

@findex inlineifset
@findex inlineifclear
@cindex Flag Condicionais, brace-delimited
@cindex Brace-delimited flag Condicionais

@code{@@inlineifset} and @code{@@inlineifclear} provide
brace-delimited alternatives to the @code{@@ifset} and
@code{@@ifclear} forms, similar to the other @code{@@inline...}
Commands (@pxref{Condicionais Inline}).  The same caveats about
argument parsing given there apply here too.

@table @code
@item @@inlineifset@{@var{var}, @var{text}@}
Process the Texinfo @var{text} if the flag @var{var} is defined.

@item @@inlineifclear@{@var{var}, @var{text}@}
Process the Texinfo @var{text} if the flag @var{var} is not defined.
@end table

Except for the syntax, their general behavior and purposes is the same
as with @code{@@ifset} and @code{@@ifclear}, described in the previous
section.


@node @code{@@value} Example
@subsection @code{@@value} Example

@anchor{value Example}@c old name

You can use the @code{@@value} command to minimize the number of
places you need to change when you record an update to a manual.
@xref{GNU Sample Texts}, for the full text of an example of using this
to work with Automake distributions.

This example is adapted from @ref{Top,,, make, The GNU Make Manual}.

@enumerate
@item
Set the flags:

@example
@group
@@set EDITION 0.35 Beta
@@set VERSION 3.63 Beta
@@set UPDATED 14 August 1992
@@set UPDATE-MONTH August 1992
@end group
@end example

@item
Write text for the @code{@@copying} section (@pxref{@code{@@copying}}):

@example
@group
@@copying
This is Edition @@value@{EDITION@},
last updated @@value@{UPDATED@},
of @@cite@{The GNU Make Manual@},
for @@code@{make@}, version @@value@{VERSION@}.

Copyright @dots{}

Permission is granted @dots{}
@@end copying
@end group
@end example

@item
Write text for the title page, for people reading the printed manual:

@example
@group
@@titlepage
@@title GNU Make
@@subtitle A Program for Directing Recompilation
@@subtitle Edition @@value@{EDITION@}, @dots{}
@@subtitle @@value@{UPDATE-MONTH@}
@@page
@@insertcopying
@dots{}
@@end titlepage
@end group
@end example

@noindent
(On a printed cover, a date listing the month and the year looks less
fussy than a date listing the day as well as the month and year.)

@item
Write text for the Top node, for people reading the Info file:

@example
@group
@@ifnottex
@@node Top
@@top Make

This is Edition @@value@{EDITION@},
last updated @@value@{UPDATED@},
of @@cite@{The GNU Make Manual@},
for @@code@{make@}, version @@value@{VERSION@}.
@@end ifnottex
@end group
@end example

After you format the manual, the @code{@@value} constructs have been
expanded, so the output contains text like this:

@example
@group
This is Edition 0.35 Beta, last updated 14 August 1992,
of `The GNU Make Manual', for `make', Version 3.63 Beta.
@end group
@end example
@end enumerate

When you update the manual, you change only the values of the flags; you
do not need to edit the three sections.


@node Testes para Comandos do Texinfo
@section Testing for Texinfo Commands: @code{@@ifcommanddefined}, @code{@@ifcommandnotdefined}

@cindex Testing for Texinfo commands
@cindex Checking for Texinfo commands
@cindex Texinfo commands, testing for
@cindex Commands, testing for Texinfo
@cindex Versions of Texinfo, adapting to
@cindex Features of Texinfo, adapting to
@findex ifcommanddefined
@findex ifcommandnotdefined

Occasionally, you may want to arrange for your manual to test if a
given Texinfo command is available and (presumably) do some sort of
fallback formatting if not.  There are Condicionais
@code{@@ifcommanddefined} and @code{@@ifcommandnotdefined} to do this.
For example:

@example
@@ifcommanddefined node
Good, @@samp@{@@@@node@} is defined.
@@end ifcommanddefined
@end example

@noindent will output the expected `Good, @samp{@@node} is defined.'.

This conditional will also consider true any new commands defined by
the document via @code{@@macro}, @code{@@alias},
@code{@@definfoenclose}, and @code{@@def@r{(}code@r{)}index}
(@pxref{Definindo Novos Comandos Texinfo}).  Caveat: the @TeX{}
implementation reports internal @TeX{} commands, in addition to all
the Texinfo commands, as being ``defined''; the @code{makeinfo}
implementation is reliable in this regard, however.

@pindex @file{NEWS} file for Texinfo
You can check the @file{NEWS} file in the Texinfo source distribution
and linked from the Texinfo home page
(@url{http://www.gnu.org/software/texinfo}) to see when a particular
command was added.

@vindex txicommandCondicionais
These command-checking Condicionais themselves were added in
Texinfo@tie{}5.0, released in 2013---decades after Texinfo's
inception.  In order to test if they themselves are available,
the predefined flag @code{txicommandCondicionais} can be tested, like
this:

@example
@@ifset txicommandCondicionais
@@ifcommandnotdefined foobarnode
(Good, @@samp@{@@@@foobarnode@} is not defined.)
@@end ifcommandnotdefined
@@end ifset
@end example

Since flags (see the previous section) were added early in the
existence of Texinfo, there is no problem with assuming they are
available.

We recommend avoiding these tests whenever possible---which is usually
the case.  For many software packages, it is reasonable for all
developers to have a given version of Texinfo (or newer) installed,
and thus no reason to worry about older versions.  (It is
straightforward for anyone to download and install the Texinfo source;
it does not have any problematic dependencies.)

The issue of Texinfo versions does not generally arise for end-users.
With properly distributed packages, users need not process the Texinfo
manual simply to build and install the package; they can use
preformatted Info (or other) output files.  This is desirable in
general, to avoid unnecessary dependencies between packages
(@pxref{Releases,,, standards, GNU Coding Standards}).


@node Aninhamento Condicional
@section Aninhamento Condicional
@cindex Condicionais, nested
@cindex Nesting Condicionais

Condicionais can be nested; however, the details are a little tricky.
The difficulty comes with failing Condicionais, such as
@code{@@ifhtml} when HTML is not being produced, where the included
text is to be ignored.  However, it is not to be @emph{completely}
ignored, since it is useful to have one @code{@@ifset} inside another,
for example---that is a way to include text only if two conditions are
met.  Here's an example:

@example
@@ifset somevar
@@ifset anothervar
Both somevar and anothervar are set.
@@end ifset
@@ifclear anothervar
Somevar is set, anothervar is not.
@@end ifclear
@@end ifset
@end example

Technically, Texinfo requires that for a failing conditional, the
ignored text must be properly nested with respect to that failing
conditional.  Unfortunately, it's not always feasible to check that
@emph{all} Condicionais are properly nested, because then the
processors could have to fully interpret the ignored text, which
defeats the purpose of the command.  Here's an example illustrating
these rules:

@example
@@ifset a
@@ifset b
@@ifclear ok  - ok, ignored
@@end junky   - ok, ignored
@@end ifset
@@c WRONG - missing @@end ifset.
@end example

Finally, as mentioned above, all conditional commands must be on lines
by themselves, with no text (even spaces) before or after.  Otherwise,
the processors cannot reliably determine which commands to consider
for nesting purposes.


@node Definindo Novos Comandos Texinfo
@chapter Definindo Novos Comandos Texinfo

@cindex Macros
@cindex Defining new Texinfo commands
@cindex New Texinfo commands, defining
@cindex Texinfo commands, defining new
@cindex User-defined Texinfo commands

Texinfo provides several ways to define new commands (in all cases,
it's not recommended to try redefining existing commands):

@itemize @bullet
@item
A Texinfo @dfn{macro} allows you to define a new Texinfo command as any
sequence of text and/or existing commands (including other macros).  The
macro can have any number of @dfn{parameters}---text you supply each
time you use the macro.

Incidentally, these macros have nothing to do with the @code{@@defmac}
command, which is for documenting macros in the subject area of the
manual (@pxref{Modelos de Comando de Definição}).

@item
@samp{@@alias} is a convenient way to define a new name for an existing
command.

@item
@samp{@@definfoenclose} allows you to define new commands with
customized output for all non-@TeX{} output formats.

@end itemize

Most generally of all (not just for defining new commands), it is
possible to invoke any external macro processor and have Texinfo
recognize so-called @code{#line} directives for error reporting.

If you want to do simple text substitution, @code{@@set} and
@code{@@value} is the simplest approach (@pxref{@code{@@set @@clear
@@value}}).

@menu
* Definindo Macros::             Defining and undefining new commands.
* Invoking Macros::             Using a macro, once you've defined it.
* Macro Details::               Limitations of Texinfo macros.
* @code{@@alias}::                      Command aliases.
* @code{@@definfoenclose}::             Customized highlighting.
* External Macro Processors::   @code{#line} directives.
@end menu


@node Definindo Macros
@section Definindo Macros
@cindex Defining macros
@cindex Macro definitions, Texinfo

@findex macro
You use the Texinfo @code{@@macro} command to define a macro, like this:

@example
@@macro @var{macroname}@{@var{param1}, @var{param2}, @dots{}@}
@var{text} @dots{} \@var{param1}\ @dots{}
@@end macro
@end example

The @dfn{parameters} @var{param1}, @var{param2}, @dots{} correspond to
arguments supplied when the macro is subsequently used in the document
(described in the next section).

@cindex Macro names, valid characters in
@cindex Names of macros, valid characters of
For a macro to work consistently with @TeX{}, @var{macroname} must
consist entirely of letters: no digits, hyphens, underscores, or other
special characters.  So, we recommend using only letters.  However,
@command{makeinfo} will accept anything consisting of alphanumerics,
and (except as the first character) @samp{-}.  The @samp{_} character
is excluded so that macros can be called inside @code{@@math} without
a following space (@pxref{Inserindo Fórmulas Matemáticas}).

If a macro needs no parameters, you can define it either with an empty
list (@samp{@@macro foo @{@}}) or with no braces at all (@samp{@@macro
foo}).

@cindex Body of a macro
The definition or @dfn{body} of the macro can contain most Texinfo
commands, including macro invocations.  However, a macro definition
that defines another macro does not work in @TeX{} due to limitations
in the design of @code{@@macro}.

@cindex Parameters to macros
In the macro body, instances of a parameter name surrounded by
backslashes, as in @samp{\@var{param1}\} in the example above, are
replaced by the corresponding argument from the macro invocation.  You
can use parameter names any number of times in the body, including zero.

@cindex Backslash in macros
To get a single @samp{\} in the macro expansion, use @samp{\\}.  Any
other use of @samp{\} in the body yields a warning.

@cindex Spaces in macros
@cindex Whitespace in macros
The newline characters after the @code{@@macro} line and before the
@code{@@end macro} line are ignored, that is, not included in the
macro body.  All other whitespace is treated according to the usual
Texinfo rules.

@cindex Recursive macro invocations
@findex rmacro
To allow a macro to be used recursively, that is, in an argument to a
call to itself, you must define it with @samp{@@rmacro}, like this:

@example
@@rmacro rmac @{arg@}
a\arg\b
@@end rmacro
@dots{}
@@rmac@{1@@rmac@{text@}2@}
@end example

This produces the output `a1atextb2b'.  With @samp{@@macro} instead of
@samp{@@rmacro}, an error message is given.

@findex unmacro
@cindex Macros, undefining
@cindex Undefining macros
You can undefine a macro @var{foo} with @code{@@unmacro @var{foo}}.
It is not an error to undefine a macro that is already undefined.
For example:

@example
@@unmacro foo
@end example


@node Invoking Macros
@section Invoking Macros

@cindex Invoking macros
@cindex Expanding macros
@cindex Running macros
@cindex Macro invocation

After a macro is defined (see the previous section), you can
@dfn{invoke} (use) it in your document like this:

@example
@@@var{macroname} @{@var{arg1}, @var{arg2}, @dots{}@}
@end example

@noindent and the result will be more or less as if you typed the body of
@var{macroname} at that spot.  For example:

@example
@@macro foo @{p, q@}
Together: \p\ & \q\.
@@end macro
@@foo@{a, b@}
@end example

@noindent produz:

@display
Together: a & b.
@end display

@cindex Backslash, and macros
Thus, the arguments and parameters are separated by commas and
delimited by braces; any whitespace after (but not before) a comma is
ignored.  The braces are required in the invocation even when the
macro takes no arguments, consistent with other Texinfo commands.  For
example:

@example
@@macro argless @{@}
No arguments here.
@@end macro
@@argless@{@}
@end example

@noindent produz:

@display
No arguments here.
@end display

@cindex Comma, in macro arguments
Passing macro arguments containing commas requires care, since
commas also separate the arguments.  To include a comma character in
an argument, the most reliable method is to use the @code{@@comma@{@}}
command.  For @code{makeinfo}, you can also prepend a backslash
character, as in @samp{\,}, but this does not work with @TeX{}.

@cindex Automatic quoting of commas for some macros
@cindex Quoting, automatic for some macros
It's not always necessary to worry about commas.  To facilitate use of
macros, @command{makeinfo} implements two rules for @dfn{automatic
quoting} in some circumstances:

@enumerate 1
@item If a macro takes only one argument, all commas in its invocation
are quoted by default.  For example:

@example
@group
@@macro TRYME@{text@}
@@strong@{TRYME: \text\@}
@@end macro

@@TRYME@{A nice feature, though it can be dangerous.@}
@end group
@end example

@noindent
will produce the following output

@example
@strong{TRYME: A nice feature, though it can be dangerous.}
@end example

And indeed, it can.  Namely, @command{makeinfo} does not control the
number of arguments passed to one-argument macros, so be careful when
you invoke them.

@item If a macro invocation includes another command (including a
recursive invocation of itself), any commas in the nested command
invocation(s) are quoted by default.  For example, in

@example
@@say@{@@strong@{Yes, I do@}, person one@}
@end example

the comma after @samp{Yes} is implicitly quoted.  Here's another
example, with a recursive macro:

@example
@group
@@rmacro cat@{a,b@}
\a\\b\
@@end rmacro

@@cat@{@@cat@{foo, bar@}, baz@}
@end group
@end example

@noindent
will produce the string @samp{foobarbaz}.

@item Otherwise, a comma should be explicitly quoted, as above, for it
to be treated as a part of an argument.
@end enumerate

@cindex Backslash, in macro arguments
@cindex Braces, in macro arguments
The backslash itself can be quoted in macro arguments with another
backslash.  For example:

@example
@@@var{macname} @{\\bleh@}
@end example

@noindent
will pass the argument @samp{\bleh} to @var{macname}.

@command{makeinfo} also recognizes @samp{\@{} and @samp{\@}} sequences
for curly braces, but these are not recognized by the implementation in
@TeX{}.  There should, however, rarely be a need for these, as they are
only needed when a macro argument contains unbalanced braces.

If a macro is defined to take exactly one argument, it can be
invoked without any braces, taking all of the line after the macro name
as the argument.  For example:

@example
@@macro bar @{p@}
Twice: \p\ & \p\.
@@end macro
@@bar aah
@end example

@noindent produz:

@display
Twice: aah & aah.
@end display

@noindent
In these arguments, there is no escaping of special characters, so each
@samp{\} stands for itself.

If a macro is defined to take more than one argument, but is called
with only one (in braces), the remaining arguments are set to the
empty string, and no error is given.  For example:

@example
@@macro addtwo @{p, q@}
Both: \p\\q\.
@@end macro
@@addtwo@{a@}
@end example

@noindent produces simply:

@display
Both: a.
@end display


@node Macro Details
@section Macro Details and Caveats
@cindex Macro details
@cindex Details of macro usage
@cindex Caveats for macro usage

@cindex Macro expansion, contexts for
@cindex Expansion of macros, contexts for
By design, macro expansion does not happen in the following contexts
in @command{makeinfo}:

@itemize @bullet
@item @code{@@macro} and @code{@@unmacro} lines;

@item @code{@@if...} lines, including @code{@@ifset} and similar;

@item @code{@@set}, @code{@@clear}, @code{@@value};

@item @code{@@clickstyle} lines;

@item @code{@@end} lines.
@end itemize

@noindent Unfortunately, @TeX{} may do some expansion in these situations,
possibly yielding errors.

Also, quite a few macro-related constructs cause problems with @TeX{};
some of the caveats are listed below.  Thus, if you get macro-related
errors when producing the printed version of a manual, you might try
expanding the macros with @command{makeinfo} by invoking
@command{texi2dvi} with the @samp{-E} option (@pxref{Format with
@command{texi2dvi}}).  Or, more reliably, eschew Texinfo macros altogether
and use a language designed for macro processing, such as M4
(@pxref{External Macro Processors}).

@itemize @bullet
@item
As mentioned earlier, macro names must consist entirely of letters.

@item
It is not advisable to redefine any @TeX{} primitive, plain, or
Texinfo command name as a macro. Unfortunately this is a large and
open-ended set of names, and the possible resulting errors are
unpredictable.

@item
Arguments to macros taking more than one argument cannot cross lines.

@item
Macros containing a command which must be on a line by itself, such as
a conditional, cannot be invoked in the middle of a line.  Similarly,
macros containing line-oriented commands or text, such as
@code{@@example} environments, may behave unpredictably in @TeX{}.

@item
Texinfo commands in the expansion of a macro in the text of an index 
entry may end up being typeset as literal text (including an ``@@'' 
sign), instead of being interpreted with their intended meaning.

@item
White space is ignored at the beginnings of lines.

@item
Macros can't be reliably used in the argument to accent commands
(@pxref{Inserindo Acentos}).

@item
The backslash escape for commas in macro arguments does not work;
@code{@@comma@{@}} must be used.

@item
Likewise, if you want to pass an argument with the Texinfo command 
@code{@@,} (to produce a cedilla, see @ref{Inserindo Acentos}), you have 
to use @code{@@value} or another work-around.  Otherwise, the comma
may be taken as separating the arguments.  For example,

@example
@@macro mactwo@{argfirst, argsecond@}
\argfirst\+\argsecond\.
@@end macro
@@set fc Fran@@,cois
@@mactwo@{@@value@{fc@},@}
@end example

@noindent produz:

@display
Fran@,cois+.
@end display

@c currently @mactwo{Fran@,cois} works in TeX, but @mactwo{Franc@\,cois}
@c works in makeinfo.  better to avoid commas altogether using this trick.
@c an alternative to @, could be invented if needed.

@item
Ending a macro body with @samp{@@c} may cause text following the macro
invocation to be ignored as a comment in @command{makeinfo}.  This is 
not the case when processing with @TeX{} (in case you really want to 
comment out following text, use @samp{@@comment} instead).  This was
often done to ``comment out'' an unwanted newline at the end of a macro 
body, but this is not necessary any more, as the final newline before 
@samp{@@end macro} is not included in the macro body anyway.

@item
In general, you can't arbitrarily substitute a macro (or
@code{@@value}) call for Texinfo command arguments, even when the text
is the same.  Texinfo is not M4 (or even plain @TeX{}).  It might work
with some commands, it fails with others.  Best not to do it at all.
For instance, this fails:

@example
@@macro offmacro
off
@@end macro
@@headings @@offmacro
@end example

@noindent
This looks equivalent to @code{@@headings off}, but for @TeX{}nical
reasons, it fails with a mysterious error message (namely,
@samp{Paragraph ended before @@headings was complete}).

@item
Macros cannot define macros in the natural way.  To do this, you must
use Condicionais and raw @TeX{}.  For example:

@example
@@ifnottex
@@macro ctor @{name, arg@}
@@macro \name\
something involving \arg\ somehow
@@end macro
@@end macro
@@end ifnottex
@@tex
\gdef\ctor#1@{\ctorx#1,@}
\gdef\ctorx#1,#2,@{\def#1@{something involving #2 somehow@}@}
@@end tex
@end example
@end itemize

The @command{makeinfo} implementation also has the following
limitations (by design):

@itemize
@item
@code{@@verbatim} and macros do not mix; for instance, you can't start
a verbatim block inside a macro and end it outside
(@pxref{@code{@@verbatim}}).  Starting any environment inside a macro
and ending it outside may or may not work, for that matter.

@item
Macros that completely define macros are ok, but it's not possible to
have incompletely nested macro definitions.  That is, @code{@@macro}
and @code{@@end macro} (likewise for @code{@@rmacro}) must be
correctly paired.  For example, you cannot start a macro definition
within a macro, and then end that nested definition outside the macro.
@end itemize

In the @code{makeinfo} implementation before Texinfo 5.0, ends of
lines from expansion of a @code{@@macro} definition did not end an
@@-command line-delimited argument (@code{@@chapter}, @code{@@center},
etc.).  This is no longer the case.  For example:

@example
@@macro twolines@{@}
aaa
bbb
@@end macro
@@center @@twolines@{@}
@end example

In the current @code{makeinfo}, this is equivalent to:

@example
@@center aaa
bbb
@end example

@noindent with just @samp{aaa} as the argument to @code{@@center}.  In
the earlier implementation, it would have been parsed as this:

@example
@@center aaa bbb
@end example


@node @code{@@alias}
@section @samp{@@alias @var{new}=@var{existing}}

@anchor{alias}@c old name
@cindex Aliases, command
@cindex Command aliases
@findex alias

The @samp{@@alias} command defines a new command to be just like an
existing one.  This is useful for defining additional markup names,
thus preserving additional semantic information in the input even
though the output result may be the same.

Write the @samp{@@alias} command on a line by itself, followed by the
new command name, an equals sign, and the existing command name.
Whitespace around the equals sign is optional and ignored if present.
Thus:

@example
@@alias @var{new} = @var{existing}
@end example

For example, if your document contains citations for both books and
some other media (movies, for example), you might like to define a
macro @code{@@moviecite@{@}} that does the same thing as an ordinary
@code{@@cite@{@}} but conveys the extra semantic information as well.
You'd do this as follows:

@example
@@alias moviecite = cite
@end example

Macros do not always have the same effect as aliases, due to vagaries
of argument parsing.  Also, aliases are much simpler to define than
macros.  So the command is not redundant.

Unfortunately, it's not possible to alias Texinfo environments; for
example, @code{@@alias lang=example} is an error.

Aliases must not be recursive, directly or indirectly.

It is not advisable to redefine any @TeX{} primitive, plain @TeX{}, or
Texinfo command name as an alias.  Unfortunately this is a very large
set of names, and the possible resulting errors from @TeX{} are
unpredictable.

@command{makeinfo} will accept the same identifiers for aliases as it
does for macro names, that is, alphanumerics and (except as the first
character) @samp{-}.


@node @code{@@definfoenclose}
@section @code{@@definfoenclose}: Customized Highlighting

@anchor{definfoenclose}@c old name
@cindex Highlighting, customized
@cindex Customized highlighting
@findex definfoenclose

An @code{@@definfoenclose} command may be used to define a
highlighting command for all the non-@TeX{} output formats.  A command
defined using @code{@@definfoenclose} marks text by enclosing it in
strings that precede and follow the text.  You can use this to get
closer control of your output.

Presumably, if you define a command with @code{@@definfoenclose}, you
will create a corresponding command for @TeX{}, either in
@file{texinfo.tex}, @file{texinfo.cnf}, or within an @samp{@@iftex} or
@samp{@@tex} in your document.

Write a @code{@@definfoenclose} command at the beginning of a line
followed by three comma-separated arguments.  The first argument to
@code{@@definfoenclose} is the @@-command name (without the
@code{@@}); the second argument is the start delimiter string; and the
third argument is the end delimiter string.  The latter two arguments
enclose the highlighted text in the output.

A delimiter string may contain spaces.  Neither the start nor end
delimiter is required.  If you do not want a start delimiter but do
want an end delimiter, you must follow the command name with two
commas in a row; otherwise, the end delimiter string you intended will
naturally be (mis)interpreted as the start delimiter string.

If you do a @code{@@definfoenclose} on the name of a predefined
command (such as @code{@@emph}, @code{@@strong}, @code{@@t}, or
@code{@@i}), the enclosure definition will override the built-in
definition.  We don't recommend this.

An enclosure command defined this way takes one argument in braces,
since it is intended for new markup commands (@pxref{Marcando Texto}).

@findex phoo
For example, you can write:

@example
@@definfoenclose phoo,//,\\
@end example

@noindent
near the beginning of a Texinfo file to define @code{@@phoo} as an Info
formatting command that inserts `//' before and `\\' after the argument
to @code{@@phoo}.  You can then write @code{@@phoo@{bar@}} wherever you
want `//bar\\' highlighted in Info.

For @TeX{} formatting, you could write

@example
@@iftex
@@global@@let@@phoo=@@i
@@end iftex
@end example

@noindent
to define @code{@@phoo} as a command that causes @TeX{} to typeset the
argument to @code{@@phoo} in italics.

Each definition applies to its own formatter: one for @TeX{}, the
other for everything else.  The raw @TeX{} commands need to be in
@samp{@@iftex}.  @code{@@definfoenclose} command need not be within
@samp{@@ifinfo}, unless you want to use different definitions for
different output formats.

@findex headword
Here is another example: write

@example
@@definfoenclose headword, , :
@end example

@noindent
near the beginning of the file, to define @code{@@headword} as an Info
formatting command that inserts nothing before and a colon after the
argument to @code{@@headword}.

@samp{@@definfoenclose} definitions must not be recursive, directly or
indirectly.


@node External Macro Processors
@section External Macro Processors: Line Directives
@cindex External macro processors
@cindex Macro processors, external

Texinfo macros (and its other text substitution facilities) work fine
in straightforward cases.  If your document needs unusually complex
processing, however, their fragility and limitations can be a problem.
In this case, you may want to use a different macro processor
altogether, such as M4 (@pxref{Top,,, m4, M4}) or CPP (@pxref{Top,,,
cpp, The C Preprocessor}).

With one exception, Texinfo does not need to know whether its input is
``original'' source or preprocessed from some other source file.
Therefore, you can arrange your build system to invoke whatever
programs you like to handle macro expansion or other preprocessing
needs.  Texinfo does not offer built-in support for any particular
preprocessor, since no one program seemed likely to suffice for the
requirements of all documents.

@cindex Line numbers, in error messages
@cindex Error messages, line numbers in
The one exception is line numbers in error messages.  In that case,
the line number should refer to the original source file, whatever it
may be.  There's a well-known mechanism for this: the so-called
@samp{#line} directive.  Texinfo supports this.

@menu
* Diretiva @samp{#line}::
* @samp{#line} e @TeX{}::
* Detalhes da Sintaxe @samp{#line}::
@end menu


@node Diretiva @samp{#line}
@subsection Diretiva @samp{#line}

@cindex @samp{#line} directive

An input line such as this:

@example
@hashchar{}line 100 "foo.ptexi"
@end example

@noindent indicates that the next line was line 100 of the file
@file{foo.ptexi}, and so that's what an error message should refer to.
Both M4 (@pxref{Preprocessor features,,, m4, GNU M4}) and CPP
(@pxref{Line Control,,, cpp, The C Preprocessor}, and
@ref{Preprocessor Output,,, cpp, The C Preprocessor}) can generate
such lines.

@vindex CPP_LINE_DIRECTIVES
The @command{makeinfo} program recognizes these lines by default,
except within @code{@@verbatim} blocks (@pxref{@code{@@verbatim}}.
Their recognition can be turned off completely with
@code{CPP_LINE_DIRECTIVES} (@pxref{Outras Variáveis de Personalização}),
though there is normally no reason to do so.

For those few programs (M4, CPP, Texinfo) which need to document
@samp{#line} directives and therefore have examples which would
otherwise match the pattern, the command @code{@@hashchar@{@}} can be
used (@pxref{Inserindo um Símbolo Cerquilha}).  The example line above looks
like this in the source for this manual:

@example
@@hashchar@{@}line 100 "foo.ptexi"
@end example

The @code{@@hashchar} command was added to Texinfo in 2013.  If you
don't want to rely on it, you can also use @code{@@set} and
@code{@@value} to insert the literal @samp{#}:

@example
@@set hash #
@@value@{hash@}line 1 "example.c"
@end example

Or, if suitable, a @code{@@verbatim} environment can be used instead
of @code{@@example}.  As mentioned above, @code{#line}-recognition is
disabled inside verbatim blocks.


@node @samp{#line} e @TeX{}
@subsection @samp{#line} e @TeX{}

@cindex @TeX{} and @samp{#line} directives
@cindex @samp{#line} directives, not processing with @TeX{}

As mentioned, @command{makeinfo} recognizes the @samp{#line}
directives described in the previous section.  However,
@file{texinfo.tex} does not and cannot.  Therefore, such a line will
be incorrectly typeset verbatim if @TeX{} sees it.  The solution is to
use @command{makeinfo}'s macro expansion options before running
@TeX{}.  There are three approaches:

@itemize @bullet
@item
If you run @command{texi2dvi} or its variants (@pxref{Format with
@command{texi2dvi}}), you can pass @option{-E} and @command{texi2dvi}
will run @command{makeinfo} first to expand macros and eliminate
@samp{#line}.

@item
If you run @command{makeinfo} or its variants 
(@pxref{Tradutor Genérico @command{texi2any}}), you can specify 
@option{--no-ifinfo --iftex -E somefile.out}, and then give 
@file{somefile.out} to @code{texi2dvi} in a separate command.

@item
Or you can run @option{makeinfo --dvi --Xopt -E}.  (Or @option{--pdf}
instead of @option{--dvi}.)  @command{makeinfo} will then call
@command{texi2dvi -E}.
@end itemize

@findex errormsg@r{, and line numbers in @TeX{}}
One last caveat regarding use with @TeX{}: since the @code{#line}
directives are not recognized, the line numbers emitted by the
@code{@@errormsg@{@}} command (@pxref{Comandos Condicionais}), or by
@TeX{} itself, are the (incorrect) line numbers from the derived file
which @TeX{} is reading, rather than the preprocessor-specified line
numbers.  This is another example of why we recommend running
@command{makeinfo} for the best diagnostics (@pxref{@command{makeinfo}
Advantages}).


@node Detalhes da Sintaxe @samp{#line}
@subsection Detalhes da Sintaxe @samp{#line}

@cindex @samp{#line} syntax details
@cindex Syntax details, @samp{#line}
@cindex Regular expression, for @samp{#line}

Syntax details for the @samp{#line} directive: the @samp{#} character
can be preceded or followed by whitespace, the word @samp{line} is
optional, and the file name can be followed by a whitespace-separated
list of integers (these are so-called ``flags'' output by CPP in some
cases).  For those who like to know the gory details, the actual
(Perl) regular expression which is matched is this:

@example
/^\s*#\s*(line)? (\d+)(( "([^"]+)")(\s+\d+)*)?\s*$/
@end example

As far as we've been able to tell, the trailing integer flags only
occur in conjunction with a filename, so that is reflected in the
regular expression.

As an example, the following is a syntactically valid @samp{#line}
directive, meaning line 1 of @file{/usr/include/stdio.h}:

@example
@hashchar{} 1 "/usr/include/stdio.h" 2 3 4
@end example

Unfortunately, the quoted filename (@samp{"..."}) has to be optional,
because M4 (especially) can often generate @samp{#line} directives
within a single file.  Since the @samp{line} is also optional, the
result is that lines might match which you wouldn't expect, e.g.,

@example
@hashchar{} 1
@end example

The possible solutions are described above (@pxref{Diretiva @samp{#line}}).


@node Arquivos Include
@chapter Arquivos Include

@cindex Arquivos Include

When a Texinfo processor sees an @code{@@include} command in a Texinfo
file, it processes the contents of the file named by the
@code{@@include} and incorporates them into the output files being
created.  Include files thus let you keep a single large document as a
collection of conveniently small parts.

@menu
* Using Arquivos Include::         How to use the @code{@@include} command.
* @code{texinfo-multiple-files-update}:: How to create and update Nodos and
                                     menus when using included files.
* Arquivos Include Requirements::  @code{texinfo-multiple-files-update} needs.
* Sample Include File::         A sample outer file with included files
                                     within it; and a sample included file.
* @code{@@verbatiminclude}::            Including a file verbatim.
* Arquivos Include Evolution::     How use of the @code{@@include} command
                                     has changed over time.
@end menu


@node Using Arquivos Include
@section How to Use Arquivos Include

@findex include

To include another file within a Texinfo file, write the
@code{@@include} command at the beginning of a line and follow it on
the same line by the name of a file to be included.  For example:

@example
@@include buffers.texi
@end example

@@-commands are expanded in file names.  The one most likely to be
useful is @code{@@value} (@pxref{@code{@@set @@value}}), and even then
only in complicated situations.

An included file should simply be a segment of text that you expect to
be included as is into the overall or @dfn{outer} Texinfo file; it
should not contain the standard beginning and end parts of a Texinfo
file.  In particular, you should not start an included file with a
line saying @samp{\input texinfo}; if you do, that text is inserted
into the output file literally.  Likewise, you should not end an
included file with a @code{@@bye} command; nothing after @code{@@bye}
is formatted.

In the long-ago past, you were required to write an
@code{@@setfilename} line at the beginning of an included file, but no
longer.  Now, it does not matter whether you write such a line.  If an
@code{@@setfilename} line exists in an included file, it is ignored.


@node @code{texinfo-multiple-files-update}
@section @code{texinfo-multiple-files-update}

@findex texinfo-multiple-files-update

GNU Emacs Texinfo mode provides the
@code{texinfo-multiple-files-update} command.  This command creates or
updates `Next', `Previous', and `Up' pointers of included files as
well as those in the outer or overall Texinfo file, and it creates or
updates a main menu in the outer file.  Depending on whether you call
it with optional arguments, the command updates only the pointers in
the first @code{@@node} line of the included files or all of them:

@table @kbd
@item M-x texinfo-multiple-files-update
Called without any arguments:

@itemize @minus
@item
Create or update the `Next', `Previous', and `Up' pointers of the
first @code{@@node} line in each file included in an outer or overall
Texinfo file.

@item
Create or update the `Top' level node pointers of the outer or
overall file.

@item
Create or update a main menu in the outer file.
@end itemize

@item C-u M-x texinfo-multiple-files-update
Called with @kbd{C-u} as a prefix argument:

@itemize @minus{}
@item
Create or update pointers in the first @code{@@node} line in each
included file.

@item
Create or update the `Top' level node pointers of the outer file.

@item
Create and insert a master menu in the outer file.  The master menu
is made from all the menus in all the included files.
@end itemize

@item C-u 8 M-x texinfo-multiple-files-update
Called with a numeric prefix argument, such as @kbd{C-u 8}:

@itemize @minus
@item
Create or update @emph{all} the `Next', `Previous', and `Up' pointers
of all the included files.

@item
Create or update @emph{all} the menus of all the included
files.

@item
Create or update the `Top' level node pointers of the outer or
overall file.

@item
And then create a master menu in the outer file.  This is similar to
invoking @code{texinfo-master-menu} with an argument when you are
working with just one file.
@end itemize
@end table

Note the use of the prefix argument in interactive use: with a regular
prefix argument, just @w{@kbd{C-u}}, the
@code{texinfo-multiple-files-update} command inserts a master menu;
with a numeric prefix argument, such as @kbd{C-u 8}, the command
updates @emph{every} pointer and menu in @emph{all} the files and
then inserts a master menu.


@node Arquivos Include Requirements
@section Arquivos Include Requirements
@cindex Arquivos Include requirements
@cindex Requirements for Arquivos Include

If you plan to use the @code{texinfo-multiple-files-update} command,
the outer Texinfo file that lists included files within it should
contain nothing but the beginning and end parts of a Texinfo file, and
a number of @code{@@include} commands listing the included files.  It
should not even include indices, which should be listed in an included
file of their own.

Moreover, each of the included files must contain exactly one highest
level node (conventionally, @code{@@chapter} or equivalent),
and this node must be the first node in the included file.
Furthermore, each of these highest level Nodos in each included file
must be at the same hierarchical level in the file structure.
Usually, each is a @code{@@chapter}, an @code{@@appendix}, or an
@code{@@unnumbered} node.  Thus, normally, each included file contains
one, and only one, chapter or equivalent-level node.

The outer file should contain only @emph{one} node, the `Top' node.  It
should @emph{not} contain any Nodos besides the single `Top' node.  The
@code{texinfo-multiple-files-update} command will not process
them.


@node Sample Include File
@section Sample File with @code{@@include}
@cindex Sample @code{@@include} file
@cindex Include file sample
@cindex @code{@@include} file sample

Here is an example of an outer Texinfo file with @code{@@include} files
within it before running @code{texinfo-multiple-files-update}, which
would insert a main or master menu:

@example
@group
\input texinfo @@c -*-texinfo-*-
@c %**start of header
@@settitle Include Example
@c %**end of header
@end group

... @xref{Arquivos Texinfo Modelo}, for
examples of the rest of the frontmatter ...

@group
@@ifnottex
@@node Top
@@top Include Example
@@end ifnottex
@end group

@group
@@include foo.texinfo
@@include bar.texinfo
@@include concept-index.texinfo
@@bye
@end group
@end example

An included file, such as @file{foo.texinfo}, might look like this:

@example
@group
@@node First
@@chapter First Chapter

Contents of first chapter @dots{}
@end group
@end example

The full contents of @file{concept-index.texinfo} might be as simple as this:

@example
@group
@@node Concept Index
@@unnumbered Concept Index

@@printindex cp
@end group
@end example

The outer Texinfo source file for @cite{The GNU Emacs Lisp Reference
Manual} is named @file{elisp.texi}.  This outer file contains a master
menu with 417 entries and a list of 41 @code{@@include}
files.


@node @code{@@verbatiminclude}
@section @code{@@verbatiminclude} @var{file}: Include a File Verbatim

@anchor{verbatiminclude}@c old name
@findex verbatiminclude
@cindex Verbatim, include file
@cindex Including a file verbatim

You can include the exact contents of a file in the document with the
@code{@@verbatiminclude} command:

@example
@@verbatiminclude @var{filename}
@end example

The contents of @var{filename} is printed in a verbatim environment
(@pxref{@code{@@verbatim}}).  Generally, the file is printed exactly
as it is, with all special characters and white space retained.  No
indentation is added; if you want indentation, enclose the
@code{@@verbatiminclude} within @code{@@example}
(@pxref{@code{@@example}}).

The name of the file is taken literally, with a single exception:
@code{@@value@{@var{var}@}} references are expanded.  This makes it
possible to include files in other directories within a distribution,
for instance:

@example
@@verbatiminclude @@value@{top_srcdir@}/NEWS
@end example

@noindent (You still have to get @code{top_srcdir} defined in the
first place.)

For a method on printing the file contents in a smaller font size, see
the end of the section on @code{@@verbatim}.


@node Arquivos Include Evolution
@section Evolution of Arquivos Include

When Info was first created, it was customary to create many small
Info files on one subject.  Each Info file was formatted from its own
Texinfo source file.  This custom meant that Emacs did not need to
make a large buffer to hold the whole of a large Info file when
someone wanted information; instead, Emacs allocated just enough
memory for the small Info file that contained the particular
information sought.  This way, Emacs could avoid wasting memory.

References from one file to another were made by referring to the file
name as well as the node name. (@xref{Outros Arquivos Info, , Referring to
Outros Arquivos Info}.  Also, see @ref{Quatro e Cinco Argumentos, ,
@code{@@xref} with Quatro e Cinco Argumentos}.)

Include files were designed primarily as a way to create a single,
large printed manual out of several smaller Info files.  In a printed
manual, all the references were within the same document, so @TeX{}
could automatically determine the references' page numbers.  The Info
formatting commands used include files only for creating joint
indices; each of the individual Texinfo files had to be formatted for
Info individually.  (Each, therefore, required its own
@code{@@setfilename} line.)

However, because large Info files are now split automatically, it is
no longer necessary to keep them small.

Nowadays, multiple Texinfo files are used mostly for large documents,
such as @cite{The GNU Emacs Lisp Reference Manual}, and for projects
in which several different people write different sections of a
document simultaneously.

In addition, the Info formatting commands have been extended to work
with the @code{@@include} command so as to create a single large Info
file that is split into smaller files if necessary.  This means that
you can write menus and cross-references without naming the different
Texinfo files.


@node Cópia Impressa
@chapter Formatando e Imprimindo Cópia Impressa
@cindex Format and print hardcopy
@cindex Printing hardcopy
@cindex Cópia Impressa, printing it
@cindex Making a printed manual
@cindex Sorting indices
@cindex Índices, sorting
@cindex @TeX{} index sorting

Running the @command{texi2dvi} or @command{texi2pdf} command is the
simplest way to create printable output.  These commands are installed
as part of the Texinfo package.

In more detail, three major shell commands are used to print formatted
output from a Texinfo manual: one converts the Texinfo source into
something printable, a second sorts indices, and a third actually
prints the formatted document.  When you use the shell commands, you
can either work directly in the operating system shell or work within
a shell inside GNU Emacs (or some other computing environment).

If you are using GNU Emacs, you can use commands provided by Texinfo
mode instead of shell commands.  In addition to the three commands to
format a file, sort the indices, and print the result, Texinfo mode
offers key bindings for commands to recenter the output buffer, show the
print queue, and delete a job from the print queue.

Details are in the following sections.

@menu
* Use @TeX{}::                                    Use @TeX{} para formatar para cópia impressa.
* Formatar com @command{texi2dvi}::               A maneira mais simples para formatar.
* Formatar com @command{tex}/@command{texindex}:: Formatando com comandos explícitos de shell.
* Imprimir com @command{lpr}::                    Como imprimir.
* Dentro do Emacs::                               Como formatar e imprimir a partir de um shell Emacs.
* Impressão de Modo Texinfo::                     Como formatar e imprimir em modo Texinfo.
* Comando de Compilação::                         Como imprimir usando o comando de compilar do Emacs.
* Resumo das Exigências::                         Resumo de exigências de formatação do @TeX{}.
* Preparando para @TeX{}::                        O que se fazer antes de usar o @TeX{}.
* hboxes lotados::                                O que são e o que se fazer com hboxes superlotados.
* @code{@@smallbook}::                            Como imprimir livros e manuais formato pequeno.
* Papel A4::                                      Como imprimir em papel A4 ou A5.
* @code{@@pagesizes}::                            Como imprimir com tamanhos de página personalizados.
* Marcas de Corte e Ampliação::                   Como imprimir marcas para indicar o tamanho das páginas e como imprimir saída escalada.
* Saída gerada de PDF::                           Saída em Formato Portável de Documento.
* Obtendo @TeX{}::                                Como obter @TeX{}.
@end menu


@node Use @TeX{}
@section Use @TeX{}

The typesetting program called @TeX{} is used to format a Texinfo
document for printable output.  @TeX{} is a very powerful typesetting
program and, when used correctly, does an exceptionally good job.

@xref{Obtaining @TeX{}}, for information on how to obtain @TeX{}.  It
is not included in the Texinfo package, being a vast suite of software
in itself.


@node Format with @command{texi2dvi}
@section Format with @command{texi2dvi}

@pindex texi2dvi @r{(shell script)}
@cindex DVI, output in

The @code{texi2dvi} program takes care of all the steps for producing
a @TeX{} DVI file from a Texinfo document.  Similarly, @code{texi2pdf}
produces a PDF file.

To run @code{texi2dvi} or @code{texi2pdf} on an input file
@file{foo.texi}, do this (where @samp{prompt$ } is your shell prompt):

@example
prompt$ @kbd{texi2dvi foo.texi}
prompt$ @kbd{texi2pdf foo.texi}
@end example

As shown in this example, the input filenames to @code{texi2dvi} and
@code{texi2pdf} must include any extension, such as @samp{.texi}.
(Under MS-DOS and perhaps in other circumstances, you may need to run
@samp{sh texi2dvi foo.texi} instead of relying on the operating system
to invoke the shell on the @samp{texi2dvi} script.)

For a list of all the options, run @samp{texi2dvi --help}.  Some of the
options are discussed below.

@opindex --pdf@r{, for @command{texi2dvi}}
@pindex pdftexi2dvi
With the @option{--pdf} option, @command{texi2dvi} produces PDF output
instead of DVI (@pxref{PDF Output}), by running @command{pdftex}
instead of @command{tex}.  Alternatively, the command
@command{texi2pdf} is an abbreviation for running @samp{texi2dvi
--pdf}.  The command @command{pdftexi2dvi} is also provided as a
convenience for AUC-@TeX{} (@pxref{Top,,, auctex, AUC-@TeX{}}, as it
prefers to merely prepend @samp{pdf} to DVI producing tools to have
PDF producing tools.

@opindex --dvipdf@r{, for @command{texi2dvi}}
@pindex dvipdfmx
With the @option{--dvipdf} option, @command{texi2dvi} produces PDF
output by running @TeX{} and then a DVI-to-PDF program: if the
@env{DVIPDF} environment variable is set, that value is used, else the
first program extant among @code{dvipdfmx}, @code{dvipdfm},
@code{dvipdf}, @code{dvi2pdf}, @code{dvitopdf}.  This method generally
supports CJK typesetting better than @command{pdftex}.

@opindex --ps@r{, for @command{texi2dvi}}
@pindex dvips
With the @option{--ps} option, @command{texi2dvi} produces PostScript
instead of DVI, by running @command{tex} and then @command{dvips}
(@pxref{Top,,, dvips, Dvips}).  (Or the value of the @env{DVIPS}
environment variable, if set.)

@opindex --language@r{, for @command{texi2dvi}}
@cindex @LaTeX{}, processing with @command{texi2dvi}
@command{texi2dvi} can also be used to process @LaTeX{} files.
Normally @command{texi2dvi} is able to guess the input file language
by its contents and file name extension; however, if it guesses wrong
you can explicitly specify the input language using
@option{--language=@var{lang}} command line option, where @var{lang}
is either @samp{latex} or @samp{texinfo}.

@opindex --command@r{, for @command{texi2dvi}}
One useful option to @code{texi2dvi} is @samp{--command=@var{cmd}}.
This inserts @var{cmd} on a line by itself, after a
@code{@@setfilename} line in a temporary copy of the input file, before
running @TeX{}.  With this, you can specify different printing
formats, such as @code{@@smallbook} (@pxref{@code{@@smallbook}}),
@code{@@afourpaper} (@pxref{Papel A4}), or @code{@@pagesizes}
(@pxref{@code{@@pagesizes}}), without actually changing the document
source.  (You can also do this on a site-wide basis with
@file{texinfo.cnf}; @pxref{Preparing for @TeX{}}).

The option @option{-E} (equivalently, @option{-e} and
@option{--expand}) does Texinfo macro expansion using
@command{makeinfo} instead of the @TeX{} implementation (@pxref{Macro
Details}).  Each implementation has its own limitations and
advantages.  If this option is used, no line in the source file
may begin with the string @code{@@c@tie{}_texi2dvi} or the
string @code{@@c@tie{}(_texi2dvi)}.

@command{texi2dvi} takes the @option{--build=@var{mode}} option to 
specify where the @TeX{} compilation takes place, and, as a
consequence, how auxiliary files are treated.  The build mode
can also be set using the environment variable 
@env{TEXI2DVI_BUILD_MODE}.  The valid values for @var{mode} are:

@table @samp
@item local
 Compile in the current directory, leaving all the auxiliary
 files around.  This is the traditional TeX use.

@item tidy
 Compile in a local @code{*.t2d} directory, where the auxiliary files
 are left.  Output files are copied back to the original file.

 Using the @samp{tidy} mode brings several advantages:
 @itemize -
 @item the current directory is not cluttered with plethora of temporary files.
 @item clutter can be even further reduced using @option{--build-dir=dir}: all
   the @code{*.t2d} directories are stored there.
 @item clutter can be reduced to zero using, e.g.,
   @option{--build-dir=/tmp/\$USER.t2d} or @option {--build-dir=\$HOME/.t2d}.
 @item the output file is updated after every successful @TeX{} run, for
   sake of concurrent visualization of the output.  In a @samp{local} build
   the viewer stops during the whole @TeX{} run.
 @item if the compilation fails, the previous state of the output file
   is preserved.
 @item @acronym{PDF} and @acronym{DVI} compilation are kept in separate
   subdirectories
   preventing any possibility of auxiliary file incompatibility.
 @end itemize

 On the other hand, because @samp{tidy} compilation takes place in another
 directory, occasionally @TeX{} won't be able to find some files (e.g., when
 using @code{\graphicspath}): in that case, use @option{-I} to specify the
 additional directories to consider.

@item clean
 Same as @samp{tidy}, but remove the auxiliary directory afterwards.
 Every compilation therefore requires the full cycle.
@end table

@pindex etex
@pindex pdfetex
@command{texi2dvi} will use @command{etex} (or @command{pdfetex}) if
it is available, because it runs faster in some cases, and
provides additional tracing information when debugging
@file{texinfo.tex}.  Nevertheless, this extended version of @TeX{} is
not required, and the DVI output is identical.
(These days, @command{pdftex} and @command{pdfetex} are exactly the
same, but we still run @command{pdfetex} to cater to ancient @TeX{}
installations.)

@cindex filename recorder for @TeX{}
@cindex @samp{\openout} line in log file
@command{texi2dvi} attempts to detect auxiliary files output by @TeX{}, 
either by using the @option{-recorder} option, or by scanning for 
@samp{\openout} in the log file that a run of @TeX{} produces.  You may
control how @command{texi2dvi} does this with the @env{TEXI2DVI_USE_RECORDER}
environment variable.  Valid values are:

@table @samp
@item yes
use the @option{-recorder} option, no checks.

@item no
scan for @samp{\openout} in the log file, no checks.

@item yesmaybe
check whether @option{-recorder} option is supported, and if yes
use it, otherwise check for tracing @samp{\openout} in the log file is 
supported, and if yes use it, else it is an error.

@item nomaybe
same as @samp{yesmaybe}, except that the @samp{\openout} trace in log 
file is checked first.
@end table

The default is @samp{nomaybe}.  This environment variable is provided 
for troubleshooting purposes, and may change or disappear in the future.


@node Formatar com @command{tex}/@command{texindex}
@section Formatar com @command{tex}/@command{texindex}

@cindex Shell formatting with @code{tex} and @code{texindex}
@cindex Formatting with @code{tex} and @code{texindex}
@cindex DVI file

You can do the basic formatting of a Texinfo file with the shell
command @code{tex} followed by the name of the Texinfo file.  For
example:

@example
tex foo.texi
@end example

@noindent @TeX{} will produce a @dfn{DVI file} as well as several auxiliary
files containing information for indices, cross-references, etc.  The
DVI file (for @dfn{DeVice Independent} file) can be printed on
virtually any device, perhaps after a further conversion (see the
previous section).

@pindex texindex
The @code{tex} formatting command itself does not sort the indices; it
writes an output file of unsorted index data.  To generate a printed
index after running the @command{tex} command, you first need a sorted
index to work from.  The @command{texindex} command sorts indices.
(@command{texi2dvi}, described in the previous section, runs
@command{tex} and @command{texindex} as necessary.)

@anchor{Nomes dos arquivos de índice}
@cindex Nomes dos arquivos de índice
@cindex Index file names
@code{tex} outputs unsorted index files under names following a
standard convention: the name of your main input file with any
@samp{.texi} or similar extension replaced by the two letter index
name.  For example, the raw index output files for the input file
@file{foo.texi} would be, by default, @file{foo.cp}, @file{foo.vr},
@file{foo.fn}, @file{foo.tp}, @file{foo.pg} and @file{foo.ky}.  Those
are exactly the arguments to give to @code{texindex}.

@need 1000
@cindex Wildcards
@cindex Globbing
Instead of specifying all the unsorted index file names explicitly,
it's typical to use @samp{??} as shell wildcards and give the command
in this form:

@example
texindex foo.??
@end example

@noindent
This command will run @code{texindex} on all the unsorted index files,
including any two letter indices that you have defined yourself using
@code{@@defindex} or @code{@@defcodeindex}.  You can safely run
@samp{texindex foo.??} even if there are files with two letter
extensions that are not index files, such as @samp{foo.el}.  The
@code{texindex} command reports but otherwise ignores such files.

For each file specified, @code{texindex} generates a sorted index file
whose name is made by appending @samp{s} to the input file name; for
example, @file{foo.cps} is made from @file{foo.cp}.  The
@code{@@printindex} command looks for a file with that name
(@pxref{Imprimindo Índices e Menus}).  @TeX{} does not read the raw
index output file, and @code{texindex} does not alter it.

After you have sorted the indices, you need to rerun @code{tex} on the
Texinfo file.  This regenerates the output file, this time with
up-to-date index entries.

Finally, you may need to run @code{tex} one more time, to get the page
numbers in the cross-references correct.

To summarize, this is a five step process.  (Alternatively, it's a
one-step process: run @code{texi2dvi}; see the previous section.)

@enumerate
@item
Run @code{tex} on your Texinfo file.  This generates a DVI file (with
undefined cross-references and no indices), and the raw index files
(with two letter extensions).

@item
Run @code{texindex} on the raw index files.  This creates the
corresponding sorted index files (with three letter extensions).

@item
Run @code{tex} again on your Texinfo file.  This regenerates the DVI
file, this time with indices and defined cross-references, but with
page numbers for the cross-references from the previous run, generally
incorrect.

@item
Sort the indices again, with @code{texindex}.

@item
Run @code{tex} one last time.  This time the correct page numbers are
written for the cross-references.
@end enumerate

@menu
* Formatting Partial Documents::
* Detalhes de @command{texindex}::
@end menu

@node Formatting Partial Documents
@subsection Formatting Partial Documents

@cindex Formatting partial documents
@cindex Partial documents, formatting
@cindex Chapters, formatting one at a time
@cindex Auxiliary files, omitting
@cindex Pointer validation, suppressing
@findex novalidate

Sometimes you may wish to print a document while you know it is
incomplete, or to print just one chapter of a document.  In such a
case, the usual auxiliary files that @TeX{} creates and warnings
@TeX{} gives about undefined cross-references are just nuisances.  You
can avoid them with the @code{@@novalidate} command, which you must
give @emph{before} any sectioning or cross-reference commands.

Thus, the beginning of your file would look approximately like this:

@example
\input texinfo
@@novalidate
@dots{}
@end example

@noindent @code{@@novalidate} also turns off validation in
@code{makeinfo}, just like its @code{--no-validate} option
(@pxref{Pointer Validation}).

Furthermore, you need not run @code{texindex} each time after you run
@code{tex}.  The @code{tex} formatting command simply uses whatever
sorted index files happen to exist from a previous use of
@code{texindex}.  If those are out of date, that is usually ok while
you are creating or debugging a document.


@node Detalhes de @command{texindex}
@subsection Detalhes de @command{texindex}

@cindex Braces, in index entries
In Texinfo version 6, released in 2015, the @command{texindex} program
was completely reimplemented.  The principal functional difference is
that index entries beginning with a left brace or right brace
(@samp{@{} resp.@: @samp{@}}) can work properly.  For example, these
simple index entries are processed correctly, including the ``index
initial'' shown in the index:

@example
@@cindex @@@{
@@cindex @@@}
...
@@printindex cp
@end example

@findex \usebracesinindexestrue
However, to enable this behavior, it's necessary (for the time being)
to give a special option to @TeX{} early in a source document:

@example
@@tex
\global\usebracesinindexestrue
@@end tex
@end example

@cindex Sort string, incorrect @samp{|}
This is because the previous @command{texindex} implementation aborted
with an incorrect error message (@samp{No page number in \entry...})
on such index entries when handled in the normal way.  Therefore
@TeX{} wrote out an incorrect ``sort string'' using the @samp{|}
character; this did not affect the text of the entry, but the index
initial was the incorrect @samp{|}, and sorting was not perfect.

Because of that fatal error, and because relatively few documents have
index entries beginning with braces, we want to provide some
transition time for installations to have the new @command{texindex}.
At some point in the future, we'll make @code{\usebracesinindexes}
true by default (the above @TeX{} code will continue to work fine).

@cindex Literate programming, with Texinfo and @code{awk}
@cindex Texinfo, and literate programming
@cindex Robbins, Arnold
@pindex texiwebjr
@pindex ti.twjr
Although not a matter of functionality, readers may be interested to
know that the new @command{texindex} is a literate program
(@url{http://en.wikipedia.org/wiki/Literate_programming}) using
Texinfo for documentation and (portable) @code{awk} for code.  A
single source file, @file{texindex/ti.twjr} in this case, produces the
runnable program, a printable document, and an online document.

The system is called TexiWeb Jr.@: and was created by Arnold
Robbins, who also wrote the new @command{texindex}.  Not
coincidentally, he is also the long-time maintainer of @command{gawk}
(GNU Awk, @pxref{Top,,, gawk, The GNU Awk User's Guide}).  The file
@file{texindex/Makefile.am} shows example usage of the system.


@node Print with @command{lpr}
@section Print with @command{lpr} from Shell

@pindex lpr @r{(DVI print command)}

The way to print a DVI file depends on your system installation.  Two
common ones are @samp{dvips foo.dvi -o} to make a PostScript file
first and then print that, and @samp{lpr -d foo.dvi} to print a DVI
file directly.

For example, the following commands will (probably) suffice to sort
the indices, format, and print this manual using the @code{texi2dvi}
shell script (@pxref{Format with @command{texi2dvi}}).

@example
@group
texi2dvi texinfo.texi
dvips texinfo.dvi -o
lpr texinfo.ps
@end group
@end example

Depending on the @code{lpr} setup on your machine, you might able to
combine the last two steps into @code{lpr -d texinfo.dvi}.

@cindex PCL file, for printing
You can also generate a PDF file by running @code{texi2pdf} instead of
@code{texi2dvi}; a PDF is often directly printable.  Or you can
generate a PCL file by using @code{dvilj} instead of @code{dvips}, if
you have a printer that prefers that format.

@cindex Shell printing, on MS-DOS/MS-Windows
@cindex Printing DVI files, on MS-DOS/MS-Windows
@pindex lpr@r{-d, replacements on MS-DOS/MS-Windows}
@code{lpr} is a standard program on Unix systems, but it is usually
absent on MS-DOS/MS-Windows.  If so, just create a PostScript or PDF
or PCL file, whatever is most convenient, and print that in the usual
way for your machine (e.g., by sending to the appropriate port,
usually @samp{PRN}).


@node Within Emacs
@section Printing From an Emacs Shell
@cindex Print, format from Emacs shell
@cindex Format, print from Emacs shell
@cindex Shell, format, print from
@cindex Emacs shell, format, print from
@cindex GNU Emacs shell, format, print from

You can give formatting and printing commands from a shell within GNU
Emacs, just like any other shell command.  To create a shell within
Emacs, type @kbd{M-x shell} (@pxref{Shell,,, emacs, The GNU Emacs
Manual}).  In this shell, you can format and print the document.
@xref{Cópia Impressa, , Format and Print Cópia Impressa}, for details.

You can switch to and from the shell buffer while @code{tex} is
running and do other editing.  If you are formatting a long document
on a slow machine, this can be very convenient.

For example, you can use @code{texi2dvi} from an Emacs shell.  Here is
one way to use @code{texi2pdf} to format and print @cite{Using and
Porting GNU CC} from a shell within Emacs:

@example
@group
texi2pdf gcc.texi
lpr gcc.pdf
@end group
@end example

See the next section for more information about formatting
and printing in Texinfo mode.


@node Modo Texinfo Printing
@section Formatting and Printing in Modo Texinfo
@cindex Region printing in Texinfo mode
@cindex Format and print in Texinfo mode
@cindex Print and format in Texinfo mode

Texinfo mode provides several predefined key commands for @TeX{}
formatting and printing.  These include commands for sorting indices,
looking at the printer queue, killing the formatting job, and
recentering the display of the buffer in which the operations
occur.

@table @kbd
@item C-c C-t C-b
@itemx M-x texinfo-tex-buffer
Run @code{texi2dvi} on the current buffer.

@item C-c C-t C-r
@itemx M-x texinfo-tex-region
Run @TeX{} on the current region.

@item C-c C-t C-i
@itemx M-x texinfo-texindex
Sort the indices of a Texinfo file formatted with
@code{texinfo-tex-region}.

@item C-c C-t C-p
@itemx M-x texinfo-tex-print
Print a DVI file that was made with @code{texinfo-tex-region} or
@code{texinfo-tex-buffer}.

@item C-c C-t C-q
@itemx M-x tex-show-print-queue
Show the print queue.

@item C-c C-t C-d
@itemx M-x texinfo-delete-from-print-queue
Delete a job from the print queue; you will be prompted for the job
number shown by a preceding @kbd{C-c C-t C-q} command
(@code{texinfo-show-tex-print-queue}).

@item C-c C-t C-k
@itemx M-x tex-kill-job
Kill the currently running @TeX{} job started by either
@code{texinfo-tex-region} or @code{texinfo-tex-buffer}, or any other
process running in the Texinfo shell buffer.

@item C-c C-t C-x
@itemx M-x texinfo-quit-job
Quit a @TeX{} formatting job that has stopped because of an error by
sending an @key{x} to it.  When you do this, @TeX{} preserves a record
of what it did in a @file{.log} file.

@item C-c C-t C-l
@itemx M-x tex-recenter-output-buffer
Redisplay the shell buffer in which the @TeX{} printing and formatting
commands are run to show its most recent output.
@end table

@need 1000
Thus, the usual sequence of commands for formatting a buffer is as
follows (with comments to the right):

@example
@group
C-c C-t C-b             @r{Run @code{texi2dvi} on the buffer.}
C-c C-t C-p             @r{Print the DVI file.}
C-c C-t C-q             @r{Display the printer queue.}
@end group
@end example

The Texinfo mode @TeX{} formatting commands start a subshell in Emacs
called the @file{*tex-shell*}.  The @code{texinfo-tex-command},
@code{texinfo-texindex-command}, and @code{tex-dvi-print-command}
commands are all run in this shell.

You can watch the commands operate in the @samp{*tex-shell*} buffer,
and you can switch to and from and use the @samp{*tex-shell*} buffer
as you would any other shell buffer.

@need 1500
The formatting and print commands depend on the values of several variables.
The default values are:

@example
@group
    @r{Variable}                              @r{Default value}

texinfo-texi2dvi-command                  "texi2dvi"
texinfo-tex-command                       "tex"
texinfo-texindex-command                  "texindex"
texinfo-delete-from-print-queue-command   "lprm"
texinfo-tex-trailer                       "@@bye"
tex-start-of-header                       "%**start"
tex-end-of-header                         "%**end"
tex-dvi-print-command                     "lpr -d"
tex-show-queue-command                    "lpq"
@end group
@end example

You can change the values of these variables with the @kbd{M-x
set-variable} command 
(@pxref{Examining, , Examining and Setting Variables, emacs, The GNU Emacs Manual}), 
or with your @file{.emacs} initialization file 
(@pxref{Init File, , , emacs, The GNU Emacs Manual}).

@cindex Customize Emacs package (@t{Development/Docs/Texinfo})
Beginning with version 20, GNU Emacs offers a user-friendly interface,
called @dfn{Customize}, for changing values of user-definable variables.
@xref{Easy Customization, , Easy Customization Interface, emacs, The GNU
Emacs Manual}, for more details about this.  The Texinfo variables can
be found in the @samp{Development/Docs/Texinfo} group, once you invoke
the @kbd{M-x customize} command.


@node Compile-Command
@section Usando a Lista de Variáveis Locais
@cindex Local variables
@cindex Compile command for formatting
@cindex Format with the compile command

Yet another way to apply the @TeX{} formatting command to a Texinfo file
is to put that command in a @dfn{local variables list} at the end of the
Texinfo file.  You can then specify the @code{tex} or @code{texi2dvi}
commands as a @code{compile-command} and have Emacs run it by typing
@kbd{M-x compile}.  This creates a special shell called the
@file{*compilation*} buffer in which Emacs runs the compile command.
For example, at the end of the @file{gdb.texi} file, after the
@code{@@bye}, you could put the following:

@example
@group
Local Variables:
compile-command: "texi2dvi gdb.texi"
End:
@end group
@end example

@noindent
This technique is most often used by programmers who also compile programs
this way; see @ref{Compilation, , , emacs, The GNU Emacs Manual}.


@node Requirements Summary
@section @TeX{} Formatting Requirements Summary
@cindex Requirements for formatting
@cindex Minimal requirements for formatting
@cindex Formatting requirements

Every Texinfo file that is to be input to @TeX{} must begin with a
@code{\input} command:

@example
\input texinfo
@end example

@noindent
This instructs @TeX{} to load the macros it needs to process a Texinfo
file.

Every Texinfo file must end with a line that terminates @TeX{}'s
processing and forces out unfinished pages:

@example
@@bye
@end example

Strictly speaking, these two lines are all a Texinfo file needs to be
processed successfully by @TeX{}.

Usually, however, the beginning includes a @code{@@settitle} command
to define the title of the printed manual, a title page, a copyright
page, permissions, and a table of contents.  Besides @code{@@bye}, the
end of a file usually includes indices.  (Not to mention that most
manuals contain a body of text as well.)

For more information, see:

@itemize @bullet
@item @ref{@code{@@settitle}}.
@item @ref{@code{@@setchapternewpage}}.
@item @ref{Cabeçalhos}.
@item @ref{Página de Título e Página de Direitos Autorais}.
@item @ref{Imprimindo Índices e Menus}.
@item @ref{Conteúdo}.
@end itemize


@node Preparing for @TeX{}
@section Preparing for @TeX{}
@cindex Preparing for @TeX{}
@cindex @TeX{} input initialization
@cindex @sortas{profile init} @file{.profile} initialization file @c CONSERTE-ME
@cindex @sortas{cshrc init} @file{.cshrc} initialization file @c CONSERTE-ME
@cindex Initialization file for @TeX{} input

@TeX{} needs to know where to find the @file{texinfo.tex} file that the
@samp{\input texinfo} command on the first line reads.  The
@file{texinfo.tex} file tells @TeX{} how to handle @@-commands; it is
included in all standard GNU distributions.  The latest version
released for general use is available
from the usual GNU servers and mirrors:

@smalldisplay
@uref{http://ftp.gnu.org/gnu/texinfo/texinfo.tex}
@uref{http://ftpmirror.gnu.org/texinfo/texinfo.tex}
@end smalldisplay

The latest development version is available from the Texinfo source
repository:
@smalldisplay
@uref{http://svn.savannah.gnu.org/viewvc/trunk/doc/texinfo.tex?root=texinfo&view=log}
@end smalldisplay

@pindex texinfo.tex@r{, installing}
@file{texinfo.tex} is essentially a standalone file, and compatibility
is of utmost concern; so, if you need or want to try a newer version
than came with your system, it nearly always suffices to download it
and put it anywhere that @TeX{} will find it (first).  You can replace
any existing @file{texinfo.tex} with a newer version (of course saving
the original in case of disaster).

@pindex epsf.tex@r{, installing}
Also, you should install @file{epsf.tex}, if it is not already installed
from another distribution.  More details are at the end of the description
of the @code{@@image} command (@pxref{Imagens}).

@cindex European Computer Modern fonts, installing
@cindex EC fonts, installing
@cindex CM-Super fonts, installing
To use quotation marks other than those used in English, you'll need
to have the European Computer Modern fonts (e.g., @file{ecrm1000}) and
(for PDF output) CM-Super fonts (@pxref{Inserindo Aspas}).

@pindex feymr10@r{, installing}
@cindex Euro font, installing
To use the @code{@@euro} command, you'll need the @samp{feym*} fonts
(e.g., @file{feymr10}).  @xref{@code{@@euro}}.

All of the above files (and a whole lot more) should be installed by
default in a reasonable @TeX{} installation.

@pindex texinfo.cnf @r{installation}
@cindex Customizing of @TeX{} for Texinfo
@cindex Site-wide Texinfo configuration file
Optionally, you may create a file @file{texinfo.cnf} for site configuration.
This file is read by @TeX{} at the beginning of a Texinfo file.
You can put any commands you like there, according to local site-wide
conventions.  They will be read by @TeX{} when processing any Texinfo
document.  For example, if @file{texinfo.cnf} contains the line
@samp{@@afourpaper} (@pxref{Papel A4}), then all Texinfo documents
will be processed with that page size in effect.  If you have nothing
to put in @file{texinfo.cnf}, you do not need to create it.

@cindex Environment variable @code{TEXINPUTS}
@vindex TEXINPUTS
If neither of the above locations for these system files suffice, you
can specify the directories explicitly.  For @file{texinfo.tex}, you
can do this by writing the complete path for the file after the
@code{\input} command.  Another way, that works for both
@file{texinfo.tex} and @file{texinfo.cnf} (and any other file @TeX{}
might read), is to set the @code{TEXINPUTS} environment variable in
your @file{.profile} or @file{.cshrc} file.

Whether you use @file{.profile} or @file{.cshrc} depends on
whether you use a Bourne shell-compatible (@code{sh}, @code{bash},
@code{ksh}, @dots{}) or C shell-compatible (@code{csh}, @code{tcsh})
command interpreter, respeictvely.

In a @file{.profile} file, you could use the following @code{sh} command
sequence:

@example
@group
TEXINPUTS=.:/home/me/mylib:
export TEXINPUTS
@end group
@end example

@need 1000 @c CONSERTE-ME
While in a @file{.cshrc} file, you could use the following @code{csh}
command sequence:

@example
setenv TEXINPUTS .:/home/me/mylib:
@end example

On MS-DOS/MS-Windows, you'd do this (note the use of the @samp{;}
character as directory separator, instead of @samp{:}):

@example
@group
set TEXINPUTS=.;d:/home/me/mylib;c:
@end group
@end example

@noindent
It is customary for DOS/Windows users to put such commands in the
@file{autoexec.bat} file, or in the Windows registry.

@noindent
These settings would cause @TeX{} to look for @file{\input} file first
in the current directory, indicated by the @samp{.}, then in a
hypothetical user @samp{me}'s @file{mylib} directory, and finally in
the system directories.  (A leading, trailing, or doubled @samp{:}
indicates searching the system directories at that point.)


@node hboxes lotados
@section Overfull ``hboxes''
@cindex Overfull @samp{hboxes}
@cindex @samp{hbox}, overfull
@cindex Final output

@TeX{} is sometimes unable to typeset a line within the normal
margins.  This most often occurs when @TeX{} comes upon what it
interprets as a long word that it cannot hyphenate, such as an
electronic mail network address or a very long identifier.  When this
happens, @TeX{} prints an error message like this:

@example
Overfull @@hbox (20.76302pt too wide)
@end example

@findex hbox
@noindent
(In @TeX{}, lines are in ``horizontal boxes'', hence the term, ``hbox''.
@samp{@@hbox} is a @TeX{} primitive not used in the Texinfo language.)

@TeX{} also provides the line number in the Texinfo source file and
the text of the offending line, which is marked at all the places that
@TeX{} considered hyphenation.  @xref{Debugging with @TeX{}}, for more
information about typesetting errors.

If the Texinfo file has an overfull hbox, you can rewrite the sentence
so the overfull hbox does not occur, or you can decide to leave it.  A
small excursion into the right margin often does not matter and may not
even be noticeable.

If you have many overfull boxes and/or an antipathy to rewriting, you
can coerce @TeX{} into greatly increasing the allowable interword
spacing, thus (if you're lucky) avoiding many of the bad line breaks,
like this:

@findex \emergencystretch
@example
@@tex
\global\emergencystretch = .9\hsize
@@end tex
@end example

@noindent
(You should adjust the fraction as needed.)  This huge value for
@code{\emergencystretch} cannot be the default, since then the typeset
output would generally be of noticeably lower quality; its default
value is @samp{.15\hsize}.  @code{\hsize} is the @TeX{} dimension
containing the current line width.

@cindex Black rectangle in hardcopy
@cindex Rectangle, black in hardcopy
@cindex Box, ugly black in hardcopy
@cindex Ugly black rectangles in hardcopy
For any overfull boxes you do have, @TeX{} will print a large, ugly,
black rectangle beside the line that contains the overfull hbox unless
told otherwise.  This is so you will notice the location of the
problem if you are correcting a draft.

@findex finalout
To prevent such a monstrosity from marring your final printout, write
the following in the beginning of the Texinfo file on a line of its own,
before the @code{@@titlepage} command:

@example
@@finalout
@end example


@node @code{@@smallbook}
@section @code{@@smallbook}: Printing ``Small'' Books

@anchor{smallbook}@c old name
@findex smallbook
@cindex Small book size
@cindex Book, printing small
@cindex Page sizes for books
@cindex Size of printed book

By default, @TeX{} typesets pages for printing in an 8.5 by 11 inch
format.  However, you can direct @TeX{} to typeset a document in a 7 by
9.25 inch format that is suitable for bound books by inserting the
following command on a line by itself at the beginning of the Texinfo
file, before the title page:

@example
@@smallbook
@end example

@noindent
(Since many books are about 7 by 9.25 inches, this command might better
have been called the @code{@@regularbooksize} command, but it came to be
called the @code{@@smallbook} command by comparison to the 8.5 by 11
inch format.)

If you write the @code{@@smallbook} command between the
start-of-header and end-of-header lines, the Texinfo mode @TeX{}
region formatting command, @code{texinfo-tex-region}, will format the
region in ``small'' book size (@pxref{Início de Cabeçalho}).

@xref{@code{@@small@dots{}}}, for information about commands that make
it easier to produce examples for a smaller manual.

@xref{Format with @command{texi2dvi}}, and @ref{Preparing for @TeX{}},
for other ways to format with @code{@@smallbook} that do not require
changing the source file.


@node Papel A4
@section Printing on Papel A4
@cindex A4 paper, printing on
@cindex A5 paper, printing on
@cindex Paper size, A4
@cindex European A4 paper
@findex afourpaper
@findex afivepaper

You can tell @TeX{} to format a document for printing on European size
A4 paper (or A5) with the @code{@@afourpaper} (or @code{@@afivepaper})
command.  Write the command on a line by itself near the beginning of
the Texinfo file, before the title page.  For example, this is how you
would write the header for this manual:

@example
@group
\input texinfo    @@c -*-texinfo-*-
@@c %**start of header
@@settitle Texinfo
@@afourpaper
@@c %**end of header
@end group
@end example

@xref{Format with @command{texi2dvi}}, and @ref{Preparing for @TeX{}},
for other ways to format for different paper sizes that do not require
changing the source file.

@findex afourlatex
@findex afourwide
You may or may not prefer the formatting that results from the command
@code{@@afourlatex}.  There's also @code{@@afourwide} for A4 paper in
wide format.


@node @code{@@pagesizes}
@section @code{@@pagesizes} [@var{width}][, @var{height}]: Custom Page Sizes
@anchor{pagesizes}@c old node name

@findex pagesizes
@cindex Custom page sizes
@cindex Page sizes, customized
@cindex Text width and height
@cindex Width of text area
@cindex Height of text area
@cindex Depth of text area

You can explicitly specify the height and (optionally) width of the main
text area on the page with the @code{@@pagesizes} command.  Write this
on a line by itself near the beginning of the Texinfo file, before the
title page.  The height comes first, then the width if desired,
separated by a comma.  Examples:

@example
@@pagesizes 200mm,150mm  @c for b5 paper
@end example
@noindent and
@example
@@pagesizes 11.5in       @c for legal paper
@end example

@cindex B5 paper, printing on
@cindex Legal paper, printing on
This would be reasonable for printing on B5-size paper.  To emphasize,
this command specifies the size of the @emph{text area}, not the size of
the paper (which is 250@dmn{mm} by 177@dmn{mm} for B5, 14@dmn{in} by
8.5@dmn{in} for legal).

@cindex Margins on page, not controllable
To make more elaborate changes, such as changing any of the page
margins, you must define a new command in @file{texinfo.tex} or
@file{texinfo.cnf}.

@xref{Format with @command{texi2dvi}}, and @ref{Preparing for @TeX{}},
for other ways to specify @code{@@pagesizes} that do not require
changing the source file.


@node Cropmarks and Magnification
@section Cropmarks and Magnification

@findex cropmarks
@cindex Cropmarks for printing
@cindex Printing cropmarks
You can (attempt to) direct @TeX{} to print cropmarks at the corners
of pages with the @code{@@cropmarks} command.  Write the
@code{@@cropmarks} command on a line by itself near the beginning of
the Texinfo file, before the title page, like this:

@example
@@cropmarks
@end example

This command is mainly for printers that typeset several pages on one
sheet of film; but you can attempt to use it to mark the corners of a
book set to 7 by 9.25 inches with the @code{@@smallbook} command.
(Printers will not produce cropmarks for regular sized output that is
printed on regular sized paper.)  Since different printing machines
work in different ways, you should explore the use of this command
with a spirit of adventure.  You may have to redefine the command in
@file{texinfo.tex}.

The @code{@@cropmarks} command is recognized and ignored in non-@TeX{}
output formats.

@findex \mag @r{(raw @TeX{} magnification)}
@cindex Magnified printing
@cindex Larger or smaller pages
You can attempt to direct @TeX{} to typeset pages larger or smaller
than usual with the @code{\mag} @TeX{} command.  Everything that is
typeset is scaled proportionally larger or smaller.  (@code{\mag}
stands for ``magnification''.)  This is @emph{not} a Texinfo
@@-command, but is a raw @TeX{} command that is prefixed with a
backslash.  You have to write this command between @code{@@tex} and
@code{@@end tex} (@pxref{Comandos do Formatador Bruto}).

Follow the @code{\mag} command with an @samp{=} and then a number that
is 1000 times the magnification you desire.  For example, to print pages
at 1.2 normal size, write the following near the beginning of the
Texinfo file, before the title page:

@example
@group
@@tex
\global\mag=1200
@@end tex
@end group
@end example

With some printing technologies, you can print normal-sized copies that
look better than usual by giving a larger-than-normal master to your
print shop.  They do the reduction, thus effectively increasing the
resolution.

Depending on your system, DVI files prepared with a
nonstandard-@code{\mag} may not print or may print only with certain
magnifications.  Be prepared to experiment.


@node PDF Output
@section PDF Output
@cindex PDF output
@cindex Output, in PDF

@pindex pdftex
The simplest way to generate PDF output from Texinfo source is to run
the convenience script @command{texi2pdf} (or @command{pdftexi2dvi});
this executes the @command{texi2dvi} script with the @option{--pdf}
option (@pxref{Format with @command{texi2dvi}}).  If for some reason you
want to process the document by hand, you can run the @command{pdftex}
program instead of plain @command{tex}.  That is, run @samp{pdftex
foo.texi} instead of @samp{tex foo.texi}.

@dfn{PDF} stands for `Portable Document Format'. It was invented by
Adobe Systems some years ago for document interchange, based on their
PostScript language.  Related links:

@itemize
@item
GNU GV, a @uref{http://www.gnu.org/software/gv/, Ghostscript-based PDF
reader}.  (It can also preview PostScript documents.)

@item
@code{xpdf}, a freely available standalone
@uref{http://www.foolabs.com/xpdf/, PDF reader} for the X window
system.

@item
@uref{https://en.wikipedia.org/wiki/Portable_Document_Format, PDF at
Wikipedia}.

@end itemize

At present, Texinfo does not provide @samp{@@ifpdf} or @samp{@@pdf}
commands as for the other output formats, since PDF documents contain
many internal low-level offsets and cross-references that would be
hard or impossible to specify at the Texinfo source level.

PDF files require dedicated software to be displayed, unlike the plain
ASCII formats (Info, HTML) that Texinfo supports.  They also tend to
be much larger than the DVI files output by @TeX{} by default.
Nevertheless, a PDF file does define an actual typeset document in a
self-contained file, notably including all the fonts that are used, so
it has its place.


@node Obtaining @TeX{}
@section Obtaining @TeX{}
@cindex Obtaining @TeX{}
@cindex @TeX{}, how to obtain

@TeX{} is a document formatter that is used by the FSF for its
documentation.  It is the easiest way to get printed output (e.g., PDF
and PostScript) for Texinfo manuals.  TeX is freely redistributable,
and you can get it over the Internet or on physical media.  See
@url{http://tug.org/texlive}.

@c please keep that text in sync with www.gnu.org/prep/FTP


@node Tradutor Genérico @command{texi2any}
@chapter @command{texi2any}: O Tradutor Genérico para Texinfo

@command{texi2any} is the generic translator for Texinfo that can
produce different output formats and is highly customizable.  It
supports these formats:

@table @asis
@item Info (by default, or with @option{--info}),

@item HTML (with @option{--html}),

@item plain text (with @option{--plaintext}),

@item Docbook (with @option{--docbook}),

@item Texinfo XML (with @option{--xml}).
@end table

@command{makeinfo} is an alias for @command{texi2any}.  By default,
both @command{texi2any} and @command{makeinfo} generate Info output;
indeed, there are no differences in behavior based on the name.

Beside these default formats, command line options to
@command{texi2any} can change many aspects of the output.  Beyond
that, initialization files provide even more control over the final
output---nearly anything not specified in the Texinfo input file.
Initialization files are written in Perl, like the main program, and
anything which can be specified on the command line can also be
specified within a initialization file.

The rest of this chapter goes into the details.

@menu
* Reference Implementation::    @command{texi2any}: the reference implementation.
* Invoking @command{texi2any}::           Running the translator from a shell.
* @command{texi2any} Printed Output::     Calling @command{texi2dvi}.
* Pointer Validation::          How to check that pointers point somewhere.
* Customization Variables::     Configuring @command{texi2any}.
* Internacionalização of Document Strings:: Translating program-inserted text.
* Invoking @command{pod2texi}::           Translating Perl pod to Texinfo.
* @command{texi2html}::                   An ancestor of @command{texi2any}.
@end menu


@node Reference Implementation
@section @command{texi2any}: A Texinfo Reference Implementation

@cindex @command{texi2any}, as reference implementation
@cindex Reference implementation
@cindex Implementation, @command{texi2any} as reference

Above, we called @command{texi2any} ``the'' translator for Texinfo
instead of just ``a'' translator, even though (of course) it's
technically and legally possible for other implementations to be
written.  The reason is that alternative implementations are very
likely to have subtle, or not-so-subtle, differences in behavior, and
thus Texinfo documents would become dependent on the processor.
Therefore, it is important to have a reference implementation that
defines parts of the language not fully specified by the manual (often
intentionally so).  It is equally important to have consistent
command-line options and other behavior for all processors.

@cindex Tree representation of documents
@cindex Syntax tree representation of documents
@cindex Abstract syntax tree representation of documents
For this reason, the once-independent @command{texi2html} Perl Texinfo
processor was made compatible with the C implementation of
@command{makeinfo}, to avoid continuing with two different
implementations (@pxref{Histórico}).  The current implementation,
@command{texi2any}, serves as the reference implementation.  It
inherited the design of customization and other features from
@command{texi2html} (for more on @command{texi2html} compatibility,
@pxref{@command{texi2html}}).  However, @code{texi2any} is a full
reimplementation: it constructs a tree-based representation of the
input document for all back-ends to work from.

@cindex Texinfo language tests
@cindex Tests, of Texinfo language
Extensive tests of the language were developed at the same time as
@command{texi2any}; we plead with anyone thinking of writing a program
to parse Texinfo input to at least make use of these tests.

@cindex Examples of using @command{texi2any}
@findex Texinfo::Parser module
The @command{texi2html} wrapper script (@pxref{@command{texi2html}})
provides a very simple example of calling @command{texi2any} from a
shell script; it's in @file{util/texi2html} in the Texinfo sources.
More consequentially, @command{texi-elements-by-size} is an example
Perl script using the @code{Texinfo::Parser} module interface; it's
also in the @file{util} source directory.  (Its functionality may also
be useful to authors; @pxref{texi-elements-by-size}.)

@cindex Future of Texinfo implementations
With the release of @command{texi2any} as the reference
implementation, development of both the C implementation of
@command{makeinfo} and @command{texi2html} has been halted.  Going
forward, we ask authors of Texinfo documents to use only
@command{texi2any}.


@node Invoking @command{texi2any}
@section Invoking @command{texi2any}/@command{makeinfo} from a Shell

@anchor{Invoking makeinfo}
@pindex makeinfo
@pindex texi2any

To process a Texinfo file, invoke @command{texi2any} or
@command{makeinfo} (the two names are synonyms for the same program;
we'll use the names interchangeably) followed by the name of the
Texinfo file.  Also select the format you want to output with the
appropriate command line option (default is Info).  Thus, to create
the Info file for Bison, type the following to the shell:

@example
texi2any --info bison.texinfo
@end example

You can specify more than one input file name; each is processed in
turn.  If an input file name is @samp{-}, standard input is read.

@anchor{@command{makeinfo} Options}
@c anchor{makeinfo options}@c prev name, but case-insensitive clash
@cindex @code{makeinfo} options
@cindex Options for @code{makeinfo}
@anchor{texi2any Options}
@cindex @code{texi2any} options
@cindex Options for @code{texi2any}

The @command{texi2any} program accept many options.  Perhaps the
most basic are those that change the output format.  By default,
@command{texi2any} outputs Info.

Each command line option is either a long name preceded by @samp{--}
or a single letter preceded by @samp{-}.  You can use abbreviations
for the long option names as long as they are unique.

For example, you could use the following shell command to create an
Info file for @file{bison.texinfo} in which lines are filled to only
68 columns:

@example
texi2any --fill-column=68 bison.texinfo
@end example

You can write two or more options in sequence, like this:

@example
texi2any --no-split --fill-column=70 @dots{}
@end example

@noindent
(This would keep the Info file together as one possibly very long
file and would also set the fill column to 70.)

The options are (approximately in alphabetical order):

@table @code
@item --commands-in-node-names
@opindex --commands-in-node-names
This option now does nothing, but remains for compatibility.  (It used
to ensure that @@-commands in node names were expanded throughout the
document, especially @code{@@value}.  This is now done by default.)

@item --conf-dir=@var{path}
@opindex --conf-dir=@var{path}
Prepend @var{path} to the directory search list for finding
customization files that may be loaded with @option{--init-file} (see
below).  The @var{path} value can be a single directory, or a list of
several directories separated by the usual path separator character
(@samp{:} on Unix-like systems, @samp{;} on Windows). @c @xref{Loading
@c Init Files}.

@item --css-include=@var{file}
@opindex --css-include
When producing HTML, literally include the contents of @var{file},
which should contain W3C cascading style sheets specifications, in the
@samp{<style>} block of the HTML output.  If @var{file} is @samp{-},
read standard input.  @xref{HTML CSS}.

@item --css-ref=@var{url}
@opindex --css-ref
When producing HTML, add a @samp{<link>} tag to the output which
references a cascading style sheet at @var{url}.  This allows using
standalone style sheets.

@item -D @var{var}
@itemx -D '@var{var} @var{value}'
@opindex -D @var{var}
Cause the Texinfo variable @var{var} to be defined.  This is
equivalent to @code{@@set @var{var}} in the Texinfo file
(@pxref{@code{@@set @@clear @@value}}).

The argument to the option is always one word to the shell; if it
contains internal whitespace, the first word is taken as the variable
name and the remainder as the value.  For example, @code{-D 'myvar
someval'} is equivalent to @code{@@set myvar someval}.

@item --disable-encoding
@itemx --enable-encoding
@opindex --disable-encoding
@opindex --enable-encoding
By default, or with @option{--enable-encoding}, output accented and
special characters in Info and plain text output based on
@samp{@@documentencoding}.  With @option{--disable-encoding}, 7-bit
ASCII transliterations are output.  @xref{@code{@@documentencoding}},
and @ref{Inserindo Acentos}.

@item --docbook
@opindex --docbook
Generate Docbook output (rather than Info).

@item --document-language=@var{lang}
@opindex --document-language
Use @var{lang} to translate Texinfo keywords which end up in the
output document.  The default is the locale specified by the
@code{@@documentlanguage} command if there is one, otherwise English
(@pxref{@code{@@documentlanguage}}).

@item --dvi
@opindex --dvi
Generate a TeX DVI file using @command{texi2dvi}, rather than Info
(@pxref{@command{texi2any} Printed Output}).

@item --dvipdf
@opindex --dvipdf
Generate a PDF file using @command{texi2dvi --dvipdf}, rather than
Info (@pxref{@command{texi2any} Printed Output}).

@item --error-limit=@var{limit}
@itemx -e @var{limit}
@opindex --error-limit=@var{limit}
@opindex -e @var{limit}
Report @var{LIMIT} errors before aborting (on the assumption that
continuing would be useless); default 100.

@item --fill-column=@var{width}
@itemx -f @var{width}
@opindex --fill-column=@var{width}
@opindex -f @var{width}
Specify the maximum number of columns in a line; this is the
right-hand edge of a line.  Paragraphs that are filled will be filled
to this width.  (Filling is the process of breaking up and connecting
lines so that lines are the same length as or shorter than the number
specified as the fill column.  Lines are broken between words.) The
default value is 72.

@item --footnote-style=@var{style}
@itemx -s @var{style}
@opindex --footnote-style=@var{style}
@opindex -s @var{style}
Set the footnote style to @var{style}: either @samp{end} for the end
node style (the default) or @samp{separate} for the separate node
style.  The value set by this option overrides the value set in a
Texinfo file by a @code{@@footnotestyle} command 
(@pxref{Estilos de Notas de Rodapé}).

When the footnote style is @samp{separate}, @code{makeinfo} makes a
new node containing the footnotes found in the current node.  When the
footnote style is @samp{end}, @code{makeinfo} places the footnote
references at the end of the current node.

In HTML, when the footnote style is @samp{end}, or if the output is
not split, footnotes are put at the end of the output.  If set to
@samp{separate}, and the output is split, they are placed in a
separate file.

@item --force
@itemx -F
@opindex --force
@opindex -F
Ordinarily, if the input file has errors, the output files are not
created.  With this option, they are preserved.

@item --help
@itemx -h
@opindex --help@r{, for @command{texi2any}}
@opindex -h
Print a message with available options and basic usage, then exit
successfully.

@item --html
@opindex --html
Generate HTML output (rather than Info).  By default, the HTML output
is split into one output file per Texinfo source node, and the split
output is written into a subdirectory based on the name of the
top-level Info file.  @xref{Gerando HTML}.

@item -I @var{path}
@opindex -I @var{path}
Append @var{path} to the directory search list for finding files that
are included using the @code{@@include} command.  By default,
@code{texi2any} searches only the current directory.  If @var{path} is
not given, the current directory is appended.  The @var{path} value
can be a single directory or a list of several directories separated
by the usual path separator character (@samp{:} on Unix-like systems,
@samp{;} on Windows).

@item --ifdocbook
@opindex --ifdocbook
@itemx --ifhtml
@opindex --ifhtml
@itemx --ifinfo
@opindex --ifinfo
@itemx --ifplaintext
@opindex --ifplaintext
@itemx --iftex
@opindex --iftex
@itemx --ifxml
@opindex --ifxml
For the given format, process @samp{@@if@var{format}} and
@samp{@@@var{format}} commands, and do not process
@samp{@@ifnot@var{format}}, regardless of the format being output.
For instance, if @option{--iftex} is given, then @samp{@@iftex} and
@samp{@@tex} blocks will be read, and @samp{@@ifnottex} blocks will be
ignored.

@item --info
@opindex --info
Generate Info output.  By default, if the output file contains more
than about 300,000 bytes, it is split into shorter subfiles of about
that size.  The name of the output file and any subfiles is determined
by @code{@@setfilename} (@pxref{@code{@@setfilename}}).  @xref{Tag and
Split Files}.

@item --init-file=@var{file}
@opindex --init-file=@var{file}
Load @var{file} as code to modify the behavior and output of the
generated manual.  It is customary to use the @code{.pm} or the
@code{.init} extensions for these customization files, but that is not
enforced; the @var{file} name can be anything.  The
@option{--conf-dir} option (see above) can be used to add to the list
of directories in which these customization files are searched for.
@c @xref{Loading Init Files}.

@item --internal-links=@var{file}
@opindex --internal-links=@var{file}
@cindex Internal links, of HTML
In HTML mode, output a tab-separated file containing three columns:
the internal link to an indexed item or item in the table of contents,
the name of the index (or table of contents) in which it occurs, and
the term which was indexed or entered.  The items are in the natural
sorting order for the given element.  This dump can be useful for
post-processors.

@item --macro-expand=@var{file}
@itemx -E @var{file}
@opindex --macro-expand=@var{file}
@opindex -E @var{file}
Output the Texinfo source, with all Texinfo macros expanded, to
@var{file}.  Normally, the result of macro expansion is used
internally by @code{makeinfo} and then discarded.

@item --no-headers
@opindex --no-headers
@cindex Node separators, omitting with @option{--no-headers}
@cindex Generating plain text files with @option{--no-headers}
@cindex Menus, omitting with @option{--no-headers}
Do not include menus or node separator lines in the output.

When generating Info, this is the same as using @option{--plaintext},
resulting in a simple plain text file.  Furthermore,
@code{@@setfilename} is ignored, and output is to standard output
unless overridden with @option{-o}.  (This behavior is for backward
compatibility.)

@cindex Navigation links, omitting
When generating HTML, and output is split, also output navigation
links only at the beginning of each file.  If output is not split, do
not include navigation links at the top of each node at all.
@xref{Gerando HTML}.

@item --no-ifdocbook
@opindex --no-ifdocbook
@itemx --no-ifhtml
@opindex --no-ifhtml
@itemx --no-ifinfo
@opindex --no-ifinfo
@itemx --no-ifplaintext
@opindex --no-ifplaintext
@itemx --no-iftex
@opindex --no-iftex
@itemx --no-ifxml
@opindex --no-ifxml
For the given format, do not process @samp{@@if@var{format}} and
@samp{@@@var{format}} commands, and do process
@samp{@@ifnot@var{format}}, regardless of the format being output.
For instance, if @option{--no-ifhtml} is given, then @samp{@@ifhtml}
and @samp{@@html} blocks will not be read, and @samp{@@ifnothtml}
blocks will be.

@item --no-node-files
@itemx --node-files
@opindex --no-node-files
@opindex --node-files
When generating HTML, create redirection files for anchors and any
Nodos not already output with the file name corresponding to the node
name (@pxref{HTML Xref Node Name Expansion}).  This makes it possible
for section- and chapter-level cross-manual references to succeed
(@pxref{HTML Xref Configuration}).

If the output is split, this is enabled by default.  If the output is
not split, @option{--node-files} enables the creation of the
redirection files, in addition to the monolithic main output file.
@option{--no-node-files} suppresses the creation of redirection files
in any case.  This option has no effect with any output format other
than HTML@.  @xref{Gerando HTML}.

@item --no-number-footnotes
@opindex --no-number-footnotes
Suppress automatic footnote numbering.  By default, footnotes are
numbered sequentially within a node, i.e., the current footnote number
is reset to 1 at the start of each node.

@item --no-number-sections
@itemx --number-sections
@opindex --no-number-sections
@opindex --number-sections
With @option{--number_sections} (the default), output chapter,
section, and appendix numbers as in printed manuals.  This works only
with hierarchically-structured manuals.  You should specify
@code{--no-number-sections} if your manual is not normally structured.

@item --no-pointer-validate
@itemx --no-validate
@opindex --no-pointer-validate
@opindex --no-validate
@cindex Pointer validation, suppressing from command line
Suppress the pointer-validation phase of @code{makeinfo}---a dangerous
thing to do.  This can also be done with the @code{@@novalidate}
command (@pxref{Use @TeX{}}).  Normally, consistency checks are made
to ensure that cross-references can be resolved, etc.  @xref{Pointer
Validation}.

@item --no-warn
@opindex --no-warn
Suppress warning messages (but not error messages).

@item --output=@var{file}
@itemx -o @var{file}
@opindex --output=@var{file}
@opindex -o @var{file}
Specify that the output should be directed to @var{file}.  This
overrides any file name specified in a @code{@@setfilename} command
found in the Texinfo source.  If neither @code{@@setfilename} nor this
option are specified, the input file name is used to determine the
output name.  @xref{@code{@@setfilename}}.

If @var{file} is @samp{-}, output goes to standard output and
@samp{--no-split} is implied.

If @var{file} is a directory or ends with a @samp{/} the usual rules
are used to determine the output file name (namely, use
@code{@@setfilename} or the input file name) but the files are written
to the @var{file} directory.  For example, @samp{makeinfo -o bar/
foo.texi}, with or without @option{--no-split}, will write
@file{bar/foo.info}, and possibly other files, under @file{bar/}.

When generating HTML and output is split, @var{file} is used as the
name for the directory into which all files are written.  For example,
@samp{makeinfo -o bar --html foo.texi} will write
@file{bar/index.html}, among other files.

@item --output-indent=@var{val}
@opindex --outputindent
This option now does nothing, but remains for compatibility.  (It used
to alter indentation in XML/Docbook output.)

@item -P @var{path}
@opindex -P @var{path}
Prepend @var{path} to the directory search list for @code{@@include}.
If @var{path} is not given, the current directory is prepended.  See
@samp{-I} above.

@item --paragraph-indent=@var{indent}
@itemx -p @var{indent}
@opindex --paragraph-indent=@var{indent}
@opindex -p @var{indent}
Set the paragraph indentation style to @var{indent}.  The value set by
this option overrides the value set in a Texinfo file by an
@code{@@paragraphindent} command (@pxref{@code{@@paragraphindent}}).
The value of @var{indent} is interpreted as follows:

@table @asis
@item @samp{asis}
Preserve any existing indentation (or lack thereof) at the beginnings
of paragraphs.

@item @samp{0} or @samp{none}
Delete any existing indentation.

@item @var{num}
Indent each paragraph by @var{num} spaces.
@end table

The default is to indent by two spaces, except for paragraphs
following a section heading, which are not indented.

@item --pdf
@opindex --pdf
Generate a PDF file using @command{texi2dvi --pdf}, rather than Info
(@pxref{@command{texi2any} Printed Output}).

@item --plaintext
@opindex --plaintext
@cindex Plain text output with @option{--plaintext}
@cindex ASCII text output with @option{--plaintext}
@cindex Generating plain text files with @option{--plaintext}
@cindex Node separators, omitting with @option{--plaintext}
@cindex Menus, omitting with @option{--plaintext}
@cindex @file{INSTALL} file, generating
Output a plain text file (rather than Info): do not include menus or
node separator lines in the output.  This results in a straightforward
plain text file that you can (for example) send in email without
complications, or include in a distribution (for example, an
@file{INSTALL} file).

With this option, @code{@@setfilename} is ignored and the output goes
to standard output by default; this can be overridden with @option{-o}.

@item --ps
@opindex --ps
Generate a PostScript file using @command{texi2dvi --ps}, rather than
Info (@pxref{@command{texi2any} Printed Output}).

@item --set-customization-variable @var{var}=@var{value}
@itemx -c @var{var}=@var{value}
@opindex --set-customization-variable @var{var}=@var{value}
@opindex -c @var{var}=@var{value}
Set the customization variable @var{var} to @var{value}.  The @code{=}
is optional, but both @var{var} and @var{value} must be quoted to the
shell as necessary so the result is a single word.  Many aspects of
@command{texi2any} behavior and output may be controlled by
customization variables, beyond what can be set in the document by
@@-commands and with other command line switches.  
@xref{Customization Variables}.

@item --split=@var{how}
@itemx --no-split
@opindex --split=@var{how}
@opindex --no-split
@cindex Splitting of output files
@cindex Output file splitting
@anchor{Splitting Output}
@c
When generating Info, by default large output files are split into
smaller subfiles, of approximately 300k bytes.  When generating HTML,
by default each output file contains one node (@pxref{Gerando HTML}). 
 @option{--no-split} suppresses this splitting of the output.

Alternatively, @option{--split=@var{how}} may be used to specify at
which level the HTML output should be split.  The possible values for
@var{how} are:

@table @samp
@item chapter
The output is split at @code{@@chapter} and other sectioning
@@-commands at this level (@code{@@appendix}, etc.).

@item section
The output is split at @code{@@section} and similar.

@item node
The output is split at every node.  This is the default.
@end table

Plain text output can be split similarly to HTML@.  This may be useful
for extracting sections from a Texinfo document and making them
available as separate files.

@item --split-size=@var{num}
@opindex --split-size=@var{num}
Keep Info files to at most @var{num} characters if possible; default
is 300,000.  (However, a single node will never be split across Info
files.)

@item --transliterate-file-names
@opindex --transliterate-file-names
Enable transliteration of 8-bit characters in node names for the
purpose of file name creation.  @xref{Expansão de Caractere de 8 Bits HTML Xref}.

@item -U @var{var}
Cause @var{var} to be undefined.  This is equivalent to @code{@@clear
@var{var}} in the Texinfo file (@pxref{@code{@@set @@clear @@value}}).

@item --verbose
@opindex --verbose
Cause @code{makeinfo} to display messages saying what it is doing.
Normally, @code{makeinfo} only outputs messages if there are errors or
warnings.

@item --version
@itemx -V
@opindex --version@r{, for @command{texi2any}}
@opindex -V
Print the version number, then exit successfully.

@item --Xopt @var{str}
@opindex --Xopt @var{str}
Pass @var{str} (a single shell word) to @command{texi2dvi}; may be
repeated (@pxref{@command{texi2any} Printed Output}).

@item --xml
@opindex --xml
Generate Texinfo XML output (rather than Info).

@end table

@vindex TEXINFO_OUTPUT_FORMAT
@cindex Environment variable @code{TEXINFO_OUTPUT_FORMAT}
@command{makeinfo} also reads the environment variable
@env{TEXINFO_OUTPUT_FORMAT} to determine the output format, if not
overridden by a command line option.  The value should be one of:

@example
docbook  dvi  dvipdf  html  info  pdf  plaintext  ps  xml
@end example

If not set or otherwise specified, Info output is the default.

The customization variable of the same name is also read; if set, that
overrides an environment variable setting, but not a command-line
option.  @xref{Variáveis e Opções de Personalização}.


@node @command{texi2any} Printed Output
@section @command{texi2any} Printed Output

@cindex Printed output, through @command{texi2any}
@cindex Output, printed through @command{texi2any}

To justify the name Texinfo-to-@emph{any}, @command{texi2any} has
basic support for creating printed output in the various formats:
@TeX{} DVI, PDF, and PostScript.  This is done via the simple method
of executing the @command{texi2dvi} program when those output formats
are requested, after checking the validity of the input to give users
the benefit of @command{texi2any}'s error checking.  If you don't want
such error checking, perhaps because your manual plays advanced @TeX{}
tricks together with @file{texinfo.tex}, just invoke
@command{texi2dvi} directly.

The output format options for this are @option{--dvi},
@option{--dvipdf}, @option{--pdf}, and @option{--ps}.  @xref{Format
with @command{texi2dvi}}, for more details on these options and general
@command{texi2dvi} operation.  In addition, the @option{--verbose},
@option{--silent}, and @option{--quiet} options are passed on if
specified; the @option{-I} and @option{-o} options are likewise passed
on with their arguments, and @option{--debug} without its argument.

The only option remaining that is related to the @command{texi2dvi}
invocation is @option{--Xopt}.  Here, just the argument is passed on
and multiple @option{--Xopt} options accumulate.  This provides a way
to construct an arbitrary command line for @command{texi2dvi}.  For
example, running

@example
texi2any --Xopt -t --Xopt @@a4paper --pdf foo.texi
@end example

@noindent is equivalent to running

@example
texi2dvi -t @@a4paper --pdf foo.texi
@end example

@noindent except for the validity check.

Although one might wish that other options to @command{texi2any} would
take effect, they don't.  For example, running @samp{texi2any
--no-number-sections --dvi foo.texi} still results in a DVI file with
numbered sections.  (Perhaps this could be improved in the future, if
requests are received.)

The actual name of the command that is invoked is specified by the
@code{TEXI2DVI} customization variable 
(@pxref{Outras Variáveis de Personalização}). As you might guess, the 
default is @samp{texi2dvi}.

@command{texi2any} itself does not generate any normal output when it
invokes @command{texi2dvi}, only diagnostic messages.


@node Pointer Validation
@section Pointer Validation
@cindex Pointer validation with @code{makeinfo}
@cindex Validation of pointers

If you do not suppress pointer validation with the
@samp{--no-validate} option or the @code{@@novalidate} command in the
source file (@pxref{Use @TeX{}}), @code{makeinfo} will check the
validity of the Texinfo file.

Most validation checks are different depending on whether node
pointers are explicitly or implicitly determined.  With explicit node
pointers, here is the list of what is checked:

@enumerate
@item
If a `Next', `Previous', or `Up' node reference is a reference to a
node in the current file and is not an external reference such as to
@file{(dir)}, then the referenced node must exist.

@item
Every node except the `Top' node must have an `Up' pointer.

@item
The node referenced by an `Up' pointer must itself reference the
current node through a menu item, unless the node referenced by `Up'
has the form @samp{(@var{file})}.
@end enumerate

With implicit node pointers, the above error cannot occur, as such.
(Which is a major reason why we recommend using this feature of
@code{makeinfo}, and not specifying any node pointers yourself.)

Instead, @code{makeinfo} checks that the tree constructed from the
document's menus matches the tree constructed from the sectioning
commands.  For example, if a chapter-level menu mentions Nodos
@var{n1} and @var{n2}, in that order, Nodos @var{n1} and @var{n2} must
be associated with @code{@@section} commands in the chapter.

Finally, with both explicit and implicit node pointers,
@code{makeinfo} checks that every node except the `Top' node is
referenced in a menu.


@node Customization Variables
@section Customization Variables

@quotation Warning
These customization variable names and meanings may change in any
Texinfo release.  We always try to avoid incompatible changes, but we
cannot absolutely promise, since needs change over time.
@end quotation

Many aspects of the behavior and output of @command{texi2any} may be
modified by modifying so-called @dfn{customization variables}.  These
fall into a few general categories:

@itemize @bullet
@item
Those associated with @@-commands; for example,
@code{@@documentlanguage}.

@item
Those associated with command-line options; for example, the
customization variable @code{SPLIT} is associated with the
@option{--split} command-line option, and @code{TEXINFO_OUTPUT_FORMAT}
allows specifying the output format.

@item
Those associated with customizing the HTML output.

@item
Other ad hoc variables.
@end itemize

Customization variables may set on the command line using
@code{--set-customization-variable '@var{var} @var{value}'} (quoting
the variable/value pair to the shell) or
@code{--set-customization-variable @var{var}=@var{value}} (using
@code{=}).  A special @var{value} is @samp{undef}, which sets the
variable to this special ``undefined'' Perl value.

The sections below give the details for each of these.

@menu
* Variáveis de Personalização para Comandos @code{@@}::
* Variáveis e Opções de Personalização::
* Variáveis de Personalização de HTML::
* Outras Variáveis de Personalização::
@end menu


@node Variáveis de Personalização para Comandos @code{@@}
@subsection Variáveis de Personalização para Comandos @code{@@}

@cindex Variáveis de Personalização para Comandos @code{@@}
@cindex Comandos @code{@@}, variáveis de personalização para

Each of the following @@-commands has an associated customization
variable with the same name (minus the leading @code{@@}):

@smallexample
@@allowcodebreaks @@clickstyle @@codequotebacktick
@@codequoteundirected @@contents @@deftypefnnewline
@@documentdescription @@documentencoding @@documentlanguage
@@evenfooting   @@evenfootingmarks
@@evenheading   @@evenheadingmarks
@@everyfooting  @@everyfootingmarks
@@everyheading  @@everyheadingmarks 
@@exampleindent @@firstparagraphindent
@@fonttextsize  @@footnotestyle @@frenchspacing @@headings
@@kbdinputstyle @@novalidate
@@oddfooting    @@oddfootingmarks
@@oddheading    @@oddheadingmarks
@@pagesizes     @@paragraphindent
@@setchapternewpage @@setcontentsaftertitlepage
@@setfilename   @@setshortcontentsaftertitlepage @@shortcontents
@@urefbreakstyle @@validatemenus @@xrefautomaticsectiontitle
@end smallexample

Setting such a customization variable to a value @samp{foo} is similar
to executing @code{@@@var{cmd} foo}.  It is not exactly the same,
though, since any side effects of parsing the Texinfo source are not
redone.  Also, some variables do not take Texinfo code when generating
particular formats, but an argument that is already formatted.  This
is the case, for example, for HTML for @code{documentdescription}.


@node Variáveis e Opções de Personalização
@subsection Variáveis e Opções de Personalização

@cindex Customization variables for options
@cindex Options, customization variables for

The following table gives the customization variables associated with
some command line options.  @xref{Invoking @command{texi2any}}, for the
meaning of the options.

@multitable @columnfractions 0.5 0.5
@headitem Option @tab Variable
@vindex ENABLE_ENCODING
@item @option{--enable-encoding}   @tab @code{ENABLE_ENCODING}
@vindex documentlanguage
@item @option{--document-language} @tab @code{documentlanguage}
@vindex ERROR_LIMIT
@item @option{--error-limit}       @tab @code{ERROR_LIMIT}
@vindex FILLCOLUMN
@item @option{--fill-column}       @tab @code{FILLCOLUMN}
@vindex footnotestyle
@item @option{--footnote-style}    @tab @code{footnotestyle}
@vindex FORCE
@item @option{--force}             @tab @code{FORCE}
@vindex INTERNAL_LINKS
@item @option{--internal-links}    @tab @code{INTERNAL_LINKS}
@vindex MACRO_EXPAND
@item @option{--macro-expand}      @tab @code{MACRO_EXPAND}
@vindex HEADERS
@vindex SHOW_MENU
@item @option{--headers}           @tab @code{HEADERS}, @code{SHOW_MENU}
@vindex NO_WARN
@item @option{--no-warn}           @tab @code{NO_WARN}
@vindex novalidate
@item @option{--no-validate}       @tab @code{novalidate}
@vindex NUMBER_FOOTNOTES
@item @option{--number-footnotes}  @tab @code{NUMBER_FOOTNOTES}
@vindex NUMBER_SECTIONS
@item @option{--number-sections}   @tab @code{NUMBER_SECTIONS}
@vindex NODE_FILES
@item @option{--node-files}        @tab @code{NODE_FILES}
@vindex OUT
@vindex OUTFILE
@vindex SUBDIR
@item @option{--output}            @tab @code{OUT}, @code{OUTFILE},
                                        @code{SUBDIR}
@vindex paragraphindent
@item @option{--paragraph-indent}  @tab @code{paragraphindent}
@vindex SILENT
@item @option{--silent}            @tab @code{SILENT}
@vindex SPLIT
@item @option{--split}             @tab @code{SPLIT}
@vindex SPLIT_SIZE
@item @option{--split-size}        @tab @code{SPLIT_SIZE}
@vindex TRANSLITERATE_FILE_NAMES
@item @option{--transliterate-file-names} @tab @code{TRANSLITERATE_FILE_NAMES}
@vindex VERBOSE
@item @option{--verbose}           @tab @code{VERBOSE}
@end multitable

Setting such a customization variable to a value @samp{foo} is
essentially the same as specifying the @code{--@var{opt}=foo} if the
option takes an argument, or @code{--@var{opt}} if not.

@vindex TEXINFO_OUTPUT_FORMAT
In addition, the customization variable @code{TEXINFO_OUTPUT_FORMAT}
allows specifying what @code{makeinfo} outputs, either one of the usual
output formats that can be specified with options, or various other
forms:

@ftable @samp
@item docbook
@itemx dvi
@itemx dvipdf
@itemx html
@itemx info
@itemx pdf
@itemx plaintext
@itemx ps
@itemx xml
These correspond to the command-line options (and
@code{TEXINFO_OUTPUT_FORMAT} environment variable values) of the same
name.  @xref{Invoking @command{texi2any}}.

@item debugcount
Instead of generating a regular output format, output the count of
bytes and lines obtained when converting to Info, and other information.

@item debugtree
@cindex tree representation, for debugging
@cindex debugging document, with tree representation
Instead of generating a regular output format, output a text representation
of the tree obtained by parsing the input texinfo document.

@item parse
Do only Texinfo source parsing; there is no output.

@item plaintexinfo
Output the Texinfo source with all the macros, @code{@@include} and
@code{@@value@{@}} expanded.  This is similar to setting
@option{--macro-expand}, but instead of being output in addition to
the normal conversion, output of Texinfo is the main output.

@item rawtext
@cindex raw text output
Output raw text, with minimal formatting.  For example, footnotes are
ignored and there is no paragraph filling.  This is used by the parser
for file names and copyright text in HTML comments, for example.

@item structure
Do only Texinfo source parsing and determination of the document
structure; there is no output.

@item texinfosxml
@cindex SXML output
@cindex S-expressions, output format
Output the document in TexinfoSXML representation, a syntax for
writing XML data using Lisp S-expressions.

@item textcontent
@cindex spell checking
@cindex word counting
@pindex detexinfo
@cindex stripping Texinfo commands
Output the text content only, stripped of commands; this is useful for
spell checking or word counting, for example.  The trivial
@code{detexinfo} script setting this is in the @file{util} directory
of the Texinfo source as an example.  It's one line:

@example
exec texi2any -c TEXINPUT_OUTPUT_FORMAT=textcontent "$@@"
@end example
@end ftable


@node Variáveis de Personalização de HTML
@subsection Variáveis de Personalização de HTML

This table gives the customization variables which apply to HTML
output only.  A few other customization variable apply to both HTML
and other output formats; those are given in the next section.

@vtable @code
@item AVOID_MENU_REDUNDANCY
For HTML@.  If set, and the menu entry and menu description are the
same, then do not print the menu description; default false.

@item AFTER_BODY_OPEN
For HTML@.  If set, the corresponding text will appear at the
beginning of each HTML file; default unset.

@item AFTER_ABOUT
For HTML, when an About-element is output.  If set, the corresponding
text will appear at the end of the About element; default unset.

@item AFTER_OVERVIEW
@itemx AFTER_TOC_LINES
For HTML@.  If set, the corresponding text is output after the short
table of contents for @code{AFTER_OVERVIEW} and after the table of
contents for @code{AFTER_TOC_LINES}; otherwise, a default string is
used.  At the time of writing, a @code{</div>} element is closed.

In general, you should set @code{BEFORE_OVERVIEW} if
@code{AFTER_OVERVIEW} is set, and you should set
@code{BEFORE_TOC_LINES} if @code{AFTER_TOC_LINES} is set.


@item BASEFILENAME_LENGTH
For HTML@.  The maximum length of the base filenames; default 245.
Changing this would make cross-manual references to such long node
names invalid (@pxref{Básico do Link HTML Xref}).

@item BEFORE_OVERVIEW
@itemx BEFORE_TOC_LINES
For HTML@.  If set, the corresponding text is output before the short
table of contents for @code{BEFORE_OVERVIEW} and before the table of
contents for @code{BEFORE_TOC_LINES}, otherwise a default string is
used.  At the time of writing, a @code{<div ...>} element is opened.

In general you should set @code{AFTER_OVERVIEW} if
@code{BEFORE_OVERVIEW} is set, and you should set
@code{AFTER_TOC_LINES} if @code{BEFORE_TOC_LINES} is set.


@item BIG_RULE
For HTML@.  Rule used after and before the top element and before
special elements, but not for footers and headers; default
@code{<hr>}.

@item BODYTEXT
@cindex @code{<body>} text, customizing
@opindex lang@r{, HTML attribute}
For HTML, the text appearing in @code{<body>}.  By default, sets the
HTML @code{lang} attribute to the document language
(@pxref{@code{@@documentlanguage}}).

@item CASE_INSENSITIVE_FILENAMES
For HTML@.  Construct output file names as if the filesystem were case
insensitive (@pxref{HTML Splitting}); default false.

@item CHAPTER_HEADER_LEVEL
For HTML@.  Header formatting level used for chapter level sectioning
commands; default @samp{2}.

@item CHECK_HTMLXREF
For HTML@.  Check that manuals which are the target of external
cross-references (@pxref{Quatro e Cinco Argumentos}) are present in
@file{htmlxref.cnf} (@pxref{HTML Xref Configuration}); default false.

@item COMPLEX_FORMAT_IN_TABLE
For HTML@.  If set, use tables for indentation of complex formats; default
false.

@item CSS_LINES
For HTML@.  CSS output, automatically determined by default (@pxref{HTML CSS}).

@item DATE_IN_HEADER
For HTML@.  Put the document generation date in the header; off by default.

@item DEF_TABLE
For HTML@.  If set, a @code{<table>} construction for @code{@@deffn}
and similar @@-commands is used (looking more like the @TeX{} output),
instead of definition lists; default false.

@item DEFAULT_RULE
For HTML@.  Rule used between element, except before and after the
top element, and before special elements, and for footers and headers;
default @code{<hr>}.

@item DO_ABOUT
For HTML@.  If set to 0 never do an About special element;
if set to 1 always do an About special element;
default 0.
@c @xref{Output Elements Defined}.

@item EXTERNAL_DIR
For HTML@.  Base directory for external manuals; default none.  It is
better to use the general external cross-reference mechanism
(@pxref{HTML Xref Configuration}) than this variable.

@item EXTRA_HEAD
For HTML@.  Additional text appearing within @code{<head>}; default unset.

@item FOOTNOTE_END_HEADER_LEVEL
For HTML@.  Header formatting level used for the footnotes header with
the `end' footnotestyle; default @samp{4}.  @xref{Estilos de Notas de Rodapé}.

@item FOOTNOTE_SEPARATE_HEADER_LEVEL
For HTML@.  Header formatting level used for the footnotes header with
the `separate' footnotestyle; default @samp{4}.  
@xref{Estilos de Notas de Rodapé}.

@item FRAMES
For HTML@.  If set, a file describing the frame layout is generated,
together with a file with the short table of contents; default false.

@item FRAMESET_DOCTYPE
For HTML@.  Same as DOCTYPE, but for the file containing the frame
description.

@item HEADER_IN_TABLE
For HTML@.  Use tables for header formatting rather than a simple
@code{<div>} element; default false.

@item ICONS
For HTML@.  Use icons for the navigation panel; default false.

@item IMAGE_LINK_PREFIX
For HTML@.  If set, the associated value is prepended to the image file
links; default unset.

@item INLINE_CONTENTS
For HTML@.  If set, output the contents where the @code{@@contents} and
similar @@-commands are located; default true.  This is ignored if
@code{@@set*contentsaftertitlepage} is set (@pxref{Conteúdo}).

@item INLINE_CSS_STYLE
For HTML@.  Put CSS directly in HTML elements rather than at the
beginning of the output; default false.

@item KEEP_TOP_EXTERNAL_REF
For HTML@.  If set, do not ignore @samp{Top} as the first
argument for an external ref to a manual, as is done by default.
@xref{Referenciando Um Manual Como Um Todo}.

@item L2H
For HTML@.  If set, @command{latex2html} is used to convert @code{@@math}
and @code{@@tex} sections; default false.  Best used with @option{--iftex}.

@item L2H_CLEAN
(Relevant only if @code{L2H} is set.)  If set, the intermediate files
generated in relation with @command{latex2html} are removed; default
true.

@item L2H_FILE
(Relevant only if @code{L2H} is set.)  If set, the given file is used
as @command{latex2html}'s init file; default unset.

@item L2H_HTML_VERSION
(Relevant only if @code{L2H} is set.)  The HTML version used in the
@command{latex2html} call; default unset.

@item L2H_L2H
(Relevant only if @code{L2H} is set.)  The program invoked as
@command{latex2html}; default is @code{latex2html}.

@item L2H_SKIP
(Relevant only if @code{L2H} is set.)  If set to a true value, the
actual call to @command{latex2html} is skipped; previously generated
content is reused instead.  If set to 0, the cache is not used at all.
If set to @samp{undef}, the cache is used for as many @TeX{} fragments as
possible and for any remaining the command is run.  The default is
@samp{undef}.

@item L2H_TMP
(Relevant only if @code{L2H} is set.)  Set the directory used for
temporary files.  None of the file name components in this directory
name may start with @samp{.}; otherwise, @command{latex2html} will
fail (because of @command{dvips}).  The default is the empty string,
which means the current directory.

@item MAX_HEADER_LEVEL
For HTML@.  Maximum header formatting level used (higher header
formatting level numbers correspond to lower sectioning levels);
default @samp{4}.

@item MENU_SYMBOL
For HTML@.  Symbol used in front of menu entries when node names are used
for menu entries formatting; default @samp{&bull;}.

@item MONOLITHIC
For HTML@.  Output only one file including the table of contents.  Set
by default, but only relevant when the output is not split.

@item NO_CSS
For HTML@.  Do not use CSS; default false.  @xref{HTML CSS}.

@item NODE_FILE_EXTENSION
For HTML@.  Extension for node files if @code{NODE_FILENAMES} is set;
default @samp{html}.

@item PRE_ABOUT
For HTML, when an About element is output.  If set to a text string,
this text will appear at the beginning of the About element.  If set
to a reference on a subroutine, the result of the subroutine call will
appear at the beginning of the About element.  If not set (the
default), default text is used.

@item PRE_BODY_CLOSE
For HTML@.  If set, the given text will appear at the footer of each
HTML file; default unset.

@item PROGRAM_NAME_IN_FOOTER
For HTML@.  If set, output the program name and miscellaneous related
information in the page footers; default false.

@item SHORTEXTN
For HTML@.  If set, use @samp{.htm} as extension; default false.

@item SHOW_TITLE
For HTML@.  If set, output the title at the beginning of the document;
default true.

@item SIMPLE_MENU
For HTML@.  If set, use a simple preformatted style for the menu,
instead of breaking down the different parts of the menu; default false.
@xref{Partes de Menu}.

@item TOC_LINKS
For HTML@.  If set, links from headings to toc entries are created;
default false.

@item TOP_FILE
This file name may be used for the top-level file.  The extension is
set appropriately, if necessary.  This is used to override the default,
and is, in general, only taken into account when output is split, and
for HTML@.

@item TOP_NODE_FILE
For HTML@.  File name used for the Top node, if @code{NODE_FILENAMES}
is set; default is @code{index}.

@item TOP_NODE_FILE_TARGET
For HTML@.  File name used for the Top node in cross-references;
default is @code{index}.

@item TOP_NODE_UP_URL
For HTML@.  A url used for @code{(dir)} references; the default is
@code{undef}, meaning that the normal rules apply, typically leading
to a link to @samp{dir.html} from an implicit or explicit reference to
@samp{(dir)} (@pxref{HTML Xref}).  For more about the Top node
pointers, @pxref{Primeiro Nodo}.  For overriding the Up pointer in other
formats, see @code{TOP_NODE_UP} in 
@ref{Outras Variáveis de Personalização}.

@item USE_ACCESSKEY
@cindex @code{accesskey}, customization variable for
For HTML@.  Use @code{accesskey} in cross-references; default true.

@item USE_ISO
For HTML@.  Use entities for doubled single-quote characters
(@pxref{Inserindo Aspas}), and @samp{---} and @samp{--}
(@pxref{Convenções}); default true.

@item USE_LINKS
@cindex @code{<link>} HTML tag, in @code{<head>}
@cindex @code{<head>} HTML tag, and @code{<link>}
For HTML@.  Generate @code{<link>} elements in the HTML @code{<head>}
output; default true.

@item USE_REL_REV
For HTML@.  Use @code{rel} in cross-references; default true.

@item VERTICAL_HEAD_NAVIGATION
For HTML@.  If set, a vertical navigation panel is used; default false.

@item WORDS_IN_PAGE
@cindex Navigation panel, bottom of page
For HTML, with output split at Nodos.  Specifies the approximate
minimum page length at which a navigation panel is placed at the
bottom of a page.  To avoid ever having the navigation buttons at the
bottom of a page, set this to a sufficiently large number.  The
default is 300.

@item XREF_USE_FLOAT_LABEL
For HTML@.  If set, for the float name in cross-references, use the
float label instead of the type followed by the float number
(@pxref{@code{@@float}}).  The default is off.

@item XREF_USE_NODE_NAME_ARG
For HTML@.  Only relevant for cross-reference commands with no cross
reference name (second argument).  If set to@tie{}1, use the node name
(first) argument in cross-reference @@-commands for the text displayed
as the hyperlink.  If set to@tie{}0, use the node name if
@code{USE_Nodos} is set, otherwise the section name.  If set to
@samp{undef}, use the first argument in preformatted environments,
otherwise use the node name or section name depending on
@code{USE_Nodos}.  The default is @samp{undef}.

@end vtable


@node Outras Variáveis de Personalização
@subsection Outras Variáveis de Personalização

This table gives the remaining customization variables, which apply to
multiple formats, or affect global behavior, or otherwise don't fit
into the categories of the previous sections.

@vtable @code
@item CLOSE_QUOTE_SYMBOL
When a closing quote is needed, use this character; default @code{&rsquo;}
in HTML, @code{&#8217;} in Docbook.  The default for Info is the same
as @code{OPEN_QUOTE_SYMBOL} (see below).

@c @item COMPLETE_IMAGE_PATHS
@c If set, the image files are computed to be relative from the document
@c directory to the source manual directory, and then to the image.

@item CPP_LINE_DIRECTIVES
Recognize @code{#line} directives in a ``preprocessing'' pass
(@pxref{External Macro Processors}); on by default.

@item DEBUG
If set, debugging output is generated; default is off (zero).
@c The integer value specifies what kinds of debugging output are
@c generated.  It is a bitmask.  Setting it to 255 ensures having all
@c available debugging output.

@item DOCTYPE
@vindex SystemLiteral
For Docbook, HTML, XML@.  Specifies the @code{SystemLiteral}, the
entity's system identifier.  This is a URI which may be used to
retrieve the entity, and identifies the canonical DTD for the
document.  The default value is different for each of HTML, Docbook
and Texinfo@tie{}XML.

@item DUMP_TEXI
For debugging.  If set, no conversion is done, only parsing and macro
expansion.  If the option @option{--macro-expand} is set, the Texinfo
source is also expanded to the corresponding file.  Default false.

@item DUMP_TREE
For debugging.  If set, the tree constructed upon parsing a Texinfo
document is output to standard error; default false.

@item ENABLE_ENCODING_USE_ENTITY
For HTML, XML@.  If @option{--enable-encoding} is set, and there is an
entity corresponding with the letter or the symbol being output,
prefer the entity.  Set by default for HTML, but not XML.

@item EXTERNAL_CROSSREF_SPLIT
For cross-references to other manuals, this determines if the other
manual is considered to be split or monolithic.  By default, it is set
based on the value of @code{SPLIT}.  @xref{HTML Xref}, and @pxref{HTML
Xref Configuration}.

@item EXTENSION
The extension added to the output file name.  The default is different
for each output format.

@item FIX_TEXINFO
For ``plain Texinfo'' (see the @code{PLAINTEXINFO} item).  If set to
false, the resulting Texinfo does not have all errors corrected, such
as missing @samp{@@end}; default true.  This variable is only
relevant when expanding Texinfo; other converters always try to
output something sane even if the input is erroneous.

@c @item IDX_SUMMARY
@c If set, for each @code{@@printindex} a file named
@c @file{@var{docname}_@var{idxname}.idx} is created, containing lines of
@c the form:
@c
@c @example
@c @var{key} @var{reference}
@c @end example
@c
@c @noindent sorted alphabetically (case matters).

@item IGNORE_BEFORE_SETFILENAME
If set, begin outputting at @code{@@setfilename}, if
@code{@@setfilename} is present; default true.

@item IGNORE_SPACE_AFTER_BRACED_COMMAND_NAME
If set, spaces are ignored after an @@-command that takes braces.
Default true, matching the @TeX{} behavior.

@item INDEX_ENTRY_COLON
Symbol used between the index entry and the associated node or section;
default @samp{:}.

@item INDEX_SPECIAL_CHARS_WARNING
If set, warn about @samp{:} in index entry, as it leads to invalid entries in
index menus in output Info files.  For Info and plaintext only.

@anchor{INFO_SPECIAL_CHARS_QUOTE}
@item INFO_SPECIAL_CHARS_QUOTE
If set, whenever there are problematic characters for Info output in
places such as node names or menu items, surround the part of the
construct where they appear with quoting characters, as described in
@ref{Especificação do Formato Info}.  @xref{Exigências de Linha de Nodo}.

@item INFO_SPECIAL_CHARS_WARNING
If set, warn about problematic constructs for Info output (such as the
string @samp{::}) in node names, menu items, and cross-references;
default true.  Do not warn about index entries, since parsing problems
there don't prevent navigation; readers can still relatively easily
find their way to the node in question.

@item INLINE_INSERTCOPYING
If set, @code{@@insertcopying} is replaced by the @code{@@copying}
content (@pxref{@code{@@copying}}) as if @code{@@insertcopying} were a
user-defined macro; default false.

@item INPUT_ENCODING_NAME
Normalized encoding name suitable for output.  Should be a usable
charset name in HTML, typically one of the preferred IANA encoding
names.  You should not need to use this variable, since it is set by
@code{@@documentencoding} (@pxref{@code{@@documentencoding}}).

@item INPUT_PERL_ENCODING
Perl encoding used to process the Texinfo source.  You should not need
to use that variable, since it is set by @code{@@documentencoding}
(@pxref{@code{@@documentencoding}}).

@item MACRO_BODY_IGNORES_LEADING_SPACE
Ignore white space at the beginning of user defined macro body line,
mimicking a @TeX{} limitation (@pxref{Macro Details}).  Default off.

@item MAX_MACRO_CALL_NESTING
The maximal number of recursive calls of @@-commands defined through
@code{@@rmacro}; default 100000.  The purpose of this variable is to
avoid infinite recursions.

@item MENU_ENTRY_COLON
Symbol used between the menu entry and the description; default
@samp{:}.

@item NO_USE_SETFILENAME
If set, do not use @code{@@setfilename} to set the document name;
instead, base the output document name only on the input file name.
The default is false.

@item NODE_FILENAMES
If set, node names are used to construct file names.  By default, it
is set if the output is split by node, or if @code{NODE_FILES} is set
and the output is split in any way.

@item NODE_NAME_IN_INDEX
If set, use node names in index entries, otherwise prefer section names;
default true.

@item NODE_NAME_IN_MENU
If set, use node names in menu entries, otherwise prefer section names;
default true.

@item OPEN_QUOTE_SYMBOL
When an opening quote is needed, e.g., for @samp{@@samp} output, use
the specified character; default @code{&lsquo;} for HTML,
@code{&#8216;} for Docbook.  For Info, the default depends on the
enabled document encoding (@pxref{@code{@@documentencoding}}); if no
document encoding is set, or the encoding is US-ASCII, etc., @samp{'}
is used.  This character usually appears as an undirected single quote
on modern systems.  If the document encoding is Unicode, the Info
output uses a Unicode left quote.

@item OUTPUT_ENCODING_NAME
Normalized encoding name used for output files.  Should be a usable
charset name in HTML, typically one of the preferred IANA encoding
names.  By default, if an input encoding is set (typically through
@code{@@documentencoding} or @code{INPUT_ENCODING_NAME}), this
information is used to set the output encoding name.  If no input
encoding is specified, the default output encoding name may be set by
the output format.  In particular, the XML-based formats use
@code{utf-8} for @code{OUTPUT_ENCODING_NAME} if the encoding is not
otherwise specified.  @xref{@code{@@documentencoding}}.

@item OVERVIEW_LINK_TO_TOC
If set, the cross-references in the Visão Geral link to the corresponding
Table of Contents entries; default true.

@item PACKAGE
@itemx PACKAGE_VERSION
@itemx PACKAGE_AND_VERSION
@itemx PACKAGE_URL
@itemx PACKAGE_NAME
The implementation's short package name, package version, package name
and version concatenated, package url, and full package name,
respectively.  By default, these variables are all set through
Autoconf, Automake, and @code{configure}.

@item PREFIX
The output file prefix, which is prepended to some output file names.
By default it is set by @code{@@setfilename} or from the input file
(@pxref{@code{@@setfilename}}).  How this value is used depends on the
value of Outras Variáveis de Personalização or command line options, such
as whether the output is split and @code{NODE_FILENAMES}.  The default
is unset.

@item PROGRAM
Name of the program used.  By default, it is set to the name of the
program launched, with a trailing @samp{.pl} removed.

@item RENAMED_Nodos_FILE
If set, use the value for the renamed Nodos description file.  If not
set, the file is @file{@var{doc_basename}-noderename.cnf}.
@xref{Preservação de Link HTML Xref}.

@item RENAMED_Nodos_REDIRECTIONS
If set, create redirection files for renamed Nodos.  Set by default
when generating HTML@.

@item SHOW_MENU
@opindex --no-headers
If set, Texinfo menus are output.  By default, it is set unless
generating Docbook or if @option{--no-headers} is specified.

@item SORT_ELEMENT_COUNT
@pindex texi-elements-by-size
@cindex Longest Nodos, finding
@cindex Sorting Nodos by size
If set, the name of a file to which a list of elements (Nodos or
sections, depending on the output format) is dumped, sorted by the
number of lines they contain after removal of @@-commands; default
unset.  This is used by the program @code{texi-elements-by-size} in
the @file{util/} directory of the Texinfo source distribution
(@pxref{texi-elements-by-size}).

@item SORT_ELEMENT_COUNT_WORDS
When dumping the elements-by-size file (see preceding item), use word
counts instead of line counts; default false.

@c @item SPLIT_INDEX
@c For HTML@.  If set, the output is split, and the output from
@c @code{@@printindex} happens in a sectioning element at the level of
@c splitting, then split index pages at the next letter after they have
@c more than that many entries.  If set to 0, no index splitting.

@item TEST
If set to true, some variables which are normally dynamically
generated anew for each run (date, program name, version) are set to
fixed and given values.  This is useful to compare the output to a
reference file, as is done for the tests.  The default is false.

@item TEXI2DVI
Name of the command used to produce PostScript, PDF, and DVI; default
@samp{texi2dvi}.  @xref{@command{texi2any} Printed Output}.

@item TEXI2HTML
@cindex compatibility, with @command{texi2html}
Generate HTML and try to be as compatible as possible with
@command{texi2html}; default false.

@item TEXINFO_COLUMN_FOR_DESCRIPTION
Used with the @code{indent_menu_descriptions} tree transformation,
described below; default 32 (matching
@code{texinfo-column-for-description} in Emacs)).

@item TEXINFO_DTD_VERSION
For XML@.  Version of the DTD used in the XML output preamble.  The
default is set based on a variable in @file{configure.ac}.

@item TEXTCONTENT_COMMENT
For stripped text content output (i.e., when
@code{TEXINFO_OUTPUT_FORMAT} is set to @code{textcontent}).  If set,
also output comments.  Default false.

@item TOP_NODE_UP
Up node for the Top node; default @samp{(dir)}.  For overriding the
url in HTML output, see @code{TOP_NODE_UP_URL} in 
@ref{Variáveis de Personalização de HTML}.

@item TREE_TRANSFORMATIONS
The associated value is a comma separated list of transformations that
can be applied to the Texinfo tree prior to outputting the result.  If
more than one is specified, the ordering is irrelevant; each is always
applied at the necessary point during processing.

The only one executed by default is
@samp{move_index_entries_after_items} for HTML and Docbook output.
Here's an example of updating the master menu in a document:

@example
makeinfo \
  -c TREE_TRANSFORMATIONS=regenerate_master_menu \
  -c PLAINTEXINFO=1 \
  mydoc.texi \
  -o /tmp/out
@end example

@noindent (Caveat: Since @code{PLAINTEXINFO} output does expand
Texinfo macros and Condicionais, it's necessary to remove any such
differences before installing the updates in the original document.
This will be remedied in a future release.)

The following transformations are currently supported (many are used
in the @code{pod2texi} utility distributed with Texinfo;
@pxref{Invoking @command{pod2texi}}):

@ftable @samp
@item complete_tree_Nodos_menus
Add menu entries or whole menus for Nodos associated with sections of
any level, based on the sectioning tree.

@item fill_gaps_in_sectioning
Adds empty @code{@@unnumbered...} sections in a tree to fill gaps in
sectioning.  For example, an @code{@@unnumberedsec} will be inserted
if a @code{@@chapter} is followed by a @code{@@subsection}.

@item indent_menu_descriptions
Reformat menus so that descriptions start at column
@code{TEXINFO_COLUMN_DESCRIPTION}.

@item insert_Nodos_for_sectioning_commands
Insert Nodos for sectioning commands lacking a corresponding node.

@item move_index_entries_after_items
In @code{@@enumerate} and @code{@@itemize}, move index entries
appearing just before an @code{@@item} to just after the
@code{@@item}.  Comment lines between index entries are moved too.  As
mentioned, this is always done for HTML and Docbook output.

@item regenerate_master_menu
Update the Top node master menu, either replacing the (first)
@code{@@detailmenu} in the Top node menu, or creating it at the end of
the Top node menu.

@item simple_menu
Mostly the same as @code{SIMPLE_MENU}: use a simple preformatted style
for the menu.  It differs from setting @code{SIMPLE_MENU} in that
@code{SIMPLE_MENU} only has an effect in HTML output.

@end ftable

@item USE_Nodos
Preferentially use Nodos to decide where elements are separated.  If
set to false, preferentially use sectioning to decide where elements
are separated.  The default is true.

@item USE_NODE_TARGET
If set, use the node associated with a section for the section target
in cross-references; default true.

@item USE_NUMERIC_ENTITY
For HTML and XML@.  If set, use numeric entities instead of ASCII
characters when there is no named entity.  By default, set to true for
HTML.

@item USE_UP_NODE_FOR_ELEMENT_UP
Fill in up sectioning direction with node direction when there is no
sectioning up direction.  In practice this can only happen when there
is no @@top section.  Not set by default.

@item USE_SETFILENAME_EXTENSION
Default is on for Info, off for other output.  If set, use exactly
what @code{@@setfilename} gives for the output file name, including
the extension.  You should not need to explicitly set this variable.

@item USE_TITLEPAGE_FOR_TITLE
Use the full @code{@@titlepage} as the title, not a simple title string;
default false.

@item USE_UNIDECODE
@pindex Text::Unidecode
If set to false, do not use the @code{Text::Unidecode} Perl module to
transliterate more characters; default true.

@end vtable


@node Internacionalização of Document Strings
@section Internacionalização of Document Strings

@cindex I18n, of document strings
@cindex Internacionalização of document strings
@cindex Document strings, internationalization of
@cindex Output document strings, internationalization of
@cindex Translating strings in output documents

@vindex documentlanguage @r{customization variable}
@command{texi2any} writes fixed strings into the output document at
various places: cross-references, page footers, the help page,
alternate text for images, and so on.  The string chosen depends on
the value of the @code{documentlanguage} at the time of the string
being output (@pxref{@code{@@documentlanguage}}, for the Texinfo
command interface).

@pindex libintl-perl @r{Gettext implementation}
The Gettext framework is used for those strings (@pxref{Top,,,
gettext, Gettext}).  The @code{libintl-perl} package is used as the
@code{gettext} implementation; more specifically, the pure Perl
implementation is used, so Texinfo can support consistent behavior
across all platforms and installations, which would not otherwise be
possible.  @code{libintl-perl} is included in the Texinfo distribution
and always installed, to ensure that it is available if needed.  It is
also possible to use the system @code{gettext} (the choice can be made
at build-time).

@vindex texinfo_document @r{Gettext domain}
@cindex Perl format strings for translation
The Gettext domain @samp{texinfo_document} is used for the strings.
Translated strings are written as Texinfo, and may include
@@-commands.  In translated strings, the varying parts of the string
are not usually denoted by @code{%s} and the like, but by
@samp{@{arg_name@}}.  (This convention is common for @code{gettext} in
Perl and is fully supported in GNU Gettext; @pxref{perl-format,, Perl
Format Strings, gettext, GNU Gettext}.)  For example, in the
following, @samp{@{section@}} will be replaced by the section name:

@example
see @{section@}
@end example

These Perl-style brace format strings are used for two reasons: first,
changing the order of @code{printf} arguments is only available since
Perl@tie{}5.8.0; second, and more importantly, the order of arguments
is unpredictable, since @@-command expansion may lead to different
orders depending on the output format.

The expansion of a translation string is done like this:

@enumerate
@item First, the string is translated.  The locale
is @var{@@documentlanguage}@code{.}@var{@@documentencoding}.

@cindex @code{us-ascii} encoding, and translations
If the @var{@@documentlanguage} has the form @samp{ll_CC}, that is
tried first, and then just @samp{ll}.  If that does not exist, and the
encoding is not @code{us-ascii}, then @code{us-ascii} is tried.

The idea is that if there is a @code{us-ascii} encoding, it means that
all the characters in the charset may be expressed as @@-commands.
For example, there is a @code{fr.us-ascii} locale that can accommodate
any encoding, since all the Latin@tie{}1 characters have associated
@@-commands.  On the other hand, Japanese has only a translation
@code{ja.utf-8}, since there are no @@-commands for Japanese
characters.

@item Next, the string is expanded as Texinfo, and converted.
The arguments are substituted; for example, @samp{@{arg_name@}} is
replaced by the corresponding actual argument.

@end enumerate

In the following example, @samp{@{date@}}, @samp{@{program_homepage@}}
and @samp{@{program@}} are the arguments of the string.  Since they
are used in @code{@@uref}, their order is not predictable.
@samp{@{date@}}, @samp{@{program_homepage@}} and @samp{@{program@}} are
substituted after the expansion:

@example
Generated on @@emph@{@{date@}@} using
@@uref@{@{program_homepage@}, @@emph@{@{program@}@}@}.
@end example

This approach is admittedly a bit complicated.  Its usefulness is that
it supports having translations available in different encodings for
encodings which can be covered by @@-commands, and also specifying how
the formatting for some commands is done, independently of the output
format---yet still be language-dependent.  For example, the
@samp{@@pxref} translation string can be like this:

@example
see @{node_file_href@} section `@{section@}\' in @@cite@{@{book@}@}
@end example

@noindent
which allows for specifying a string independently of the output
format, while nevertheless with rich formatting it may be translated
appropriately in many languages.


@node Invoking @command{pod2texi}
@section Invoking @command{pod2texi}: Convert POD to Texinfo

@pindex pod2texi
@cindex Invoking @code{pod2texi}
@cindex POD, converting to Texinfo
@cindex Perl POD, converting to Texinfo

The @code{pod2texi} program translates Perl pod documentation file(s)
to Texinfo.  There are two basic modes of operation: generating a
standalone manual from each input pod, or (if @code{--base-level=1} or
higher is given) generating Texinfo subfiles suitable for use
with @code{@@include}.

Although ordinarily this documentation in the Texinfo manual would be
the best place to look, in this case we have documented all the
options and examples in the @code{pod2texi} program itself, since it
may be useful outside of the rest of Texinfo.  Thus, please see the
output of @code{pod2texi --help}, the version on the web at
@url{http://www.gnu.org/software/texinfo/manual/pod2texi.html}, etc.

For an example of using @code{pod2texi} to make Texinfo out of the
Perl documentation itself, see
@url{http://svn.savannah.gnu.org/viewvc/trunk/contrib/perldoc-all/?root=texinfo,
@file{contrib/perldoc-all}} in the Texinfo source distribution (the
output is available at @url{http://www.gnu.org/software/perl/manual}).


@node @command{texi2html}
@section @command{texi2html}: Ancestor of @command{texi2any}

@pindex texi2html

@cindex Cons, Lionel
Conceptually, the @command{texi2html} program is the parent of today's
@command{texi2any} program.  @command{texi2html} was developed
independently, originally by Lionel Cons in 1998; at the time,
@command{makeinfo} could not generate HTML@.  Many other people
contributed to @command{texi2html} over the years.

The present @command{texi2any} uses little of the actual code of
@command{texi2html}, and has quite a different basic approach to the
implementation (namely, parsing the Texinfo document into a tree), but
still, there is a family resemblance.

By design, @command{texi2any} supports nearly all the features of
@command{texi2html} in some way.  However, we did not attempt to
maintain strict compatibility, so no @command{texi2html} executable is
installed by the Texinfo package.  An approximation can be run with an
invocation like this (available as @file{util/texi2html} in the
Texinfo source):

@example
texi2any --set-customization-variable TEXI2HTML=1 ...
@end example

@noindent but, to emphasize, this is @emph{not} a drop-in replacement
for the previous @command{texi2html}.  Here are the biggest differences:

@itemize @bullet
@item Most blatantly, the command line options of @command{texi2html}
are now customization variables, for the most part.  A table of
approximate equivalents is given below.

@item The program-level customization API is very different in
@command{texi2any}.

@item Índices cannot be split.

@item Translated strings cannot be customized; we hope to introduce
this feature in @command{texi2any} in the future.

@end itemize

Aside from the last, we do not intend to reimplement these
differences.  Therefore, the route forward for authors is alter
manuals and build processes as necessary to use the new features and
methods of @command{texi2any}.  The @command{texi2html} maintainers
(one of whom is the principal author of @command{texi2any}) do not
intend to make further releases.

@cindex Options of @command{texi2html}
@cindex Command-line options of @command{texi2html}
Here is the table showing @command{texi2html} options and
corresponding @command{texi2any} customization variables.
@c (@pxref{texi2any Output Customization,, @command{texi2any} Output
@c Customization}).

@multitable {@option{--ignore-preamble-text}} {@code{IGNORE_PREAMBLE_TEXT}}
@item @option{--toc-links}            @tab @code{TOC_LINKS}
@item @option{--short-ext}            @tab @code{SHORTEXTN}
@item @option{--prefix}               @tab @code{PREFIX}
@item @option{--short-ref}            @tab @code{SHORT_REF}
@item @option{--idx-sum}              @tab @code{IDX_SUMMARY}
@item @option{--def-table}            @tab @code{DEF_TABLE}
@item @option{--ignore-preamble-text} @tab @code{IGNORE_PREAMBLE_TEXT}
@item @option{--html-xref-prefix}     @tab @code{EXTERNAL_DIR}
@item @option{--l2h}                  @tab @code{L2H}
@item @option{--l2h-l2h}              @tab @code{L2H_L2H}
@item @option{--l2h-skip}             @tab @code{L2H_SKIP}
@item @option{--l2h-tmp}              @tab @code{L2H_TMP}
@item @option{--l2h-file}             @tab @code{L2H_FILE}
@item @option{--l2h-clean}            @tab @code{L2H_CLEAN}
@item @option{--use-Nodos}            @tab @code{USE_Nodos}
@item @option{--monolithic}           @tab @code{MONOLITHIC}
@item @option{--top-file}             @tab @code{TOP_FILE}
@item @option{--toc-file}             @tab @code{TOC_FILE}
@item @option{--frames}               @tab @code{FRAMES}
@item @option{--menu}                 @tab @code{SHOW_MENU}
@item @option{--debug}                @tab @code{DEBUG}
@item @option{--doctype}              @tab @code{DOCTYPE}
@item @option{--frameset-doctype}     @tab @code{FRAMESET_DOCTYPE}
@item @option{--test}                 @tab @code{TEST}
@end multitable

@cindex @file{texi2oldapi.texi}, for @command{texi2any}
Finally, any @command{texi2html} users seeking more detailed
information can check the draft file @file{doc/texi2oldapi.texi} in
the Texinfo source repository.  It consists mainly of very rough
notes, but may still be useful to some.


@node Criando e Instalando Arquivos Info
@chapter Criando e Instalando Arquivos Info

This chapter describes how to create and install Info files.
@xref{Arquivos do Info}, for general information about the file format
itself.

@menu
* Creating an Info File::
* Instalando Um Arquivo Info::
@end menu


@node Creating an Info File
@section Creating an Info File
@cindex Creating an Info file
@cindex Info, creating an online file
@cindex Formatting a file for Info

@code{makeinfo} is a program that converts a Texinfo file into an Info
file, HTML file, or plain text.  @code{texinfo-format-region} and
@code{texinfo-format-buffer} are GNU Emacs functions that convert
Texinfo to Info.

For information on installing the Info file in the Info system,
@pxref{Instalando Um Arquivo Info}.

@menu
* @command{makeinfo} Advantages::         @command{makeinfo} provides better error checking.
* @code{makeinfo} in Emacs::           How to run @code{makeinfo} from Emacs.
* Comandos @code{texinfo-format}::     Two Info formatting commands written
                                 in Emacs Lisp are an alternative
                                 to @code{makeinfo}.
* Batch Formatting::            How to format for Info in Emacs batch mode.
* Tag and Split Files::         How tagged and split files help Info
                                 to run better.
@end menu


@node @command{makeinfo} Advantages
@subsection @code{makeinfo} Advantages

@anchor{makeinfo advantages}@c old name

The @code{makeinfo} utility creates an Info file from a Texinfo source
providing better error messages than either of the Emacs formatting
commands.  We recommend it.  The @code{makeinfo} program is
independent of Emacs.  You can run @code{makeinfo} in any of three
ways: from an operating system shell, from a shell inside Emacs, or by
typing the @kbd{C-c C-m C-r} or the @kbd{C-c C-m C-b} command in
Texinfo mode in Emacs.

The @code{texinfo-format-region} and the @code{texinfo-format-buffer}
commands may be useful if you cannot run @code{makeinfo}.


@node @code{makeinfo} in Emacs
@subsection Running @code{makeinfo} Within Emacs

@c anchor{makeinfo in Emacs}@c prev name
@cindex Running @code{makeinfo} in Emacs
@cindex @code{makeinfo} inside Emacs
@cindex Shell, running @code{makeinfo} in

You can run @code{makeinfo} in GNU Emacs Texinfo mode by using either the
@code{makeinfo-region} or the @code{makeinfo-buffer} commands.  In
Texinfo mode, the commands are bound to @kbd{C-c C-m C-r} and @kbd{C-c
C-m C-b} by default.

@table @kbd
@item C-c C-m C-r
@itemx M-x makeinfo-region
Format the current region for Info.
@findex makeinfo-region

@item C-c C-m C-b
@itemx M-x makeinfo-buffer
Format the current buffer for Info.
@findex makeinfo-buffer
@end table

When you invoke @code{makeinfo-region} the output goes to a temporary
buffer.  When you invoke @code{makeinfo-buffer} output goes to the
file set with @code{@@setfilename} (@pxref{@code{@@setfilename}}).

The Emacs @code{makeinfo-region} and @code{makeinfo-buffer} commands
run the @code{makeinfo} program in a temporary shell buffer.  If
@code{makeinfo} finds any errors, Emacs displays the error messages in
the temporary buffer.

@cindex Errors, parsing
@cindex Parsing errors
@findex next-error
You can parse the error messages by typing @kbd{C-x `}
(@code{next-error}).  This causes Emacs to go to and position the
cursor on the line in the Texinfo source that @code{makeinfo} thinks
caused the error.  @xref{Compilation, , Running @code{make} or
Compilers Generally, emacs, The GNU Emacs Manual}, for more
information about using the @code{next-error} command.

In addition, you can kill the shell in which the @code{makeinfo}
command is running or make the shell buffer display its most recent
output.

@table @kbd
@item C-c C-m C-k
@itemx M-x makeinfo-kill-job
@findex makeinfo-kill-job
Kill the current running @code{makeinfo} job
(from @code{makeinfo-region} or @code{makeinfo-buffer}).

@item C-c C-m C-l
@itemx M-x makeinfo-recenter-output-buffer
@findex makeinfo-recenter-output-buffer
Redisplay the @code{makeinfo} shell buffer to display its most recent
output.
@end table

@noindent
(Note that the parallel commands for killing and recentering a @TeX{}
job are @kbd{C-c C-t C-k} and @kbd{C-c C-t C-l}.  @xref{Modo Texinfo
Printing}.)

You can specify options for @code{makeinfo} by setting the
@code{makeinfo-options} variable with either the @kbd{M-x
customize} or the @kbd{M-x set-variable} command, or by setting the
variable in your @file{.emacs} initialization file.

For example, you could write the following in your @file{.emacs} file:

@example
@group
(setq makeinfo-options
     "--paragraph-indent=0 --no-split
      --fill-column=70 --verbose")
@end group
@end example

@noindent
@c Writing these three cross-references using xref results in
@c three references to the same named manual, which looks strange.
@iftex
For more information, see @ref{@command{makeinfo} Options}, as well as
``Easy Customization Interface,'' ``Examining and Setting Variables,''
and ``Init File'' in @cite{The GNU Emacs Manual}.
@end iftex
@ifnottex
For more information, see@*
@ref{Easy Customization, , Easy Customization Interface, emacs, The GNU Emacs Manual},@*
@ref{Examining, , Examining and Setting Variables, emacs, The GNU Emacs Manual},@*
@ref{Init File, , , emacs, The GNU Emacs Manual}, and@*
@ref{@command{makeinfo} Options}.
@end ifnottex


@node Comandos @code{texinfo-format}
@subsection The @code{texinfo-format@dots{}} Commands

@c anchor{texinfo-format commands}@c prev name

In GNU Emacs in Texinfo mode, you can format part or all of a Texinfo
file with the @code{texinfo-format-region} command.  This formats the
current region and displays the formatted text in a temporary buffer
called @samp{*Info Region*}.

Similarly, you can format a buffer with the
@code{texinfo-format-buffer} command.  This command creates a new
buffer and generates the Info file in it.  Typing @kbd{C-x C-s} will
save the Info file under the name specified by the
@code{@@setfilename} line which must be near the beginning of the
Texinfo file.

@table @kbd
@item C-c C-e C-r
@itemx @code{texinfo-format-region}
@findex texinfo-format-region
Format the current region for Info.

@item C-c C-e C-b
@itemx @code{texinfo-format-buffer}
@findex texinfo-format-buffer
Format the current buffer for Info.
@end table

The @code{texinfo-format-region} and @code{texinfo-format-buffer}
commands provide you with some error checking, and other functions can
provide you with further help in finding formatting errors.  These
procedures are described in an appendix; see @ref{Capturando Erros}.
However, the @code{makeinfo} program provides better error checking
(@pxref{@code{makeinfo} in Emacs}).

A peculiarity of the @code{texinfo-format-buffer} and
@code{texinfo-format-region} commands is that they do not indent (nor
fill) paragraphs that contain @code{@@w} or @code{@@*} commands.


@node Batch Formatting
@subsection Batch Formatting
@cindex Batch formatting for Info
@cindex Info batch formatting

You can format Texinfo files for Info using @code{batch-texinfo-format}
and Emacs batch mode.  You can run Emacs in batch mode from any shell,
including a shell inside of Emacs.  (@xref{Initial Options,,,
emacs, The GNU Emacs Manual}.)

Here is a shell command to format all the files that end in
@file{.texinfo} in the current directory:

@example
emacs -batch -funcall batch-texinfo-format *.texinfo
@end example

@noindent
Emacs processes all the files listed on the command line, even if an
error occurs while attempting to format some of them.

Run @code{batch-texinfo-format} only with Emacs in batch mode as shown;
it is not interactive.  It kills the batch mode Emacs on completion.

@code{batch-texinfo-format} is convenient if you lack @code{makeinfo}
and want to format several Texinfo files at once.  When you use Batch
mode, you create a new Emacs process.  This frees your current Emacs, so
you can continue working in it.  (When you run
@code{texinfo-format-region} or @code{texinfo-format-buffer}, you cannot
use that Emacs for anything else until the command finishes.)

@node Tag and Split Files
@subsection Tag Files and Split Files
@cindex Making a tag table automatically
@cindex Tag table, making automatically

If a Texinfo file has more than 30,000 bytes,
@code{texinfo-format-buffer} automatically creates a tag table
for its Info file; @code{makeinfo} always creates a tag table.  With
a @dfn{tag table}, Info can jump to new Nodos more quickly than it can
otherwise.

@cindex Indirect subfiles
In addition, if the Texinfo file contains more than about 300,000
bytes, @code{texinfo-format-buffer} and @code{makeinfo} split the
large Info file into shorter @dfn{indirect} subfiles of about 300,000
bytes each.  Big files are split into smaller files so that Emacs does
not need to make a large buffer to hold the whole of a large Info
file; instead, Emacs allocates just enough memory for the small, split-off
file that is needed at the time.  This way, Emacs avoids wasting
memory when you run Info.  (Before splitting was implemented, Info
files were always kept short and @dfn{include files} were designed as
a way to create a single, large printed manual out of the smaller Info
files.  @xref{Arquivos Include}, for more information.  Include files are
still used for very large documents, such as @cite{The Emacs Lisp
Reference Manual}, in which each chapter is a separate file.)

When a file is split, Info itself makes use of a shortened version of
the original file that contains just the tag table and references to
the files that were split off.  The split-off files are called
@dfn{indirect} files.

The split-off files have names that are created by appending @w{@samp{-1}},
@w{@samp{-2}}, @w{@samp{-3}} and so on to the file name specified by the
@code{@@setfilename} command.  The shortened version of the original file
continues to have the name specified by @code{@@setfilename}.

At one stage in writing this document, for example, the Info file was saved
as the file @file{test-texinfo} and that file looked like this:

@example
@group
Info file: test-texinfo,    -*-Text-*-
produced by texinfo-format-buffer
from file: new-texinfo-manual.texinfo

^_
Indirect:
test-texinfo-1: 102
test-texinfo-2: 50422
@end group
@group
test-texinfo-3: 101300
^_^L
Tag table:
(Indirect)
Node: overview^?104
Node: info file^?1271
@end group
@group
Node: printed manual^?4853
Node: conventions^?6855
@dots{}
@end group
@end example

@noindent
(But @file{test-texinfo} had far more Nodos than are shown here.)  Each of
the split-off, indirect files, @file{test-texinfo-1},
@file{test-texinfo-2}, and @file{test-texinfo-3}, is listed in this file
after the line that says @samp{Indirect:}.  The tag table is listed after
the line that says @samp{Tag table:}.

In the list of indirect files, the number following the file name
records the cumulative number of bytes in the preceding indirect
files, not counting the file list itself, the tag table, or any
permissions text in the first file.  In the tag table, the number
following the node name records the location of the beginning of the
node, in bytes from the beginning of the (unsplit) output.

If you are using @code{texinfo-format-buffer} to create Info files,
you may want to run the @code{Info-validate} command.  (The
@code{makeinfo} command does such a good job on its own, you do not
need @code{Info-validate}.)  However, you cannot run the @kbd{M-x
Info-validate} node-checking command on indirect files.  For
information on how to prevent files from being split and how to
validate the structure of the Nodos, see @ref{Using
@code{Info-validate}}.


@node Instalando Um Arquivo Info
@section Instalando Um Arquivo Info
@cindex Instalando Um Arquivo Info
@cindex Info file installation
@cindex @file{dir} directory for Info installation

Info files are usually kept in the @file{info} directory.  You can
read Info files using the standalone Info program or the Info reader
built into Emacs.  (@xref{Top,,, info, Info}, for an introduction to
Info.)

@menu
* Directory File::              The top level menu for all Info files.
* New Info File::               Listing a new Info file.
* Other Info Directories::      How to specify Info files that are
                                 located in other directories.
* Installing Dir Entries::      How to specify what menu entry to add
                                 to the Info directory.
* Invoking @command{install-info}::       @code{install-info} options.
@end menu


@node Directory File
@subsection The Directory File @file{dir}

For Info to work, the @file{info} directory must contain a file that
serves as a top level directory for the Info system.  By convention,
this file is called @file{dir}.  (You can find the location of this file
within Emacs by typing @kbd{C-h i} to enter Info and then typing
@kbd{C-x C-f} to see the pathname to the @file{info} directory.)

The @file{dir} file is itself an Info file.  It contains the top level
menu for all the Info files in the system.  The menu looks like
this:

@example
@group
* Menu:
* Info:    (info).     Documentation browsing system.
* Emacs:   (emacs).    The extensible, self-documenting
                      text editor.
* Texinfo: (texinfo).  With one source file, make
                      either a printed manual using
                      @@TeX@{@} or an Info file.
@dots{}
@end group
@end example

Each of these menu entries points to the `Top' node of the Info file
that is named in parentheses.  (The menu entry does not need to
specify the `Top' node, since Info goes to the `Top' node if no node
name is mentioned.  @xref{Outros Arquivos Info, , Nodos in Other Info
Files}.)

Thus, the @samp{Info} entry points to the `Top' node of the
@file{info} file and the @samp{Emacs} entry points to the `Top' node
of the @file{emacs} file.

In each of the Info files, the `Up' pointer of the `Top' node refers
back to the @code{dir} file.  For example, the line for the `Top'
node of the Emacs manual looks like this in Info:

@example
File: emacs  Node: Top, Up: (DIR), Next: Distrib
@end example

@noindent
In this case, the @file{dir} file name is written in uppercase
letters---it can be written in either upper- or lowercase.  This is not
true in general, it is a special case for @file{dir}.


@node New Info File
@subsection Listing a New Info File
@cindex Adding a new Info file
@cindex Listing a new Info file
@cindex New Info file, listing it in @file{dir} file
@cindex Info file, listing a new
@cindex @file{dir} file listing

To add a new Info file to your system, you must write a menu entry to
add to the menu in the @file{dir} file in the @file{info} directory.
For example, if you were adding documentation for GDB, you would write
the following new entry:

@example
* GDB: (gdb).           The source-level C debugger.
@end example

@noindent
The first part of the menu entry is the menu entry name, followed by a
colon.  The second part is the name of the Info file, in parentheses,
followed by a period.  The third part is the description.

The name of an Info file often has a @file{.info} extension.  Thus, the
Info file for GDB might be called either @file{gdb} or @file{gdb.info}.
The Info reader programs automatically try the file name both with and
without @file{.info}@footnote{On MS-DOS/MS-Windows systems, Info will
try the @file{.inf} extension as well.}; so it is better to avoid
clutter and not to write @samp{.info} explicitly in the menu entry.  For
example, the GDB menu entry should use just @samp{gdb} for the file
name, not @samp{gdb.info}.


@node Other Info Directories
@subsection Arquivos do Info in Other Directories
@cindex Installing Info in another directory
@cindex Info installed in another directory
@cindex Another Info directory
@cindex @file{dir} files and Info directories

If an Info file is not in the @file{info} directory, there are three
ways to specify its location:

@enumerate
@item
Write the pathname in the @file{dir} file as the second part of the menu.

@item
Specify the Info directory name in the @code{INFOPATH} environment
variable in your @file{.profile} or @file{.cshrc} initialization file.
(Only you and others who set this environment variable will be able to
find Info files whose location is specified this way.)

@item
If you are using Emacs, list the name of the file in a second @file{dir}
file, in its directory; and then add the name of that directory to the
@code{Info-directory-list} variable in your personal or site
initialization file.

This variable tells Emacs where to look for @file{dir} files (the files
must be named @file{dir}).  Emacs merges the files named @file{dir} from
each of the listed directories.  (In Emacs version 18, you can set the
@code{Info-directory} variable to the name of only one
directory.)
@end enumerate

For example, to reach a test file in the @file{/home/bob/info}
directory, you could add an entry like this to the menu in the
standard @file{dir} file:

@example
* Test: (/home/bob/info/info-test).  Bob's own test file.
@end example

@noindent
In this case, the absolute file name of the @file{info-test} file is
written as the second part of the menu entry.

@vindex INFOPATH
@cindex Environment variable @code{INFOPATH}
If you don't want to edit the system @file{dir} file, you can tell
Info where to look by setting the @code{INFOPATH} environment variable
in your shell startup file.  This works with both the Emacs and
standalone Info readers.

Specifically, if you use a Bourne-compatible shell such as @code{sh}
or @code{bash} for your shell command interpreter, you set the
@code{INFOPATH} environment variable in the @file{.profile}
initialization file; but if you use @code{csh} or @code{tcsh}, you set
the variable in the @file{.cshrc} initialization file.  On
MS-DOS/MS-Windows systems, you must set @code{INFOPATH} in your
@file{autoexec.bat} file or in the registry.  Each type of shell uses
a different syntax.

@itemize @bullet
@item
In a @file{.cshrc} file, you could set the @code{INFOPATH}
variable as follows:

@smallexample
setenv INFOPATH .:~/info:/usr/local/emacs/info
@end smallexample

@item
In a @file{.profile} file, you would achieve the same effect by writing:

@smallexample
INFOPATH=.:$HOME/info:/usr/local/emacs/info
export INFOPATH
@end smallexample

@item
@pindex autoexec.bat
In a @file{autoexec.bat} file, you write this command (note the
use of @samp{;} as the directory separator, and a different syntax for
using values of other environment variables):

@smallexample
set INFOPATH=.;%HOME%/info;c:/usr/local/emacs/info
@end smallexample
@end itemize

@noindent
The @samp{.} indicates the current directory as usual.  Emacs uses the
@code{INFOPATH} environment variable to initialize the value of Emacs's
own @code{Info-directory-list} variable.  The standalone Info reader
merges any files named @file{dir} in any directory listed in the
@env{INFOPATH} variable into a single menu presented to you in the node
called @samp{(dir)Top}.

@cindex Colon, last in @env{INFOPATH}
However you set @env{INFOPATH}, if its last character is a colon (on
MS-DOS/MS-Windows systems, use a semicolon instead), this is replaced
by the default (compiled-in) path.  This gives you a way to augment
the default path with new directories without having to list all the
standard places.  For example (using @code{sh} syntax):

@example
INFOPATH=/home/bob/info:
export INFOPATH
@end example

@noindent
will search @file{/home/bob/info} first, then the standard directories.
Leading or doubled colons are not treated specially.

@cindex @file{dir} file, creating your own
When you create your own @file{dir} file for use with
@code{Info-directory-list} or @env{INFOPATH}, it's easiest to start by
copying an existing @file{dir} file and replace all the text after the
@samp{* Menu:} with your desired entries.  That way, the punctuation
and special @kbd{CTRL-_} characters that Info needs will be present.

As one final alternative, which works only with Emacs Info, you can
change the @code{Info-directory-list} variable.  For example:

@example
(add-hook 'Info-mode-hook '(lambda ()
	     (add-to-list 'Info-directory-list
			  (expand-file-name "~/info"))))
@end example


@node Installing Dir Entries
@subsection Installing Info Directory Files

When you install an Info file onto your system, you can use the program
@code{install-info} to update the Info directory file @file{dir}.
Normally the makefile for the package runs @code{install-info}, just
after copying the Info file into its proper installed location.

@findex dircategory
@findex direntry
In order for the Info file to work with @code{install-info}, you include
the commands @code{@@dircategory} and
@code{@@direntry}@dots{}@code{@@end direntry} in the Texinfo source
file.  Use @code{@@direntry} to specify the menu entries to add to the
Info directory file, and use @code{@@dircategory} to specify which part
of the Info directory to put it in.  Here is how these commands are used
in this manual:

@smallexample
@@dircategory Texinfo documentation system
@@direntry
* Texinfo: (texinfo).           The GNU documentation format.
* install-info: (texinfo)Invoking install-info. @dots{}
@dots{}
@@end direntry
@end smallexample

Here's what this produces in the Info file:

@smallexample
INFO-DIR-SECTION Texinfo documentation system
START-INFO-DIR-ENTRY
* Texinfo: (texinfo).           The GNU documentation format.
* install-info: (texinfo)Invoking install-info. @dots{}
@dots{}
END-INFO-DIR-ENTRY
@end smallexample

@noindent
The @code{install-info} program sees these lines in the Info file, and
that is how it knows what to do.

Always use the @code{@@direntry} and @code{@@dircategory} commands near
the beginning of the Texinfo input, before the first @code{@@node}
command.  If you use them later on in the input, @code{install-info}
will not notice them.

@code{install-info} will automatically reformat the description of the
menu entries it is adding.  As a matter of convention, the description
of the main entry (above, @samp{The GNU documentation format}) should
start at column 32, starting at zero (as in
@code{what-cursor-position} in Emacs).  This will make it align with
most others.  Description for individual utilities best start in
column 48, where possible.  For more information about formatting see
the @samp{--calign}, @samp{--align}, and @samp{--max-width} options in
@ref{Invoking @command{install-info}}.

If you use @code{@@dircategory} more than once in the Texinfo source,
each usage specifies the `current' category; any subsequent
@code{@@direntry} commands will add to that category.

@cindex Free Software Directory
@cindex Dir categories, choosing
@cindex Categories, choosing
When choosing a category name for the @code{@@dircategory} command, we
recommend consulting the @uref{http://www.gnu.org/directory,
Free Software Directory}.  If your program is not listed there,
or listed incorrectly or incompletely, please report the situation to
the directory maintainers (@url{http://directory.fsf.org}) so that the
category names can be kept in sync.

Here are a few examples (see the @file{util/dir-example} file in the
Texinfo distribution for large sample @code{dir} file):

@display
Emacs
Localization
Printing
Software development
Software libraries
Text creation and manipulation
@end display

@cindex Invoking Nodos, including in dir file
Each `Invoking' node for every program installed should have a
corresponding @code{@@direntry}.  This lets users easily find the
documentation for the different programs they can run, as with the
traditional @command{man} system.


@node Invoking @command{install-info}
@subsection Invoking @command{install-info}

@pindex install-info

@code{install-info} inserts menu entries from an Info file into the
top-level @file{dir} file in the Info system (see the previous sections
for an explanation of how the @file{dir} file works).  @code{install-info}
also removes menu entries from the @file{dir} file.  It's most often
run as part of software installation, or when constructing a @file{dir} file
for all manuals on a system.  Synopsis:

@example
install-info [@var{option}@dots{}] [@var{info-file} [@var{dir-file}]]
@end example

If @var{info-file} or @var{dir-file} are not specified, the options
(described below) that define them must be.  There are no compile-time
defaults, and standard input is never used.  @code{install-info} can
read only one Info file and write only one @file{dir} file per invocation.

@cindex @file{dir}, created by @code{install-info}
If @var{dir-file} (however specified) does not exist,
@code{install-info} creates it if possible (with no entries).

@cindex Compressed dir files, reading
@cindex XZ-compressed dir files, reading
@cindex Bzipped dir files, reading
@cindex Lzip-compressed dir files, reading
@cindex LZMA-compressed dir files, reading
@cindex Dir files, compressed
If any input file is compressed with @code{gzip} (@pxref{Top,,, gzip,
Gzip}), @code{install-info} automatically uncompresses it for reading.
And if @var{dir-file} is compressed, @code{install-info} also
automatically leaves it compressed after writing any changes.  If
@var{dir-file} itself does not exist, @code{install-info} tries to
open @file{@var{dir-file}.gz}, @file{@var{dir-file}.xz},
@file{@var{dir-file}.bz2}, @file{@var{dir-file}.lz}, and
@file{@var{dir-file}.lzma}, in that order.

Options:

@table @code
@item --add-once
@opindex --add-once@r{, for @command{install-info}}
Specifies that the entry or entries will only be put into a single section.

@item --align=@var{column}
@opindex --align=@var{column}@r{, for @command{install-info}}
Specifies the column that the second and subsequent lines of menu entry's
description will be formatted to begin at.  The default for this option is
@samp{35}.  It is used in conjunction with the @samp{--max-width} option.
@var{column} starts counting at 1.

@item --append-new-sections
@opindex --append-new-sections@r{, for @command{install-info}}
Instead of alphabetizing new sections, place them at the end of the DIR file.

@item --calign=@var{column}
@opindex --calign=@var{column}@r{, for @command{install-info}}
Specifies the column that the first line of menu entry's description will
be formatted to begin at.  The default for this option is @samp{33}.  It is
used in conjunction with the @samp{--max-width} option.
When the name of the menu entry exceeds this column, entry's description
will start on the following line.
@var{column} starts counting at 1.

@item --debug
@opindex --debug@r{, for @command{install-info}}
Report what is being done.

@item --delete
@opindex --delete@r{, for @command{install-info}}
Delete the entries in @var{info-file} from @var{dir-file}.  The file
name in the entry in @var{dir-file} must be @var{info-file} (except for
an optional @samp{.info} in either one).  Don't insert any new entries.
Any empty sections that result from the removal are also removed.

@item --description=@var{text}
@opindex --description=@var{text}@r{, for @command{install-info}}
Specify the explanatory portion of the menu entry.  If you don't specify
a description (either via @samp{--entry}, @samp{--item} or this option),
the description is taken from the Info file itself.

@item --dir-file=@var{name}
@opindex --dir-file=@var{name}@r{, for @command{install-info}}
Specify file name of the Info directory file.  This is equivalent to
using the @var{dir-file} argument.

@item --dry-run
@opindex --dry-run@r{, for @command{install-info}}
Same as @samp{--test}.

@item --entry=@var{text}
@opindex --entry=@var{text}@r{, for @command{install-info}}
Insert @var{text} as an Info directory entry; @var{text} should have the
form of an Info menu item line plus zero or more extra lines starting
with whitespace.  If you specify more than one entry, they are all
added.  If you don't specify any entries, they are determined from
information in the Info file itself.

@item --help
@opindex --help@r{, for @command{texindex}}
Display a usage message with basic usage and all available options,
then exit successfully.

@item --info-file=@var{file}
@opindex --info-file=@var{file}@r{, for @command{install-info}}
Specify Info file to install in the directory.  This is
equivalent to using the @var{info-file} argument.

@item --info-dir=@var{dir}
@opindex --info-dir=@var{dir}@r{, for @command{install-info}}
Specify the directory where the directory file @file{dir} resides.
Equivalent to @samp{--dir-file=@var{dir}/dir}.

@item --infodir=@var{dir}
@opindex --infodir=@var{dir}@r{, for @command{install-info}}
Same as @samp{--info-dir}.

@item --item=@var{text}
@opindex --item=@var{text}@r{, for @command{install-info}}
Same as @samp{--entry=@var{text}}.  An Info directory entry is actually
a menu item.

@item --keep-old
@opindex --keep-old@r{, for @command{install-info}}
Do not replace pre-existing menu entries.  When @samp{--remove} is specified,
this option means that empty sections are not removed.

@item --max-width=@var{column}
@opindex --max-width=@var{column}@r{, for @command{install-info}}
Specifies the column that the menu entry's description will be word-wrapped
at.  @var{column} starts counting at 1.

@item --maxwidth=@var{column}
@opindex --maxwidth=@var{column}@r{, for @command{install-info}}
Same as @samp{--max-width}.

@item --menuentry=@var{text}
@opindex --menuentry=@var{text}@r{, for @command{install-info}}
Same as @samp{--name}.

@item --name=@var{text}
@opindex --name=@var{text}@r{, for @command{install-info}}
Specify the name portion of the menu entry.  If the @var{text} does
not start with an asterisk @samp{*}, it is presumed to be the text
after the @samp{*} and before the parentheses that specify the Info
file.  Otherwise @var{text} is taken verbatim, and is taken as
defining the text up to and including the first period (a space is
appended if necessary).  If you don't specify the name (either via
@samp{--entry}, @samp{--item} or this option), it is taken from the
Info file itself.  If the Info does not contain the name, the basename
of the Info file is used.

@item --no-indent
@opindex --no-indent@r{, for @command{install-info}}
Suppress formatting of new entries into the @file{dir} file.

@item --quiet
@itemx --silent
@opindex --quiet@r{, for @command{install-info}}
@opindex --silent@r{, for @command{install-info}}
Suppress warnings, etc., for silent operation.

@item --remove
@opindex --remove@r{, for @command{install-info}}
Same as @samp{--delete}.

@item --remove-exactly
@opindex --remove-exactly@r{, for @command{install-info}}
Also like @samp{--delete}, but only entries if the Info file name
matches exactly; @code{.info} and/or @code{.gz} suffixes are
@emph{not} ignored.

@item --section=@var{sec}
@opindex --section=@var{sec}@r{, for @command{install-info}}
Put this file's entries in section @var{sec} of the directory.  If you
specify more than one section, all the entries are added in each of the
sections.  If you don't specify any sections, they are determined from
information in the Info file itself.  If the Info file doesn't specify
a section, the menu entries are put into the Miscellaneous section.

@item --section @var{regex} @var{sec}
@opindex --section @var{regex} @var{sec}@r{, for @command{install-info}}
Same as @samp{--regex=@var{regex} --section=@var{sec} --add-once}.

@code{install-info} tries to detect when this alternate syntax is used,
but does not always guess correctly.  Here is the heuristic that
@code{install-info} uses:
@enumerate
@item
If the second argument to @code{--section} starts with a hyphen, the
original syntax is presumed.

@item
If the second argument to @code{--section} is a file that can be
opened, the original syntax is presumed.

@item
Otherwise the alternate syntax is used.
@end enumerate

When the heuristic fails because your section title starts with a
hyphen, or it happens to be a filename that can be opened, the syntax
should be changed to @samp{--regex=@var{regex} --section=@var{sec}
--add-once}.

@item --regex=@var{regex}
@opindex  --regex=@var{regex}@r{, for @command{install-info}}
Put this file's entries into any section that matches @var{regex}.  If
more than one section matches, all of the entries are added in each of the
sections.  Specify @var{regex} using basic regular expression syntax, more
or less as used with @command{grep}, for example.

@item --test
@opindex --test@r{, for @command{install-info}}
Suppress updating of the directory file.

@item --version
@opindex --version@r{, for @command{install-info}}
@cindex Version number, for install-info
Display version information and exit successfully.

@end table


@node Gerando HTML
@chapter Gerando HTML

@cindex Gerando HTML
@cindex Outputting HTML

@command{makeinfo} generates Info output by default, but given the
@option{--html} option, it will generate HTML, for web browsers and
other programs.  This chapter gives some details on such HTML output.

@command{makeinfo} has many user-definable customization variables
with which you can influence the HTML output.  
@xref{Customization Variables}.

@command{makeinfo} can also produce output in XML and Docbook formats,
but we do not as yet describe these in detail.  @xref{Formatos de Saída},
for a brief overview of all the output formats.

@menu
* HTML Translation::       Details of the HTML output.
* HTML Splitting::         How HTML output is split.
* HTML CSS::               Influencing HTML output with Cascading Style Sheets.
* HTML Xref::              Cross-references in HTML output.
@end menu


@node HTML Translation
@section HTML Translation

@cindex HTML translation

@cindex HTML output, browser compatibility of
First, the HTML generated by @command{makeinfo} is standard
HTML@tie{}4.  It also tries to be compatible with earlier standards
(e.g., HTML@tie{}2.0, RFC-1866).  Thus, please report output from an
error-free run of @code{makeinfo} which has practical browser
portability problems as a bug (@pxref{Informando Defeitos}).

@pindex html32.pm
Some known exceptions to HTML@tie{}3.2 (using
@samp{--init-file=html32.pm} produces strict HTML@tie{}3.2 output;
@pxref{Invoking @command{texi2any}}):

@enumerate
@item
HTML@tie{}3.2 tables are generated for the @code{@@multitable} command
(@pxref{Tabelas Multi Colunas}), but they should degrade reasonably in
browsers without table support.

@item
The HTML@tie{}4 @samp{lang} attribute on the @samp{<html>} attribute
is used.

@item
Entities that are not in the HTML@tie{}3.2 standard are also used.

@item
CSS is used (@pxref{HTML CSS}).

@item
A few HTML@tie{}4 elements are used: @code{thead}, @code{abbr},
@code{acronym}.

@end enumerate

To achieve maximum portability and accessibility among browsers (both
graphical and text-based), systems, and users, the HTML output is
intentionally quite plain and generic.  It has always been our goal
for users to be able to customize the output to their wishes via CSS
(@pxref{HTML CSS}) or other means (@pxref{Customization Variables}.
If you cannot accomplish a reasonable customization, feel free to
report that.

However, we do not wish to depart from our basic goal of widest
readability for the core output.  For example, using fancy CSS may
make it possible for the HTML output to more closely resemble the
@TeX{} output in some details, but this result is not even close to
being worth the ensuing difficulties.

It is also intentionally not our goal, and not even possible, to pass
through every conceivable validation test without any diagnostics.
Different validation tests have different goals, often about pedantic
enforcement of some standard or another.  Our overriding goal is to
help users, not blindly comply with standards.

To repeat what was said at the top: please report output from an
error-free run of @code{makeinfo} which has @emph{practical} browser
portability problems as a bug (@pxref{Informando Defeitos}).

A few other general points about the HTML output follow.

@cindex Navigation bar, in HTML output
@strong{Navigation bar:} By default, a navigation bar is inserted at the
start of each node, analogous to Info output.  If the
@samp{--no-headers} option is used, the navigation bar is only
inserted at the beginning of split files.  Header @code{<link>}
elements in split output can support Info-like navigation with
browsers like Lynx and @w{Emacs W3} which implement this HTML@tie{}1.0
feature.

@cindex Footnote styles, in HTML
@strong{Footnotes:} for HTML, when the footnote style is @samp{end},
or if the output is not split, footnotes are put at the end of the
output.  If the footnoet style is set to @samp{separate}, and the
output is split, they are placed in a separate file.  
@xref{Estilos de Notas de Rodapé}.

@cindex Escaping to HTML
@cindex Raw HTML
@strong{Raw HTML}: @command{makeinfo} will include segments of Texinfo
source between @code{@@ifhtml} and @code{@@end ifhtml} in the HTML
output (but not any of the other Condicionais, by default).  Source
between @code{@@html} and @code{@@end html} is passed without change
to the output (i.e., suppressing the normal escaping of input
@samp{<}, @samp{>} and @samp{&} characters which have special
significance in HTML)@.  @xref{Comandos Condicionais}.


@node HTML Splitting
@section HTML Splitting
@cindex Split HTML output
@cindex HTML output, split

When splitting output at Nodos (which is the default),
@command{makeinfo} writes HTML output into (basically) one output file
per Texinfo source @code{@@node}.

Each output file name is the node name with spaces replaced by
@samp{-}'s and special characters changed to @samp{_} followed by
their code point in hex (@pxref{HTML Xref}).  This is to make it
portable and easy to use as a filename.  In the unusual case of two
different Nodos having the same name after this treatment, they are
written consecutively to the same file, with HTML anchors so each can
be referred to independently.

If @command{makeinfo} is run on a system which does not distinguish
case in file names, Nodos which are the same except for case (e.g.,
@samp{index} and @samp{Index}) will also be folded into the same
output file with anchors.  You can also pretend to be on a case
insensitive filesystem by setting the customization variable
@code{CASE_INSENSITIVE_FILENAMES}.

It is also possible to split at chapters or sections with
@option{--split} (@pxref{Invoking @command{texi2any}}).  In that case,
the file names are constructed after the name of the node associated
with the relevant sectioning command.  Also, unless
@option{--no-node-files} is specified, a redirection file is output
for every node in order to more reliably support cross-references to
that manual (@pxref{HTML Xref}).

When splitting, the HTML output files are written into a subdirectory,
with the name chosen as follows:

@enumerate
@item
@command{makeinfo} first tries the subdirectory with the base name
from @code{@@setfilename} (that is, any extension is removed).  For
example, HTML output for @code{@@setfilename gcc.info} would be
written into a subdirectory named @samp{gcc/}.

@item
If that directory cannot be created for any reason, then
@command{makeinfo} tries appending @samp{.html} to the directory name.
For example, output for @code{@@setfilename texinfo} would be written
to @samp{texinfo.html/}.

@item
If the @samp{@var{name}.html} directory can't be created either,
@code{makeinfo} gives up.

@end enumerate

@noindent In any case, the top-level output file within the directory
is always named @samp{index.html}.

Monolithic output (@code{--no-split}) is named according to
@code{@@setfilename} (with any @samp{.info} extension is replaced with
@samp{.html}), @code{--output} (the argument is used literally), or
based on the input file name as a last resort
(@pxref{@code{@@setfilename}}).


@node HTML CSS
@section HTML CSS
@cindex HTML, and CSS
@cindex CSS, and HTML output
@cindex Cascading Style Sheets, and HTML output

Cascading Style Sheets (CSS for short) is an Internet standard for
influencing the display of HTML documents: see
@uref{http://www.w3.org/Style/CSS/}.

By default, @command{makeinfo} includes a few simple CSS commands to
better implement the appearance of some Texinfo environments.  Here
are two of them, as an example:

@example
pre.display @{ font-family:inherit @}
pre.smalldisplay @{ font-family:inherit; font-size:smaller @}
@end example

A full explanation of CSS is (far) beyond this manual; please see the
reference above.  In brief, however, the above tells the web browser
to use a `smaller' font size for @code{@@smalldisplay} text, and to
use the same font as the main document for both @code{@@smalldisplay}
and @code{@@display}.  By default, the HTML @samp{<pre>} command uses
a monospaced font.

You can influence the CSS in the HTML output with two
@command{makeinfo} options: @option{--css-include=@var{file}} and
@option{--css-ref=@var{url}}.

@pindex texinfo-bright-colors.css
@cindex Visualizing Texinfo CSS
The option @option{--css-ref=@var{url}} adds to each output HTML file
a @samp{<link>} tag referencing a CSS at the given @var{url}.  This
allows using external style sheets.  You may find the file
@file{texi2html/examples/texinfo-bright-colors.css} useful for
visualizing the CSS elements in Texinfo output.

The option @option{--css-include=@var{file}} includes the contents
@var{file} in the HTML output, as you might expect.  However, the
details are somewhat tricky, as described in the following, to provide
maximum flexibility.

@cindex @samp{@@import} specifications, in CSS files
The CSS file may begin with so-called @samp{@@import} directives,
which link to external CSS specifications for browsers to use when
interpreting the document.  Again, a full description is beyond our
scope here, but we'll describe how they work syntactically, so we can
explain how @command{makeinfo} handles them.

@cindex Comentários, in CSS files
There can be more than one @samp{@@import}, but they have to come
first in the file, with only whitespace and comments interspersed, no
normal definitions.  (Technical exception: a @samp{@@charset}
directive may precede the @samp{@@import}'s.  This does not alter
@command{makeinfo}'s behavior, it just copies the @samp{@@charset} if
present.)  Comentários in CSS files are delimited by @samp{/* ... */}, as
in C@.  An @samp{@@import} directive must be in one of these two forms:

@example
@@import url(http://example.org/foo.css);
@@import "http://example.net/bar.css";
@end example

As far as @command{makeinfo} is concerned, the crucial characters are
the @samp{@@} at the beginning and the semicolon terminating the
directive.  When reading the CSS file, it simply copies any such
@samp{@@}-directive into the output, as follows:

@itemize
@item If @var{file} contains only normal CSS declarations, it is
included after @command{makeinfo}'s default CSS, thus overriding it.

@item If @var{file} begins with @samp{@@import} specifications (see
below), then the @samp{import}'s are included first (they have to come
first, according to the standard), and then @command{makeinfo}'s
default CSS is included.  If you need to override @command{makeinfo}'s
defaults from an @samp{@@import}, you can do so with the @samp{!@:
important} CSS construct, as in:
@example
pre.smallexample @{ font-size: inherit ! important @}
@end example

@item If @var{file} contains both @samp{@@import} and inline CSS
specifications, the @samp{@@import}'s are included first, then
@command{makeinfo}'s defaults, and lastly the inline CSS from
@var{file}.

@item Any @@-directive other than @samp{@@import} and @samp{@@charset}
is treated as a CSS declaration, meaning @command{makeinfo} includes
its default CSS and then the rest of the file.
@end itemize

If the CSS file is malformed or erroneous, @command{makeinfo}'s output
is unspecified.  @command{makeinfo} does not try to interpret the
meaning of the CSS file in any way; it just looks for the special
@samp{@@} and @samp{;} characters and blindly copies the text into the
output.  Comentários in the CSS file may or may not be included in the
output.

In addition to the possibilities offered by CSS, @command{makeinfo}
has many user-definable customization variables with which you can
influence the HTML output.  @xref{Customization Variables}.


@node HTML Xref
@section HTML Cross-references
@cindex HTML cross-references
@cindex Cross-references, in HTML output

Cross-references between Texinfo manuals in HTML format become, in the
end, a standard HTML @code{<a>} link, but the details are
unfortunately complex.  This section describes the algorithm used in
detail, so that Texinfo can cooperate with other programs, such as
@command{texi2html}, by writing mutually compatible HTML files.

This algorithm may or may not be used for links @emph{within} HTML
output for a Texinfo file.  Since no issues of compatibility arise in
such cases, we do not need to specify this.

We try to support references to such ``external'' manuals in both
monolithic and split forms.  A @dfn{monolithic} (mono) manual is
entirely contained in one file, and a @dfn{split} manual has a file
for each node.  (@xref{HTML Splitting}.)

@cindex Dumas, Patrice
The algorithm was primarily devised by Patrice Dumas in 2003--04.

@menu
* Básicos de Links:    Básico do Link HTML Xref.
* Expansão de Nodo:    Expansão de Nome de Nodo HTML Xref.
* Expansão de Comando: Expansão de Comando HTML Xref.
* Expansão de 8 bits:  Expansão de Caractere de 8 Bits HTML Xref.
* Incompatibilidade:   Incompatibilidade de Xref HTML.
* Configuração:        Configuração HTML Xref. htmlxref.cnf.
* Preservando links:   Preservação de Link HTML Xref. MANUAL-noderename.cnf.
@end menu


@node Básico do Link HTML Xref
@subsection HTML Cross-reference Link Basics
@cindex HTML cross-reference link basics

For our purposes, an HTML link consists of four components: a host
name, a directory part, a file part, and a target part.  We
always assume the @code{http} protocol.  For example:

@example
http://@var{host}/@var{dir}/@var{file}.html#@var{target}
@end example

The information to construct a link comes from the node name and
manual name in the cross-reference command in the Texinfo source
(@pxref{Referências Cruzadas}), and from @dfn{external information}
(@pxref{HTML Xref Configuration}).

We now consider each part in turn.

The @var{host} is hardwired to be the local host.  This could either
be the literal string @samp{localhost}, or, according to the rules for
HTML links, the @samp{http://localhost/} could be omitted entirely.

The @var{dir} and @var{file} parts are more complicated, and depend on
the relative split/mono nature of both the manual being processed and
the manual that the cross-reference refers to.  The underlying idea is
that there is one directory for Texinfo manuals in HTML, and a given
@var{manual} is either available as a monolithic file
@file{@var{manual}.html}, or a split subdirectory
@file{@var{manual}/*.html}.  Here are the cases:

@itemize @bullet
@item
If the present manual is split, and the referent manual is also split,
the directory is @samp{../@var{referent/}} and the file is the
expanded node name (described later).

@item
If the present manual is split, and the referent manual is mono, the
directory is @samp{../} and the file is @file{@var{referent}.html}.

@item
If the present manual is mono, and the referent manual is split, the
directory is @file{@var{referent}/} and the file is the expanded node
name.

@item
If the present manual is mono, and the referent manual is also mono,
the directory is @file{./} (or just the empty string), and the file is
@file{@var{referent}.html}.

@end itemize

@vindex BASEFILENAME_LENGTH
Another rule, that only holds for filenames, is that base filenames
are truncated to 245 characters, to allow for an extension to be
appended and still comply with the 255-character limit which is common
to many filesystems.  Although technically this can be changed with
the @code{BASEFILENAME_LENGTH} customization variable 
(@pxref{Outras Variáveis de Personalização}), doing so would make 
cross-manual references to such Nodos invalid.

Any directory part in the filename argument of the source cross
reference command is ignored.  Thus, @code{@@xref@{,,,../foo@}} and
@code{@@xref@{,,,foo@}} both use @samp{foo} as the manual name.  This
is because any such attempted hardwiring of the directory is very
unlikely to be useful for both Info and HTML output.

Finally, the @var{target} part is always the expanded node name.

Whether the present manual is split or mono is determined by user
option; @command{makeinfo} defaults to split, with the
@option{--no-split} option overriding this.

Whether the referent manual is split or mono, however, is another bit
of the external information (@pxref{HTML Xref Configuration}).  By
default, @command{makeinfo} uses the same form of the referent manual
as the present manual.

Thus, there can be a mismatch between the format of the referent
manual that the generating software assumes, and the format it's
actually present in.  @xref{HTML Xref Mismatch}.


@node Expansão de Nome de Nodo HTML Xref
@subsection HTML Cross-reference Node Name Expansion
@cindex HTML cross-reference node name expansion
@cindex node name expansion, in HTML cross-references
@cindex expansion, of node names in HTML cross-references

As mentioned in the previous section, the key part of the HTML cross
reference algorithm is the conversion of node names in the Texinfo
source into strings suitable for XHTML identifiers and filenames.  The
restrictions are similar for each: plain ASCII letters, numbers, and
the @samp{-} and @samp{_} characters are all that can be used.
(Although HTML anchors can contain most characters, XHTML is more
restrictive.)

Cross-references in Texinfo can refer either to Nodos or anchors
(@pxref{@code{@@anchor}}).  However, anchors are treated identically
to Nodos in this context, so we'll continue to say ``node'' names for
simplicity.

A special exception: the Top node (@pxref{O Nodo Top}) is always
mapped to the file @file{index.html}, to match web server software.
However, the HTML @emph{target} is @samp{Top}.  Thus (in the split case):

@example
@@xref@{Top,,, emacs, The GNU Emacs Manual@}.
@result{} <a href="emacs/index.html#Top">
@end example

@enumerate
@item
The standard ASCII letters (a-z and A-Z) are not modified.  All other
characters may be changed as specified below.

@item
The standard ASCII numbers (0-9) are not modified except when a number
is the first character of the node name.  In that case, see below.

@item
Multiple consecutive space, tab and newline characters are transformed
into just one space.  (It's not possible to have newlines in node
names with the current implementation, but we specify it anyway, just
in case.)

@item
Leading and trailing spaces are removed.

@item
After the above has been applied, each remaining space character is
converted into a @samp{-} character.

@item
Other ASCII 7-bit characters are transformed into @samp{_00@var{xx}},
where @var{xx} is the ASCII character code in (lowercase) hexadecimal.
This includes @samp{_}, which is mapped to @samp{_005f}.

@item
If the node name does not begin with a letter, the literal string
@samp{g_t} is prefixed to the result.  (Due to the rules above, that
string can never occur otherwise; it is an arbitrary choice, standing
for ``GNU Texinfo''.)  This is necessary because XHTML requires that
identifiers begin with a letter.

@end enumerate

For example:

@example
@@node A  node --- with _'%
@result{} A-node-_002d_002d_002d-with-_005f_0027_0025
@end example

Example translations of common characters:

@itemize @bullet
@item @samp{_} @result{} @samp{_005f}
@item @samp{-} @result{} @samp{_002d}
@item @samp{A  node} @result{} @samp{A-node}
@end itemize

On case-folding computer systems, Nodos differing only by case will be
mapped to the same file.  In particular, as mentioned above, Top
always maps to the file @file{index.html}.  Thus, on a case-folding
system, Top and a node named `Index' will both be written to
@file{index.html}.  Fortunately, the targets serve to distinguish
these cases, since HTML target names are always case-sensitive,
independent of operating system.


@node Expansão de Comando Xref HTML
@subsection HTML Cross-reference Command Expansion
@cindex HTML cross-reference command expansion

Node names may contain @@-commands (@pxref{Exigências de Linha de Nodo}).
This section describes how they are handled.

First, comments are removed.

Next, any @code{@@value} commands (@pxref{@code{@@set @@value}}) and
macro invocations (@pxref{Invoking Macros}) are fully expanded.

Then, for the following commands, the command name and braces are removed,
and the text of the argument is recursively transformed:

@example
@@asis @@b @@cite @@code @@command @@dfn @@dmn @@dotless
@@emph @@env @@file @@i @@indicateurl @@kbd @@key
@@samp @@sansserif @@sc @@slanted @@strong @@sub @@sup
@@t @@U @@var @@verb @@w
@end example

@noindent For @code{@@sc}, any letters are capitalized.

In addition, the following commands are replaced by constant text, as
shown below.  If any of these commands have non-empty arguments, as in
@code{@@TeX@{bad@}}, it is an error, and the result is unspecified.
In this table, `(space)' means a space character and `(nothing)' means
the empty string.  The notation `U+@var{hhhh}' means Unicode code
point @var{hhhh} (in hex, as usual).

There are further transformations of many of these expansions to yield
the final file or other target name, such as space characters to
@samp{-}, etc., according to the other rules.

@multitable @columnfractions .3 .5
@item @code{@@(newline)}        @tab (space)
@item @code{@@(space)}          @tab (space)
@item @code{@@(tab)}            @tab (space)
@item @code{@@!}                @tab @samp{!}
@item @code{@@*}                @tab (space)
@item @code{@@-}                @tab (nothing)
@item @code{@@.}                @tab @samp{.}
@item @code{@@:}                @tab (nothing)
@item @code{@@?}                @tab @samp{?}
@item @code{@@@@}               @tab @samp{@@}
@item @code{@@@{}               @tab @samp{@{}
@item @code{@@@}}               @tab @samp{@}}
@item @code{@@LaTeX}            @tab @samp{LaTeX}
@item @code{@@TeX}              @tab @samp{TeX}
@item @code{@@arrow}            @tab U+2192
@item @code{@@bullet}           @tab U+2022
@item @code{@@comma}            @tab @samp{,}
@item @code{@@copyright}        @tab U+00A9
@item @code{@@dots}             @tab U+2026
@item @code{@@enddots}          @tab @samp{...}
@item @code{@@equiv}            @tab U+2261
@item @code{@@error}            @tab @samp{error-->}
@item @code{@@euro}             @tab U+20AC
@item @code{@@exclamdown}       @tab U+00A1
@item @code{@@expansion}        @tab U+21A6
@item @code{@@geq}              @tab U+2265
@item @code{@@leq}              @tab U+2264
@item @code{@@minus}            @tab U+2212
@item @code{@@ordf}             @tab U+00AA
@item @code{@@ordm}             @tab U+00BA
@item @code{@@point}            @tab U+2605
@item @code{@@pounds}           @tab U+00A3
@item @code{@@print}            @tab U+22A3
@item @code{@@questiondown}     @tab U+00BF
@item @code{@@registeredsymbol} @tab U+00AE
@item @code{@@result}           @tab U+21D2
@item @code{@@textdegree}       @tab U+00B0
@item @code{@@tie}              @tab (space)
@end multitable

Quotation mark @@-commands (@code{@@quotedblright@{@}} and the like),
are likewise replaced by their Unicode values.  Normal quotation
@emph{characters} (e.g., ASCII ` and ') are not altered.
@xref{Inserindo Aspas}.

Any @code{@@acronym}, @code{@@abbr}, @code{@@email}, and
@code{@@image} commands are replaced by their first argument.  (For
these commands, all subsequent arguments are optional, and ignored
here.)  @xref{@code{@@acronym}}, and @ref{@code{@@email}}, and @ref{Imagens}.

Accents are handled according to the next section.

Any other command is an error, and the result is unspecified.


@node Expansão de Caractere de 8 bits HTML Xref
@subsection HTML Cross-reference 8-bit Character Expansion
@cindex HTML cross-reference 8-bit character expansion
@cindex 8-bit characters, in HTML cross-references
@cindex Expansion of 8-bit characters in HTML cross-references
@cindex Transliteration of 8-bit characters in HTML cross-references

Usually, characters other than plain 7-bit ASCII are transformed into
the corresponding Unicode code point(s) in Normalization Form@tie{}C,
which uses precomposed characters where available.  (This is the
normalization form recommended by the W3C and other bodies.)  This
holds when that code point is @code{0xffff} or less, as it almost
always is.

These will then be further transformed by the rules above into the
string @samp{_@var{hhhh}}, where @var{hhhh} is the code point in hex.

For example, combining this rule and the previous section:

@example
@@node @@b@{A@} @@TeX@{@} @@u@{B@} @@point@{@}@@enddots@{@}
@result{} A-TeX-B_0306-_2605_002e_002e_002e
@end example

Notice: 1)@tie{}@code{@@enddots} expands to three periods which in
turn expands to three @samp{_002e}'s; 2)@tie{}@code{@@u@{B@}} is a `B'
with a breve accent, which does not exist as a pre-accented Unicode
character, therefore expands to @samp{B_0306} (B with combining
breve).

When the Unicode code point is above @code{0xffff}, the transformation
is @samp{__@var{xxxxxx}}, that is, two leading underscores followed by
six hex digits.  Since Unicode has declared that their highest code
point is @code{0x10ffff}, this is sufficient.  (We felt it was better
to define this extra escape than to always use six hex digits, since
the first two would nearly always be zeros.)

This method works fine if the node name consists mostly of ASCII
characters and contains only few 8-bit ones.  But if the document is
written in a language whose script is not based on the Latin alphabet
(for example, Ukrainian), it will create file names consisting almost
entirely of @samp{_@var{xxxx}} notations, which is inconvenient and
all but unreadable.  To handle such cases, @command{makeinfo} offers
the @option{--transliterate-file-names} command line option.  This
option enables @dfn{transliteration} of node names into ASCII
characters for the purposes of file name creation and referencing.
The transliteration is based on phonetic principles, which makes the
generated file names more easily understanable.

@cindex Normalization Form C, Unicode
For the definition of Unicode Normalization Form@tie{}C, see Unicode
report UAX#15, @uref{http://www.unicode.org/reports/tr15/}.  Many
related documents and implementations are available elsewhere on the
web.


@node Incompatibilidade de Xref HTML
@subsection HTML Cross-reference Mismatch
@cindex HTML cross-reference mismatch
@cindex Mismatched HTML cross-reference source and target

As mentioned earlier (@pxref{Básico do Link HTML Xref}), the generating
software may need to guess whether a given manual being cross
referenced is available in split or monolithic form---and, inevitably,
it might guess wrong.  However, when the @emph{referent} manual is
generated, it is possible to handle at least some mismatches.

In the case where we assume the referent is split, but it is actually
available in mono, the only recourse would be to generate a
@file{manual/} subdirectory full of HTML files which redirect back to
the monolithic @file{manual.html}.  Since this is essentially the same
as a split manual in the first place, it's not very appealing.

On the other hand, in the case where we assume the referent is mono,
but it is actually available in split, it is possible to use
JavaScript to redirect from the putatively monolithic
@file{manual.html} to the different @file{manual/node.html} files.
Here's an example:

@example
function redirect() @{
  switch (location.hash) @{
    case "#Node1":
      location.replace("manual/Node1.html#Node1"); break;
    case "#Node2" :
      location.replace("manual/Node2.html#Node2"); break;
    @dots{}
    default:;
  @}
@}
@end example

Then, in the @code{<body>} tag of @file{manual.html}:

@example
<body onLoad="redirect();">
@end example

Once again, this is something the software which generated the
@emph{referent} manual has to do in advance, it's not something the
software generating the cross-reference in the present manual can
control.


@node Configuração HTML Xref
@subsection HTML Cross-reference Configuration: @file{htmlxref.cnf}

@pindex htmlxref.cnf
@cindex HTML cross-reference configuration
@cindex Cross-reference configuration, for HTML
@cindex Configuration, for HTML cross-manual references

@command{makeinfo} reads a file named @file{htmlxref.cnf} to gather
information for cross-references to other manuals in HTML output.  It
is looked for in the following directories:

@table @file
@item ./
(the current directory)

@item ./.texinfo/
(under the current directory)

@item ~/.texinfo/
(where @code{~} is the current user's home directory)

@item @var{sysconfdir}/texinfo/
(where @var{sysconfdir} is the system configuration directory
specified at compile-time, e.g., @file{/usr/local/etc})

@item @var{datadir}/texinfo/
(likewise specified at compile time, e.g., @file{/usr/local/share})
@end table

All files found are used, with earlier entries overriding later ones.
The Texinfo distribution includes a default file which handles many
GNU manuals; it is installed in the last of the above directories,
i.e., @file{@var{datadir}/texinfo/htmlxref.cnf}.

The file is line-oriented.  Lines consisting only of whitespace are
ignored.  Comentários are indicated with a @samp{#} at the beginning of a
line, optionally preceded by whitespace.  Since @samp{#} can occur in
urls (like almost any character), it does not otherwise start a
comment.

Each non-blank non-comment line must be either a @dfn{variable
assignment} or @dfn{manual information}.

A variable assignment line looks like this:

@example
@var{varname} = @var{varvalue}
@end example

Whitespace around the @samp{=} is optional and ignored.  The
@var{varname} should consist of letters; case is significant.  The
@var{varvalue} is an arbitrary string, continuing to the end of the
line.  Variables are then referenced with @samp{$@{@var{varname}@}};
variable references can occur in the @var{varvalue}.

A manual information line looks like this:

@example
@var{manual} @var{keyword} @var{urlprefix}
@end example

@noindent
with @var{manual} the short identifier for a manual, @var{keyword}
being one of: @code{mono}, @code{node}, @code{section},
@code{chapter}, and @var{urlprefix} described below.  Variable
references can occur only in the @var{urlprefix}.  For example (used
in the canonical @file{htmlxref.cnf}):

@smallexample
G = http://www.gnu.org
GS = $@{G@}/software
hello mono    $@{GS@}/hello/manual/hello.html
hello chapter $@{GS@}/hello/manual/html_chapter/
hello section $@{GS@}/hello/manual/html_section/
hello node    $@{GS@}/hello/manual/html_node/
@end smallexample

@cindex monolithic manuals, for HTML cross-references
If the keyword is @code{mono}, @var{urlprefix} gives the host,
directory, and file name for @var{manual} as one monolithic file.

@cindex split manuals, for HTML cross-references
If the keyword is @code{node}, @code{section}, or @code{chapter},
@var{urlprefix} gives the host and directory for @var{manual} split
into Nodos, sections, or chapters, respectively.

When available, @command{makeinfo} will use the ``corresponding''
value for cross-references between manuals.  That is, when generating
monolithic output (@option{--no-split}), the @code{mono} url will be
used, when generating output that is split by node, the @code{node}
url will be used, etc.  However, if a manual is not available in that
form, anything that is available can be used.  Here is the search
order for each style:

@smallexample
node    @result{} node,    section, chapter, mono
section @result{} section, chapter, node,    mono
chapter @result{} chapter, section, node,    mono
mono    @result{} mono,    chapter, section, node
@end smallexample

@opindex --node-files@r{, and HTML cross-references}
These section- and chapter-level cross-manual references can succeed
only when the target manual was created using @option{--node-files};
this is the default for split output.

If you have additions or corrections to the @file{htmlxref.cnf}
distributed with Texinfo, please email @email{bug-texinfo@@gnu.org} as
usual.  You can get the latest version from
@url{http://ftpmirror.gnu.org/@/texinfo/@/htmlxref.cnf}.


@node Preservação de Link HTML Xref
@subsection HTML Cross-reference Link Preservation: @var{manual}@file{-noderename.cnf}

@pindex noderename.cnf
@pindex @var{manual}-noderename.cnf
@cindex HTML cross-reference link preservation
@cindex Preserving HTML links to old Nodos
@cindex Old Nodos, preserving links to
@cindex Renaming Nodos, and preserving links
@cindex Links, preserving to renamed Nodos
@cindex Node renaming, and preserving links

Occasionally changes in a program require removing (or renaming) Nodos
in the manual in order to have the best documentation.  Given the
nature of the web, however, links may exist anywhere to such a removed
node (renaming appears the same as removal for this purpose), and it's
not ideal for those links to simply break.

@vindex RENAMED_Nodos_FILE
Therefore, Texinfo provides a way for manual authors to specify old
node names and the new Nodos to which the old names should be
redirected, via the file @var{manual}@file{-noderename.cnf}, where
@var{manual} is the base name of the manual.  For example, the manual
@file{texinfo.texi} would be supplemented by a file
@file{texinfo-noderename}.cnf.  (This name can be overridden by
setting the @file{RENAMED_Nodos_FILE} customization variable;
@pxref{Customization Variables}).

The file is read in pairs of lines, as follows:

@example
@var{old-node-name}
@@@@@{@} @var{new-node-name}
@end example

The usual conversion from Texinfo node names to HTML names is applied;
see this entire section for details (@pxref{HTML Xref}).  The unusual
@samp{@@@@@{@}} separator is used because it is not a valid Texinfo
construct, so can't appear in the node names.

The effect is that @command{makeinfo} generates a redirect from
@var{old-node-name} to @var{new-node-name} when producing HTML output.
Thus, external links to the old node are preserved.

Lines consisting only of whitespace are ignored.  Comentários are
indicated with a @samp{@@c} at the beginning of a line, optionally
preceded by whitespace.

Another approach to preserving links to deleted or renamed Nodos is to
use anchors (@pxref{@code{@@anchor}}).  There is no effective
difference between the two approaches.


@node Detalhes do Comando @@
@appendix Detalhes do Comando @@

Here are the details of @@-commands: information about their syntax, a 
list of commands, and information about where commands can appear.

@node Sintaxe de Comando
@section @@-Sintaxe de Comando
@cindex @@-command syntax
@cindex Syntax, of @@-commands
@cindex Command syntax

Texinfo has the following types of @@-command:

@table @asis
@item 1. Brace commands
These commands start with @@ followed by a letter or a word, followed by an
argument within braces.  For example, the command @code{@@dfn} indicates
the introductory or defining use of a term; it is used as follows: @samp{In
Texinfo, @@@@-commands are @@dfn@{mark-up@} commands.}

@item 2. Line commands
These commands occupy an entire line.  The line starts with @@,
followed by the name of the command (a word); for example, @code{@@center}
or @code{@@cindex}.  If no argument is needed, the word is followed by
the end of the line.  If there is an argument, it is separated from
the command name by a space.  Braces are not used.

@item 3. Block commands
These commands are written at the start of a line, with general text on
following lines, terminated by a matching @code{@@end} command on a
line of its own.  For example, @code{@@example}, then the lines of a
coding example, then @code{@@end example}.  Some of these block commands
take arguments as line commands do; for example, @code{@@enumerate A}
opening an environment terminated by @code{@@end enumerate}.  Here
@samp{A} is the argument.

@item 4. Symbol insertion commands with no arguments
These commands start with @@ followed by a word followed by a
left and right- brace.  These commands insert special symbols in
the document; they do not take arguments.  Some examples:
@code{@@dots@{@}} @result{} @samp{@dots{}}, @code{@@equiv@{@}}
@result{} @samp{@equiv{}}, @code{@@TeX@{@}} @result{} `@TeX{}', and
@code{@@bullet@{@}} @result{} @samp{@bullet{}}.

@item 5. Non-alphabetic commands
The names of commands in all of the above categories consist of
alphabetic characters, almost entirely in lower-case.  Unlike those, the
non-alphabetic commands commands consist of an @@ followed by a
punctuation mark or other character that is not part of the Latin
alphabet.  Non-alphabetic commands are almost always part of text
within a paragraph.  The non-alphabetic commands include @code{@@@@},
@code{@@@{}, @code{@@@}}, @code{@@.}, @code{@@@kbd{SPACE}}, and most of
the accent commands.

@item 6. Miscellaneous commands
There are a handful of commands that don't fit into any of the above
categories; for example, the obsolete command @code{@@refill}, which is
always used at the end of a paragraph immediately following the final
period or other punctuation character.  @code{@@refill} takes no
argument and does not require braces.  Likewise, @code{@@tab} used in a
@code{@@multitable} block does not take arguments, and is not followed 
by braces.
@end table

@cindex Braces and argument syntax
Thus, the alphabetic commands fall into classes that have
different argument syntaxes.  You cannot tell to which class a command
belongs by the appearance of its name, but you can tell by the
command's meaning: if the command stands for a glyph, it is in
class 4 and does not require an argument; if it makes sense to use the
command among other text as part of a paragraph, the command
is in class 1 and must be followed by an argument in braces.  The
non-alphabetic commands, such as @code{@@:}, are exceptions to the
rule; they do not need braces.

The purpose of having different syntax for commands is to make Texinfo
files easier to read, and also to help the GNU Emacs paragraph and
filling commands work properly.


@node Command List
@section @@-Command List
@cindex Alphabetical @@-command list
@cindex List of @@-commands
@cindex @@-command list
@cindex Reference to @@-commands

Here is an alphabetical list of the @@-commands in Texinfo.  Square
brackets, @t{[}@w{ }@t{]}, indicate optional arguments; an ellipsis,
@samp{@dots{}}, indicates repeated text.

@table @code
@item @@@var{whitespace}
An @code{@@} followed by a space, tab, or newline produces a normal,
stretchable, interword space.  @xref{Espaços Múltiplos}.

@item @@!
Produce an exclamation point that ends a sentence (usually after an
end-of-sentence capital letter).  @xref{Finalizando Uma Frase}.

@item @@"
@itemx @@'
Generate an umlaut or acute accent, respectively, over the next
character, as in @"o and @'o.  @xref{Inserindo Acentos}.

@item @@*
Force a line break.  @xref{Quebras de Linha}.

@item @@,@{@var{c}@}
Generate a cedilla accent under @var{c}, as in @,{c}.  
@xref{Inserindo Acentos}.

@item @@-
Insert a discretionary hyphenation point.  @xref{@code{@@- @@hyphenation}}.

@item @@.
Produce a period that ends a sentence (usually after an
end-of-sentence capital letter).  @xref{Finalizando Uma Frase}.

@item @@/
Produces no output, but allows a line break.  @xref{Quebras de Linha}.

@item @@:
Tell @TeX{} to refrain from inserting extra whitespace after an
immediately preceding period, question mark, exclamation mark, or
colon, as @TeX{} normally would.  @xref{Não Finalizando Uma Frase}.

@item @@=
Generate a macron (bar) accent over the next character, as in @=o.
@xref{Inserindo Acentos}.

@item @@?
Produce a question mark that ends a sentence (usually after an
end-of-sentence capital letter).  @xref{Finalizando Uma Frase}.

@item @@@@
@itemx @@atchar@{@}
Insert an at sign, @samp{@@}.  @xref{Inserindo um Símbolo Arroba}.

@item @@\
@itemx @@backslashchar@{@}
Insert a backslash, @samp{\}; @code{@@backslashchar@{@}} works
anywhere, while @code{@@\} works only inside @code{@@math}.
@xref{Inserindo uma Barra Invertida}, and @ref{Inserindo Fórmulas Matemáticas}.

@item @@^
@itemx @@`
Generate a circumflex (hat) or grave accent, respectively, over the next
character, as in @^o and @`e.
@xref{Inserindo Acentos}.

@item @@@{
@itemx @@lbracechar@{@}
Insert a left brace, @samp{@{}.  @xref{Inserindo Chaves}.

@item @@@}
@itemx @@rbracechar@{@}
Insert a right brace, @samp{@}}.  @xref{Inserindo Chaves}.

@item @@~
Generate a tilde accent over the next character, as in @~N.
@xref{Inserindo Acentos}.

@item @@AA@{@}
@itemx @@aa@{@}
Generate the uppercase and lowercase Scandinavian A-ring letters,
respectively: @AA{}, @aa{}.  @xref{Inserindo Acentos}.

@item @@abbr@{@var{abbreviation}@}
Indicate a general abbreviation, such as `Comput.'.
@xref{@code{@@abbr}}.

@item @@acronym@{@var{acronym}@}
Indicate an acronym in all capital letters, such as `NASA'.
@xref{@code{@@acronym}}.

@item @@AE@{@}
@itemx @@ae@{@}
Generate the uppercase and lowercase AE ligatures, respectively:
@AE{}, @ae{}.  @xref{Inserindo Acentos}.

@item @@afivepaper
Change page dimensions for the A5 paper size.  @xref{Papel A4}.

@item @@afourlatex
@itemx @@afourpaper
@itemx @@afourwide
Change page dimensions for the A4 paper size.  @xref{Papel A4}.

@item @@alias @var{new}=@var{existing}
Make the command @samp{@@@var{new}} a synonym for the existing command
@samp{@@@var{existing}}.  @xref{@code{@@alias}}.

@item @@allowcodebreaks @var{true-false}
Control breaking at @samp{-} and @samp{_} in @TeX{}.
@xref{@code{@@allowcodebreaks}}.

@item @@anchor@{@var{name}@}
Define @var{name} as the current location for use as a cross-reference
target.  @xref{@code{@@anchor}}.

@item @@appendix @var{title}
Begin an appendix.  The title appears in the table of contents.  In
Info, the title is underlined with asterisks.
@xref{@code{@@unnumbered @@appendix}}.

@item @@appendixsec @var{title}
@itemx @@appendixsection @var{title}
Begin an appendix section within an appendix.  The section title
appears in the table of contents.  In Info, the title is underlined
with equal signs.  @code{@@appendixsection} is a longer spelling of
the @code{@@appendixsec} command.  
@xref{@code{@@unnumberedsec @@appendixsec @@heading}}.

@item @@appendixsubsec @var{title}
Begin an appendix subsection.  The title appears in the table of
contents.  In Info, the title is underlined with hyphens.
@xref{@code{@@unnumberedsubsec @@appendixsubsec @@subheading}}.

@item @@appendixsubsubsec @var{title}
Begin an appendix subsubsection.  The title appears in the table of
contents.  In Info, the title is underlined with periods.
@xref{@code{@@subsubsection}}.

@item @@arrow@{@}
Generate a right arrow glyph: @samp{@arrow{}}.  Used by default
for @code{@@click}.  @xref{Sequências de Clique}.

@item @@asis
Used following @code{@@table}, @code{@@ftable}, and @code{@@vtable} to
print the table's first column without highlighting (``as is'').
@xref{@code{@@asis}}.

@item @@author @var{author}
Typeset @var{author} flushleft and underline it.  @xref{@code{@@title
@@subtitle @@author}}.

@item @@b@{@var{text}@}
Set @var{text} in a @b{bold} font.  No effect in Info.  @xref{Fontes}.

@item @@bullet@{@}
Generate a large round dot, @bullet{} (@samp{*} in Info).  Often used
with @code{@@table}.  @xref{@code{@@bullet}}.

@item @@bye
Stop formatting a file.  The formatters do not see anything in the
input file following @code{@@bye}.  @xref{Finalizando um Arquivo}.

@item @@c @var{comment}
Begin a comment in Texinfo.  The rest of the line does not appear in
any output.  A synonym for @code{@@comment}.  @kbd{DEL} also
starts a comment.  @xref{Comentários}.

@item @@caption
Define the full caption for a @code{@@float}.  @xref{@code{@@caption
@@shortcaption}}.

@item @@cartouche
Highlight an example or quotation by drawing a box with rounded
corners around it.  Pair with @code{@@end cartouche}.  No effect in
Info.  @xref{@code{@@cartouche}}.

@item @@center @var{line-of-text}
Center the line of text following the command.
@xref{@code{@@titlefont @@center @@sp}}.

@item @@centerchap @var{line-of-text}
Like @code{@@chapter}, but centers the chapter title.  @xref{@code{@@chapter}}.

@item @@chapheading @var{title}
Print an unnumbered chapter-like heading, but omit from the table of
contents.  In Info, the title is underlined with asterisks.
@xref{@code{@@majorheading @@chapheading}}.

@item @@chapter @var{title}
Begin a numbered chapter.  The chapter title appears in the table of
contents.  In Info, the title is underlined with asterisks.
@xref{@code{@@chapter}}.

@item @@cindex @var{entry}
Add @var{entry} to the index of concepts.  @xref{Entradas de Índice, ,
Definindo as Entradas de um Índice}.

@item @@cite@{@var{reference}@}
Highlight the name of a book or other reference that has no companion
Info file.  @xref{@code{@@cite}}.

@item @@clear @var{flag}
Unset @var{flag}, preventing the Texinfo formatting commands from
formatting text between subsequent pairs of @code{@@ifset @var{flag}}
and @code{@@end ifset} commands, and preventing
@code{@@value@{@var{flag}@}} from expanding to the value to which
@var{flag} is set.  @xref{@code{@@set @@clear @@value}}.

@item @@click@{@}
Represent a single ``click'' in a GUI@.  Used within
@code{@@clicksequence}.  @xref{Sequências de Clique}.

@item @@clicksequence@{@var{action} @@click@{@} @var{action}@}
Represent a sequence of clicks in a GUI@.  @xref{Sequências de Clique}.

@item @@clickstyle @@@var{cmd}
Execute @@@var{cmd} for each @code{@@click}; the default is
@code{@@arrow}.  The usual following empty braces on @@@var{cmd} are
omitted.  @xref{Sequências de Clique}.

@item @@code@{@var{sample-code}@}
Indicate an expression, a syntactically complete token of a program,
or a program name.  Unquoted in Info output.  @xref{@code{@@code}}.

@item @@codequotebacktick @var{on-off}
@itemx @@codequoteundirected @var{on-off}
Control output of @code{`} and @code{'} in code examples.
@xref{Inserindo Caracteres de Citação}.

@item @@comma@{@}
Insert a comma `,' character; only needed when a literal comma would
be taken as an argument separator.  @xref{Inserindo Uma Vírgula}.

@item @@command@{@var{command-name}@}
Indicate a command name, such as @command{ls}.  @xref{@code{@@command}}.

@item @@comment @var{comment}
Begin a comment in Texinfo.  The rest of the line does not appear in
any output.  A synonym for @code{@@c}.
@xref{Comentários}.

@item @@contents
Print a complete table of contents.  Has no effect in Info, which uses
menus instead.  @xref{Conteúdo, , Gerando Uma Tabela do Conteúdo}.

@item @@copying
Specify copyright holders and copying conditions for the document Pair
with @code{@@end cartouche}.  @xref{@code{@@copying}}.

@item @@copyright@{@}
Generate the copyright symbol @copyright{}.
@xref{@code{@@copyright}}.

@item @@defcodeindex @var{index-name}
Define a new index and its indexing command.  Print entries in an
@code{@@code} font.  @xref{Novos Índices, , Defining New Índices}.

@item @@defcv @var{category} @var{class} @var{name}
@itemx @@defcvx @var{category} @var{class} @var{name}
Format a description for a variable associated with a class in
object-oriented programming.  Takes three arguments: the category of
thing being defined, the class to which it belongs, and its name.
@xref{Comandos de Definição}.

@item @@deffn @var{category} @var{name} @var{arguments}@dots{}
@itemx @@deffnx @var{category} @var{name} @var{arguments}@dots{}
Format a description for a function, interactive command, or similar
entity that may take arguments.  @code{@@deffn} takes as arguments the
category of entity being described, the name of this particular
entity, and its arguments, if any.  @xref{Comandos de Definição}.

@item @@defindex @var{index-name}
Define a new index and its indexing command.  Print entries in a roman
font.  @xref{Novos Índices, , Defining New Índices}.

@item @@definfoenclose @var{newcmd}, @var{before}, @var{after}
Must be used within @code{@@ifinfo}; create a new command
@code{@@@var{newcmd}} for Info that marks text by enclosing it in
strings that precede and follow the text.
@xref{@code{@@definfoenclose}}.

@item @@defivar @var{class} @var{instance-variable-name}
@itemx @@defivarx @var{class} @var{instance-variable-name}
Format a description for an instance variable in object-oriented
programming.  The command is equivalent to @samp{@@defcv @{Instance
Variable@} @dots{}}.  @xref{Comandos de Definição}.

@item @@defmac @var{macroname} @var{arguments}@dots{}
@itemx @@defmacx @var{macroname} @var{arguments}@dots{}
Format a description for a macro; equivalent to @samp{@@deffn Macro
@dots{}}.  @xref{Comandos de Definição}.

@item @@defmethod @var{class} @var{method-name} @var{arguments}@dots{}
@itemx @@defmethodx @var{class} @var{method-name} @var{arguments}@dots{}
Format a description for a method in object-oriented programming;
equivalent to @samp{@@defop Method @dots{}}.  
@xref{Comandos de Definição}.

@item @@defop @var{category} @var{class} @var{name} @var{arguments}@dots{}
@itemx @@defopx @var{category} @var{class} @var{name} @var{arguments}@dots{}
Format a description for an operation in object-oriented programming.
@code{@@defop} takes as arguments the name of the category of
operation, the name of the operation's class, the name of the
operation, and its arguments, if any.  @xref{Comandos de Definição}, and
@ref{Objetos Abstratos}.

@item @@defopt @var{option-name}
@itemx @@defoptx @var{option-name}
Format a description for a user option; equivalent to @samp{@@defvr
@{User Option@} @dots{}}.  @xref{Comandos de Definição}.

@item @@defspec @var{special-form-name} @var{arguments}@dots{}
@itemx @@defspecx @var{special-form-name} @var{arguments}@dots{}
Format a description for a special form; equivalent to @samp{@@deffn
@{Special Form@} @dots{}}.  @xref{Comandos de Definição}.

@item @@deftp @var{category} @var{name-of-type} @var{attributes}@dots{}
@itemx @@deftpx @var{category} @var{name-of-type} @var{attributes}@dots{}
Format a description for a data type; its arguments are the category,
the name of the type (e.g., @samp{int}) , and then the names of
attributes of objects of that type.  @xref{Comandos de Definição}, and
@ref{Tipos de Dados}.

@item @@deftypecv @var{category} @var{class} @var{data-type} @var{name}
@itemx @@deftypecvx @var{category} @var{class} @var{data-type} @var{name}
Format a description for a typed class variable in object-oriented programming.
@xref{Comandos de Definição}, and @ref{Objetos Abstratos}.

@item @@deftypefn @var{category} @var{data-type} @var{name} @var{arguments}@dots{}
@itemx @@deftypefnx @var{category} @var{data-type} @var{name} @var{arguments}@dots{}
Format a description for a function or similar entity that may take
arguments and that is typed.  @code{@@deftypefn} takes as arguments the
category of entity being described, the type, the name of the
entity, and its arguments, if any.  @xref{Comandos de Definição}.

@item @@deftypefnnewline @var{on-off}
Specifies whether return types for @code{@@deftypefn} and similar are
printed on lines by themselves; default is off.  
@xref{Funções Tipadas,, Funções em Linguagens Tipadas}.

@item @@deftypefun @var{data-type} @var{function-name} @var{arguments}@dots{}
@itemx @@deftypefunx @var{data-type} @var{function-name} @var{arguments}@dots{}
Format a description for a function in a typed language.
The command is equivalent to @samp{@@deftypefn Function @dots{}}.
@xref{Comandos de Definição}.

@item @@deftypeivar @var{class} @var{data-type} @var{variable-name}
@itemx @@deftypeivarx @var{class} @var{data-type} @var{variable-name}
Format a description for a typed instance variable in object-oriented
programming. @xref{Comandos de Definição}, and @ref{Objetos Abstratos}.

@item @@deftypemethod @var{class} @var{data-type} @var{method-name} @var{arguments}@dots{}
@itemx @@deftypemethodx @var{class} @var{data-type} @var{method-name} @var{arguments}@dots{}
Format a description for a typed method in object-oriented programming.
@xref{Comandos de Definição}.

@item @@deftypeop @var{category} @var{class} @var{data-type} @var{name} @var{arguments}@dots{}
@itemx @@deftypeopx @var{category} @var{class} @var{data-type} @var{name} @var{arguments}@dots{}
Format a description for a typed operation in object-oriented programming.
@xref{Comandos de Definição}, and @ref{Objetos Abstratos}.

@item @@deftypevar @var{data-type} @var{variable-name}
@itemx @@deftypevarx @var{data-type} @var{variable-name}
Format a description for a variable in a typed language.  The command is
equivalent to @samp{@@deftypevr Variable @dots{}}.  
@xref{Comandos de Definição}.

@item @@deftypevr @var{category} @var{data-type} @var{name}
@itemx @@deftypevrx @var{category} @var{data-type} @var{name}
Format a description for something like a variable in a typed
language---an entity that records a value.  Takes as arguments the
category of entity being described, the type, and the name of the
entity.  @xref{Comandos de Definição}.

@item @@defun @var{function-name} @var{arguments}@dots{}
@itemx @@defunx @var{function-name} @var{arguments}@dots{}
Format a description for a function; equivalent to
@samp{@@deffn Function @dots{}}.  @xref{Comandos de Definição}.

@item @@defvar @var{variable-name}
@itemx @@defvarx @var{variable-name}
Format a description for a variable; equivalent to @samp{@@defvr
Variable @dots{}}.  @xref{Comandos de Definição}.

@item @@defvr @var{category} @var{name}
@itemx @@defvrx @var{category} @var{name}
Format a description for any kind of variable.  @code{@@defvr} takes
as arguments the category of the entity and the name of the entity.
@xref{Comandos de Definição}.

@item @@detailmenu
Mark the (optional) detailed node listing in a master menu.
@xref{Partes do Menu Mestre}.

@item @@dfn@{@var{term}@}
Indicate the introductory or defining use of a term.  @xref{@code{@@dfn}}.

@item @@DH@{@}
@itemx @@dh@{@}
Generate the uppercase and lowercase Icelandic letter eth, respectively:
@DH{}, @dh{}.  @xref{Inserindo Acentos}.

@item @@dircategory @var{dirpart}
Specify a part of the Info directory menu where this file's entry should
go.  @xref{Installing Dir Entries}.

@item @@direntry
Begin the Info directory menu entry for this file.  Pair with
@code{@@end direntry}.  @xref{Installing Dir Entries}.

@item @@display
Begin a kind of example.  Like @code{@@example} (indent text, do not
fill), but do not select a new font.  Pair with @code{@@end display}.
@xref{@code{@@display}}.

@item @@dmn@{@var{dimension}@}
Format a unit of measure, as in 12@dmn{pt}.  Causes @TeX{} to insert a
thin space before @var{dimension}.  No effect in Info.
@xref{@code{@@dmn}}.

@item @@docbook
Enter Docbook completely.  Pair with @code{@@end docbook}.  
@xref{Comandos do Formatador Bruto}.

@item @@documentdescription
Set the document description text, included in the HTML output.  Pair
with @code{@@end documentdescription}.  @xref{@code{@@documentdescription}}.

@item @@documentencoding @var{enc}
Declare the input encoding to be @var{enc}.
@xref{@code{@@documentencoding}}.

@item @@documentlanguage @var{CC}
Declare the document language as the two-character ISO-639 abbreviation
@var{CC}.  @xref{@code{@@documentlanguage}}.

@item @@dotaccent@{@var{c}@}
Generate a dot accent over the character @var{c}, as in @dotaccent{o}.
@xref{Inserindo Acentos}.

@item @@dotless@{@var{i-or-j}@}
Generate dotless i (`@dotless{i}') and dotless j (`@dotless{j}').
@xref{Inserindo Acentos}.

@item @@dots@{@}
Gerar uma reticência, @samp{@dots{}}.
@xref{@code{@@dots}}.

@item @@email@{@var{address}[, @var{displayed-text}]@}
Indicate an electronic mail address.  @xref{@code{@@email}}.

@item @@emph@{@var{text}@}
Emphasize @var{text}, by using @emph{italics} where possible, and
enclosing in asterisks in Info.  @xref{Ênfase, , Enfatizando Texto}.

@item @@end @var{environment}
Ends @var{environment}, as in @samp{@@end example}.  @xref{Formatting
Commands,,@@-commands}.

@item @@enddots@{@}
Generate an end-of-sentence ellipsis, like this: @enddots{}
@xref{@code{@@dots}}.

@item @@enumerate [@var{number-or-letter}]
Begin a numbered list, using @code{@@item} for each entry.
Optionally, start list with @var{number-or-letter}.  Pair with
@code{@@end enumerate}.  @xref{@code{@@enumerate}}.

@item @@env@{@var{environment-variable}@}
Indicate an environment variable name, such as @env{PATH}.
@xref{@code{@@env}}.

@item @@equiv@{@}
Indicate to the reader the exact equivalence of two forms with a
glyph: @samp{@equiv{}}.  @xref{@code{@@equiv}}.

@item @@error@{@}
Indicate to the reader with a glyph that the following text is
an error message: @samp{@error{}}.  @xref{@code{@@error}}.

@item @@errormsg@{@var{msg}@}
Report @var{msg} as an error to standard error, and exit unsuccessfully.
Texinfo commands within @var{msg} are expanded to plain text.
@xref{Condicionais}, and @ref{External Macro Processors}.

@item @@euro@{@}
Generate the Euro currency sign.  @xref{@code{@@euro}}.

@item @@evenfooting [@var{left}] @@| [@var{center}] @@| [@var{right}]
@itemx @@evenheading [@var{left}] @@| [@var{center}] @@| [@var{right}]
Specify page footings resp.@: headings for even-numbered (left-hand)
pages.  @xref{Custom Cabeçalhos, ,
How to Make Your Own Cabeçalhos}.

@item @@everyfooting [@var{left}] @@| [@var{center}] @@| [@var{right}]
@itemx @@everyheading [@var{left}] @@| [@var{center}] @@| [@var{right}]
Specify page footings resp.@: headings for every page.  Not relevant to
Info.  @xref{Custom Cabeçalhos, , How to Make Your Own Cabeçalhos}.

@item @@example
Begin an example.  Indent text, do not fill, and select fixed-width
font.  Pair with @code{@@end example}.  @xref{@code{@@example}}.

@item @@exampleindent @var{indent}
Indent example-like environments by @var{indent} number of spaces
(perhaps 0).  @xref{@code{@@exampleindent}}.

@item @@exclamdown@{@}
Generate an upside-down exclamation point.  @xref{Inserindo Acentos}.

@item @@exdent @var{line-of-text}
Remove any indentation a line might have.  @xref{@code{@@exdent}}.

@item @@expansion@{@}
Indicate the result of a macro expansion to the reader with a special
glyph: @samp{@expansion{}}.  @xref{@code{@@expansion}}.

@item @@file@{@var{filename}@}
Highlight the name of a file, buffer, node, directory, etc.
@xref{@code{@@file}}.

@item @@finalout
Prevent @TeX{} from printing large black warning rectangles beside
over-wide lines.  @xref{hboxes lotados}.

@item @@findex @var{entry}
Add @var{entry} to the index of functions.  @xref{Entradas de Índice, ,
Definindo as Entradas de um Índice}.

@item @@firstparagraphindent @var{word}
Control indentation of the first paragraph after section headers
according to @var{word}, one of `none' or `insert'.
@xref{@code{@@firstparagraphindent}}.

@item @@float
Environment to define floating material.  Pair with @code{@@end float}.
@xref{Flutuadores}.

@item @@flushleft
@itemx @@flushright
Do not fill text; left (right) justify every line while leaving the
right (left) end ragged.  Leave font as is.  Pair with @code{@@end
flushleft} (@code{@@end flushright}).  @xref{@code{@@flushleft
@@flushright}}.

@item @@fonttextsize @var{10-11}
Change the size of the main body font in the @TeX{} output.
@xref{Fontes}.

@item @@footnote@{@var{text-of-footnote}@}
Enter a footnote.  Footnote text is printed at the bottom of the page
by @TeX{}; Info may format in either `End' node or `Separate' node style.
@xref{Notas de Rodapé}.

@item @@footnotestyle @var{style}
Specify an Info file's footnote style, either @samp{end} for the end
node style or @samp{separate} for the separate node style.
@xref{Notas de Rodapé}.

@item @@format
Begin a kind of example.  Like @code{@@display}, but do not indent.
Pair with @code{@@end format}.  @xref{@code{@@example}}.

@item @@frenchspacing @var{on-off}
Control spacing after punctuation.  @xref{@code{@@frenchspacing}}.

@item @@ftable @var{formatting-command}
Begin a two-column table, using @code{@@item} for each entry.
Automatically enter each of the items in the first column into the
index of functions.  Pair with @code{@@end ftable}.  The same as
@code{@@table}, except for indexing.  @xref{@code{@@ftable @@vtable}}.

@item @@geq@{@}
Generate a greater-than-or-equal sign, `@geq{}'.  @xref{@code{@@geq @@leq}}.

@item @@group
Disallow page breaks within following text.  Pair with @code{@@end
group}.  Ignored in Info.  @xref{@code{@@group}}.

@item @@guillemetleft@{@}
@itemx @@guillemetright@{@}
@item @@guillemotleft@{@}
@itemx @@guillemotright@{@}
@itemx @@guilsinglleft@{@}
@itemx @@guilsinglright@{@}
Double and single angle quotation marks: @guillemetleft{}
@guillemetright{} @guilsinglleft{} @guilsinglright{}.
@code{@@guillemotleft} and @code{@@guillemotright} are synonyms for
@code{@@guillemetleft} and @code{@@guillemetright}.  
@xref{Inserindo Aspas}.

@item @@H@{@var{c}@}
Generate the long Hungarian umlaut accent over @var{c}, as in @H{o}.

@item @@hashchar@{@}
Insert a hash `#' character; only needed when a literal hash would
introduce @code{#line} directive.  @xref{Inserindo um Símbolo Cerquilha}, and
@ref{External Macro Processors}.

@item @@heading @var{title}
Print an unnumbered section-like heading, but omit from the table of
contents.  In Info, the title is underlined with equal signs.
@xref{@code{@@unnumberedsec @@appendixsec @@heading}}.

@item @@headings @var{on-off-single-double}
Turn page headings on or off, and/or specify single-sided or double-sided
page headings for printing.  @xref{@code{@@headings}}.

@item @@headitem
Begin a heading row in a multitable.  @xref{Linhas de Multi Tabelas}.

@item @@headitemfont@{@var{text}@}
Set @var{text} in the font used for multitable heading rows; mostly
useful in multitable templates.  @xref{Linhas de Multi Tabelas}.

@item @@html
Enter HTML completely.  Pair with @code{@@end html}.  
@xref{Comandos do Formatador Bruto}.

@item @@hyphenation@{@var{hy-phen-a-ted words}@}
Explicitly define hyphenation points.  @xref{@code{@@- @@hyphenation}}.

@item @@i@{@var{text}@}
Set @var{text} in an @i{italic} font.  No effect in Info.  @xref{Fontes}.

@item @@ifclear @var{txivar}
If the Texinfo variable @var{txivar} is not set, format the following
text.  Pair with @code{@@end ifclear}.  @xref{@code{@@set @@clear
@@value}}.

@item @@ifcommanddefined @var{txicmd}
@itemx @@ifcommandnotdefined @var{txicmd}
If the Texinfo code @samp{@@@var{txicmd}} is (not) defined, format the
follow text.  Pair with the corresponding @code{@@end ifcommand...}.
@xref{Testes para Comandos do Texinfo}.

@item @@ifdocbook
@itemx @@ifhtml
@itemx @@ifinfo
Begin text that will appear only in the given output format.
@code{@@ifinfo} output appears in both Info and (for historical
compatibility) plain text output.  Pair with @code{@@end ifdocbook}
resp.@: @code{@@end ifhtml} resp.@: @code{@@end ifinfo}.
@xref{Condicionais}.

@item @@ifnotdocbook
@itemx @@ifnothtml
@itemx @@ifnotplaintext
@itemx @@ifnottex
@itemx @@ifnotxml
Begin text to be ignored in one output format but not the others.
@code{@@ifnothtml} text is omitted from HTML output, etc.  Pair with
the corresponding @code{@@end ifnot@var{format}}.
@xref{Condicionais}.

@item @@ifnotinfo
Begin text to appear in output other than Info and (for historical
compatibility) plain text.  Pair with @code{@@end ifnotinfo}.
@xref{Condicionais}.

@item @@ifplaintext
Begin text that will appear only in the plain text output.
Pair with @code{@@end ifplaintext}.  @xref{Condicionais}.

@item @@ifset @var{txivar}
If the Texinfo variable @var{txivar} is set, format the following
text.  Pair with @code{@@end ifset}.  @xref{@code{@@set @@clear
@@value}}.

@item @@iftex
Begin text to appear only in the @TeX{} output.  Pair with @code{@@end
iftex}.  @xref{Condicionais, , Conditionally Visible Text}.

@item @@ifxml
Begin text that will appear only in the XML output.  Pair with
@code{@@end ifxml}.  @xref{Condicionais}.

@item @@ignore
Begin text that will not appear in any output.  Pair with @code{@@end
ignore}.  @xref{Comentários, , Comments and Ignored Text}.

@item @@image@{@var{filename}, [@var{width}], [@var{height}], [@var{alt}], [@var{ext}]@}
Include graphics image in external @var{filename} scaled to the given
@var{width} and/or @var{height}, using @var{alt} text and looking for
@samp{@var{filename}.@var{ext}} in HTML@.  @xref{Imagens}.

@item @@include @var{filename}
Read the contents of Texinfo source file @var{filename}.  @xref{Arquivos Include}.

@item @@indent
Insert paragraph indentation.  @xref{@code{@@indent}}.

@item @@indentedblock
Indent a block of arbitary text on the left.  Pair with @code{@@end
indentedblock}.  @xref{@code{@@indentedblock}}.

@item @@indicateurl@{@var{indicateurl}@}
Indicate text that is a uniform resource locator for the World Wide
Web.  @xref{@code{@@indicateurl}}.

@item @@inforef@{@var{node-name}, [@var{entry-name}], @var{info-file-name}@}
Make a cross-reference to an Info file for which there is no printed
manual.  @xref{@code{@@inforef}}.

@item @@inlinefmt@{@var{fmt}, @var{text}@}
Insert @var{text} only if the output format is @var{fmt}.
@xref{Condicionais Inline}.

@item @@inlinefmtifelse@{@var{fmt}, @var{text}, @var{else-text}@}
Insert @var{text} if the output format is @var{fmt}, else @var{else-text}.

@item @@inlineifclear@{@var{var}, @var{text}@}
@itemx @@inlineifset@{@var{var}, @var{text}@}
Insert @var{text} only if the Texinfo variable @var{var} is (not) set.

@item @@inlineraw@{@var{fmt}, @var{raw-text}@}
Insert @var{text} as in a raw conditional, only if the output format
is @var{fmt}.

@item \input @var{macro-definitions-file}
Use the specified macro definitions file.  This command is used only
in the first line of a Texinfo file to cause @TeX{} to make use of the
@file{texinfo} macro definitions file.  The @code{\} in @code{\input}
is used instead of an @code{@@} because @TeX{} does not recognize
@code{@@} until after it has read the definitions file.  
@xref{Cabeçalho do Arquivo do Texinfo}.

@item @@insertcopying
Insert the text previously defined with the @code{@@copying}
environment.  @xref{@code{@@insertcopying}}.

@item @@item
Indicate the beginning of a marked paragraph for @code{@@itemize} and
@code{@@enumerate}; indicate the beginning of the text of a first column
entry for @code{@@table}, @code{@@ftable}, and @code{@@vtable}.
@xref{Listas e Tabelas}.

@item @@itemize @var{mark-generating-character-or-command}
Begin an unordered list: indented paragraphs with a mark, such as
@code{@@bullet}, inside the left margin at the beginning of each item.
Pair with @code{@@end itemize}.  @xref{@code{@@itemize}}.

@item @@itemx
Like @code{@@item} but do not generate extra vertical space above the
item text.  Thus, when several items have the same description, use
@code{@@item} for the first and @code{@@itemx} for the others.
@xref{@code{@@itemx}}.

@item @@kbd@{@var{keyboard-characters}@}
Indicate characters of input to be typed by users.  @xref{@code{@@kbd}}.

@item @@kbdinputstyle @var{style}
Specify when @code{@@kbd} should use a font distinct from
@code{@@code} according to @var{style}: @code{code}, @code{distinct},
@code{example}.  @xref{@code{@@kbd}}.

@item @@key@{@var{key-name}@}
Indicate the name of a key on a keyboard.  @xref{@code{@@key}}.

@item @@kindex @var{entry}
Add @var{entry} to the index of keys.
@xref{Entradas de Índice, , Definindo as Entradas de um Índice}.

@item @@L@{@}
@itemx @@l@{@}
Generate the uppercase and lowercase Polish suppressed-L letters,
respectively: @L{}, @l{}.

@item @@LaTeX@{@}
Generate the @LaTeX{} logo.  @xref{@code{@@TeX @@LaTeX}}.

@item @@leq@{@}
Generate a less-than-or-equal sign, `@leq{}'.  @xref{@code{@@geq @@leq}}.

@item @@lisp
Begin an example of Lisp code.  Indent text, do not fill, and select
fixed-width font.  Pair with @code{@@end lisp}.  @xref{@code{@@lisp}}.

@item @@listoffloats
Produce a table-of-contents-like listing of @code{@@float}s.
@xref{@code{@@listoffloats}}.

@item @@lowersections
Change subsequent chapters to sections, sections to subsections, and so
on. @xref{Levantar/abaixar seções, , @code{@@raisesections} and
@code{@@lowersections}}.

@item @@macro @var{macroname} @{@var{params}@}
Define a new Texinfo command @code{@@@var{macroname}@{@var{params}@}}.
Pair with @code{@@end macro}.  @xref{Definindo Macros}.

@item @@majorheading @var{title}
Print an unnumbered chapter-like heading, but omit from the table of
contents.  This generates more vertical whitespace before the heading
than the @code{@@chapheading} command.  @xref{@code{@@majorheading
@@chapheading}}.

@item @@math@{@var{mathematical-expression}@}
Format a mathematical expression.  @xref{Inserindo Fórmulas Matemáticas}.

@item @@menu
Mark the beginning of a menu of Nodos.  No effect in a printed manual.
Pair with @code{@@end menu}.  @xref{Menus}.

@item @@minus@{@}
Generate a minus sign, `@minus{}'.  @xref{@code{@@minus}}.

@item @@multitable @var{column-width-spec}
Begin a multi-column table.  Begin each row with @code{@@item} or
@code{@@headitem}, and separate columns with @code{@@tab}.  Pair with
@code{@@end multitable}.  @xref{Larguras de Colunas Multi Tabelas}.

@item @@need @var{n}
Start a new page in a printed manual if fewer than @var{n} mils
(thousandths of an inch) remain on the current page.
@xref{@code{@@need}}.

@item @@node @var{name}, @var{next}, @var{previous}, @var{up}
Begin a new node.  @xref{Escrevendo um Nodo}.

@item @@noindent
Prevent text from being indented as if it were a new paragraph.
@xref{@code{@@noindent}}.

@item @@novalidate
Suppress validation of node references and omit creation of auxiliary
files with @TeX{}.  Use before any sectioning or cross-reference 
commands.  @xref{Pointer Validation}.

@item @@O@{@}
@itemx @@o@{@}
Generate the uppercase and lowercase O-with-slash letters, respectively:
@O{}, @o{}.

@item  @@oddfooting [@var{left}] @@| [@var{center}] @@| [@var{right}]
@itemx @@oddheading [@var{left}] @@| [@var{center}] @@| [@var{right}]
Specify page footings resp.@: headings for odd-numbered (right-hand)
pages.  @xref{Custom Cabeçalhos, ,
How to Make Your Own Cabeçalhos}.

@item @@OE@{@}
@itemx @@oe@{@}
Generate the uppercase and lowercase OE ligatures, respectively:
@OE{}, @oe{}.  @xref{Inserindo Acentos}.

@item @@ogonek@{@var{c}@}
Generate an ogonek diacritic under the next character, as in
@ogonek{a}.  @xref{Inserindo Acentos}.

@item @@option@{@var{option-name}@}
Indicate a command-line option, such as @option{-l} or
@option{--help}.  @xref{@code{@@option}}.

@item @@ordf@{@}
@itemx @@ordm@{@}
Generate the feminine and masculine Spanish ordinals, respectively:
@ordf{}, @ordm{}.  @xref{Inserindo Acentos}.

@item @@page
Start a new page in a printed manual.  No effect in Info.
@xref{@code{@@page}}.

@item @@pagesizes [@var{width}][, @var{height}]
Change page dimensions.  @xref{pagesizes}.

@item @@paragraphindent @var{indent}
Indent paragraphs by @var{indent} number of spaces (perhaps 0); preserve
source file indentation if @var{indent} is @code{asis}.
@xref{@code{@@paragraphindent}}.

@item @@part @var{title}
Begin a group of chapters or appendixes; included in the tables of
contents and produces a page of its own in printed output.
@xref{@code{@@part}}.

@item @@pindex @var{entry}
Add @var{entry} to the index of programs.  @xref{Entradas de Índice, , Defining
the Entries of an Index}.

@item @@point@{@}
Indicate the position of point in a buffer to the reader with a glyph:
@samp{@point{}}.  @xref{@code{@@point}}.

@item @@pounds@{@}
Generate the pounds sterling currency sign.
@xref{@code{@@pounds}}.

@item @@print@{@}
Indicate printed output to the reader with a glyph: @samp{@print{}}.
@xref{@code{@@print}}.

@item @@printindex @var{index-name}
Generate the alphabetized index for @var{index-name} (using two
columns in a printed manual).  @xref{Imprimindo Índices e Menus}.

@item @@pxref@{@var{node}, [@var{entry}], [@var{node-title}], [@var{info-file}], [@var{manual}]@}
Make a reference that starts with a lowercase `see' in a printed
manual.  Use within parentheses only.  Only the first argument is
mandatory.  @xref{@code{@@pxref}}.

@item @@questiondown@{@}
Generate an upside-down question mark.  @xref{Inserindo Acentos}.

@item @@quotation
Narrow the margins to indicate text that is quoted from another work.
Takes optional argument specifying prefix text, e.g., an author name.
Pair with @code{@@end quotation}.  @xref{@code{@@quotation}}.

@item @@quotedblleft@{@}
@itemx @@quotedblright@{@}
@itemx @@quoteleft@{@}
@itemx @@quoteright@{@}
@itemx @@quotedblbase@{@}
@itemx @@quotesinglbase@{@}
Produce various quotation marks: @quotedblleft{} @quotedblright{}
@quoteleft{} @quoteright{} @quotedblbase{} @quotesinglbase{}.
@xref{Inserindo Aspas}.

@item @@r@{@var{text}@}
Set @var{text} in the regular @r{roman} font.  No effect in Info.
@xref{Fontes}.

@item @@raggedright
Fill text; left justify every line while leaving the right end ragged.
Leave font as is.  Pair with @code{@@end raggedright}.  No effect in
Info.  @xref{@code{@@raggedright}}.

@item @@raisesections
Change subsequent sections to chapters, subsections to sections, and so
on.  @xref{Levantar/abaixar seções}.

@item @@ref@{@var{node}, [@var{entry}], [@var{node-title}], [@var{info-file}], [@var{manual}]@}
Make a plain reference that does not start with any special text.
Follow command with a punctuation mark.  Only the first argument is
mandatory.  @xref{@code{@@ref}}.

@item @@refill
@findex refill
This command used to refill and indent the paragraph after all the
other processing has been done.  It is no longer needed, since all
formatters now automatically refill as needed, but you may still see
it in the source to some manuals, as it does no harm.

@item @@registeredsymbol@{@}
Generate the legal symbol @registeredsymbol{}.
@xref{@code{@@registeredsymbol}}.

@item @@result@{@}
Indicate the result of an expression to the reader with a special
glyph: @samp{@result{}}.  @xref{@code{@@result}}.

@item @@ringaccent@{@var{c}@}
Generate a ring accent over the next character, as in @ringaccent{o}.
@xref{Inserindo Acentos}.

@item @@samp@{@var{text}@}
Indicate a literal example of a sequence of characters, in general.
Quoted in Info output.  @xref{@code{@@samp}}.

@item @@sansserif@{@var{text}@}
Set @var{text} in a @sansserif{sans serif} font if possible.  No
effect in Info.  @xref{Fontes}.

@item @@sc@{@var{text}@}
Set @var{text} in a small caps font in printed output, and uppercase
in Info.  @xref{Capitalização Pequena}.

@item @@section @var{title}
Begin a section within a chapter.  The section title appears in the
table of contents.  In Info, the title is underlined with equal signs.
Within @code{@@chapter} and @code{@@appendix}, the section title is
numbered; within @code{@@unnumbered}, the section is unnumbered.
@xref{@code{@@section}}.

@item @@set @var{txivar} [@var{string}]
Define the Texinfo variable @var{txivar}, optionally to the value
@var{string}.  @xref{@code{@@set @@clear @@value}}.

@item @@setchapternewpage @var{on-off-odd}
Specify whether chapters start on new pages, and if so, whether on
odd-numbered (right-hand) new pages.  @xref{@code{@@setchapternewpage}}.

@item @@setcontentsaftertitlepage
Put the table of contents after the @samp{@@end titlepage} even if the
@code{@@contents} command is at the end.  @xref{Conteúdo}.

@item @@setfilename @var{info-file-name}
Provide a name to be used for the output files.  This command is ignored
for @TeX{} formatting.  @xref{@code{@@setfilename}}.

@item @@setshortcontentsaftertitlepage
Place the short table of contents after the @samp{@@end titlepage}
command even if the @code{@@shortcontents} command is at the end.
@xref{Conteúdo}.

@item @@settitle @var{title}
Specify the title for page headers in a printed manual, and the
default document title for HTML @samp{<head>}.
@xref{@code{@@settitle}}.

@item @@shortcaption
Define the short caption for a @code{@@float}.  @xref{@code{@@caption
@@shortcaption}}.

@item @@shortcontents
Print a short table of contents, with chapter-level entries only.  Not
relevant to Info, which uses menus rather than tables of contents.
@xref{Conteúdo, , Gerando Uma Tabela do Conteúdo}.

@item @@shorttitlepage @var{title}
Generate a minimal title page.  @xref{@code{@@titlepage}}.

@item @@slanted@{@var{text}@}
Set @var{text} in a @slanted{slanted} font if possible.  No effect
in Info.  @xref{Fontes}.

@item @@smallbook
Cause @TeX{} to produce a printed manual in a 7 by 9.25 inch format
rather than the regular 8.5 by 11 inch format.
@xref{@code{@@smallbook}}.  Also, see @ref{@code{@@small@dots{}}}.

@item @@smalldisplay
Begin a kind of example.  Like @code{@@display}, but use a smaller
font size where possible.  Pair with @code{@@end smalldisplay}.
@xref{@code{@@small@dots{}}}.

@item @@smallexample
Begin an example.  Like @code{@@example}, but use a smaller font size
where possible.  Pair with @code{@@end smallexample}.
@xref{@code{@@small@dots{}}}.

@item @@smallformat
Begin a kind of example.  Like @code{@@format}, but use a smaller font
size where possible.  Pair with @code{@@end smallformat}.
@xref{@code{@@small@dots{}}}.

@item @@smallindentedblock
Like @code{@@indentedblock}, but use a smaller font size where
possible.  Pair with @code{@@end smallindentedblock}.
@xref{@code{@@small@dots{}}}.

@item @@smalllisp
Begin an example of Lisp code.  Same as @code{@@smallexample}.  Pair
with @code{@@end smalllisp}.  @xref{@code{@@small@dots{}}}.

@item @@smallquotation
Like @code{@@quotation}, but use a smaller font size where possible.
Pair with @code{@@end smallquotation}.  @xref{@code{@@small@dots{}}}.

@item @@sortas @{@var{key}@}
Used in the arguments to index commands to give a string by which the 
index entry should be sorted.  @xref{Comandos de Indexação}.

@item @@sp @var{n}
Skip @var{n} blank lines.  @xref{@code{@@sp}}.

@item @@ss@{@}
Generate the German sharp-S es-zet letter, @ss{}.  
@xref{Inserindo Acentos}.

@item @@strong @{@var{text}@}
Emphasize @var{text} more strongly than @code{@@emph}, by using
@strong{boldface} where possible; enclosed in asterisks in Info.
@xref{emph & strong, , Enfatizando Texto}.

@item @@sub @{@var{text}@}
Set @var{text} as a subscript.  @xref{Inserindo Subscritos e Sobrescritos}.

@item @@subheading @var{title}
Print an unnumbered subsection-like heading, but omit from the table
of contents of a printed manual.  In Info, the title is underlined
with hyphens.  @xref{@code{@@unnumberedsubsec @@appendixsubsec @@subheading}}.

@item @@subsection @var{title}
Begin a subsection within a section.  The subsection title appears in
the table of contents.  In Info, the title is underlined with hyphens.
Same context-dependent numbering as @code{@@section}.
@xref{@code{@@subsection}}.

@item @@subsubheading @var{title}
Print an unnumbered subsubsection-like heading, but omit from the
table of contents of a printed manual.  In Info, the title is
underlined with periods.  @xref{@code{@@subsubsection}}.

@item @@subsubsection @var{title}
Begin a subsubsection within a subsection.  The subsubsection title
appears in the table of contents.  In Info, the title is underlined
with periods.  Same context-dependent numbering as @code{@@section}.
@xref{@code{@@subsubsection}}.

@item @@subtitle @var{title}
In a printed manual, set a subtitle in a normal sized font flush to
the right-hand side of the page.  Not relevant to Info, which does not
have title pages.  @xref{@code{@@title @@subtitle @@author}}.

@item @@summarycontents
Print a short table of contents.  Synonym for @code{@@shortcontents}.
@xref{Conteúdo, , Gerando Uma Tabela do Conteúdo}.

@item @@sup @{@var{text}@}
Set @var{text} as a superscript.  @xref{Inserindo Subscritos e Sobrescritos}.

@item @@syncodeindex @var{from-index} @var{to-index}
Merge the index named in the first argument into the index named in
the second argument, formatting the entries from the first index with
@code{@@code}.  @xref{Combinando Índices}.

@item @@synindex @var{from-index} @var{to-index}
Merge the index named in the first argument into the index named in
the second argument.  Do not change the font of @var{from-index}
entries.  @xref{Combinando Índices}.

@item @@t@{@var{text}@}
Set @var{text} in a @t{fixed-width}, typewriter-like font.  No effect
in Info.  @xref{Fontes}.

@item @@tab
Separate columns in a row of a multitable.  @xref{Linhas de Multi Tabelas}.

@item @@table @var{formatting-command}
Begin a two-column table (description list), using @code{@@item} for
each entry.  Write each first column entry on the same line as
@code{@@item}.  First column entries are printed in the font resulting
from @var{formatting-command}.  Pair with @code{@@end table}.
@xref{Tabelas de Duas Colunas, , Making a Two-column Table}.  Also see
@ref{@code{@@ftable @@vtable}}, and @ref{@code{@@itemx}}.

@item @@TeX@{@}
Generate the @TeX{} logo.  @xref{@code{@@TeX @@LaTeX}}.

@item @@tex
Enter @TeX{} completely.  Pair with @code{@@end tex}.  
@xref{Comandos do Formatador Bruto}.

@item @@textdegree@{@}
Gerar o símbolo de Graus.  @xref{@code{@@textdegree}}.

@item @@thischapter
@itemx @@thischaptername
@itemx @@thischapternum
@itemx @@thisfile
@itemx @@thispage
@itemx @@thistitle
Only allowed in a heading or footing.  Stands for, respectively, the
number and name of the current chapter (in the format `Chapter 1:
Title'), the current chapter name only, the current chapter number
only, the filename, the current page number, and the title of the
document, respectively.  @xref{Custom Cabeçalhos, , How to Make Your Own
Cabeçalhos}.

@item @@TH@{@}
@itemx @@th@{@}
Generate the uppercase and lowercase Icelandic letter thorn, respectively:
@TH{}, @th{}.  @xref{Inserindo Acentos}.

@item @@tie@{@}
Generate a normal interword space at which a line break is not
allowed.  @xref{@code{@@tie}}.

@item @@tieaccent@{@var{cc}@}
Generate a tie-after accent over the next two characters @var{cc}, as in
`@tieaccent{oo}'.  @xref{Inserindo Acentos}.

@item @@tindex @var{entry}
Add @var{entry} to the index of data types.  @xref{Entradas de Índice, ,
Definindo as Entradas de um Índice}.

@item @@title @var{title}
In a printed manual, set a title flush to the left-hand side of the
page in a larger than normal font and underline it with a black rule.
Not relevant to Info, which does not have title pages.
@xref{@code{@@title @@subtitle @@author}}.

@item @@titlefont@{@var{text}@}
In a printed manual, print @var{text} in a larger than normal font.
@xref{@code{@@titlefont @@center @@sp}}.

@item @@titlepage
Begin the title page.  Write the command on a line of its own, paired
with @code{@@end titlepage}.  Nothing between @code{@@titlepage} and
@code{@@end titlepage} appears in Info.  @xref{@code{@@titlepage}}.

@item @@today@{@}
Insert the current date, in `1 Jan 1900' style.  @xref{Custom
Cabeçalhos, , How to Make Your Own Cabeçalhos}.

@item @@top @var{title}
Mark the topmost @code{@@node} in the file, which must be defined on
the line immediately preceding the @code{@@top} command.  The title is
formatted as a chapter-level heading.  The entire top node, including
the @code{@@node} and @code{@@top} lines, are normally enclosed with
@code{@@ifnottex ... @@end ifnottex}.  In @TeX{} and
@code{texinfo-format-buffer}, the @code{@@top} command is merely a
synonym for @code{@@unnumbered}. 
@xref{Criação de Ponteiros do @command{makeinfo}}.

@item @@U@{@var{hex}@}
Output a representation of Unicode character U+@var{hex}.
@xref{Inserindo Unicode}.

@item @@u@{@var{c}@}
@itemx @@ubaraccent@{@var{c}@}
@itemx @@udotaccent@{@var{c}@}
Generate a breve, underbar, or underdot accent, respectively, over or
under the character @var{c}, as in @u{o}, @ubaraccent{o},
@udotaccent{o}.  @xref{Inserindo Acentos}.

@item @@unmacro @var{macroname}
Undefine the macro @code{@@@var{macroname}} if it has been defined.
@xref{Definindo Macros}.

@item @@unnumbered @var{title}
Begin a chapter that appears without chapter numbers of any kind.  The
title appears in the table of contents.  In Info, the title is
underlined with asterisks.  @xref{@code{@@unnumbered @@appendix}}.

@item @@unnumberedsec @var{title}
Begin a section that appears without section numbers of any kind.  The
title appears in the table of contents of a printed manual.  In Info,
the title is underlined with equal signs.  @xref{@code{@@unnumberedsec
@@appendixsec @@heading}}.

@item @@unnumberedsubsec @var{title}
Begin an unnumbered subsection.  The title appears in the table of
contents.  In Info, the title is underlined with hyphens.
@xref{@code{@@unnumberedsubsec @@appendixsubsec @@subheading}}.

@item @@unnumberedsubsubsec @var{title}
Begin an unnumbered subsubsection.  The title appears in the table of
contents.  In Info, the title is underlined with periods.
@xref{@code{@@subsubsection}}.

@item @@uref@{@var{url}[, @var{displayed-text}][, @var{replacement}@}
@itemx @@url@{@var{url}[, @var{displayed-text}][, @var{replacement}@}
Define a cross-reference to an external uniform resource locator,
e.g., for the World Wide Web.  @xref{@code{@@url}}.

@item @@urefbreakstyle @var{style}
Specify how @code{@@uref}/@code{@@url} should break at special
characters: @code{after}, @code{before}, @code{none}.
@xref{@code{@@url}}.

@item @@v@{@var{c}@}
Generate check accent over the character @var{c}, as in @v{o}.
@xref{Inserindo Acentos}.

@item @@validatemenus @var{on-off}
Control whether menus can be automatically generated. 
@xref{Escrevendo um Menu}.

@item @@value@{@var{txivar}@}
Insert the value, if any, of the Texinfo variable @var{txivar},
previously defined by @code{@@set}.  @xref{@code{@@set @@clear
@@value}}.

@item @@var@{@var{metasyntactic-variable}@}
Highlight a metasyntactic variable, which is something that stands for
another piece of text.  @xref{@code{@@var}}.

@item @@verb@{@var{delim} @var{literal} @var{delim}@}
Output @var{literal}, delimited by the single character @var{delim},
exactly as is (in the fixed-width font), including any whitespace or
Texinfo special characters.  @xref{@code{@@verb}}.

@item @@verbatim
Output the text of the environment exactly as is (in the fixed-width
font).  Pair with @code{@@end verbatim}.  @xref{@code{@@verbatim}}.

@item @@verbatiminclude @var{filename}
Output the contents of @var{filename} exactly as is (in the
fixed-width font).  @xref{@code{@@verbatiminclude}}.

@item @@vindex @var{entry}
Add @var{entry} to the index of variables.  @xref{Entradas de Índice, ,
Definindo as Entradas de um Índice}.

@item @@vskip @var{amount}
In a printed manual, insert whitespace so as to push text on the
remainder of the page towards the bottom of the page.  Used in
formatting the copyright page with the argument @samp{0pt plus
1filll}.  (Note spelling of @samp{filll}.)  @code{@@vskip} may be used
only in contexts ignored for Info.  @xref{Direitos Autorais}.

@item @@vtable @var{formatting-command}
Begin a two-column table, using @code{@@item} for each entry.
Automatically enter each of the items in the first column into the
index of variables.  Pair with @code{@@end vtable}.  The same as
@code{@@table}, except for indexing.  @xref{@code{@@ftable @@vtable}}.

@item @@w@{@var{text}@}
Disallow line breaks within @var{text}.  @xref{@code{@@w}}.

@item @@xml
Enter XML completely.  Pair with @code{@@end xml}.  
@xref{Comandos do Formatador Bruto}.

@item @@xref@{@var{node}, [@var{entry}], [@var{node-title}], [@var{info-file}], [@var{manual}]@}
Make a reference that starts with `See' in a printed manual.  Follow
command with a punctuation mark.  Only the first argument is
mandatory.  @xref{@code{@@xref}}.

@item @@xrefautomaticsectiontitle @var{on-off}
By default, use the section title instead of the node name in cross
references.  @xref{Três Argumentos}.

@end table


@node Command Contexts
@section @@-Command Contexts

@cindex Contexts, of @@-commands

Here we describe approximately which @@-commands can be used in which
contexts.  It not exhaustive or meant to be a complete reference.
Discrepancies between the information here and the @code{makeinfo} or
@TeX{} implementations are most likely to be resolved in favor of the
implementation.

By @dfn{general text} below, we mean anything except sectioning and
other such outer-level document commands, such as @code{@@section},
@code{@@node}, and @code{@@setfilename}.

@code{@@c}, @code{@@comment} and @code{@@if ... @@end if} conditional
commands may appear anywhere (except the Condicionais must still be on
lines by themselves).  @code{@@caption} may only appear in
@code{@@float} but may contain general text.  @code{@@footnote}
content likewise.

@@-commands with braces marking text (such as @code{@@strong},
@code{@@sc}, @code{@@asis}) may contain raw formatter commands such as
@code{@@html} but no other block commands (other commands terminated
by @code{@@end}) and may not be split across paragraphs, but may
otherwise contain general text.

In addition to the block command restriction, on @code{@@center},
@code{@@exdent} and @code{@@item} in @code{@@table} lines, @@-commands
that makes only sense in a paragraph are not accepted, such as
@code{@@indent}.

In addition to the above, sectioning commands cannot contain
@code{@@anchor}, @code{@@footnote} or @code{@@verb}.

In addition to the above, remaining commands (@code{@@node},
@code{@@anchor}, @code{@@printindex}, @code{@@ref}, @code{@@math},
@code{@@cindex}, @code{@@url}, @code{@@image}, and so on) cannot
contain cross-reference commands (@code{@@ref}, @code{@@xref},
@code{@@pxref} and @code{@@inforef}).  In one last addition,
@code{@@shortcaption} may only appear inside @code{@@float}.

For precise and complete information, we suggest looking into the
test suite in the sources, which exhaustively tries combinations.


@node Dicas
@appendix Dicas e Sugestões

Here are some tips for writing Texinfo documentation:

@cindex Dicas
@cindex Usage tips
@cindex Hints
@itemize @bullet
@item
Write in the present tense, not in the past or the future.

@item
Write actively!  For example, write ``We recommend that @dots{}'' rather
than ``It is recommended that @dots{}''.

@item
Use 70 or 72 as your fill column.  Longer lines are hard to read.

@item
Include a copyright notice and copying permissions.
@end itemize


@subsubheading Index, Index, Index!

Write many index entries, in different ways.
Readers like indices; they are helpful and convenient.

Although it is easiest to write index entries as you write the body of
the text, some people prefer to write entries afterwards.  In either
case, write an entry before the paragraph to which it applies.  This
way, an index entry points to the first page of a paragraph that is
split across pages.

Here are more index-related hints we have found valuable:

@itemize @bullet
@item
Write each index entry differently, so each entry refers to a different
place in the document.

@item
Write index entries only where a topic is discussed significantly.  For
example, it is not useful to index ``debugging information'' in a
chapter on reporting bugs.  Someone who wants to know about debugging
information will certainly not find it in that chapter.

@item
Consistently capitalize the first word of every concept index entry,
or else consistently use lowercase.  Terse entries often call for
lowercase; longer entries for capitalization.  Whichever case
convention you use, please use one or the other consistently!  Mixing
the two styles looks bad.

@item
Always capitalize or use uppercase for those words in an index for
which this is proper, such as names of countries or acronyms.  Always
use the appropriate case for case-sensitive names, such as those in C or
Lisp.

@item
Write the indexing commands that refer to a whole section immediately
after the section command, and write the indexing commands that refer to
a paragraph before that paragraph.

In the example that follows, a blank line comes after the index
entry for ``Leaping'':

@example
@group
@@section The Dog and the Fox
@@cindex Jumping, in general
@@cindex Leaping

@@cindex Dog, lazy, jumped over
@@cindex Lazy dog jumped over
@@cindex Fox, jumps over dog
@@cindex Quick fox jumps over dog
The quick brown fox jumps over the lazy dog.
@end group
@end example

@noindent
(Note that the example shows entries for the same concept that are
written in different ways---@samp{Lazy dog}, and @samp{Dog, lazy}---so
readers can look up the concept in different ways.)
@end itemize


@subsubheading Blank Lines

@itemize @bullet
@item
Insert a blank line between a sectioning command and the first following
sentence or paragraph, or between the indexing commands associated with
the sectioning command and the first following sentence or paragraph, as
shown in the tip on indexing.  It makes the source easier to read.

@item
Always insert a blank line before a @code{@@table} command and after an
@code{@@end table} command; but never insert a blank line after an
@code{@@table} command.

@need 1000
For example,

@example
@group
Types of fox:

@@table @@samp
@@item Quick
Jump over lazy dogs.
@end group

@group
@@item Brown
Also jump over lazy dogs.
@@end table

@end group
@group
@@noindent
On the other hand, @dots{}
@end group
@end example

Insert blank lines before and after @code{@@itemize} @dots{} @code{@@end
itemize} and @code{@@enumerate} @dots{} @code{@@end enumerate} in the
same way.
@end itemize


@subsubheading Complete Phrases

Complete phrases are easier to read than @dots{}

@itemize @bullet
@item
Write entries in an itemized list as complete sentences; or at least, as
complete phrases.  Incomplete expressions @dots{} awkward @dots{} like
this.

@item
Write the prefatory sentence or phrase for a multi-item list or table as
a complete expression.  Do not write ``You can set:''; instead, write
``You can set these variables:''.  The former expression sounds cut off.
@end itemize


@subsubheading Editions, Dates and Versions

Include edition numbers, version numbers, and dates in the
@code{@@copying} text (for people reading the Texinfo file, and for the
legal copyright in the output files).  Then use @code{@@insertcopying}
in the @code{@@titlepage} section for people reading the printed
output (@pxref{Amostra Curta}).

It is easiest to handle such version information using @code{@@set}
and @code{@@value}.  @xref{@code{@@value} Example}, and @ref{GNU
Sample Texts}.


@subsubheading Comandos de Definição

Definition commands are @code{@@deffn}, @code{@@defun},
@code{@@defmac}, and the like, and enable you to write descriptions in
a uniform format.

@itemize @bullet
@item
Write just one definition command for each entity you define with a
definition command.  The automatic indexing feature creates an index
entry that leads the reader to the definition.

@item
Use @code{@@table} @dots{} @code{@@end table} in an appendix that
contains a summary of functions, not @code{@@deffn} or other definition
commands.
@end itemize


@subsubheading Capitalization

@itemize @bullet
@item
Capitalize ``Texinfo''; it is a name.  Do not write the @samp{x} or
@samp{i} in uppercase.

@item
Capitalize ``Info''; it is a name.

@item
Write @TeX{} using the @code{@@TeX@{@}} command.  Note the uppercase
@samp{T} and @samp{X}.  This command causes the formatters to
typeset the name according to the wishes of Donald Knuth, who wrote
@TeX{}.  (Likewise @code{@@LaTeX@{@}} for @LaTeX{}.)
@end itemize


@subsubheading Spaces

Do not use spaces to format a Texinfo file, except inside of
@code{@@example} @dots{} @code{@@end example} and other literal
environments and commands.

@need 700
For example, @TeX{} fills the following:

@example
@group
   @@kbd@{C-x v@}
   @@kbd@{M-x vc-next-action@}
      Perform the next logical operation
      on the version-controlled file
      corresponding to the current buffer.
@end group
@end example

@need 950
@noindent
so it looks like this:

@iftex
@quotation
   @kbd{C-x v}
   @kbd{M-x vc-next-action}
      Perform the next logical operation on the version-controlled file
      corresponding to the current buffer.
@end quotation
@end iftex
@ifnottex
@quotation
`C-x v' `M-x vc-next-action' Perform the next logical operation on the
version-controlled file corresponding to the current buffer.
@end quotation
@end ifnottex

@noindent
In this case, the text should be formatted with
@code{@@table}, @code{@@item}, and @code{@@itemx}, to create a table.


@subsubheading @@code, @@samp, @@var, and @samp{---}

@itemize @bullet
@item
Use @code{@@code} around Lisp symbols, including command names.
For example,

@example
The main function is @@code@{vc-next-action@}, @dots{}
@end example

@item
Avoid putting letters such as @samp{s} immediately after an
@samp{@@code}.  Such letters look bad.

@item
Use @code{@@var} around meta-variables.  Do not write angle brackets
around them.

@item
Use three hyphens in a row, @samp{---}, to indicate a long dash.  @TeX{}
typesets these as a long dash and the Info formatters reduce three
hyphens to two.
@end itemize


@subsubheading Periods Outside of Quotes

Place periods and other punctuation marks @emph{outside} of quotations,
unless the punctuation is part of the quotation.  This practice goes
against some publishing conventions in the United States, but enables the
reader to distinguish between the contents of the quotation and the
whole passage.

For example, you should write the following sentence with the period
outside the end quotation marks:

@example
Evidently, @samp{au} is an abbreviation for ``author''.
@end example

@noindent
since @samp{au} does @emph{not} serve as an  abbreviation for
@samp{author.} (with a period following the word).


@subsubheading Introducing New Terms

@itemize @bullet
@item
Introduce new terms so that a reader who does not know them can
understand them from context; or write a definition for the term.

For example, in the following, the terms ``check in'', ``register'' and
``delta'' are all appearing for the first time; the example sentence should be
rewritten so they are understandable.

@quotation
The major function assists you in checking in a file to your
version control system and registering successive sets of changes to
it as deltas.
@end quotation

@item
Use the @code{@@dfn} command around a word being introduced, to indicate
that the reader should not expect to know the meaning already, and
should expect to learn the meaning from this passage.
@end itemize


@subsubheading Program Invocation Nodos

You can invoke programs such as Emacs, GCC, and @code{gawk} from a
shell.  The documentation for each program should contain a section that
describes this.  Unfortunately, if the node names and titles for these
sections are all different, they are difficult for users to find.

So, there is a convention to name such sections with a phrase beginning
with the word `Invoking', as in `Invoking Emacs'; this way, users can
find the section easily.


@subsubheading ANSI C Syntax

When you use @code{@@example} to describe a C function's calling
conventions, use the ANSI C syntax, like this:

@example
void dld_init (char *@@var@{path@});
@end example

@noindent
And in the subsequent discussion, refer to the argument values by
writing the same argument names, again highlighted with
@code{@@var}.

@need 800
Avoid the obsolete style that looks like this:

@example
#include <dld.h>

dld_init (path)
  char *path;
@end example

Also, it is best to avoid writing @code{#include} above the
declaration just to indicate that the function is declared in a
header file.  The practice may give the misimpression that the
@code{#include} belongs near the declaration of the function.  Either
state explicitly which header file holds the declaration or, better
yet, name the header file used for a group of functions at the
beginning of the section that describes the functions.

@anchor{texi-elements-by-size}
@subsubheading Node Length

Keep Nodos (sections) to a reasonable length, whatever reasonable
might be in the given context.  Don't hesitate break up long Nodos
into subNodos and have an extensive tree structure; that's what it's
there for.  Many times, readers will probably try to find a single
specific point in the manual, using search, indexing, or just plain
guessing, rather than reading the whole thing from beginning to end.

You can use the @command{texi-elements-by-size} utility to see a list
of all Nodos (or sections) in the document, sorted by size (either
lines or words), to find candidates for splitting.  It's in the
@file{util/} subdirectory of the Texinfo sources.


@subsubheading Bad Examples

Here are several examples of bad writing to avoid:

In this example, say, `` @dots{} you must @code{@@dfn}@{check
in@} the new version.''  That flows better.

@quotation
When you are done editing the file, you must perform a
@code{@@dfn}@{check in@}.
@end quotation

In the following example, say, ``@dots{} makes a unified interface such as VC
mode possible.''

@quotation
SCCS, RCS and other version-control systems all perform similar
functions in broadly similar ways (it is this resemblance which makes
a unified control mode like this possible).
@end quotation

And in this example, you should specify what `it' refers to:

@quotation
If you are working with other people, it assists in coordinating
everyone's changes so they do not step on each other.
@end quotation


@subsubheading And Finally @dots{}

@itemize @bullet
@item
Pronounce @TeX{} as if the @samp{X} were a Greek `chi', as the last
sound in the name `Bach'.  But pronounce Texinfo as in `speck':
``teckinfo''.

@item
Write notes for yourself at the very end of a Texinfo file after the
@code{@@bye}.  None of the formatters process text after the
@code{@@bye}; it is as if the text were within @code{@@ignore} @dots{}
@code{@@end ignore}.
@end itemize


@node Arquivos Texinfo Modelo
@appendix Arquivos Texinfo Modelo
@cindex Sample Texinfo files

The first example from the first chapter (@pxref{Amostra Curta}) is
given here in its entirety, without commentary.  The second example
includes the full texts to be used in GNU manuals.

@menu
* Short Sample Texinfo File::
* GNU Sample Texts::
* Verbatim Copying License::
* All-permissive Copying License::
@end menu


@node Short Sample Texinfo File
@section Amostra Curta
@cindex Sample Texinfo file, no comments

Here is a complete, short sample Texinfo file.  You can see this file, 
with comments, in the first chapter.  @xref{Amostra Curta}.

In a nutshell: The @command{makeinfo} program transforms a Texinfo
source file such as this into an Info file or HTML; and @TeX{} typesets
it for a printed manual.


@sp 1
@example
\input texinfo
@@settitle Sample Manual 1.0

@@copying
This is a short example of a complete Texinfo file.

Copyright @@copyright@{@} 2016 Free Software Foundation, Inc.
@@end copying

@@titlepage
@@title Sample Title
@@page
@@vskip 0pt plus 1filll
@@insertcopying
@@end titlepage

@@c Output the table of the contents at the beginning.
@@contents

@@ifnottex
@@node Top
@@top GNU Sample

This manual is for GNU Sample
(version @@value@{VERSION@}, @@value@{UPDATED@}).
@@end ifnottex

@@menu
* First Chapter::    The first chapter is the
                      only chapter in this sample.
* Index::            Complete index.
@@end menu


@@node First Chapter
@@chapter First Chapter

@@cindex chapter, first

This is the first chapter.
@@cindex index entry, another

Here is a numbered list.

@@enumerate
@@item
This is the first item.

@@item
This is the second item.
@@end enumerate


@@node Index
@@unnumbered Index

@@printindex cp

@@bye
@end example


@node GNU Sample Texts
@section GNU Sample Texts

@cindex GNU sample texts
@cindex Sample texts, GNU
@cindex Full texts, GNU

Following is a sample Texinfo document with the full texts that should
be used (adapted as necessary) in GNU manuals.

As well as the legal texts, it also serves as a practical example of how
many elements in a GNU system can affect the manual.  If you're not
familiar with all these different elements, don't worry.  They're not
required and a perfectly good manual can be written without them.
They're included here nonetheless because many manuals do (or could)
benefit from them.

@xref{Amostra Curta}, for a minimal example of a Texinfo file.
@xref{Iniciando e Finalizando um Arquivo}, for a full explanation of that
minimal example.

Here are some notes on the example:

@itemize @bullet
@item
@cindex $Id
@cindex CVS $Id
@cindex RCS $Id
@cindex Documentation identification
@cindex Identification of documentation
The @samp{$Id:} comment is for the CVS
(@url{http://www.nongnu.org/cvs/}), RCS (@pxref{Top,,, rcs, Revision
Control System}) and other version control systems, which expand it
into a string such as:

@example
$Id: texinfo.texi 6987 2016-02-06 08:59:21Z gavin $
@end example

(This is potentially useful in all sources that use version control,
not just manuals.)  You may wish to include the @samp{$Id:} comment in
the @code{@@copying} text, if you want a completely unambiguous
reference to the documentation source version.

If you want to literally write @t{@w{$}Id$}, use @code{@@w}:
@code{@@w@{$@}Id$}.  Unfortunately, this technique does not work in
plain text output, where it's not clear what should be done.

@item
@pindex automake@r{, and version info}
@vindex UPDATED @r{Automake variable}
@vindex VERSION @r{Automake variable}
@pindex time-stamp.el
The @file{version.texi} in the @code{@@include} command is maintained
automatically by Automake (@pxref{Top,,, automake, GNU Automake}).  It
sets the @samp{VERSION} and @samp{UPDATED} values used elsewhere.  If
your distribution doesn't use Automake, but you do use Emacs, you may
find the time-stamp.el package helpful (@pxref{Time Stamps,,, emacs,
The GNU Emacs Manual}).

@item
The @code{@@syncodeindex} command reflects the recommendation to use
only one index where possible, to make it easier for readers to look up
index entries.

@item
The @code{@@dircategory} is for constructing the Info directory.
@xref{Installing Dir Entries}, which includes a variety of recommended
category names.

@item
The `Invoking' node is a GNU standard to help users find the basic
information about command-line usage of a given program.  @xref{Manual
Structure Details,,, standards, GNU Coding Standards}.

@item
@cindex Licença GNU de Documentação Livre, including entire
@cindex Free Documentation License, including entire
It is best to include the entire Licença GNU de Documentação Livre in a GNU
manual, unless the manual is only a few pages long.  Of course this
sample is even shorter than that, but it includes the FDL anyway in
order to show one conventional way to do so.  The @file{fdl.texi} file
is available on the GNU machines and in the Texinfo and other GNU
source distributions.

The FDL provides for omitting itself under certain conditions, but in
that case the sample texts given here have to be modified.  @xref{Licença GNU de Documentação Livre}.

@item
If the FSF is not the copyright holder, then use the appropriate name.

@item
If your manual is published on paper by the FSF or is longer than 400
pages, you should include the standard FSF cover texts (@pxref{License
Notices for Documentation,,, maintain, GNU Maintainer Information}).

@item
For documents that express your personal views, feelings or
experiences, it is more appropriate to use a license permitting only
verbatim copying, rather than the FDL@.  @xref{Verbatim Copying
License}.

@end itemize

Here is the sample document:

@verbatim
\input texinfo   @c -*-texinfo-*-
@comment $Id@w{$}
@comment %**start of header
@include version.texi
@settitle GNU Sample @value{VERSION}
@syncodeindex pg cp
@comment %**end of header
@copying
This manual is for GNU Sample (version @value{VERSION}, @value{UPDATED}),
which is an example in the Texinfo documentation.

Copyright @copyright{} 2016 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@dircategory Texinfo documentation system
@direntry
* sample: (sample)Invoking sample.
@end direntry

@titlepage
@title GNU Sample
@subtitle for version @value{VERSION}, @value{UPDATED}
@author A.U. Thor (@email{bug-sample@@gnu.org})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top GNU Sample

This manual is for GNU Sample (version @value{VERSION}, @value{UPDATED}).
@end ifnottex

@menu
* Invoking sample::
* Licença GNU de Documentação Livre::
* Index::
@end menu


@node Invoking sample
@chapter Invocação de Amostra

@pindex sample
@cindex invoking @command{sample}

This is a sample manual.  There is no sample program to
invoke, but if there were, you could see its basic usage
and command line options here.


@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi


@node Index
@unnumbered Index

@printindex cp

@bye
@end verbatim


@node Verbatim Copying License
@section Verbatim Copying License

@cindex Verbatim copying license
@cindex License for verbatim copying

For software manuals and other documentation, it is critical to use a
license permitting free redistribution and updating, so that when a free
program is changed, the documentation can be updated as well.

On the other hand, for documents that express your personal views,
feelings or experiences, it is more appropriate to use a license
permitting only verbatim copying.

Here is sample text for such a license permitting verbatim copying only.
This is just the license text itself.  For a complete sample document,
see the previous sections.

@verbatim
@copying
This document is a sample for allowing verbatim copying only.

Copyright @copyright{} 2016 Free Software Foundation, Inc.

@quotation
Permission is granted to make and distribute verbatim copies
of this entire document without royalty provided the
copyright notice and this permission notice are preserved.
@end quotation
@end copying
@end verbatim


@node All-permissive Copying License
@section All-permissive Copying License

@cindex All-permissive copying license
@cindex License for all-permissive copying

For software manuals and other documentation, it is important to use a
license permitting free redistribution and updating, so that when a free
program is changed, the documentation can be updated as well.

On the other hand, for small supporting files, short manuals (under 300
lines long) and rough documentation (README files, INSTALL files, etc.),
the full FDL would be overkill.  They can use a simple all-permissive
license.

Here is sample text for such an all-permissive license.  This is just
the license text itself.  For a complete sample document, see the
previous sections.

@example
Copyright @@copyright@{@} 2016 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
@end example


@node Modo Texinfo
@appendix Usando o Modo Texinfo
@cindex Modo Texinfo
@cindex Modo, usando Texinfo
@cindex GNU Emacs
@cindex Emacs

You may edit a Texinfo file with any text editor you choose.  A Texinfo
file is no different from any other ASCII file.  However, GNU Emacs
comes with a special mode, called Texinfo mode, that provides Emacs
commands and tools to help ease your work.

@menu
* Modo Texinfo Visão Geral::       How Texinfo mode can help you.
* Emacs Editing::               Texinfo mode adds to GNU Emacs' general
                                  purpose editing features.
* Inserting::                   How to insert frequently used @@-commands.
* Showing the Structure::       How to show the structure of a file.
* Atualizando Nodos e Menus::    How to update or create new Nodos and menus.
* Info Formatting::             How to format for Info.
* Printing::                    How to format and print part or all of a file.
* Modo Texinfo Summary::        Summary of all the Texinfo mode commands.
@end menu

@node Modo Texinfo Visão Geral
@section Modo Texinfo Visão Geral

Texinfo mode provides special features for working with Texinfo files.
You can:

@itemize @bullet
@item
Insert frequently used @@-commands.

@item
Automatically create @code{@@node} lines.

@item
Show the structure of a Texinfo source file.

@item
Automatically create or update the `Next',
`Previous', and `Up' pointers of a node.

@item
Automatically create or update menus.

@item
Automatically create a master menu.

@item
Format a part or all of a file for Info.

@item
Typeset and print part or all of a file.
@end itemize

Perhaps the two most helpful features are those for inserting frequently
used @@-commands and for creating node pointers and menus.

@node Emacs Editing
@section The Usual GNU Emacs Editing Commands

In most cases, the usual Text mode commands work the same in Texinfo
mode as they do in Text mode.  Texinfo mode adds new editing commands
and tools to GNU Emacs' general purpose editing features.  The major
difference concerns filling.  In Texinfo mode, the paragraph
separation variable and syntax table are redefined so that Texinfo
commands that should be on lines of their own are not inadvertently
included in paragraphs.  Thus, the @kbd{M-q} (@code{fill-paragraph})
command will refill a paragraph but not mix an indexing command on a
line adjacent to it into the paragraph.

In addition, Texinfo mode sets the @code{page-delimiter} variable to
the value of @code{texinfo-chapter-level-regexp}; by default, this is
a regular expression matching the commands for chapters and their
equivalents, such as appendices.  With this value for the page
delimiter, you can jump from chapter title to chapter title with the
@kbd{C-x ]} (@code{forward-page}) and @kbd{C-x [}
(@code{backward-page}) commands and narrow to a chapter with the
@kbd{C-x n p} (@code{narrow-to-page}) command.  (@xref{Pages, , ,emacs,
The GNU Emacs Manual}, for details about the page commands.)

You may name a Texinfo file however you wish, but the convention is to
end a Texinfo file name with one of the extensions
@file{.texinfo}, @file{.texi}, @file{.txi}, or @file{.tex}.  A longer
extension is preferred, since it is explicit, but a shorter extension
may be necessary for operating systems that limit the length of file
names.  GNU Emacs automatically enters Texinfo mode when you visit a
file with a @file{.texinfo}, @file{.texi} or @file{.txi}
extension.  Also, Emacs switches to Texinfo mode
when you visit a
file that has @samp{-*-texinfo-*-} in its first line.  If ever you are
in another mode and wish to switch to Texinfo mode, type @code{M-x
texinfo-mode}.

Like all other Emacs features, you can customize or enhance Texinfo
mode as you wish.  In particular, the keybindings are very easy to
change.  The keybindings described here are the default or standard
ones.

@node Inserting
@section Inserting Frequently Used Commands
@cindex Inserting frequently used commands
@cindex Frequently used commands, inserting
@cindex Commands, inserting them

Texinfo mode provides commands to insert various frequently used
@@-commands into the buffer.  You can use these commands to save
keystrokes.

The insert commands are invoked by typing @kbd{C-c} twice and then the
first letter of the @@-command:

@table @kbd
@item  C-c C-c c
@itemx M-x texinfo-insert-@@code
@findex texinfo-insert-@@code
Insert @code{@@code@{@}} and put the
cursor between the braces.

@item  C-c C-c d
@itemx M-x texinfo-insert-@@dfn
@findex texinfo-insert-@@dfn
Insert @code{@@dfn@{@}} and put the
cursor between the braces.

@item  C-c C-c e
@itemx M-x texinfo-insert-@@end
@findex texinfo-insert-@@end
Insert @code{@@end} and attempt to insert the correct following word,
such as @samp{example} or @samp{table}.  (This command does not handle
nested lists correctly, but inserts the word appropriate to the
immediately preceding list.)

@item  C-c C-c i
@itemx M-x texinfo-insert-@@item
@findex texinfo-insert-@@item
Insert @code{@@item} and put the
cursor at the beginning of the next line.

@item  C-c C-c k
@itemx M-x texinfo-insert-@@kbd
@findex texinfo-insert-@@kbd
Insert @code{@@kbd@{@}} and put the
cursor between the braces.

@item  C-c C-c n
@itemx M-x texinfo-insert-@@node
@findex texinfo-insert-@@node
Insert @code{@@node} and a comment line
listing the sequence for the `Next',
`Previous', and `Up' Nodos.
Leave point after the @code{@@node}.

@item  C-c C-c o
@itemx M-x texinfo-insert-@@noindent
@findex texinfo-insert-@@noindent
Insert @code{@@noindent} and put the
cursor at the beginning of the next line.

@item  C-c C-c s
@itemx M-x texinfo-insert-@@samp
@findex texinfo-insert-@@samp
Insert @code{@@samp@{@}} and put the
cursor between the braces.

@item  C-c C-c t
@itemx M-x texinfo-insert-@@table
@findex texinfo-insert-@@table
Insert @code{@@table} followed by a @key{SPC}
and leave the cursor after the @key{SPC}.

@item  C-c C-c v
@itemx M-x texinfo-insert-@@var
@findex texinfo-insert-@@var
Insert @code{@@var@{@}} and put the
cursor between the braces.

@item  C-c C-c x
@itemx M-x texinfo-insert-@@example
@findex texinfo-insert-@@example
Insert @code{@@example} and put the
cursor at the beginning of the next line.

@c M-@{  was the binding for texinfo-insert-braces;
@c in Emacs 19, backward-paragraph will take this binding.
@item C-c C-c @{
@itemx M-x texinfo-insert-braces
@findex texinfo-insert-braces
Insert @code{@{@}} and put the cursor between the braces.

@item C-c @}
@itemx C-c  ]
@itemx M-x up-list
@findex up-list
Move from between a pair of braces forward past the closing brace.
Typing @kbd{C-c ]} is easier than typing @kbd{C-c @}}, which
is, however, more mnemonic; hence the two keybindings.  (Also, you can
move out from between braces by typing @kbd{C-f}.)
@end table

To put a command such as @w{@code{@@code@{@dots{}@}}} around an
@emph{existing} word, position the cursor in front of the word and type
@kbd{C-u 1 C-c C-c c}.  This makes it easy to edit existing plain text.
The value of the prefix argument tells Emacs how many words following
point to include between braces---@samp{1} for one word, @samp{2} for
two words, and so on.  Use a negative argument to enclose the previous
word or words.  If you do not specify a prefix argument, Emacs inserts
the @@-command string and positions the cursor between the braces.  This
feature works only for those @@-commands that operate on a word or words
within one line, such as @code{@@kbd} and @code{@@var}.

This set of insert commands was created after analyzing the frequency
with which different @@-commands are used in the @cite{GNU Emacs
Manual} and the @cite{GDB Manual}.  If you wish to add your own insert
commands, you can bind a keyboard macro to a key, use abbreviations,
or extend the code in @file{texinfo.el}.

@findex texinfo-start-menu-description
@cindex Menu description, start
@cindex Description for menu, start
@kbd{C-c C-c C-d} (@code{texinfo-start-menu-description}) is an insert
command that works differently from the other insert commands.  It
inserts a node's section or chapter title in the space for the
description in a menu entry line.  (A menu entry has three parts, the
entry name, the node name, and the description.  Only the node name is
required, but a description helps explain what the node is about.
@xref{Partes de Menu, , Partes de Menu}.)

To use @code{texinfo-start-menu-description}, position point in a menu
entry line and type @kbd{C-c C-c C-d}.  The command looks for and copies
the title that goes with the node name, and inserts the title as a
description; it positions point at beginning of the inserted text so you
can edit it.  The function does not insert the title if the menu entry
line already contains a description.

This command is only an aid to writing descriptions; it does not do the
whole job.  You must edit the inserted text since a title tends to use
the same words as a node name but a useful description uses different
words.

@node Showing the Structure
@section Showing the Sectioning Structure of a File
@cindex Showing the sectioning structure of a file
@cindex Sectioning structure of a file, showing
@cindex Structure of a file, showing
@cindex Outline of file structure, showing
@cindex Contents-like outline of file structure
@cindex File sectioning structure, showing
@cindex Texinfo file sectioning structure, showing

You can show the sectioning structure of a Texinfo file by using the
@kbd{C-c C-s} command (@code{texinfo-show-structure}).  This command
lists the lines that begin with the @@-commands for @code{@@chapter},
@code{@@section}, and the like.  It constructs what amounts to a table
of contents.  These lines are displayed in another buffer called the
@samp{*Occur*} buffer.  In that buffer, you can position the cursor
over one of the lines and use the @kbd{C-c C-c} command
(@code{occur-mode-goto-occurrence}), to jump to the corresponding spot
in the Texinfo file.

@table @kbd
@item  C-c C-s
@itemx M-x texinfo-show-structure
@findex texinfo-show-structure
Show the @code{@@chapter}, @code{@@section}, and such lines of a
Texinfo file.

@item  C-c C-c
@itemx M-x occur-mode-goto-occurrence
@findex occur-mode-goto-occurrence
Go to the line in the Texinfo file corresponding to the line under the
cursor in the @file{*Occur*} buffer.
@end table

If you call @code{texinfo-show-structure} with a prefix argument by
typing @w{@kbd{C-u C-c C-s}}, it will list not only those lines with the
@@-commands for @code{@@chapter}, @code{@@section}, and the like, but
also the @code{@@node} lines.  You can use @code{texinfo-show-structure}
with a prefix argument to check whether the `Next', `Previous', and `Up'
pointers of an @code{@@node} line are correct.

Often, when you are working on a manual, you will be interested only
in the structure of the current chapter.  In this case, you can mark
off the region of the buffer that you are interested in by using the
@kbd{C-x n n} (@code{narrow-to-region}) command and
@code{texinfo-show-structure} will work on only that region.  To see
the whole buffer again, use @w{@kbd{C-x n w}} (@code{widen}).
(@xref{Narrowing, , , emacs, The GNU Emacs Manual}, for more
information about the narrowing commands.)

@vindex page-delimiter
@cindex Page delimiter in Texinfo mode
In addition to providing the @code{texinfo-show-structure} command,
Texinfo mode sets the value of the page delimiter variable to match
the chapter-level @@-commands.  This enables you to use the @kbd{C-x
]} (@code{forward-page}) and @kbd{C-x [} (@code{backward-page})
commands to move forward and backward by chapter, and to use the
@kbd{C-x n p} (@code{narrow-to-page}) command to narrow to a chapter.
@xref{Pages, , , emacs, The GNU Emacs Manual}, for more information
about the page commands.


@node Atualizando Nodos e Menus
@section Atualizando Nodos e Menus

@cindex Atualizando Nodos e Menus
@cindex Create Nodos, menus automatically
@cindex Insert Nodos, menus automatically
@cindex Automatically insert Nodos, menus

Texinfo mode provides commands for automatically creating or updating
menus and node pointers.  The commands are called ``update'' commands
because their most frequent use is for updating a Texinfo file after you
have worked on it; but you can use them to insert the `Next',
`Previous', and `Up' pointers into an @code{@@node} line that has none
and to create menus in a file that has none.

If you do not use any updating commands, you need to write menus by
hand, which is a tedious task.

@menu
* Updating Commands::           Five major updating commands.
* Updating Requirements::       How to structure a Texinfo file for
                                  using the updating command.
* Other Updating Commands::     How to indent descriptions, insert
                                  missing Nodos lines, and update
                                  Nodos in sequence.
@end menu

@node Updating Commands
@subsection The Updating Commands

You can use the updating commands to:

@itemize @bullet
@item
insert or update the `Next', `Previous', and `Up' pointers of a node,

@item
insert or update the menu for a section, and

@item
create a master menu for a Texinfo source file.
@end itemize

You can also use the commands to update all the Nodos and menus in a
region or in a whole Texinfo file.

The updating commands work only with conventional Texinfo files, which
are structured hierarchically like books.  In such files, a structuring
command line must follow closely after each @code{@@node} line, except
for the `Top' @code{@@node} line.  (A @dfn{structuring command line} is
a line beginning with @code{@@chapter}, @code{@@section}, or other
similar command.)

You can write the structuring command line on the line that follows
immediately after an @code{@@node} line or else on the line that
follows after a single @code{@@comment} line or a single
@code{@@ifinfo} line.  You cannot interpose more than one line between
the @code{@@node} line and the structuring command line; and you may
interpose only a @code{@@comment} line or an @code{@@ifinfo} line.

Commands which work on a whole buffer require that the `Top' node be
followed by a node with a @code{@@chapter} or equivalent-level command.
The menu updating commands will not create a main or master menu for a
Texinfo file that has only @code{@@chapter}-level Nodos!  The menu
updating commands only create menus @emph{within} Nodos for lower level
Nodos.  To create a menu of chapters, you must provide a `Top'
node.

The menu updating commands remove menu entries that refer to other Info
files since they do not refer to Nodos within the current buffer.  This
is a deficiency.  Rather than use menu entries, you can use cross
references to refer to Outros Arquivos Info.  None of the updating commands
affect cross-references.

Texinfo mode has five updating commands that are used most often: two
are for updating the node pointers or menu of a single node (or a
region); two are for updating every node pointer and menu in a file;
and one, the @code{texinfo-master-menu} command, is for creating a
master menu for a complete file, and optionally, for updating every
node and menu in the whole Texinfo file.

The @code{texinfo-master-menu} command is the primary command:

@table @kbd
@item C-c C-u m
@itemx M-x texinfo-master-menu
@findex texinfo-master-menu
Create or update a master menu that includes all the other menus
(incorporating the descriptions from pre-existing menus, if
any).

With an argument (prefix argument, @kbd{C-u,} if interactive), first create or
update all the Nodos and all the regular menus in the buffer before
constructing the master menu.  (@xref{O Nodo Top, , The Top Node and
Master Menu}, for more about a master menu.)

For @code{texinfo-master-menu} to work, the Texinfo file must have a
`Top' node and at least one subsequent node.

After extensively editing a Texinfo file, you can type the following:

@example
C-u M-x texinfo-master-menu
@exdent or
C-u C-c C-u m
@end example

@noindent
This updates all the Nodos and menus completely and all at once.
@end table

The other major updating commands do smaller jobs and are designed for
the person who updates Nodos and menus as he or she writes a Texinfo
file.

@need 1000
The commands are:

@table @kbd
@item C-c C-u C-n
@itemx M-x texinfo-update-node
@findex texinfo-update-node
Insert the `Next', `Previous', and `Up' pointers for the node that point is
within (i.e., for the @code{@@node} line preceding point).  If the
@code{@@node} line has pre-existing `Next', `Previous', or `Up'
pointers in it, the old pointers are removed and new ones inserted.
With an argument (prefix argument, @kbd{C-u}, if interactive), this command
updates all @code{@@node} lines in the region (which is the text
between point and mark).

@item C-c C-u C-m
@itemx M-x texinfo-make-menu
@findex texinfo-make-menu
Create or update the menu in the node that point is within.
With an argument (@kbd{C-u} as prefix argument, if
interactive), the command makes or updates menus for the
Nodos which are either within or a part of the
region.

Whenever @code{texinfo-make-menu} updates an existing menu, the
descriptions from that menu are incorporated into the new menu.  This
is done by copying descriptions from the existing menu to the entries
in the new menu that have the same node names.  If the node names are
different, the descriptions are not copied to the new menu.

@item C-c C-u C-e
@itemx M-x texinfo-every-node-update
@findex texinfo-every-node-update
Insert or update the `Next', `Previous', and `Up' pointers for every
node in the buffer.

@item C-c C-u C-a
@itemx M-x texinfo-all-menus-update
@findex texinfo-all-menus-update
Create or update all the menus in the buffer.  With an argument
(@kbd{C-u} as prefix argument, if interactive), first insert
or update all the node
pointers before working on the menus.

If a master menu exists, the @code{texinfo-all-menus-update} command
updates it; but the command does not create a new master menu if none
already exists.  (Use the @code{texinfo-master-menu} command for
that.)

When working on a document that does not merit a master menu, you can
type the following:

@example
C-u C-c C-u C-a
@exdent or
C-u M-x texinfo-all-menus-update
@end example

@noindent
This updates all the Nodos and menus.
@end table

The @code{texinfo-column-for-description} variable specifies the
column to which menu descriptions are indented.  By default, the value
is 32 although it can be useful to reduce it to as low as 24.  You
can set the variable via customization (@pxref{Customization,,,
emacs, The GNU Emacs Manual}) or with the @kbd{M-x set-variable}
command (@pxref{Examining, , Examining and Setting Variables, emacs,
The GNU Emacs Manual}).

Also, the @code{texinfo-indent-menu-description} command may be used to
indent existing menu descriptions to a specified column.  Finally, if
you wish, you can use the @code{texinfo-insert-node-lines} command to
insert missing @code{@@node} lines into a file.  (@xref{Other Updating
Commands}, for more information.)

@node Updating Requirements
@subsection Updating Requirements
@cindex Updating requirements
@cindex Requirements for updating commands

To use the updating commands, you must organize the Texinfo file
hierarchically with chapters, sections, subsections, and the like.
When you construct the hierarchy of the manual, do not `jump down'
more than one level at a time: you can follow the `Top' node with a
chapter, but not with a section; you can follow a chapter with a
section, but not with a subsection.  However, you may `jump up' any
number of levels at one time---for example, from a subsection to a
chapter.

Each @code{@@node} line, with the exception of the line for the `Top'
node, must be followed by a line with a structuring command such as
@code{@@chapter}, @code{@@section}, or
@code{@@unnumberedsubsec}.

Each @code{@@node} line/structuring-command line combination
must look either like this:

@example
@group
@@node     Comments,  Minimum, Conventions, Visão Geral
@@comment  node-name, next,    previous,    up
@@section Comments
@end group
@end example

or like this (without the @code{@@comment} line):

@example
@group
@@node Comments, Minimum, Conventions, Visão Geral
@@section Comments
@end group
@end example

or like this (without the explicit node pointers):

@example
@group
@@node Comments
@@section Comments
@end group
@end example

@noindent
In this example, `Comments' is the name of both the node and the
section.  The next node is called `Minimum' and the previous node is
called `Conventions'.  The `Comments' section is within the `Visão Geral'
node, which is specified by the `Up' pointer.  (Instead of an
@code{@@comment} line, you may also write an @code{@@ifinfo} line.)

If a file has a `Top' node, it must be called @samp{top} or @samp{Top}
and be the first node in the file.

The menu updating commands create a menu of sections within a chapter,
a menu of subsections within a section, and so on.  This means that
you must have a `Top' node if you want a menu of chapters.

Incidentally, the @code{makeinfo} command will create an Info file for a
hierarchically organized Texinfo file that lacks `Next', `Previous' and
`Up' pointers.  Thus, if you can be sure that your Texinfo file will be
formatted with @code{makeinfo}, you have no need for the update node
commands.  (@xref{Creating an Info File}, for more information about
@code{makeinfo}.)


@node Other Updating Commands
@subsection Other Updating Commands

In addition to the five major updating commands, Texinfo mode
possesses several less frequently used updating commands:

@table @kbd
@item M-x texinfo-insert-node-lines
@findex texinfo-insert-node-lines
Insert @code{@@node} lines before the @code{@@chapter},
@code{@@section}, and other sectioning commands wherever they are
missing throughout a region in a Texinfo file.

With an argument (@kbd{C-u} as prefix argument, if interactive), the
command @code{texinfo-insert-node-lines} not only inserts
@code{@@node} lines but also inserts the chapter or section titles as
the names of the corresponding Nodos.  In addition, it inserts the
titles as node names in pre-existing @code{@@node} lines that lack
names.  Since node names should be more concise than section or
chapter titles, you must manually edit node names so inserted.

For example, the following marks a whole buffer as a region and inserts
@code{@@node} lines and titles throughout:

@example
C-x h C-u M-x texinfo-insert-node-lines
@end example

This command inserts titles as node names in @code{@@node} lines; the
@code{texinfo-start-menu-description} command (@pxref{Inserting,
Inserting Frequently Used Commands}) inserts titles as descriptions in
menu entries, a different action.  However, in both cases, you need to
edit the inserted text.

@item M-x texinfo-multiple-files-update
@findex texinfo-multiple-files-update @r{(in brief)}
Update Nodos and menus in a document built from several separate files.
With @kbd{C-u} as a prefix argument, create and insert a master menu in
the outer file.  With a numeric prefix argument, such as @kbd{C-u 2}, first
update all the menus and all the `Next', `Previous', and `Up' pointers
of all the included files before creating and inserting a master menu in
the outer file.  The @code{texinfo-multiple-files-update} command is
described in the appendix on @code{@@include} files.
@xref{@code{texinfo-multiple-files-update}}.

@item M-x texinfo-indent-menu-description
@findex texinfo-indent-menu-description
Indent every description in the menu following point to the specified
column.  You can use this command to give yourself more space for
descriptions.  With an argument (@kbd{C-u} as prefix argument, if
interactive), the @code{texinfo-indent-menu-description} command indents
every description in every menu in the region.  However, this command
does not indent the second and subsequent lines of a multi-line
description.

@item M-x texinfo-sequential-node-update
@findex texinfo-sequential-node-update
Insert the names of the Nodos immediately following and preceding the
current node as the `Next' or `Previous' pointers regardless of those
Nodos' hierarchical level.  This means that the `Next' node of a
subsection may well be the next chapter.  Sequentially ordered Nodos are
useful for novels and other documents that you read through
sequentially.  (However, in Info, the @kbd{g *} command lets
you look through the file sequentially, so sequentially ordered Nodos
are not strictly necessary.)  With an argument (prefix argument, if
interactive), the @code{texinfo-sequential-node-update} command
sequentially updates all the Nodos in the region.
@end table

@node Info Formatting
@section Formatting for Info
@cindex Formatting for Info
@cindex Running an Info formatter
@cindex Info formatting

Texinfo mode provides several commands for formatting part or all of a
Texinfo file for Info.  Often, when you are writing a document, you
want to format only part of a file---that is, a region.

You can use either the @code{texinfo-format-region} or the
@code{makeinfo-region} command to format a region:

@table @kbd
@findex texinfo-format-region
@item  C-c C-e C-r
@itemx M-x texinfo-format-region
@itemx C-c C-m C-r
@itemx M-x makeinfo-region
Format the current region for Info.
@end table

You can use either the @code{texinfo-format-buffer} or the
@code{makeinfo-buffer} command to format a whole buffer:

@table @kbd
@findex texinfo-format-buffer
@item  C-c C-e C-b
@itemx M-x texinfo-format-buffer
@itemx C-c C-m C-b
@itemx M-x makeinfo-buffer
Format the current buffer for Info.
@end table

@need 1000
For example, after writing a Texinfo file, you can type the following:

@example
C-u C-c C-u m
@exdent or
C-u M-x texinfo-master-menu
@end example

@noindent
This updates all the Nodos and menus.  Then type the following to create
an Info file:

@example
C-c C-m C-b
@exdent or
M-x makeinfo-buffer
@end example

@xref{Creating an Info File} for details about Info formatting.

@node Printing
@comment node-name,  next,  previous,  up
@section Printing
@cindex Formatting for printing
@cindex Printing a region or buffer
@cindex Region formatting and printing
@cindex Buffer formatting and printing
@cindex Part of file formatting and printing

Typesetting and printing a Texinfo file is a multi-step process in
which you first create a file for printing (called a DVI file), and
then print the file.  Optionally, you may also create indices.  To do
this, you must run the @code{texindex} command after first running the
@code{tex} typesetting command; and then you must run the @code{tex}
command again.  Or else run the @code{texi2dvi} command which
automatically creates indices as needed (@pxref{Format with
@command{texi2dvi}}).

Often, when you are writing a document, you want to typeset and print
only part of a file to see what it will look like.  You can use the
@code{texinfo-tex-region} and related commands for this purpose.  Use
the @code{texinfo-tex-buffer} command to format all of a
buffer.

@table @kbd
@item  C-c C-t C-b
@itemx M-x texinfo-tex-buffer
@findex texinfo-tex-buffer
Run @code{texi2dvi} on the buffer.  In addition to running @TeX{} on the
buffer, this command automatically creates or updates indices as
needed.

@item  C-c C-t C-r
@itemx M-x texinfo-tex-region
@findex texinfo-tex-region
Run @TeX{} on the region.

@item C-c C-t C-i
@itemx M-x texinfo-texindex
Run @code{texindex} to sort the indices of a Texinfo file formatted with
@code{texinfo-tex-region}.  The @code{texinfo-tex-region} command does
not run @code{texindex} automatically; it only runs the @code{tex}
typesetting command.  You must run the @code{texinfo-tex-region} command
a second time after sorting the raw index files with the @code{texindex}
command.  (Usually, you do not format an index when you format a region,
only when you format a buffer.  Now that the @code{texi2dvi} command
exists, there is little or no need for this command.)

@item C-c C-t C-p
@itemx M-x texinfo-tex-print
@findex texinfo-tex-print
Print the file (or the part of the file) previously formatted with
@code{texinfo-tex-buffer} or @code{texinfo-tex-region}.
@end table

For @code{texinfo-tex-region} or @code{texinfo-tex-buffer} to work, the
file @emph{must} start with a @samp{\input texinfo} line and must
include a @code{@@settitle} line.  The file must end with @code{@@bye}
on a line by itself.  (When you use @code{texinfo-tex-region}, you must
surround the @code{@@settitle} line with start-of-header and
end-of-header lines.)

@xref{Cópia Impressa}, for a description of the other @TeX{} related
commands, such as @code{tex-show-print-queue}.

@node Modo Texinfo Summary
@section Modo Texinfo Summary

In Texinfo mode, each set of commands has default keybindings that
begin with the same keys.  All the commands that are custom-created
for Texinfo mode begin with @kbd{C-c}.  The keys are somewhat
mnemonic.

@subheading Insert Commands

The insert commands are invoked by typing @kbd{C-c} twice and then the
first letter of the @@-command to be inserted.  (It might make more
sense mnemonically to use @kbd{C-c C-i}, for `custom insert', but
@kbd{C-c C-c} is quick to type.)

@example
C-c C-c c       @r{Insert} @samp{@@code}.
C-c C-c d       @r{Insert} @samp{@@dfn}.
C-c C-c e       @r{Insert} @samp{@@end}.
C-c C-c i       @r{Insert} @samp{@@item}.
C-c C-c n       @r{Insert} @samp{@@node}.
C-c C-c s       @r{Insert} @samp{@@samp}.
C-c C-c v       @r{Insert} @samp{@@var}.
C-c @{       @r{Insert braces.}
C-c ]
C-c @}       @r{Move out of enclosing braces.}

@group
C-c C-c C-d     @r{Insert a node's section title}
               @r{in the space for the description}
               @r{in a menu entry line.}
@end group
@end example

@subheading Show Structure

The @code{texinfo-show-structure} command is often used within a
narrowed region.

@example
C-c C-s         @r{List all the headings.}
@end example

@subheading The Master Update Command

The @code{texinfo-master-menu} command creates a master menu; and can
be used to update every node and menu in a file as well.

@c Probably should use @tables in this section.
@example
@group
C-c C-u m
M-x texinfo-master-menu
               @r{Create or update a master menu.}
@end group

@group
C-u C-c C-u m   @r{With @kbd{C-u} as a prefix argument, first}
               @r{create or update all Nodos and regular}
               @r{menus, and then create a master menu.}
@end group
@end example

@subheading Update Pointers

The update pointer commands are invoked by typing @kbd{C-c C-u} and
then either @kbd{C-n} for @code{texinfo-update-node} or @kbd{C-e} for
@code{texinfo-every-node-update}.

@example
C-c C-u C-n     @r{Update a node.}
C-c C-u C-e     @r{Update every node in the buffer.}
@end example

@subheading Update Menus

Invoke the  update menu commands by typing @kbd{C-c C-u}
and then either @kbd{C-m} for @code{texinfo-make-menu} or
@kbd{C-a} for @code{texinfo-all-menus-update}.  To update
both Nodos and menus at the same time, precede @kbd{C-c C-u
C-a} with @kbd{C-u}.

@example
C-c C-u C-m     @r{Make or update a menu.}

@group
C-c C-u C-a     @r{Make or update all}
               @r{menus in a buffer.}
@end group

@group
C-u C-c C-u C-a @r{With @kbd{C-u} as a prefix argument,}
               @r{first create or update all Nodos and}
               @r{then create or update all menus.}
@end group
@end example

@subheading Format for Info

The Info formatting commands that are written in Emacs Lisp are
invoked by typing @kbd{C-c C-e} and then either @kbd{C-r} for a region
or @kbd{C-b} for the whole buffer.

The Info formatting commands that are written in C and based on the
@code{makeinfo} program are invoked by typing @kbd{C-c C-m} and then
either @kbd{C-r} for a region or @kbd{C-b} for the whole buffer.

@need 800
@noindent
Use the @code{texinfo-format@dots{}} commands:

@example
@group
C-c C-e C-r     @r{Format the region.}
C-c C-e C-b     @r{Format the buffer.}
@end group
@end example

@need 750
@noindent
Use @code{makeinfo}:

@example
C-c C-m C-r     @r{Format the region.}
C-c C-m C-b     @r{Format the buffer.}
C-c C-m C-l     @r{Recenter the @code{makeinfo} output buffer.}
C-c C-m C-k     @r{Kill the @code{makeinfo} formatting job.}
@end example

@subheading Typeset and Print

The @TeX{} typesetting and printing commands are invoked by typing
@kbd{C-c C-t} and then another control command: @kbd{C-r} for
@code{texinfo-tex-region}, @kbd{C-b} for @code{texinfo-tex-buffer},
and so on.

@example
C-c C-t C-r     @r{Run @TeX{} on the region.}
C-c C-t C-b     @r{Run} @code{texi2dvi} @r{on the buffer.}
C-c C-t C-i     @r{Run} @code{texindex}.
C-c C-t C-p     @r{Print the DVI file.}
C-c C-t C-q     @r{Show the print queue.}
C-c C-t C-d     @r{Delete a job from the print queue.}
C-c C-t C-k     @r{Kill the current @TeX{} formatting job.}
C-c C-t C-x     @r{Quit a currently stopped @TeX{} formatting job.}
C-c C-t C-l     @r{Recenter the output buffer.}
@end example

@subheading Other Updating Commands

The remaining updating commands do not have standard keybindings because
they are rarely used.

@example
@group
M-x texinfo-insert-node-lines
               @r{Insert missing @code{@@node} lines in region.}
               @r{With @kbd{C-u} as a prefix argument,}
               @r{use section titles as node names.}
@end group

@group
M-x texinfo-multiple-files-update
               @r{Update a multi-file document.}
               @r{With @kbd{C-u 2} as a prefix argument,}
               @r{create or update all Nodos and menus}
               @r{in all included files first.}
@end group

@group
M-x texinfo-indent-menu-description
               @r{Indent descriptions.}
@end group

@group
M-x texinfo-sequential-node-update
               @r{Insert node pointers in strict sequence.}
@end group
@end example


@node Cabeçalhos
@appendix Cabeçalhos de Página
@cindex Cabeçalhos
@cindex Footings
@cindex Page numbering
@cindex Page headings
@cindex Formatting headings and footings

Most printed manuals contain headings along the top of every page
except the title and copyright pages.  Some manuals also contain
footings. @c HTML output also supports something like these, but in a
@c completely different way: @pxref{Customizing HTML Page Layout}.
Cabeçalhos and footings have no meaning in Info or the other output
formats.

@menu
* Cabeçalhos Introduced::         Conventions for using page headings.
* Heading Format::              Standard page heading formats.
* Heading Choice::              How to specify the type of page heading.
* Custom Cabeçalhos::             How to create your own headings and footings.
@end menu

@node Cabeçalhos Introduced
@section Cabeçalhos Introduced

Texinfo provides standard page heading formats for manuals that are
printed on one side of each sheet of paper and for manuals that are
printed on both sides of the paper.  Typically, you will use these
formats, but you can specify your own format if you wish.

In addition, you can specify whether chapters should begin on a new
page, or merely continue the same page as the previous chapter; and if
chapters begin on new pages, you can specify whether they must be
odd-numbered pages.

By convention, a book is printed on both sides of each sheet of paper.
When you open a book, the right-hand page is odd-numbered, and
chapters begin on right-hand pages---a preceding left-hand page is
left blank if necessary.  Reports, however, are often printed on just
one side of paper, and chapters begin on a fresh page immediately
following the end of the preceding chapter.  In short or informal
reports, chapters often do not begin on a new page at all, but are
separated from the preceding text by a small amount of whitespace.

The @code{@@setchapternewpage} command controls whether chapters begin
on new pages, and whether one of the standard heading formats is used.
In addition, Texinfo has several heading and footing commands that you
can use to generate your own heading and footing formats.

In Texinfo, headings and footings are single lines at the tops and
bottoms of pages; you cannot create multiline headings or footings.
Each header or footer line is divided into three parts: a left part, a
middle part, and a right part.  Any part, or a whole line, may be left
blank.  Text for the left part of a header or footer line is set
flushleft; text for the middle part is centered; and, text for the
right part is set flushright.


@node Heading Format
@section Standard Heading Formats

Texinfo provides two standard heading formats, one for manuals printed
on one side of each sheet of paper, and the other for manuals printed
on both sides of the paper.

By default, nothing is specified for the footing of a Texinfo file,
so the footing remains blank.

The standard format for single-sided printing consists of a header
line in which the left-hand part contains the name of the chapter, the
central part is blank, and the right-hand part contains the page
number.

@need 950
A single-sided page looks like this:

@example
@group
  _______________________
 |                       |
 | chapter   page number |
 |                       |
 | Start of text ...     |
 | ...                   |
 |                       |
@end group
@end example

The standard format for two-sided printing depends on whether the page
number is even or odd.  By convention, even-numbered pages are on the
left- and odd-numbered pages are on the right.  (@TeX{} will adjust the
widths of the left- and right-hand margins.  Usually, widths are
correct, but during double-sided printing, it is wise to check that
pages will bind properly---sometimes a printer will produce output in
which the even-numbered pages have a larger right-hand margin than the
odd-numbered pages.)

In the standard double-sided format, the left part of the left-hand
(even-numbered) page contains the page number, the central part is
blank, and the right part contains the title (specified by the
@code{@@settitle} command).  The left part of the right-hand
(odd-numbered) page contains the name of the chapter, the central part
is blank, and the right part contains the page number.

@need 750
Two pages, side by side as in an open book, look like this:

@example
@group
  _______________________     _______________________
 |                       |   |                       |
 | page number     title |   | chapter   page number |
 |                       |   |                       |
 | Start of text ...     |   | More  text ...        |
 | ...                   |   | ...                   |
 |                       |   |                       |
@end group
@end example

@noindent
The chapter name is preceded by the word ``Chapter'', the chapter number
and a colon.  This makes it easier to keep track of where you are in the
manual.

@node Heading Choice
@section Specifying the Type of Heading

@TeX{} does not begin to generate page headings for a standard Texinfo
file until it reaches the @code{@@end titlepage} command.  Thus, the
title and copyright pages are not numbered.  The @code{@@end
titlepage} command causes @TeX{} to begin to generate page headings
according to a standard format specified by the
@code{@@setchapternewpage} command that precedes the
@code{@@titlepage} section.

@need 1000
There are four possibilities:

@table @asis
@item No @code{@@setchapternewpage} command
Cause @TeX{} to specify the single-sided heading format, with chapters
on new pages. This is the same as @code{@@setchapternewpage on}.

@item @code{@@setchapternewpage on}
Specify the single-sided heading format, with chapters on new pages.

@item @code{@@setchapternewpage off}
Cause @TeX{} to start a new chapter on the same page as the last page
of the preceding chapter, after skipping some vertical whitespace.
Also cause @TeX{} to typeset for single-sided printing.  (You can
override the headers format with the @code{@@headings double} command;
@pxref{@code{@@headings}}.)

@item @code{@@setchapternewpage odd}
Specify the double-sided heading format, with chapters on new pages.
@end table

@noindent
Texinfo lacks a @code{@@setchapternewpage even} command.


@node Custom Cabeçalhos
@section How to Make Your Own Cabeçalhos

You can use the standard headings provided with Texinfo or specify
your own.  By default, Texinfo has no footers, so if you specify them,
the available page size for the main text will be slightly reduced.

Texinfo provides six commands for specifying headings and
footings:
@itemize @bullet
@item
@code{@@everyheading} and @code{@@everyfooting} generate page headers and
footers that are the same for both even- and odd-numbered pages.
@item
@code{@@evenheading} and @code{@@evenfooting} command generate headers
and footers for even-numbered (left-hand) pages.
@item
@code{@@oddheading} and @code{@@oddfooting} generate headers and footers
for odd-numbered (right-hand) pages.
@end itemize

Write custom heading specifications in the Texinfo file immediately
after the @code{@@end titlepage} command.  You must cancel the
predefined heading commands with the @code{@@headings off} command
before defining your own specifications.

@need 1000
Here is how to tell @TeX{} to place the chapter name at the left, the
page number in the center, and the date at the right of every header
for both even- and odd-numbered pages:

@example
@group
@@headings off
@@everyheading @@thischapter @@| @@thispage @@| @@today@{@}
@end group
@end example

@noindent
You need to divide the left part from the central part and the central
part from the right part by inserting @samp{@@|} between parts.
Otherwise, the specification command will not be able to tell where
the text for one part ends and the next part begins.

Each part can contain text or @@-commands.  The text is printed as if
the part were within an ordinary paragraph in the body of the page.
The @@-commands replace themselves with the page number, date, chapter
name, or whatever.

@need 950
Here are the six heading and footing commands:

@table @code
@item @@everyheading @var{left} @@| @var{center} @@| @var{right}
@itemx @@everyfooting @var{left} @@| @var{center} @@| @var{right}
@findex everyheading
@findex everyfooting
The `every' commands specify the format for both even- and odd-numbered
pages.  These commands are for documents that are printed on one side
of each sheet of paper, or for documents in which you want symmetrical
headers or footers.

@item @@evenheading @var{left} @@| @var{center} @@| @var{right}
@itemx @@oddheading  @var{left} @@| @var{center} @@| @var{right}
@itemx @@evenfooting @var{left} @@| @var{center} @@| @var{right}
@itemx @@oddfooting  @var{left} @@| @var{center} @@| @var{right}
@findex evenheading
@findex evenfooting
@findex oddheading
@findex oddfooting
The `even' and `odd' commands specify the format for even-numbered
pages and odd-numbered pages.  These commands are for books and
manuals that are printed on both sides of each sheet of paper.
@end table

Use the @samp{@@this@dots{}} series of @@-commands to
provide the names of chapters
and sections and the page number.  You can use the
@samp{@@this@dots{}} commands in the left, center, or right portions
of headers and footers, or anywhere else in a Texinfo file so long as
they are between @code{@@iftex} and @code{@@end iftex} commands.

@need 1000
Here are the @samp{@@this@dots{}} commands:

@table @code
@item @@thispage
@findex thispage
Expands to the current page number.

@item @@thissectionname
@findex thissectionname
Expands to the name of the current section.

@item @@thissectionnum
@findex thissectionnum
Expands to the number of the current section.

@item @@thissection
@findex thissection
Expands to the number and name of the current section, in the format
`Section 1: Title'.

@item @@thischaptername
@findex thischaptername
Expands to the name of the current chapter.

@item @@thischapternum
@findex thischapternum
Expands to the number of the current chapter, or letter of the current
appendix.

@item @@thischapter
@findex thischapter
Expands to the number and name of the current
chapter, in the format `Chapter 1: Title'.

@item @@thistitle
@findex thistitle
Expands to the name of the document, as specified by the
@code{@@settitle} command.

@item @@thisfile
@findex thisfile
For @code{@@include} files only: expands to the name of the current
@code{@@include} file.  If the current Texinfo source file is not an
@code{@@include} file, this command has no effect.  This command does
@emph{not} provide the name of the current Texinfo source file unless
it is an @code{@@include} file.  (@xref{Arquivos Include}, for more
information about @code{@@include} files.)
@end table

@noindent
You can also use the @code{@@today@{@}} command, which expands to the
current date, in `1 Jan 1900' format.
@findex today

Other @@-commands and text are printed in a header or footer just as
if they were in the body of a page.  It is useful to incorporate text,
particularly when you are writing drafts:

@example
@group
@@headings off
@@everyheading @@emph@{Draft!@} @@| @@thispage @@| @@thischapter
@@everyfooting @@| @@| Version: 0.27: @@today@{@}
@end group
@end example

Beware of overlong titles: they may overlap another part of the
header or footer and blot it out.

If you have very short chapters and/or sections, several of them can
appear on a single page.  You can specify which chapters and sections
you want @code{@@thischapter}, @code{@@thissection} and other such
macros to refer to on such pages as follows:

@table @code
@item @@everyheadingmarks @var{ref}
@itemx @@everyfootingmarks @var{ref}
@findex everyheadingmarks
@findex everyfootingmarks
The @var{ref} argument can be either @code{top} (the @code{@@this...}
commands will refer to the chapter/section at the top of a page) or
@code{bottom} (the commands will reflect the situation at the bottom
of a page).  These @samp{@@every...} commands specify what to do on
both even- and odd-numbered pages.

@item @@evenheadingmarks @var{ref}
@itemx @@oddheadingmarks @var{ref}
@itemx @@evenfootingmarks @var{ref}
@itemx @@oddfootingmarks @var{ref}
@findex evenheadingmarks
@findex oddheadingmarks
@findex evenfootingmarks
@findex oddfootingmarks
These @samp{@@even...} and @samp{@@odd...} commands specify what to do
on only even- or odd-numbered pages, respectively.  The @var{ref}
argument is the same as with the @samp{@@every...} commands.
@end table

Write these commands immediately after the @code{@@...contents}
commands, or after the @code{@@end titlepage} command if you don't
have a table of contents or if it is printed at the end of your
manual.

By default the @code{@@this...} commands reflect the situation at the
bottom of a page both in headings and in footings.


@node Capturando Erros
@appendix Capturando Erros
@cindex Structure, catching mistakes in
@cindex Nodos, catching mistakes
@cindex Catching mistakes
@cindex Correcting mistakes
@cindex Mistakes, catching
@cindex Problems, catching
@cindex Debugging the Texinfo structure

Besides mistakes in the content of your documentation, there are two
kinds of mistake you can make with Texinfo: you can make mistakes with
@@-commands, and you can make mistakes with the structure of the Nodos
and chapters.

Emacs has two tools for catching the @@-command mistakes and two for
catching structuring mistakes.

For finding problems with @@-commands, you can run @TeX{} or a region
formatting command on the region that has a problem; indeed, you can
run these commands on each region as you write it.

For finding problems with the structure of Nodos and chapters, you can use
@kbd{C-c C-s} (@code{texinfo-show-structure}) and the related @code{occur}
command and you can use the @kbd{M-x Info-validate} command.

@menu
* @command{makeinfo} Preferred::          @code{makeinfo} finds errors.
* Debugging with Info::         How to catch errors with Info formatting.
* Debugging with @TeX{}::          How to catch errors with @TeX{} formatting.
* Using @code{texinfo-show-structure}:: How to use @code{texinfo-show-structure}.
* Using @code{occur}::                 How to list all lines containing a pattern.
* Running @code{Info-validate}::       How to find badly referenced Nodos.
@end menu


@node @command{makeinfo} Preferred
@section @command{makeinfo} Preferred

@c anchor{makeinfo Preferred}@c prev name

The @code{makeinfo} program does an excellent job of catching errors
and reporting them---far better than @code{texinfo-format-region} or
@code{texinfo-format-buffer}.  In addition, the various functions for
automatically creating and updating node pointers and menus remove
many opportunities for human error.

If you can, use the updating commands to create and insert pointers
and menus.  These prevent many errors.  Then use @code{makeinfo} (or
its Texinfo mode manifestations, @code{makeinfo-region} and
@code{makeinfo-buffer}) to format your file and check for other
errors.  This is the best way to work with Texinfo.  But if you
cannot use @code{makeinfo}, or your problem is very puzzling, then you
may want to use the tools described in this appendix.


@node Debugging with Info
@section Catching Errors with Info Formatting
@cindex Catching errors with Info formatting
@cindex Debugging with Info formatting

After you have written part of a Texinfo file, you can use the
@code{texinfo-format-region} or the @code{makeinfo-region} command to
see whether the region formats properly.

Most likely, however, you are reading this section because for some
reason you cannot use the @code{makeinfo-region} command; therefore, the
rest of this section presumes that you are using
@code{texinfo-format-region}.

If you have made a mistake with an @@-command,
@code{texinfo-format-region} will stop processing at or after the
error and display an error message.  To see where in the buffer the
error occurred, switch to the @samp{*Info Region*} buffer; the cursor
will be in a position that is after the location of the error.  Also,
the text will not be formatted after the place where the error
occurred (or more precisely, where it was detected).

For example, if you accidentally end a menu with the command @code{@@end
menus} with an `s' on the end, instead of with @code{@@end menu}, you
will see an error message that says:

@example
@@end menus is not handled by texinfo
@end example

@noindent
The cursor will stop at the point in the buffer where the error
occurs, or not long after it.  The buffer will look like this:

@example
@group
---------- Buffer: *Info Region* ----------
* Menu:

* Using texinfo-show-structure::  How to use
                                 `texinfo-show-structure'
                                 to catch mistakes.
* Running Info-validate::         How to check for
                                 unreferenced Nodos.
@@end menus
@point{}
---------- Buffer: *Info Region* ----------
@end group
@end example

The @code{texinfo-format-region} command sometimes provides slightly
odd error messages.  For example, the following cross-reference fails
to format:

@example
(@@xref@{Capturando Erros, for more info.)
@end example

@noindent
In this case, @code{texinfo-format-region} detects the missing closing
brace but displays a message that says @samp{Unbalanced parentheses}
rather than @samp{Unbalanced braces}.  This is because the formatting
command looks for mismatches between braces as if they were
parentheses.

Sometimes @code{texinfo-format-region} fails to detect mistakes.  For
example, in the following, the closing brace is swapped with the
closing parenthesis:

@example
(@@xref@{Capturando Erros), for more info.@}
@end example

@noindent
Formatting produces:
@example
(*Note for more info.: Capturando Erros)
@end example

The only way for you to detect this error is to realize that the
reference should have looked like this:

@example
(*Note Capturando Erros::, for more info.)
@end example

Incidentally, if you are reading this node in Info and type @kbd{f
@key{RET}} (@code{Info-follow-reference}), you will generate an error
message that says:

@example
No such node: "Capturando Erros) The only way @dots{}
@end example

@noindent
This is because Info perceives the example of the error as the first
cross-reference in this node and if you type a @key{RET} immediately
after typing the Info @kbd{f} command, Info will attempt to go to the
referenced node.  If you type @kbd{f catch @key{TAB} @key{RET}}, Info
will complete the node name of the correctly written example and take
you to the `Capturando Erros' node.  (If you try this, you can return
from the `Capturando Erros' node by typing @kbd{l}
(@code{Info-last}).)


@node Debugging with @TeX{}
@section Debugging with @TeX{}
@cindex Catching errors with @TeX{} formatting
@cindex Debugging with @TeX{} formatting

You can also catch mistakes when you format a file with @TeX{}.

Usually, you will want to do this after you have run
@code{texinfo-format-buffer} (or, better, @code{makeinfo-buffer}) on
the same file, because @code{texinfo-format-buffer} sometimes displays
error messages that make more sense than @TeX{}.  (@xref{Debugging
with Info}, for more information.)

For example, @TeX{} was run on a Texinfo file, part of which is shown
here:

@example
---------- Buffer: texinfo.texi ----------
name of the Texinfo file as an extension.  The
@@samp@{??@} are `wildcards' that cause the shell to
substitute all the raw index files.  (@@xref@{sorting
indices, for more information about sorting
indices.)@@refill
---------- Buffer: texinfo.texi ----------
@end example

@noindent
(The cross-reference lacks a closing brace.)
@TeX{} produced the following output, after which it stopped:

@example
---------- Buffer: *tex-shell* ----------
Runaway argument?
@{sorting indices, for more information about sorting
indices.) @@refill @@ETC.
! Paragraph ended before @@xref was complete.
<to be read again>
                  @@par
l.27

?
---------- Buffer: *tex-shell* ----------
@end example

In this case, @TeX{} produced an accurate and
understandable error message:

@example
Paragraph ended before @@xref was complete.
@end example

@noindent
@samp{@@par} is an internal @TeX{} command of no relevance to Texinfo.
@samp{l.27} means that @TeX{} detected the problem on line 27 of the
Texinfo file.  The @samp{?} is the prompt @TeX{} uses in this
circumstance.

Unfortunately, @TeX{} is not always so helpful, and sometimes you must
truly be a Sherlock Holmes to discover what went wrong.

In any case, if you run into a problem like this, you can do one of three
things.

@enumerate
@item
You can tell @TeX{} to continue running and ignore just this error by
typing @key{RET} at the @samp{?} prompt.

@item
You can tell @TeX{} to continue running and to ignore all errors as best
it can by typing @kbd{r @key{RET}} at the @samp{?} prompt.

This is often the best thing to do.  However, beware: the one error
may produce a cascade of additional error messages as its consequences
are felt through the rest of the file.  To stop @TeX{} when it is
producing such an avalanche of error messages, type @kbd{C-c} (or
@kbd{C-c C-c}, if you are running a shell inside Emacs).

@item
You can tell @TeX{} to stop this run by typing @kbd{x @key{RET}}
at the @samp{?} prompt.
@end enumerate

If you are running @TeX{} inside Emacs, you need to switch to the shell
buffer and line at which @TeX{} offers the @samp{?} prompt.

Sometimes @TeX{} will format a file without producing error messages even
though there is a problem.  This usually occurs if a command is not ended
but @TeX{} is able to continue processing anyhow.  For example, if you fail
to end an itemized list with the @code{@@end itemize} command, @TeX{} will
write a DVI file that you can print out.  The only error message that
@TeX{} will give you is the somewhat mysterious comment:

@example
(@@end occurred inside a group at level 1)
@end example

@noindent
However, if you print the DVI file, you will find that the text
of the file that follows the itemized list is entirely indented as if
it were part of the last item in the itemized list.  The error message
is the way @TeX{} says that it expected to find an @code{@@end}
command somewhere in the file; but that it could not determine where
it was needed.

Another source of notoriously hard-to-find errors is a missing
@code{@@end group} command.  If you ever are stumped by
incomprehensible errors, look for a missing @code{@@end group} command
first.

If the Texinfo file lacks header lines,
@TeX{} may stop in the
beginning of its run and display output that looks like the following.
The @samp{*} indicates that @TeX{} is waiting for input.

@example
This is TeX, Version 3.14159 (Web2c 7.0)
(test.texinfo [1])
*
@end example

@noindent
In this case, simply type @kbd{\end @key{RET}} after the asterisk.  Then
write the header lines in the Texinfo file and run the @TeX{} command
again. (Note the use of the backslash, @samp{\}.  @TeX{} uses @samp{\}
instead of @samp{@@}; and in this circumstance, you are working
directly with @TeX{}, not with Texinfo.)

@node Using @code{texinfo-show-structure}
@section Using @code{texinfo-show-structure}

@cindex Showing the structure of a file
@findex texinfo-show-structure

It is not always easy to keep track of the Nodos, chapters, sections, and
subsections of a Texinfo file.  This is especially true if you are revising
or adding to a Texinfo file that someone else has written.

In GNU Emacs, in Texinfo mode, the @code{texinfo-show-structure}
command lists all the lines that begin with the @@-commands that
specify the structure: @code{@@chapter}, @code{@@section},
@code{@@appendix}, and so on.  With an argument (@w{@kbd{C-u}}
as prefix argument, if interactive),
the command also shows the @code{@@node} lines.  The
@code{texinfo-show-structure} command is bound to @kbd{C-c C-s} in
Texinfo mode, by default.

The lines are displayed in a buffer called the @samp{*Occur*} buffer,
indented by hierarchical level.  For example, here is a part of what was
produced by running @code{texinfo-show-structure} on this manual:

@example
@group
Lines matching "^@@\\(chapter \\|sect\\|subs\\|subh\\|
unnum\\|major\\|chapheading \\|heading \\|appendix\\)"
in buffer texinfo.texi.
@dots{}
4177:@@chapter Nodos
4198:    @@heading Two Paths
4231:    @@section Node and Menu Illustration
4337:    @@section The @@code@{@@@@node@} Command
4393:        @@subheading Choosing Node and Pointer Names
4417:        @@subsection How to Write a @@code@{@@@@node@} Line
4469:        @@subsection @@code@{@@@@node@} Line Dicas
@dots{}
@end group
@end example

This says that lines 4337, 4393, and 4417 of @file{texinfo.texi} begin
with the @code{@@section}, @code{@@subheading}, and @code{@@subsection}
commands respectively.  If you move your cursor into the @samp{*Occur*}
window, you can position the cursor over one of the lines and use the
@kbd{C-c C-c} command (@code{occur-mode-goto-occurrence}), to jump to
the corresponding spot in the Texinfo file.  @xref{Other Repeating
Search, , Using Occur, emacs, The GNU Emacs Manual}, for more
information about @code{occur-mode-goto-occurrence}.

The first line in the @samp{*Occur*} window describes the @dfn{regular
expression} specified by @var{texinfo-heading-pattern}.  This regular
expression is the pattern that @code{texinfo-show-structure} looks for.
@xref{Regexps, , Using Regular Expressions, emacs, The GNU Emacs Manual},
for more information.

When you invoke the @code{texinfo-show-structure} command, Emacs will
display the structure of the whole buffer.  If you want to see the
structure of just a part of the buffer, of one chapter, for example,
use the @kbd{C-x n n} (@code{narrow-to-region}) command to mark the
region.  (@xref{Narrowing, , , emacs, The GNU Emacs Manual}.)  This is
how the example used above was generated.  (To see the whole buffer
again, use @kbd{C-x n w} (@code{widen}).)

If you call @code{texinfo-show-structure} with a prefix argument by
typing @w{@kbd{C-u C-c C-s}}, it will list lines beginning with
@code{@@node} as well as the lines beginning with the @@-sign commands
for @code{@@chapter}, @code{@@section}, and the like.

You can remind yourself of the structure of a Texinfo file by looking at
the list in the @samp{*Occur*} window; and if you have mis-named a node
or left out a section, you can correct the mistake.

@node Using @code{occur}
@section Using @code{occur}

@cindex Occurrences, listing with @code{@@occur}
@findex occur

Sometimes the @code{texinfo-show-structure} command produces too much
information.  Perhaps you want to remind yourself of the overall structure
of a Texinfo file, and are overwhelmed by the detailed list produced by
@code{texinfo-show-structure}.  In this case, you can use the @code{occur}
command directly.  To do this, type:

@example
@kbd{M-x occur}
@end example

@noindent
and then, when prompted, type a @dfn{regexp}, a regular expression for
the pattern you want to match.  (@xref{Regexps, , Regular Expressions,
emacs, The GNU Emacs Manual}.)  The @code{occur} command works from
the current location of the cursor in the buffer to the end of the
buffer.  If you want to run @code{occur} on the whole buffer, place
the cursor at the beginning of the buffer.

For example, to see all the lines that contain the word
@samp{@@chapter} in them, just type @samp{@@chapter}.  This will
produce a list of the chapters.  It will also list all the sentences
with @samp{@@chapter} in the middle of the line.

If you want to see only those lines that start with the word
@samp{@@chapter}, type @samp{^@@chapter} when prompted by
@code{occur}.  If you want to see all the lines that end with a word
or phrase, end the last word with a @samp{$}; for example,
@samp{catching mistakes$}.  This can be helpful when you want to see
all the Nodos that are part of the same chapter or section and
therefore have the same `Up' pointer.

@xref{Other Repeating Search, , Using Occur, emacs , The GNU Emacs Manual},
for more information.


@node Running @code{Info-validate}
@section Finding Badly Referenced Nodos

@anchor{Running Info-Validate}@c old name
@findex Info-validate
@cindex Nodos, checking for badly referenced
@cindex Checking for badly referenced Nodos
@cindex Looking for badly referenced Nodos
@cindex Finding badly referenced Nodos
@cindex Badly referenced Nodos

You can use the @code{Info-validate} command to check whether any of
the `Next', `Previous', `Up' or other node pointers fail to point to a
node.  This command checks that every node pointer points to an
existing node.  The @code{Info-validate} command works only on Info
files, not on Texinfo files.

The @code{makeinfo} program validates pointers automatically, so you
do not need to use the @code{Info-validate} command if you are using
@code{makeinfo}.  You only may need to use @code{Info-validate} if you
are unable to run @code{makeinfo} and instead must create an Info file
using @code{texinfo-format-region} or @code{texinfo-format-buffer}, or
if you write an Info file from scratch.

@menu
* Using @code{Info-validate}::         How to run @code{Info-validate}.
* Unsplit::                     How to create an unsplit file.
* Tagifying::                   How to tagify a file.
* Splitting::                   How to split a file manually.
@end menu


@node Using @code{Info-validate}
@subsection Using @code{Info-validate}

@cindex Using @code{Info-validate}
@cindex Info validating a large file
@cindex Validating a large file

To use @code{Info-validate}, visit the Info file you wish to check and
type:

@example
M-x Info-validate
@end example

@noindent
Note that the @code{Info-validate} command requires an uppercase
`I'@.  You may also need to create a tag table before running
@code{Info-validate}.  @xref{Tagifying}.

If your file is valid, you will receive a message that says ``File appears
valid''.  However, if you have a pointer that does not point to a node,
error messages will be displayed in a buffer called @samp{*problems in
info file*}.

For example, @code{Info-validate} was run on a test file that contained
only the first node of this manual.  One of the messages said:

@example
In node "Visão Geral", invalid Next: Modo Texinfo
@end example

@noindent
This meant that the node called @samp{Visão Geral} had a `Next' pointer that
did not point to anything (which was true in this case, since the test file
had only one node in it).

Now suppose we add a node named @samp{Modo Texinfo} to our test case
but we do not specify a `Previous' for this node.  Then we will get
the following error message:

@example
In node "Modo Texinfo", should have Previous: Visão Geral
@end example

@noindent
This is because every `Next' pointer should be matched by a
`Previous' (in the node where the `Next' points) which points back.

@code{Info-validate} also checks that all menu entries and cross-references
point to actual Nodos.

@code{Info-validate} requires a tag table and does not work with files
that have been split.  (The @code{texinfo-format-buffer} command
automatically splits large files.)  In order to use @code{Info-validate}
on a large file, you must run @code{texinfo-format-buffer} with an
argument so that it does not split the Info file; and you must create a
tag table for the unsplit file.

@node Unsplit
@subsection Creating an Unsplit File
@cindex Creating an unsplit file
@cindex Unsplit file creation

You can run @code{Info-validate} only on a single Info file that has a
tag table.  The command will not work on the indirect subfiles that
are generated when a master file is split.  If you have a large file
(longer than 300,000 bytes or so), you need to run the
@code{texinfo-format-buffer} or @code{makeinfo-buffer} command in such
a way that it does not create indirect subfiles.  You will also need
to create a tag table for the Info file.  After you have done this,
you can run @code{Info-validate} and look for badly referenced
Nodos.

The first step is to create an unsplit Info file.  To prevent
@code{texinfo-format-buffer} from splitting a Texinfo file into
smaller Info files, give a prefix to the @kbd{M-x
texinfo-format-buffer} command:

@example
C-u M-x texinfo-format-buffer
@end example

@noindent
or else

@example
C-u C-c C-e C-b
@end example

@noindent
When you do this, Texinfo will not split the file and will not create
a tag table for it.
@cindex Making a tag table manually
@cindex Tag table, making manually

@node Tagifying
@subsection Tagifying a File

After creating an unsplit Info file, you must create a tag table for
it.  Visit the Info file you wish to tagify and type:

@example
M-x Info-tagify
@end example

@noindent
(Note the uppercase @samp{I} in @code{Info-tagify}.)  This creates an
Info file with a tag table that you can validate.

The third step is to validate the Info file:

@example
M-x Info-validate
@end example

@noindent
(Note the uppercase @samp{I} in @code{Info-validate}.)
In brief, the steps are:

@example
@group
C-u M-x texinfo-format-buffer
M-x Info-tagify
M-x Info-validate
@end group
@end example

After you have validated the node structure, you can rerun
@code{texinfo-format-buffer} in the normal way so it will construct a
tag table and split the file automatically, or you can make the tag
table and split the file manually.

@node Splitting
@subsection Splitting a File Manually
@cindex Splitting an Info file manually
@cindex Info file, splitting manually

You should split a large file or else let the
@code{texinfo-format-buffer} or @code{makeinfo-buffer} command do it
for you automatically.  (Generally you will let one of the formatting
commands do this job for you.  @xref{Creating an Info File}.)

The split-off files are called the indirect subfiles.

Info files are split to save memory.  With smaller files, Emacs does not
have make such a large buffer to hold the information.

If an Info file has more than 30 Nodos, you should also make a tag
table for it.  @xref{Using @code{Info-validate}}, for information
about creating a tag table.  (Again, tag tables are usually created
automatically by the formatting command; you only need to create a tag
table yourself if you are doing the job manually.  Most likely, you
will do this for a large, unsplit file on which you have run
@code{Info-validate}.)

Visit the Info file you wish to tagify and split and type the two
commands:

@example
M-x Info-tagify
M-x Info-split
@end example

@noindent
(Note that the @samp{I} in @samp{Info} is uppercase.)

When you use the @code{Info-split} command, the buffer is modified into a
(small) Info file which lists the indirect subfiles.  This file should be
saved in place of the original visited file.  The indirect subfiles are
written in the same directory the original file is in, with names generated
by appending @samp{-} and a number to the original file name.

The primary file still functions as an Info file, but it contains just
the tag table and a directory of subfiles.


@node Especificação do Formato Info
@appendix Especificação do Formato Info

@cindex Info format specification
@cindex Specification of Info format
@cindex Definition of Info format

Here we describe the technical details of the Info format.

In this formal description, the characters @code{<>*()|=#} are used
for the language of the description itself.  Other characters are
literal.  The formal constructs used are typical: @code{<...>}
indicates a metavariable name, @samp{=} means definition, @samp{*}
repetition, @samp{?} optional, @samp{()} grouping, @samp{|}
alternation, @samp{#} comment.  Exception: @samp{*} at the beginning
of a line is literal.

In general, programs that read Info files should try to be
case-insensitive to keywords that occur in the file (for example,
@samp{Tag Table} and @samp{Tag table} should be equivalent) in order to
support Info-generating programs that use different capitalization.

The sections in an Info file (such as Nodos or tag tables) are separated
with a sequence:

@example
(^L)?^_(^L)?^J
@end example

@noindent
That is, a @samp{CTRL-_} character followed by a newline, with optional
formfeed characters.  We refer to such sequences as @t{<separator>}.

We specify literal parentheses (those that are part of the Info
format) with @t{<lparen>} and @t{<rparen>}, meaning the single
characters @samp{(} and @samp{)} respectively.  We specify the
@samp{CTRL-?} character (character number 127) @t{<del>}.  Finally,
the two-character sequence @samp{^@var{x}} means the single
character @samp{CTRL-@var{x}}, for any @var{x}.

This format definition was written some 25 years after the Info format
was first devised.  So in the event of conflicts between this
definition and actual practice, practice wins.  It also assumes some
general knowledge of Texinfo; it is meant to be a guide for
implementors rather than a rigid technical standard.  We often refer
back to other parts of this manual for examples and definitions,
rather than redundantly spelling out every detail.

@menu
* General: Info Format General Layout.
* Text:    Info Format Text Constructs.
@end menu


@node Info Format General Layout
@section Info Format General Layout

This section describes the overall layout of Info manuals.

@menu
* Whole:           Info Format Whole Manual. Split vs.@: nonsplit manuals.
* Preamble:        Info Format Preamble.
* Indirect:        Info Format Indirect Table.
* Tag table:       Info Format Tag Table.
* Local variables: Info Format Local Variables.
* Regular Nodos:   Info Format Regular Nodos.
@end menu


@node Info Format Whole Manual
@subheading Info Format: A Whole Manual

@cindex Nonsplit manuals, Info format of
@cindex Split manuals, Info format of
@cindex Whole manual, in Info format

To begin, an Info manual is either @dfn{nonsplit} (contained wholly
within a single file) or @dfn{split} (across several files).

The syntax for a nonsplit manual is:

@example
    <nonsplit info file> =
<preamble>
<node>*
<tag table>?
<local variables>?
@end example

When split, there is a @dfn{main file}, which contains only pointers
to the Nodos given in other @dfn{subfiles}.  The main file looks
like this:

@example
    <split info main file> =
<preamble>
<indirect table>
<tag table>
<local variables>?
@end example

The subfiles in a split manual have the following syntax:

@example
    <split info subfile> =
<preamble>
<node>*
@end example

Note that the tag table is not optional for split files, as it is used
with the indirect table to deduce which subfile a particular node is in.


@node Info Format Preamble
@subheading Info Format: Preamble

@cindex Preamble, in Info format

The @t{<preamble>} is text at the beginning of all output files.
It is not intended to be visible by default in an Info viewer, but
may be displayed upon user request.

@example
    <preamble> =
<identification>       # "This is FILENAME, produced by ..."
<copying text>         # Expansion of @@copying text.
<dir entries>          # Derived from @@dircategory and @@direntry.
@end example

@noindent
These pieces are:

@table @t
@item <identification line>
An arbitrary string beginning the output file, followed by a blank
line.

@item <copying text>
The expansion of a @code{@@copying} environment, if the manual has
one (@pxref{@code{@@copying}}).

@item <dir entries>
The result of any @code{@@dircategory} and @code{@@direntry}
commands present in the manual (@pxref{Installing Dir Entries}).

@end table


@node Info Format Indirect Table
@subheading Info Format: Indirect Table

@cindex Indirect table, in Info format

@example
    <indirect table> =
<separator>
Indirect:
(<filename>: <bytepos>)*
@end example

The indirect table is written to the main file in the case of split
output only.  It specifies, as a decimal integer, the starting byte 
position (zero-based) that the first node of each subfile would have if 
the subfiles were concatenated together in order, not including the 
top-level file.  The first node of actual content is pointed to by the 
first entry.

As an example, suppose split output is generated for the GDB manual.
The top-level file @file{gdb.info} will contain something like this:

@example
<separator>
Indirect:
gdb.info-1: 1878
gdb.info-2: 295733
...
@end example

This tells Info viewers that the first node of the manual occurs at
byte 1878 of the file @file{gdb.info-1} (which would be after that file's
preamble.)  The first node in the @file{gdb.info-2} subfile would start at
byte 295733 if @file{gdb.info-2} were appended to @file{gdb.info-1},
including any preamble sections in both files.

Unfortunately, Info-creating programs such as @code{makeinfo} have not
always implemented these rules perfectly, due to various bugs and
oversights.  Therefore, robust Info viewers should fall back to
searching ``nearby'' the given position for a node, instead of
giving up immediately if the position is not exactly at a node beginning.


@node Info Format Tag Table
@subheading Info Format: Tag Table

@cindex Tag table, in Info format

@example
    <tag table> =
<separator>
Tag Table:
(<lparen>Indirect<rparen>)?
(Node|Ref): <nodeid>^?<bytepos>
<separator>
End Tag Table
@end example

The @samp{(Indirect)} line appears in the case of split output only.

The tag table specifies the starting byte position of each node and anchor
in the file.  In the case of split output, it is only written in the main
output file.

Each line defines an identifier as either an anchor or a node, as
specified.  For example, @samp{Node: Top^?1647} says that the node named
@samp{Top} starts at byte 1647 while @samp{Ref: Visão Geral-Footnote-1^?30045}
says that the anchor named @samp{Visão Geral-Footnote-1} starts at byte 30045.
It is an error to define the same identifier both ways.  

In the case of nonsplit output, the byte positions simply refer to the
location in the output file.  In the case of split output, the byte
positions refer to an imaginary file created by concatenating all the
split files (but not the top-level file).  See the previous section.

Here is an example:

@example
^_
Tag Table:
Node: Top^?89
Node: Ch1^?292
^_
End Tag Table
@end example

@noindent
This specifies a manual with two Nodos, `Top' and `Ch1', at byte
positions 89 and 292 respectively.  Because the @samp{(Indirect)} line
is not present, the manual is not split.

Preamble sections or other non-node sections of files do not have a tag
table entry.


@node Info Format Local Variables
@subheading Info Format: Local Variables

@cindex Local variable section, in Info format

The local variables section is optional and is currently used to give the
encoding information.  It may be augmented in the future.

@example
    <local variables> =
<separator>
Local Variables:
coding: <encoding>
End:
@end example

@xref{@code{@@documentencoding}}.


@node Info Format Regular Nodos
@subheading Info Format: Regular Nodos

@cindex Info Nodos, in Info format

Regular Nodos look like this:

@example
    <node> =
<separator>
File: <fn>, Node: <id1>, (Next: <id2>, )? (Prev: <id3>, )? Up: <id4>

<general text, until the next ^_ or end-of-file>
@end example

@noindent
At least one space or tab must be present after each colon and comma,
but any number of spaces are ignored.  The @t{<id>} node identifiers have
following format:

@example
   <id> = (<lparen><infofile><rparen>)?(<del>?<nodename><del>?)?
|  <id> = (<lparen><infofile><rparen>)?(<nodename>)?
@end example

This @t{<node>} defines @t{<id1>} in file @t{<fn>}, which is typically
either @samp{manualname} or @samp{manualname.info}.  No parenthesized
@t{<infofile>} component may appear within @t{<id1>}.

Each of the identifiers after @code{Next}, @code{Prev} and @code{Up}
refer to Nodos or anchors within a file.  These pointers normally
refer within the same file, but @samp{(dir)} is often used to point to
the top-level dir file.  If an @t{<infofile>} component is used then
the node name may be omitted, in which case the node identifier refers
to the @samp{Top} node within the referenced file.

The @code{Next} and @code{Prev} pointers are optional.  The @code{Up}
pointer is technically also optional, although most likely this
indicates a mistake in the node structuring.  Conventionally, the
Nodos are arranged to form a tree, but this is not a requirement of
the format.

Node names containing periods, commas, colons or parentheses
(including @@-commands which produce any of these) can confuse
Info readers.
If it is necessary to refer to a node whose name contains any of
these, the @t{<nodename>} should be surrounded by a pair of @t{<del>}
characters.  There is support in @command{makeinfo} for adding these
characters (@pxref{INFO_SPECIAL_CHARS_QUOTE}); however, we don't 
recommend you make use of this support until such time as Info-reading 
programs that recognize this syntax are common. 
@xref{Exigências de Linha de Nodo}.

The use of non-ASCII characters in the names of Nodos is permitted,
but can cause problems in cross-references between Nodos in Info files
with different character encodings, and also when node names from many
different files are listed (for example, with the @option{--apropos}
option to the standalone Info browser), so we recommend avoiding them
whenever feasible.  For example, prefer the use of the ASCII
apostrophe character (@t{'}) to Unicode directional quotes.

The @t{<general text>} of the node can include the special constructs
described next.


@node Info Format Text Constructs
@section Info Format Text Constructs

@cindex Info format text constructs
@cindex text constructs, Info format

These special Info constructs can appear within the text of a node.

@menu
* Menu:  Info Format Menu.
* Image: Info Format Image.
* Printindex: Info Format Printindex.
* Xref:  Info Format Cross Reference.
@end menu


@node Info Format Menu
@subsection Info Format: Menu

@cindex Menus, in Info format

Conventionally menus appear at the end of Nodos, but the Info format
places no restrictions on their location.

@example
    <menu> =
* Menu:
(<menu entry> | <menu comment>)*
@end example

The parts of a @t{<menu entry>} are also described in 
@ref{Partes de Menu}. They have the same syntax as cross-references 
(@pxref{Info Format Cross Reference}). Índices extend the menu format to
 specify the destination line; @pxref{Info Format Printindex}.

A @t{<menu comment>} is any line not beginning with @samp{*} that
appears either at the beginning of the menu or is separated from a
menu entry by one or more blank lines.  These comments are intended to
be displayed as part of the menu, as-is (@pxref{Escrevendo um Menu}).


@node Info Format Image
@subsection Info Format: Image

@cindex Images, in Info format

The @code{@@image} command results in the following special directive
within the Info file (@pxref{Imagens}):

@example
    <image> =
^@@^H[image src="<image file>"
            (text="<txt file contents>")?
            (alt="<alt text>")?
^@@^H]
@end example

The line breaks and indentation in this description are editorial; the
whitespace between the different parts of the directive in Info files
is arbitrary.

In the strings @t{<image file>}, @t{<txt file contents>} and @t{<alt
text>}, @samp{"} is quoted as @samp{\"} and @samp{\} is quoted as
@samp{\\}.  The txt and alt specifications are optional.

The @t{alt} value serves the same purpose as in HTML: A prose
description of the image.  In text-only displays or speech systems,
for example, the @t{alt} value may be used instead of displaying the
(typically graphical) @t{<image file>}.

The @t{<txt file contents>}, if present, should be taken as an ASCII
representation of the image, for possible use on a text-only display.

The format does not prescribe the choice between displaying the
@t{<image file>}, the @t{<alt text>} or the @t{<txt file contents>}.


@node Info Format Printindex
@subsection Info Format: Printindex

@cindex Índices, in Info format

Índices in Info format are generally written as a menu
(@pxref{Índices}), but with an additional directive at the beginning
marking this as an index node:

@example
    <printindex> =
^@@^H[index^@@^H]
* Menu:

<index entry>*
@end example

The @t{<index entry>} items are similar to normal menu entries, but
the free-format description is replaced by the line number of where
the entries occurs in the text:

@example
    <index entry> =
* <entry text>: <entry node>. <lparen>line <lineno><rparen>
@end example

@noindent
The @t{<entry text>} is the index term.  The @t{<lineno>} is an
unsigned integer, given relative to the start of the @t{<entry node>}.
There may be arbitrary whitespace after the colon and period, as usual
in menus, and may be broken across lines.  Here is an example:

@example
^@@^H[index^@@^H]
* Menu:

* thunder:           Weather Phenomena.             (line 5)
@end example

This means that an index entry for `thunder' appears at line 5 of the
node `Weather Phenomena'.


@node Info Format Cross Reference
@subsection Info Format: Cross-reference

@cindex Cross-references, in Info format

A general cross-reference in Info format has one of the following two forms:

@example
    <cross-reference> =
  * (N|n)ote <id>::
@c| * (N|n)ote <label>:<id>(.|,)?
| * (N|n)ote <label>:<id>(.|,)

     <id> = (<lparen><infofile><rparen>)?(<del>?<nodename><del>?)?
|    <id> = (<lparen><infofile><rparen>)?(<nodename>)?
    <label> = <del>?<label text><del>?
@end example

No space should occur between the @samp{*} character and the following
@samp{N} or @samp{n}.  @samp{*Note} should be used at the start of a
sentence, otherwise @samp{*note} should be used.  (Some Info readers,
such as the one in Emacs, can display @samp{*Note} and @samp{*note} as
@samp{See} and @samp{see} respectively.) In both cases, @t{<label
text>} is descriptive text.

In both forms the @t{<id>} refers to a node or anchor, in the same way
as a reference in the node information line does (@pxref{Info Format
Regular Nodos}).  The optional parenthesized @samp{<infofile>} is the
filename of the manual being referenced, and the @t{<nodename>} is the
node or anchor within that manual,

The second form has a descriptive label.  A cross-reference in this form
should usually be terminated with a comma or period, to make it
feasible to find the end of the @t{<id>}.

If @t{<label>} contains a colon character (@t{:}), it should be
surrounded with a pair of @t{<del>} characters.  Likewise, if
@t{<nodename>} contains problematic characters (such as commas or
periods), it should be surrounded by a pair of @t{<del>} characters;
then a terminating comma or period is not needed.

As with node names, this quoting mechanism has as of the time of 
writing limited support in Info-reading programs; hence we do not 
recommend using it until this changes.

The format does not prescribe how to find other manuals to resolve
such references.

Here are some examples:

@example
*note Licença GNU de Documentação Livre::
*note Tag table: Info Format Tag Table, for details.
*Note Visão Geral: (make)Top.
*Note ^?:^?: (bash)Bourne Shell Builtins.
*Note alloca.h: (gnulib)^?alloca.h^?.
@end example

The first shows a reference to a node in the current manual using the 
short form.

The second also refers to a node in the current manual, namely `Info
Format Tag Table'; the `Tag table' before the @samp{:} is only a label
on this particular reference, and the @samp{for details.} is text
belonging to the sentence, not part of the reference.

The third example refers to the node `Top' in another manual, namely
@samp{make}, with `Visão Geral' being the label for this cross-reference.

The fourth example shows a colon character being quoted in a label,
and the fifth example shows a period being quoted in a node name.

@xref{Referências Cruzadas}.


@node Licença GNU de Documentação Livre
@appendix Licença GNU de Documentação Livre

@include fdl-versao_1.3-pt_BR.texi


@node Índice de Comando e Variável
@unnumbered Índice de Comando e Variável

This is an alphabetical list of all the @@-commands, assorted Emacs Lisp
functions, and several variables.  To make the list easier to use, the
commands are listed without their preceding @samp{@@}.

@printindex fn


@node Índice Geral
@unnumbered Índice Geral

@printindex cp


@bye
