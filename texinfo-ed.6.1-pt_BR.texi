\input texinfo.tex    @c -*-texinfo-*-

@c Tudo entre o início/final das linhas de cabeçalho será
@c ignorado pelos comandos de região {texinfo,makeinfo}-format do
@c Emacs.   Veja-se o ponto `início de cabeçalho' para mais informação
@c %**start of header

@c Automake exige isto
@setfilename texinfo-ed.6.1-pt_BR.info
@documentlanguage pt_BR
@documentencoding UTF-8

@c Automake automaticamente atualiza version-pt_BR.texi @set VERSION e
@c @set UPDATED com os valores apropriados.
@include version-pt_BR.texi
@settitle GNU Texinfo @value{VERSION}
@afourpaper

@c Define um novo índice para opções de linha de comando.
@defcodeindex op

@c Coloca tudo, exceto nomes (comando, nesse caso) de função em um
@c índice (arbitrariamente escolhido para ser o índice de conceito).
@syncodeindex op cp
@syncodeindex vr cp
@syncodeindex pg cp

@c @tex
@c \global\usebracesinindexestrue
@c @end tex

@c final

@comment %**end of header

@c perceba-se que o autor do documento original em inglês usou
@comment das duas formas de indicar que uma linha é um simples
@c comentário, ou seja @comment e o sinônimo dele, @c.   No "Cartão de
@comment Referência do GNU Texinfo", para Texinfo versão 5.2, está
@c descrita uma terceira forma: DEL.   Essa forma não foi aqui testada
@comment e, portanto, não se pode afirmar que funciona.

@copying
Este manual é para GNU Texinfo (versão @value{VERSION},
@value{UPDATED}), um sistema de documentação que pode produzir ambos
informação online e um manual impresso a partir de uma fonte única
usando marcação semântica.

Copyright @copyright{} 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023,
2024 da ``versão modificada'' traduzida para o idioma português falado
e escrito no Brasil: Jamenson Ferreira Espindula de Almeida Melo
<@email{jafesp@@gmail.com}>.

Copyright @copyright{} 1988, 1990, 1991, 1992, 1993, 1995, 1996, 1997,
1998, 1999, 2001, 2001, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
2011, 2012, 2013, 2014, 2015, 2016 da versão original escrita em inglês:
Free Software Foundation, Inc.

This manual is for GNU Texinfo (version @value{VERSION}, @value{UPDATED}),
a documentation system that can produce both online information and a
printed manual from a single source using semantic markup.

Copyright @copyright{} 1988, 1990, 1991, 1992, 1993, 1995, 1996, 1997,
1998, 1999, 2001, 2001, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2010, 2011, 2012, 2013, 2014, 2015, 2016 Free Software Foundation, Inc.

@quotation
É concedida permissão para copiar, distribuir e (ou) mudar este Manual
para GNU Texinfo (versão @value{VERSION}, @value{UPDATED}), versão
traduzida para o idioma português sob os termos da Licença GNU de
Documentação Livre, versão 1.3 ou qualquer versão posterior
publicada pela Free Software Foundation; sem Seções Invariantes, com os
Textos de Capa Frontal sendo ``Um Manual GNU'', e com os Textos de
Quarta Capa como em (a) abaixo.   Uma cópia da licença está incluída na
seção intitulada ``Licença GNU de Documentação Livre''.

(a) O Texto de Quarta Capa da Free Software Foundation, Inc. (FSF) é:
``Você tem a liberdade de copiar e mudar este manual GNU.
Comprando cópias da FSF você a apoia no desenvolvimento GNU e na
promoção da liberdade de software''.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual'',
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation
License''.

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom.''
@end quotation
@end copying

@dircategory Sistema Texinfo de documentação
@direntry
* Texinfo: (texinfo).                            O formato de documentação GNU.
* install-info: (texinfo)Invocando install-info. Atualizar entradas info/dir.
* makeinfo: (texinfo)Invocando makeinfo.         Traduzir fonte Texinfo.
* pod2texi: (pod2texi)Invocando pod2texi.        Traduzir POD Perl para Texinfo.
* texi2dvi: (texinfo)Formatar com texi2dvi.      Imprimir documentos Texinfo.
* texi2pdf: (texinfo)Saída PDF.                  Saída PDF para Texinfo.
* pdftexi2dvi: (texinfo)Saída PDF.               Saída PDF para Texinfo.
* texindex: (texinfo)Formatar com tex/texindex.  Ordena arquivos de índice Texinfo.
@end direntry

@c Configurar para smallbook se for imprimir no formato para livro
@c pequeno, de forma que o exemplo do fonte de livro pequeno atualmente
@c está escrito usando smallbook; em bigbook, uma gambiarra é
@c usada para a saída TeX.   Faz-se isso via opção -t a texi2dvi, de
@c maneira que esse mesmo fonte pode ser usado para outros tamanhos
@c de papel também.
@c smallbook
@c set smallbook
@c @@clear smallbook

@c Se gostar-se de páginas em branco, adicionar via texi2dvi -t.
@c setchapternewpage odd

@set txiindexatsignignore
@set txiindexbackslashignore
@set txiindexlessthanignore
@set txiindexhyphenignore


@titlepage
@title Texinfo
@subtitle O Formato da Documentação GNU
@subtitle para Texinfo versão @value{VERSION}, @value{UPDATED}

@author Robert James Chassell
@author Richard Matthew Stallman

@c Inclui a Distribuição no título da página, de forma que tais
@c cabeçalhos são desligados.

@page
@vskip 0pt plus 1filll
@insertcopying

@sp 1
Publicado pela Free Software Foundation @*
51 Franklin St, Fifth Floor @*
Boston, MA 02110-1301 @*
USA @*
ISBN 1-882114-67-1 @c para a versão 4.0, Setembro de 1999.
@c ISBN 1-882114-65-5 é para a versão 3.12, Março de 1998.
@c ISBN 1-882114-64-7 é para a edição 2.24 de Novembro de 1996.
@c ISBN 1-882114-63-9 é para a edição 2.20 de 28 de fevereiro de 1995.

@sp 1
Arte da capa por Etienne Suvasa.
@end titlepage


@summarycontents
@contents


@ifnottex
@node Top
@top Texinfo

Este manual é para GNU Texinfo (versão @value{VERSION}, @value{UPDATED}), um
sistema de documentação que pode produzir ambos informação online e um manual
impresso a partir de um fonte único usando marcação semântica.

A primeira parte deste menu mestre lista os nós principais neste documento do
Info, incluindo o comando @@ e índices de conceito. O restante do menu lista
todos os nós de baixo nível no documento.
@end ifnottex

@menu
* Condições de Cópia::                   Teus direitos.
* Visão Geral::                          Texinfo em resumo.
* Escrevendo um Arquivo do Texinfo::     Formato de um arquivo fonte do Texinfo.
* Iniciando e Finalizando um Arquivo::   Iniciando e fim de um arquivo do Texinfo.
* Nós::                                  Escrevendo nós, a unidade básica do Texinfo.
* Estruturamento de Capítulo::           Criando capítulos, seções, anexos, etc.
* Referências Cruzadas::                 Escrevendo referências cruzadas.
* Marcando Texto::                       Marcando palavras e frases como código, entrada de teclado, variáveis meta sintáticas, e afins.
* Citações e Exemplos::                  Encapsulamentos de bloco, exemplos, etc.
* Listas e Tabelas::                     Listas de itens ou numeradas, e tabelas.
* Exibições Especiais::                  Figuras flutuantes e notas de rodapé.
* Índices::                              Criando índices.
* Inserções::                            Inserindo sinais @@, chaves, etc.
* Quebras::                              Forçando ou impedindo quebras de linha e de página.
* Comandos de Definição::                Descrevendo uniformemente funções e afins.
* Internacionalização::                  Suporte a outras linguagens diferentes do Inglês.
* Condicionais::                         Especificando texto somente para alguns casos de saída.
* Definindo Novos Comandos do Texinfo::  Macros definidas pelo(a) usuário(a) e apelidos.
* Arquivos de Inclusão::                 Como incorporar outros arquivos do Texinfo.
* Impresso::                             Saída para papel, com @TeX{}.
* Tradutor Genérico @command{texi2any}:: @command{texi2any}, um conversor para todos os propósitos.
* Criando e Instalando Arquivos Info::   Detalhes sobre saída Info.
* Gerando HTML::                         Detalhes sobre saída HTML.
@c * Personalização da Saída Gerada do texi2any:: Ajuste fino com arquivos de inicialização.

Anexos

* Detalhes do Comando @@::            Detalhes dos comandos @@ do Texinfo.
* Dicas::                             Dicas acerca de como escrever um documento do Texinfo.
* Arquivos de Amostra do Texinfo::    Exemplos completos, incluindo textos completos.
* Modo Texinfo::                      Usando o modo Texinfo do GNU Emacs.
* Cabeçalhos::                        Como escrever cabeçalhos e rodapés de página.
* Capturando Erros::                  Como achar erros na formatação.
* Especificação do Formato Info::     Detalhes técnicos do formato de arquivo Info.
* Licença GNU de Documentação Livre:: Copiando este manual.
* Índice de Comando e Variável::      Um menu contendo comandos e variáveis.
* Índice Geral::                      Um menu cobrindo muitos tópicos.

@detailmenu
 --- A Listagem Detalhada do Nó ---

Visão geral do Texinfo

* Informando Defeitos::           Submetendo relatórios efetivos de defeitos.
* Formatos de Saída::             Visão geral dos formatos de saída suportados.
* Arquivos do Info::              O que é um arquivo Info?
* Livros Impressos::              Característica de um livro impresso ou manual.
* Adicionando Formatos de Saída:: Páginas de manual e implementando novos formatos.
* Histórico::                     Agradecimentos, contribuidores e gênese.

Escrevendo um Arquivo do Texinfo

* Sintaxe de Comando::            Comandos @@ são usados para formatação.
* Convenções::                    Regras gerais para se escrever um arquivo Texinfo.
* Comentários::                   Escrevendo comentários e texto ignorado em geral.
* Mínimo::                        O que um arquivo Texinfo deve ter.
* Amostra Curta::                 Um arquivo curto Texinfo de amostra.

Iniciando e Finalizando um Arquivo Texinfo

* Inicialização de Amostra::                       Um início de amostra para um arquivo Texinfo.
* Cabeçalho do Arquivo do Texinfo::                As primeiras linhas.
* Permissões do Documento::                        Assegurando-se de que seu manual é livre.
* Página de Título e Página de Direitos Autorais:: Criando as páginas de título e de direitos autorais.
* Conteúdo::                                       Como criar uma tabela do conteúdo.
* O Nó Top::                                       Criando o nó `Top' e o menu principal.
* Comandos Globais de Documento::                  Afetando a formatação ao longo do documento.
* Finalizando um Arquivo::                         O que está ao final de um arquivo Texinfo?

Cabeçalho do Arquivo Texinfo

* Primeira Linha::                A primeira linha de um arquivo Texinfo.
* Início de Cabeçalho::           Formatar uma região exige isso.
* @code{@@setfilename}::          Informe a Info o nome do arquivo Info.
* @code{@@settitle}::             Crie um título para o trabalho impresso.
* Fim de Cabeçalho::              Formatar uma região exige isso.

Permissões de Documento

* @code{@@copying}::              Declare as permissões de cópia do documento.
* @code{@@insertcopying}::        Onde inserir as permissões.

Páginas de Título e de Direitos Autorais

* @code{@@titlepage}::                    Crie um título para o documento impresso.
* @code{@@titlefont @@center @@sp}::      Os comandos @code{@@titlefont}, @code{@@center} e @code{@@sp}.
* @code{@@title @@subtitle @@author}::    Os comandos @code{@@title}, @code{@@subtitle}, e @code{@@author}.
* Direitos Autorais::                     Como escrever o aviso de direitos autorais e incluir permissões de cópia.
* Geração de Cabeçalho::                  Ligar os cabeçalhos de página após as páginas de título e de direitos autorais.

O Nó `Top' e o Menu Principal

* Exemplo do Nó Top::
* Partes do Menu Mestre::

Comandos Globais de Documento

* @code{@@documentdescription}::        Sumário de documento para a saída HTML.
* @code{@@setchapternewpage}::          Iniciar capítulos em páginas do lado direito.
* @code{@@headings}::                   Uma opção para ligar e desligar cabeçalhos e impressão em ambos ou de um único lado.
* @code{@@paragraphindent}::            Especifique recuo de parágrafo.
* @code{@@firstparagraphindent}::       Suprimindo o recuo de primeiro parágrafo.
* @code{@@exampleindent}::              Especifique o recuo de ambiente.

Nós

* Estrutura do Documento Texinfo::             Como os manuais Texinfo normalmente são organizados.
* Nomes de Nó::                                Como escolher nomes de nó.
* Escrevendo um Nó::                           Como escrever uma linha @code{@@node}.
* Exigências de Linha de Nó::                  Mantenha os nomes únicos.
* Primeiro Nó::                                Como escrever um nó `Top'.
* Comando @code{@@top}::                       Como usar o comando @code{@@top}.
* Ilustração do Menu do Nó::                   Um diagrama, e menus e nós de amostra.
* Criação de Ponteiros do @command{makeinfo}:: Permitindo que makeinfo determine os ponteiros de nó.
* Menus::                                      Listando nós subordinados.

Menus

* Escrevendo um Menu::                O que é um menu?
* Exemplo de Menu::                   Entradas de menu de duas e três partes
* Local de Menu::                     Menus vão ao final de nós
* Partes de Menu::                    Uma entrada de menu tem três partes
* Entrada de Menu Menos Desordenada:: Entrada de menu de duas partes
* Outros Arquivos do Info::           Como referenciar um arquivo Info diferente

Estruturamento de Capítulo

* Estruturamento de Árvore::            Um manual é como uma árvore de cabeça para baixo @dots{}
* Tipos de Comandos Estruturantes::     Como dividir um manual em partes.
* @code{@@chapter}::                    Estruturamento de capítulo.
* @code{@@unnumbered @@appendix}::
* @code{@@majorheading @@chapheading}::
* @code{@@section}::
* @code{@@unnumberedsec @@appendixsec @@heading}::
* @code{@@subsection}::
* @code{@@unnumberedsubsec @@appendixsubsec @@subheading}::
* @code{@@subsubsection}::              Comandos para as seções de mais baixo nível.
* @code{@@part}::                       Coleções de capítulos.
* Elevar/rebaixar seções::              Como mudar o nível hierárquico dos comandos.

Referências cruzadas

* Referências::                          Para que são as referências cruzadas.
* Comandos de Referências Cruzadas::     Um sumário dos diferentes comandos.
* Partes de Referências Cruzadas::       Uma Referência Cruzada tem várias partes.
* @code{@@xref}::                        Inicie uma referência com `Veja' @dots{}
* Referenciando Um Manual Como Um Todo:: Referência a um manual inteiro.
* @code{@@ref}::                         Uma referência para a última parte de uma sentença.
* @code{@@pxref}::                       Como escrever uma Referência Cruzada entre parênteses.
* @code{@@anchor}::                      Definindo alvos de Referência Cruzada arbitrários.
* @code{@@inforef}::                     Como referenciar um arquivo somente Info.
* @code{@@url}::                         Como referenciar um Localizador Uniforme de Recursos.
* @code{@@cite}::                        Como referenciar livros que não estão no sistema Info.

@code{@@xref}

* Um Argumento::                @code{@@xref} com um argumento.
* Dois Argumentos::             @code{@@xref} com dois argumentos.
* Três Argumentos::             @code{@@xref} com três argumentos.
* Quatro e Cinco Argumentos::   @code{@@xref} com quatro e cinco argumentos.

@code{@@url}, @code{@@uref@{@var{url}[, @var{text}][, @var{replacement}]@}}

* Exemplos @code{@@url}::             Exemplos de uso de todas as formas do @code{@@url}.
* Quebra de Linha de URL::            Como as linhas são quebradas dentro do texto do @code{@@url}.
* Formato de Saída PDF @code{@@url}:: Uma opção especial para ocultar links na saída PDF.
* Cores do PDF::                      Colorindo URLs e outros links na saída PDF.

Marcando Texto, Palavras e Frases

* Indicando::                  Como indicar definições, arquivos, etc.
* Ênfase::                     Como enfatizar texto.

Indicando Definições, Comandos, etc.

* Realçamento Útil::                    Realçamento provê informação útil.
* @code{@@code}::                       Indicando código de programa.
* @code{@@kbd}::                        Mostrando entrada de teclado.
* @code{@@key}::                        Especificando teclas.
* @code{@@samp}::                       Indicando uma sequência literal de caracteres.
* @code{@@verb}::                       Indicando uma sequência literal de caracteres.
* @code{@@var}::                        Indicando variáveis metassintáticas.
* @code{@@env}::                        Indicando variáveis de ambiente.
* @code{@@file}::                       Indicando nomes de arquivo.
* @code{@@command}::                    Indicando nomes de comando.
* @code{@@option}::                     Indicando nomes de opção.
* @code{@@dfn}::                        Especificando definições.
* @code{@@abbr}::                       Indicando abreviações.
* @code{@@acronym}::                    Indicando siglas.
* @code{@@indicateurl}::                Indicando uma URL de exemplo.
* @code{@@email}::                      Indicando um endereço de correio eletrônico.

Enfatizando Texto

* @code{@@emph @@strong}::       Como enfatizar texto em Texinfo.
* Versaletes::                   Como usar a fonte de versaletes.
* Fontes::                       Comandos variados de fonte para saída impressa.

Citações e Exemplos

* Comandos de Cercamento de Blocos::  Construtores diferentes para propósitos diferentes.
* @code{@@quotation}::                Escrevendo uma citação.
* @code{@@indentedblock}::            Bloco de texto recuado a esquerda.
* @code{@@example}::                  Escrevendo um exemplo em uma fonte de largura fixa.
* @code{@@verbatim}::                 Escrevendo um exemplo de literal.
* @code{@@verbatiminclude}::          Incluindo um arquivo de literal.
* @code{@@lisp}::                     Ilustrando código Lisp.
* @code{@@small@dots{}}::             Exemplos em uma fonte menor.
* @code{@@display}::                  Escrevendo um exemplo na fonte atual.
* @code{@@format}::                   Escrevendo um exemplo sem margens estreitadas.
* @code{@@exdent}::                   Desfazer recuo em uma linha.
* @code{@@flushleft @@flushright}::   Empurrando texto alinhado à esquerda ou alinhado à direita.
* @code{@@raggedright}::              Evitando justificação à direita.
* @code{@@noindent}::                 Prevenindo recuo de parágrafo.
* @code{@@indent}::                   Forçando recuo de parágrafo.
* @code{@@cartouche}::                Desenhando retângulos por todos os lados ao redor do texto.

Listas e Tabelas

* Listas de Introdução::          Listas de formatos Texinfo para você.
* @code{@@itemize}::              Como construir uma lista simples.
* @code{@@enumerate}::            Como construir uma lista numerada.
* Tabelas de Duas Colunas::       Como construir uma tabela de duas colunas.
* Tabelas Multi Colunas::         Como construir tabelas generalizadas.

Fazendo Uma Tabela de Duas Colunas

* @code{@@table}::                      Como construir uma tabela de duas colunas.
* @code{@@ftable @@vtable}::            Indexamento automático para tabelas de duas colunas.
* @code{@@itemx}::                      Como colocar mais entradas na primeira coluna.

@code{@@multitable}: Tabelas Multi Coluna

* Larguras de Colunas Multi Tabelas::   Definindo tamanhos de coluna multi tabela.
* Linhas de Multi Tabelas::             Definindo linhas multi tabela, com exemplos.

Exibições Especiais

* Flutuações::                   Figuras, tabelas, e afins.
* Imagens::                      Incluindo gráficos e imagens.
* Notas de Rodapé::              Escrevendo notas de rodapé.

Flutuações

* @code{@@float}::                      Produzindo material que flutua.
* @code{@@caption @@shortcaption}::     Especificando descrições para flutuações.
* @code{@@listoffloats}::               Um Sumário para flutuações.

Inserindo Imagens

* Sintaxe da Imagem::
* Escalonamento da Imagem::

Notas de rodapé

* Comandos de Notas de Rodapé::           Como escrever uma nota de rodapé em Texinfo.
* Estilos de Notas de Rodapé::            Controlando como as notas de rodapé aparecem em Info.

Índices

* Entradas de Índice::           Escolha palavras diferentes para entradas de índice.
* Índices Predefinidos::         Use índices diferentes para tipos diferentes de entradas.
* Comandos de Indexação::        Como fazer uma entrada de índice.
* Imprimindo Índices e Menus::   Como imprimir um índice em cópia impressa e gerar menus de índice no Info.
* Combinando Índices::           Como combinar índices.
* Novos Índices::                Como definir teus próprios índices.

Combinando Índices

* @code{@@syncodeindex}::               Como mesclar dois índices, usando a fonte @code{@@code} para o índice mesclado a partir de.
* @code{@@synindex}::                   Como mesclar dois índices, usando a fonte romana para o índice mesclado a partir de.

Inserções Especiais

* Caracteres Especiais::                  Inserindo @@ @{@} , \ #
* Inserindo Caracteres de Citação::       Inserindo aspas a esquerda e a direita, em código.
* Inserindo Espaço::                      Inserindo a quantidade correta de espaços em branco.
* Inserindo Acentos::                     Inserindo acentos e caracteres especiais.
* Inserindo Aspas::                       Inserindo aspas.
* Inserindo Subscritos e Sobrescritos::   Inserindo sub/sobrescritos.
* Inserindo Fórmulas Matemáticas::        Formatando expressões matemáticas.
* Glifos para Texto::                     Inserindo pontos, bullets, símbolos de moedas, etc.
* Glifos para Programação::               Indicando resultados de avaliação, expansão de macros, erros, etc.
* Inserindo Unicode::                     Inserindo um caractere Unicode por ponto de código.

Caracteres Especiais: Inserindo @@ @{@} , \ #

* Inserindo um Símbolo Arroba::         @code{@@@@}, @code{@@atchar@{@}}.
* Inserindo Chaves::                    @code{@@@{ @@@}}, @code{@@l rbracechar@{@}}.
* Inserindo Uma Vírgula::               , e @code{@@comma@{@}}.
* Inserindo uma Barra Invertida::       \ e @code{@@backslashchar@{@}}.
* Inserindo um Símbolo Cerquilha::      # e @code{@@hashchar@{@}}.

Inserindo Espaço

* Espaços Múltiplos::               Inserindo múltiplos espaços.
* Não Finalizando Uma Frase::       Algumas vezes um ponto ``.'' não finaliza uma frase.
* Finalizando Uma Frase::           Algumas vezes finaliza.
* @code{@@frenchspacing}::          Especificando espaçamento de fim de frase.
* @code{@@dmn}::                    Formatando uma dimensão.

Glifos para Texto

* @code{@@TeX @@LaTeX}::                As logomarcas do @TeX{}.
* @code{@@copyright}::                  O símbolo de direitos autorais (c em um círculo).
* @code{@@registeredsymbol}::           O símbolo de marca registrada (R em um círculo).
* @code{@@dots}::                       Como inserir reticências: @dots{} e @enddots{}
* @code{@@bullet}::                     Como inserir um marcador: @bullet{}
* @code{@@euro}::                       Como inserir o símbolo da moeda Euro.
* @code{@@pounds}::                     Como inserir o símbolo da moeda Libras.
* @code{@@textdegree}::                 Como inserir o símbolo de Graus.
* @code{@@minus}::                      Como inserir um sinal de menos.
* @code{@@geq @@leq}::                  Como inserir os sinais maior/menor que ou igual a.

Glifos para Programação

* Sumário de Glifos::
* @code{@@result}::                     Como exibir o resultado da expressão.
* @code{@@expansion}::                  Como indicar uma expansão.
* @code{@@print}::                      Como indicar saída gerada.
* @code{@@error}::                      Como indicar uma mensagem de erro.
* @code{@@equiv}::                      Como indicar equivalência.
* @code{@@point}::                      Como indicar o local do ponto.
* Sequências de Clique::                Inserindo sequências de uso da GUI.

Forçando e Impedindo Quebras

* Comandos de Quebra::                  Resumo dos comandos relacionados a quebra.
* Quebras de Linha::                    Forçando quebras de linha.
* @code{@@- @@hyphenation}::            Ajudando @TeX{} com pontos de hifenação.
* @code{@@allowcodebreaks}::            Controlando quebras de linhas dentro do texto de @@code.
* @code{@@w}::                          Impedindo quebras de linha indesejadas no texto.
* @code{@@tie}::                        Inserindo um inquebrável, porém variante espaço.
* @code{@@sp}::                         Inserindo linhas em branco.
* @code{@@page}::                       Forçando o início de uma página nova.
* @code{@@group}::                      Impedindo quebras de página indesejadas.
* @code{@@need}::                       Outra maneira de impedir quebras de página indesejadas.

Comandos de Definição

* Modelos de Comando de Definição::                 Escrevendo descrições usando comandos de definição.
* Linhas de Continuação de Comando de Definição::   Continuando o cabeçalho por sobre linhas de fonte.
* Argumentos Opcionais::                            Manuseando argumentos opcionais e repetidos.
* @code{@@deffnx}::                                 Agrupe duas ou mais `primeiras' linhas.
* Comandos de Definição em Detalhe::                Referência para todos os comandos de definição.
* Convenções de Comando de Definição::              Convenções para a escrita de definições.
* Definição de Função de Amostra::                  Um exemplo.

Os Comandos de Definição

* Comandos de Funções::          Comandos para funções e entidades similares.
* Comandos de Variáveis::        Comandos para variáveis e entidades similares.
* Funções Tipadas::              Comandos para funções em linguagens tipadas.
* Variáveis Tipadas::            Comandos para variáveis em linguagens tipadas.
* Tipos de Dados::               O comando de definição para tipos de dados.
* Objetos Abstratos::            Comandos para programação orientada a objetos.

Programação Orientada a Objetos

* Variáveis:   Variáveis Orientadas a Objetos.
* Métodos:     Métodos Orientados a Objetos.

Internacionalização

* @code{@@documentlanguage}::           Declarando o idioma atual.
* @code{@@documentencoding}::           Declarando a codificação de entrada.

Texto Visível Condicionalmente

* Comandos Condicionais::             Texto para um dado formato.
* Não Comandos Condicionais::         Texto para qualquer outro formato que não um dado.
* Comandos do Formatador Bruto::      Usando comandos do formatador bruto.
* Condicionais Inline::               Texto condicional delimitado por chaves.
* @code{@@set @@clear @@value}::      Testes de variáveis e substituições.
* Testes para Comandos do Texinfo::   Testando se um comando Texinfo está disponível.
* Aninhamento de Condicional::        Usando condicionais dentro de condicionais.

Sinalizadores: @code{@@set}, @code{@@clear}, condicionais, e @code{@@value}

* @code{@@set @@value}::                 Expanda uma variável de sinalização para uma string.
* @code{@@ifset @@ifclear}::             Formate uma região se um sinalizador estiver configurado.
* @code{@@inlineifset @@inlineifclear}:: Condicionais de sinalização delimitados por chaves.
* Exemplo de @code{@@value}::            Uma maneira fácil de atualizar informações de edição.

Definindo Novos Comandos do Texinfo

* Definindo Macros::                Definindo e indefinindo novos comandos.
* Invocando Macros::                Usando uma macro, uma vez que você a tiver definido.
* Detalhes de Macro::               Limitações das macros do Texinfo.
* @code{@@alias}::                  Apelidos de comandos.
* @code{@@definfoenclose}::         Destaque personalizado.
* Processadores Externos de Macro:: Diretivas @code{#line}.

Processadores Externos de Macro: Diretivas de Linha

* Diretiva @samp{#line}::
* Tex: @samp{#line} e @TeX{}.
* Sintaxe: Detalhes da Sintaxe @samp{#line}.

Arquivos de Inclusão

* Usando Arquivos de Inclusão::          Como usar o comando @code{@@include}.
* @code{texinfo-multiple-files-update}:: Como criar e atualizar nós e menus ao usar arquivos incluídos.
* Exigências dos Arquivos de Inclusão::  Necessidades do @code{texinfo-multiple-files-update}.
* Arquivo de Inclusão de Amostra::       Um arquivo externo de amostra com arquivos incluídos dentro dele; e um arquivo incluído de amostra.
* @code{@@verbatiminclude}::             Incluindo um arquivo literal.
* Evolução da Inclusão de Arquivos::     Como o uso do comando @code{@@include} mudou ao longo do tempo.

Formatando e Imprimindo Cópia Impressa

* Use @TeX{}::                                    Use @TeX{} para formatar para cópia impressa.
* Formatar com @command{texi2dvi}::               A maneira mais simples para formatar.
* Formatar com @command{tex}/@command{texindex}:: Formatando com comandos explícitos de shell.
* Imprimir com @command{lpr}::                    Como imprimir.
* Dentro do Emacs::                               Como formatar e imprimir a partir de um shell do Emacs.
* Impressão no Modo Texinfo::                     Como formatar e imprimir no Modo Texinfo.
* Comando de Compilação::                         Como imprimir usando o comando de compilar do Emacs.
* Resumo das Exigências::                         Resumo de exigências de formatação do @TeX{}.
* Preparando para @TeX{}::                        O que se fazer antes de usar o @TeX{}.
* hboxes lotados::                                O que são e o que se fazer com hboxes superlotados.
* @code{@@smallbook}::                            Como imprimir livros e manuais formato pequeno.
* Papel A4::                                      Como imprimir em papel A4 ou A5.
* @code{@@pagesizes}::                            Como imprimir com tamanhos de página personalizados.
* Marcas de Corte e Ampliação::                   Como imprimir marcas para indicar o tamanho das páginas e como imprimir saída escalada.
* Saída PDF::                                     Saída em Formato Portável de Documento.
* Obtendo @TeX{}::                                Como obter @TeX{}.

Formatar com @command{tex}/@command{texindex}

* Formatando Documentos Parciais::
* Detalhes do @command{texindex}::

@command{texi2any}: O Tradutor Genérico para Texinfo

* Implementação de Referência::                  @command{texi2any}: a implementação de referência.
* Invocando @command{texi2any}::                 Executando o tradutor a partir de um shell.
* Saída Impressa do @command{texi2any}::         Chamando @command{texi2any}.
* Validação de Ponteiro::                        Como verificar se os ponteiros apontam para algum lugar.
* Variáveis de Personalização::                  Configurando @command{texi2any}.
* Internacionalização de Strings de Documentos:: Traduzindo texto inserido pelo programa.
* Invocando @command{pod2texi}::                 Traduzindo POD Perl para Texinfo.
* @command{texi2html}::                          Um ancestral de @command{texi2any}.

Variáveis de Personalização

* Comandos: Variáveis de Personalização para Comandos @@.
* Opções: Variáveis e Opções de Personalização.
* HTML: Variáveis de Personalização de HTML.
* Outras: Outras Variáveis de Personalização.

Criando e Instalando Arquivos Info

* Criando um Arquivo do Info::
* Instalando Um Arquivo do Info::

Criando um Arquivo do Info

* Vantagens do @command{makeinfo}::   @command{makeinfo} provê melhor verificação de erro.
* @code{makeinfo} no Emacs::          Como executar @code{makeinfo} a partir do Emacs.
* Comandos @code{texinfo-format}::    Dois comandos de formatação Info escritos em Emacs Lisp são uma alternativa a @code{makeinfo}.
* Formatação em Lote::                Como formatar para Info em modo de lote Emacs.
* Arquivos de Etiqueta e de Divisão:: Como os arquivos marcados e divididos ajudam Info a executar melhor.

Instalando Um Arquivo do Info

* Arquivo de Diretório::             O menu de nível superior para todos os arquivos Info.
* Novo Arquivo Info::                Listando um novo arquivo Info.
* Outros Diretórios Info::           Como especificar arquivos Info que estão localizados em outros diretórios.
* Instalando Entradas de Diretório:: Como especificar qual entrada de menu adicionar ao diretório Info.
* Invocando @command{install-info}:: Opções @code{install-info}.

Gerando HTML

* Tradução de HTML:: Detalhes da saída HTML.
* Divisão de HTML::  Como a saída HTML é dividida.
* CSS de HTML::      Influenciando a saída HTML com Folhas de Estilo em Cascata.
* Xref de HTML::     Referências cruzadas em saída HTML.

Referências Cruzadas HTML

* Fundamentos de Link: Fundamentos do Link Xref do HTML.
* Expansão de Nó:      Expansão Xref de Nome de Nó do HTML.
* Expansão de Comando: Expansão do Comando Xref do HTML.
* Expansão de 8 bits:  Expansão de Caracteres de 8 bits do Xref do HTML.
* Incompatibilidade:   Incompatibilidade de Xref do HTML.
* Configuração:        Configuração do Xref do HTML. htmlxref.cnf.
* Preservando links:   Preservação de Link Xref do HTML. MANUAL-noderename.cnf.

Arquivos de Amostra do Texinfo

* Arquivo Curto de Amostra do Texinfo::
* Textos GNU de Amostra::
* Licença de Cópia Literal::
* Licença de Cópia Totalmente Permissiva::

Usando o Modo Texinfo

* Visão Geral do Modo Texinfo:: Como o modo Texinfo pode te ajudar.
* Edição Emacs::                Adições do modo Texinfo às características de propósito geral de edição do GNU Emacs.
* Inserindo::                   Como inserir comandos @code{@@@@} usados frequentemente.
* Mostrando a Estrutura::       Como exibir a estrutura de um arquivo.
* Atualizando Nós e Menus::     Como atualizar ou criar novos nós e menus.
* Formatação Info::             Como formatar para Info.
* Impressão::                   Como formatar e imprimir parte ou tudo de um arquivo.
* Resumo do Modo Texinfo::      Sumário de todos os comandos do modo Texinfo.

Atualizando Nós e Menus

* Comandos de Atualização::        Cinco principais comandos de atualização.
* Exigências de Atualização::      Como estruturar um arquivo do Texinfo para usar o comando de atualização.
* Outros Comandos de Atualização:: Como recuar descrições, inserir linhas de nós ausentes e atualizar nós em sequência.

Cabeçalhos de Página

* Cabeçalhos Introduzidos::     Convenções para se usar cabeçalhos de página.
* Formato de Título::           Formatos padrão de títulos de página.
* Escolha de Título::           Como especificar o tipo do título da página.
* Cabeçalhos Personalizados::   Como criar teus próprios cabeçalhos e rodapés.

Capturando Erros

* @command{makeinfo} Preferido::         @code{makeinfo} encontra erros.
* Depuração com Info::                   Como capturar erros com a formatação Info.
* Depuração com @TeX{}::                 Como capturar erros com a formatação @TeX{}.
* Usando @code{texinfo-show-structure}:: Como se usar @code{texinfo-show-structure}.
* Usando @code{occur}::                  Como listar todas as linhas contendo um modelo.
* Executando @code{Info-validate}::      Como encontrar nós mal referenciados.

Encontrando Nós Mal Referenciados

* Usando @code{Info-validate}:: Como executar @code{Info-validate}.
* Desdividir::                  Como criar um arquivo não dividido.
* Etiquetando::                 Como etiquetar um arquivo.
* Dividindo::                   Como dividir um arquivo manualmente.

Especificação do Formato do Info

* Geral:                       Esquema Geral do Formato do Info.
* Texto:                       Construtores de Texto do Formato do Info.

Esquema Geral do Formato do Info

* Inteiro:                     Manual Inteiro do Formato Info. Manuais divididos versus não divididos.
* Preâmbulo:                   Preâmbulo do Formato do Info.
* Indireta:                    Tabela Indireta do Formato do Info.
* Tabela de etiquetas:         Tabela de Etiquetas do Formato do Info.
* Variáveis locais:            Variáveis Locais do Formato do Info.
* Nós Regulares:               Nós Regulares do Formato do Info.

Construtores de Texto do Formato Info

* Menu:                        Menu do Formato do Info.
* Imagem:                      Imagem do Formato do Info.
* Printindex:                  Imprime índices do Formato do Info.
* Xref:                        Referências Cruzadas do Formato do Info.

@end detailmenu
@end menu

@c Recompensem-se os(as) leitores(as) por terem chegado ao fim do menu :).
@c Contribuição de Arnold Robbins.
@quotation
Documentação é como o sexo: quando ela é boa, ela é muito, muito boa; e
quando ela é ruim, é melhor que nada.
---Dick Brandon
@end quotation


@node Condições de Cópia
@unnumbered Condições de Cópia do Texinfo
@cindex Condições de cópia
@cindex Condições para copiar Texinfo
@cindex Software livre
@cindex Livre, software

GNU Texinfo é @dfn{software livre}; isso significa que qualquer pessoa é livre
para usá-lo e livre para redistribuí-lo sob certas condições. Texinfo não está
em domínio público; ele está sob direitos autorais e existem restrições acerca
da distribuição dele; porém essas restrições estão projetadas para permitir
qualquer coisa que um(a) bom(a) cidadão(ã) cooperador(a) desejasse fazer. O que
não for permitido é para tentar impedir que outros(as) adicionalmente
compartilhem qualquer versão de Texinfo que eles(as) possam obter de você.

Especificamente, nós queremos ter certeza que você tem o direito de doar cópias
dos programas que se relacionem a Texinfo; que você receba código fonte ou, do
contrário, possa obtê-lo se assim o desejar; que você pode mudar esses
programas ou usar pedaços deles em novos programas livres; e que você sabe que
pode fazer essas coisas.

Para ter certeza de que qualquer pessoa tem tais direitos, nós temos que
proibir que você prive alguém mais desses direitos. Por exemplo, se você
distribuir cópias dos programas relacionados a Texinfo, você precisa dar para
os(as) receptores(as) todos os direitos que você tem. Você precisa assegurar-se
de que eles(as), também, recebam ou possam conseguir o código fonte.  E você
precisa informá-los(as) dos direitos deles(as).

Além disso, para nossa própria proteção, nós devemos estar certos(as) de que
qualquer pessoa sabe que não existe garantia para os programas que se
relacionem a Texinfo. Se esses programas forem modificados por qualquer outra
pessoa e passados adiante, nós queremos que os(as) receptores(as) deles saibam
que o que eles(as) tem não é o que nós distribuímos, de forma que quaisquer
problemas introduzidos por outros(as) não refletirão na nossa reputação.

As condições precisas das licenças para os programas atualmente sendo
distribuídos que se relacionem com Texinfo são encontradas nas Licenças Gerais
Públicas que os acompanham. Este manual está coberto pela Licença GNU de
Documentação Livre (@pxref{Licença GNU de Documentação Livre}).


@node Visão Geral
@chapter Visão Geral do Texinfo @c Capítulo 1
@cindex Visão Geral do Texinfo
@cindex Texinfo visão geral
@cindex Usando Texinfo em geral
@cindex Texinfo, introdução a
@cindex Introdução a Texinfo
@anchor{Usando Texinfo} @c nó mesclado

@dfn{Texinfo} é um sistema de documentação que usa um arquivo fonte único para
produzir informações online e saída impressa. Isso significa que, em vez de
escrever vários documentos, um para cada formato de saída, você precisa
escrever somente um documento.

Usando Texinfo, você consegue criar um documento impresso (via sistema
tipográfico @TeX{}) em formato PDF ou PostScript, incluindo capítulos, seções,
referências cruzadas e índices. A partir do mesmo arquivo fonte do Texinfo,
você consegue criar um arquivo de saída HTML adequado para uso com um navegador
web; você consegue criar um arquivo do Info com recursos especiais para
facilitar a navegação da documentação; e também criar um arquivo do Docbook ou
uma transliteração para o formato XML.

@cindex Formato do arquivo fonte
@cindex Marcação semântica
Um arquivo fonte do Texinfo é um arquivo de texto simples contendo texto
intercalado com @dfn{comandos @@} (palavras precedidas por um @samp{@@}) que
informam aos processadores Texinfo o que fazer. Os comandos de marcação do
Texinfo são quase inteiramente @dfn{semânticos}; isto é, eles especificam o
significado pretendido do texto no documento, em vez de instruções de
formatação física. Você consegue editar um arquivo do Texinfo com qualquer
editor de texto, porém é especialmente conveniente se usar o GNU Emacs, dado
que esse editor tem um modo especial, chamado modo Texinfo, que fornece vários
recursos relacionados ao Texinfo (@xref{Modo Texinfo}).

@cindex Escopo limitado do Texinfo
Texinfo foi concebido especificamente para o propósito de escrever documentação
e manuais de software. Se você quer escrever um bom manual para teu programa,
Texinfo tem muitos recursos que nós esperamos que tornarão tua tarefa mais
fácil. Entretanto, ele quase não fornece comandos para controlar a formatação
final. Texinfo não é destinado a ser um programa de formatação de propósito
geral, de modo que se você precisa planejar um jornal, conceber um anúncio
luxuoso de revista, ou seguir as exatas exigências de formatação de uma
editora, Texinfo pode não ser a ferramenta mais simples.

@cindex Escrita de Texinfo
@cindex Pronúncia de Texinfo
Escreva-se ``Texinfo'' com um ``T'' maiúsculo e as outras letras em minúsculas.
A primeira silaba de ``Texinfo'' é pronunciada como ``speck'', e não ``hex''.
Essa pronúncia estranha é derivada da pronúncia de @TeX{}. Pronuncie-se @TeX{}
como se o @samp{X} fosse o último som no nome `Bach'. Na palavra @TeX{}, o
@samp{X} é, em vez da letra do Inglês ``ex'', na verdade a letra Grega ``chi''.

Texinfo é o formato oficial de documentação do projeto GNU. Mais informações,
incluindo manuais para pacotes GNU, estão disponíveis na
@uref{http://www.gnu.org/doc/, página web da documentação GNU}.

@menu
* Informando Defeitos::           Submetendo informes efetivos de defeitos.
* Formatos de Saída::             Visão geral dos formatos de saída suportados.
* Arquivos do Info::              O que é um arquivo Info?
* Livros Impressos::              Características de um livro ou manual impresso.
* Adicionando Formatos de Saída:: Páginas de manual e implementando novos formatos.
* Histórico::                     Agradecimentos, contribuidores(as) e gênese.
@end menu


@node Informando Defeitos
@section Informando Defeitos

@cindex Defeitos, informando
@cindex Sugestões para Texinfo, fazendo
@cindex Informando Defeitos
Nós apreciamos informes de defeitos e de sugestões para qualquer aspecto do
sistema Texinfo: programas, documentação, instalação, etc. Por favor, envie-os
para @email{bug-texinfo@@gnu.org}. Você consegue obter a versão mais recente do
Texinfo por meio da página inicial dele,
@uref{http://www.gnu.org/software/texinfo}.

@cindex Lista de verificação para informes de defeitos
Para informes de defeitos, por favor, inclua informações suficientes para
os(as) mantenedores(as) reproduzirem o problema. Falando genericamente, isso
significa:

@itemize @bullet
@item O número da versão do Texinfo e o(s) programa(s) ou manual(is) envolvido(s).
@item O conteúdo de quaisquer arquivos de entrada necessários para reproduzir o defeito.
@item Precisamente como você executou quaisquer programa(s) envolvido(s).
@item Uma descrição do problema e amostras de quaisquer saídas errôneas.
@item Nomes e versões do hardware e do sistema operacional.
@item Qualquer outra coisa que você pense que pudesse ajudar.
@end itemize

Quando em dúvida se alguma coisa é necessária ou não, inclua-a. É melhor
incluir muito mais que deixar de fora algo importante.

É crítico enviar um arquivo de entrada atual que reproduza o problema.
O que não é crítico é ``simplificar'' o exemplo para a menor entrada
possível---a entrada atual com a qual você descobriu o defeito bastará.
(Certamente, se você fizer experimentos, quanto menor o arquivo de
entrada, melhor).

@cindex Remendos, contribuindo
Correções (``Patches'') são mais que bem-vindas; se possível, por favor
faça-as com @samp{@w{diff -c}}
(veja-se @ref{Top,,, diffutils, Comparing and Merging Files}) e inclua as
entradas @file{ChangeLog}
(veja-se @ref{Change Log,,, emacs, O Manual do GNU Emacs}), e siga o estilo de
codificação existente.

@node Formatos de Saída
@section Formatos de Saída
@cindex Formatos de saída
@cindex Estrutura de retaguarda, formatos de saída

Aqui está uma visão geral breve dos formatos de saída atualmente
suportados por Texinfo.

@table @asis
@item Info
@cindex Saída gerada do Info, visão geral
(Gerado via @command{makeinfo}).   O formato Info é em sua maior parte
transliteração de texto plano do fonte Texinfo.   Ele adiciona uns
poucos caracteres de controle para prover informação de navegação para
referências cruzadas, índices, e assim por diante.   O subsistema Emacs
Info (veja-se @ref{Top,,, info, Info}), e o programa autônomo @command{info}
(@pxref{Top,,, info-stnd, GNU Info}), entre outros, podem ler esses
arquivos. Veja-se @ref{Arquivos do Info}, e
@ref{Criando e Instalando Arquivos Info}.

@item Texto simples
@cindex Saída gerada de texto simples, visão geral
(Gerado via @command{makeinfo --plaintext}).   Essa é quase a mesma que
a saída Info com os caracteres de controle de navegação omitidos.

@item HTML
@cindex Saída gerada de HTML, visão geral
@cindex Consórcio W3
@cindex Mozilla
@cindex Lynx
@cindex Emacs-W3
(Gerado via @command{makeinfo --html}).   HTML, significando Hyper Text
Markup Language (Linguagem de Marcação de Hiper Texto), tem se tornado a
mais comumente usada linguagem para a escrita de documentos na World
Wide Web (Teia de Alcance Global).   Os navegadores web, tais como
Mozilla, Lynx, e Emacs-W3, podem renderizar essa linguagem online.
Existem muitas versões de HTML, também padrões diferentes e variações
específicas de navegador.   @command{makeinfo} tenta usar um
subconjunto da linguagem que possa ser interpretado por qualquer
navegador comum, intencionalmente não se usando de muitas marcações
mais novas ou menos amplamente suportadas.
Apesar que a saída nativa é assim até certo ponto plana, ela pode ser
personalizada em vários níveis, se desejado.   Para detalhes da
linguagem HTML e mais informação relacionada, veja-se
@uref{http://www.w3.org/MarkUp/}.
Veja-se @ref{Gerando HTML}.

@item DVI
@cindex Saída gerada DVI, visão geral
@pindex dvips
@pindex xdvi
(Gerado via @command{texi2dvi}).   O formato binário ``DeVIce Independent''
é liberado pelo programa tipográfico @TeX{} (@uref{http://tug.org}).
Essa é então lida por um `controlador' DVI, o qual conhece os comandos
específicos de dispositivo atuais que podem ser visualizados ou
impressos, notadamente Dvips para tradução para PostScript
(veja-se @ref{Top,,, dvips, Dvips}) e Xdvi para visualização em uma tela X
(@uref{http://sourceforge.net/projects/xdvi/}). Veja-se @ref{Impresso}.
(Esteja avisado de que a linguagem Texinfo é muito diferente de, e muito
mais estrita que, as linguagens usuais de @TeX{}: plain @TeX{}, @LaTeX{},
Con@TeX{}t, etc.).

@item PostScript
@cindex Saída gerada PostScript, visão geral
(Gerada via @command{texi2dvi --ps}).   PostScript é uma linguagem de
descrição de página que se tornou amplamente usada por volta de 1985
e ainda é usada hoje em dia.
@uref{http://en.wikipedia.org/wiki/PostScript} dá uma descrição básica e
mais preferências.   Por padrão, Texinfo usa o programa
@command{dvips} para converter a saída DVI de @TeX{} para PostScript.
 Veja-se @ref{Top,,, dvips, Dvips}.

@item PDF
@cindex Saída gerada PDF, visão geral
@cindex Beebe, Nelson
(Gerada via @command{texi2dvi --pdf} ou @command{texi2pdf}).   Esse
formato foi desenvolvido por Adobe Systems para troca de documento
portável, baseado na linguagem PostScript prévia deles.   O formato pode
representar a exata aparência de um documento, incluindo fontes e
gráficos, e suportar escalonamento arbitrário.   Ele é entendido como
sendo independente de plataforma e facilmente visualizável, entre outros
objetivos de design;
@uref{http://en.wikipedia.org/wiki/Portable_Document_Format} e
@uref{http://tug.org/TUGboat/tb22-3/tb72beebe-pdf.pdf} tem algum
conhecimento.   Por padrão, Texinfo usa o programa @command{pdftex},
uma extensão de @TeX{}, para liberar PDF; veja-se
@uref{http://tug.org/applications/pdftex}. Veja-se @ref{Saída PDF}.

@item Docbook
@cindex Saída gerada Docbook, visão geral
@cindex Saída gerada XML Docbook, visão geral
(Gerado via @command{makeinfo --docbook}).   Esse é um formato baseado
em XML desenvolvido alguns anos atrás, primariamente para documentação
técnica.   Ele por conseguinte assume alguma semelhança, em linhas
gerais, com Texinfo.   Veja-se @uref{http://www.docbook.org}.
Vários conversores de Docbook @emph{para} Texinfo também foram
desenvolvidos; veja-se as páginas web Texinfo.

@item XML
@cindex Saída gerada XML Texinfo, visão geral
@cindex Saída gerada Texinfo XML, visão geral
@cindex DTD, para Texinfo XML
@pindex texinfo.dtd
@pindex txixml2texi
(Gerado via @command{makeinfo --xml}).   XML é uma especificação de
sintaxe genérica usável para qualquer tipo de conteúdo (uma
referência está em @uref{http://www.w3.org/XML}).   A saída XML de
@command{makeinfo}, diferente de todos os outros formatos de saída, é
uma transliteração do fonte Texinfo em vez de saída processada.   Isto
é, a saída traduz os comandos de marcação Texinfo em sintaxe XML, para
processamento mais amplo por ferramentas XML.   Os detalhes da saída
estão definidos em um DTD XML como de costume, o qual está contido em um
arquivo @file{texinfo.dtd} incluso na distribuição do fonte Texinfo e
disponível via páginas web Texinfo.
O XML contém informação suficiente para recriar o conteúdo original,
exceto para construções sintáticas, tais como macros Texinfo e
condicionais.   A distribuição do fonte Texinfo inclui um script
utilitário @file{txixml2texi} para fazer essa transformação de volta.
@end table


@node Arquivos do Info
@section Arquivos do Info
@cindex Arquivos Info

Conforme mencionado acima, o formato Info é em sua maioria uma
transliteração de texto plano do fonte Texinfo, com a adição de uns
poucos caracteres de controle para separar nós e prover informação de
navegação, de forma que os programas de leitura Info possam operar sobre
ele.

Os arquivos Info são quase sempre criados pelo processamento de um
documento fonte Texinfo.   O comando @command{makeinfo}, também
conhecido como @command{texi2any}, é o comando principal que converte um
arquivo Texinfo em um arquivo Info; veja-se
@ref{Tradutor Genérico @command{texi2any}}.

Geralmente, você adentra um arquivo Info via um nó que, por convenção,
é chamado `Top'.   Esse nó normalmente contém somente um sumário curto
do propósito do arquivo, e um menu amplo por meio do qual o restante do
arquivo é alcançado.   A partir desse nó, você ou pode atravessar o
arquivo sistematicamente, indo de nó a nó; ou você pode ir até um
nó específico listado no menu principal, ou você pode pesquisar no
menu de índice e então ir diretamente ao nó que tenha a informação que
você deseja.   Alternativamente, com programa autônomo Info, você pode
especificar itens de menu na linha de comando
(veja-se @ref{Top,,, info, Info}).

Se você desejar ler ao longo de um arquivo Info em sequência, como se
ele fosse um manual impresso, você pode teclar @key{ESPAÇO} repetidamente,
ou você percorre o arquivo inteiro com o comando Info avançado @kbd{g *}.
(Veja-se @ref{Advanced,, Advanced Info commands, info, Info}).

O arquivo @file{dir} no diretório @file{info} serve como o ponto de
chegada para o sistema Info inteiro.   A partir dele, você pode alcançar
os nós `Top' de cada um dos documentos em um sistema Info completo.

@cindex Sintaxe URI para Info
Se você desejar se referir a um arquivo Info via URI, você pode usar
a sintaxe (não oficial) exemplificada pelo seguinte.   Isto funciona com
Emacs/W3, por exemplo:
@example
info:emacs#Dissociated%20Press
info:///usr/info/emacs#Dissociated%20Press
info://localhost/usr/info/emacs#Dissociated%20Press
@end example

O próprio programa @command{info} não segue URIs de qualquer tipo.


@node Livros Impressos
@section Livros Impressos
@cindex Manual e livro impresso, características
@cindex Características de manual, impresso
@cindex Características de livro, impresso
@cindex Características de livro impresso Texinfo
@cindex Características, manuais e livros impressos

@cindex Knuth, Donald
Um arquivo Texinfo pode ser formatado e composto como um livro impresso
ou um manual.   Para fazer isso, você precisa de @TeX{}, um sofisticado
programa de tipografia escrito por Donald Knuth da Universidade Stanford.

Um livro baseado em Texinfo é similar a qualquer outro composto,
trabalho impresso: ele pode ter uma página de título, página de direitos
autorais, sumário, e prefácio, bem como capítulos, seções e subseções
numeradas ou não numeradas, cabeçalhos de páginas, referências cruzadas,
notas de rodapé, e índices.

@TeX{} é um programa tipográfico de propósito geral.   Texinfo provê um
arquivo @file{texinfo.tex} que contém informação (definições ou
@dfn{macros}) que @TeX{} usa quando compõe arquivo Texinfo.
(@file{texinfo.tex} informa a @TeX{} como converter os comandos @@ de
Texinfo para comandos @TeX{}, os quais @TeX{} pode então processar para
criar o documento tipografado).   @file{texinfo.tex} contém as
especificações para imprimir um documento.   Você pode obter a versão
mais recente de @file{texinfo.tex} a partir da página de Texinfo
@uref{http://www.gnu.org/software/texinfo/}.

Nos Estados Unidos, os documentos são em sua maioria frequentemente
impressos em páginas de 8.5 por 11 polegadas
(216@dmn{mm} por 280@dmn{mm}); esse é o tamanho padrão.
Porém, você também pode imprimir em páginas de 7 por 9.25 polegadas
(178@dmn{mm} por 235@dmn{mm}, o tamanho @code{@@smallbook}; ou em papel
de tamanho A4 ou A5 (@code{@@afourpaper}, @code{@@afivepaper}).
 Veja-se @ref{@code{@@smallbook}}, e @ref{Papel A4}.

@cindex Programação competente
@TeX{} é livremente distribuível.   Ele é escrito em um super conjunto
de Pascal para programação de instrução chamado WEB e pode ser compilado
ou em Pascal ou (pelo uso de um programa de conversão que vem com a
distribuição de @TeX{}) em C.

@TeX{} é muito poderoso e tem um grande número de características.
Porque um arquivo Texinfo deve necessariamente estar apto a apresentar
informação tanto em um terminal somente caractere em formato Info quanto
em um livro tipografado, os comandos de formatação que Texinfo suporta
são necessariamente limitados. Veja-se @ref{Obtendo @TeX{}}, para
informação sobre como adquirir @TeX{}. Ele não é parte da distribuição Texinfo.


@node Adicionando Formatos de Saída
@section Adicionando Formatos de Saída
@cindex Formatos de saída adicionais

Os formatos de saída nas seções anteriores lidam com uma variedade ampla
de usos, porém, certamente, sempre existe espaço para mais.

@cindex Formatos de saída, suportando mais
@cindex Ferramentas SGML, formatos de saída
Se você for um programador e gostaria de contribuir para com o projeto
GNU implementando formatos de saída adicionais para Texinfo, isso seria
excelente.   A maneira de fazer isso que seria mais útil é escrever uma
infraestrutura nova para @command{texi2any}, nossa implementação de
referência de um analisador Texinfo; ela cria uma representação de
árvore da entrada de Texinfo que você pode usar para a conversão.
A documentação no arquivo fonte
@file{tp/Texinfo/Convert/Converter.pm} é um bom lugar para começar.
Veja-se @ref{Tradutor Genérico @command{texi2any}}.

Outra abordagem viável é usar a saída XML de Texinfo oriunda de
@command{texi2any} como sua entrada.   Esse XML é uma representação
essencialmente completa da entrada, porém sem a sintaxe de Texinfo
e as peculiaridades de opção, conforme descrito acima.

@cindex Analisadores Texinfo, desencorajando mais
Se você ainda não conseguir resistir à tentação de escrever um programa
novo que leia o fonte Texinfo diretamente, permita-nos te dar mais
algumas advertências: por favor não subestime a quantidade de trabalho
exigida.   Texinfo não é de forma alguma uma linguagem simples de se
analisar corretamente, e permanece sob desenvolvimento, de maneira que
você estaria se comprometendo com uma tarefa em andamento.   Você está
aconselhado a verificar se os testes da linguagem que vem com
@command{texi2any} dão resultados corretos com o seu programa novo.

@cindex Saída de página de manual, não suportada
De tempos em tempos, propostas são feitas para gerar páginas de manual
Unix tradicionais a partir do fonte Texinfo.   Entretanto, pelo motivo
de que as páginas de manual tem um formato convencional estrito, criar
uma página de manual boa exige um fonte completamente diferente daquele
necessário para as aplicações Texinfo típicas de escrita de um tutorial
de usuário bom e/ou um bom manual de referência.   Isso torna a geração
de páginas de manual incompatível com o objetivo do desenho de Texinfo
de não ter de documentar a mesma informação em maneiras diferentes para
diferentes formatos de saída.   Você poderia também escrever a página de
manual diretamente.

@pindex help2man
@cindex O'Dea, Brendan
Como um meio alternativo para suportar páginas de manual, você pode
achar que o programa @command{help2man} seja útil.   Ele gera uma página
de manual tradicional a partir da saída @samp{--help} de um programa.
De fato, as páginas de manual para os programas na distribuição Texinfo
são geradas com isso.
Ele é software GNU escrito por Brendan O'Dea, disponível a partir de
@uref{http://www.gnu.org/software/help2man}.



@node Histórico
@section Histórico

@cindex Stallman, Richard M.
@cindex Chassell, Robert J.
@cindex Fox, Brian
@cindex Berry, Karl
Richard M. Stallman inventou o formato Texinfo, escreveu os
processadores iniciais, e criou a Edição 1.0 deste manual.
Robert@tie{}J. Chassell revisou e estendeu imensamente o manual,
iniciando com a Edição 1.1.   Brian Fox foi responsável pela
distribuição autônoma de Texinfo até a versão 3.8, e originalmente
escreveu os programas autônomos @command{makeinfo} e @command{info}.
Karl Berry continuou a manutenção desde Texinfo 3.8
(edição do manual 2.22).

@cindex Pinard, Fran@,{c}ois
@cindex Schwab, Andreas
@cindex Weinberg, Zack
@cindex Weisshaus, Melissa
@cindex Zaretskii, Eli
@cindex Zuhn, David D.
Nossos agradecimentos vão para todos que ajudaram a aperfeiçoar este
trabalho, particularmente os incansáveis Eli Zaretskii e Andreas Schwab,
que forneceram correções incontáveis.   Fran@,{c}ois Pinard e
David@tie{}D. Zuhn, incansavelmente gravaram e relataram erros e
obscuridades.  Zack Weinberg fez o impossível implementando a sintaxe de
macro em @file{texinfo.tex}.   Obrigado a Melissa Weisshaus por suas
frequentes revisões de edições quase similares.   Dúzias de outros
contribuíram com correções e sugestões, eles estão agradecidamente
reconhecidos no arquivo @file{ChangeLog}.   Nossos erros são nossos
próprios.

@cindex Histórico do Texinfo
@cindex Texinfo, estória
@subheading Começo

@cindex Scribe
@cindex Reid, Brian
Nos anos 1970 no CMU, Brian Reid desenvolveu um programa e formato
chamado Scribe para marcar documentos para impressão.   Ele usou o
caractere @code{@@} para introduzir comandos, conforme Texinfo faz.
Muito mais consequencialmente, ele se empenhou em descrever o conteúdo
dos documentos em vez da formatação, uma ideia inteiramente adotada por
Texinfo.

@cindex Bolio
@cindex Bo@TeX{}
Ao mesmo tempo, pessoas no MIT desenvolveram outro, não muito diferente
formato chamado Bolio.  Esse então foi convertido usando @TeX{} como
sua linguagem tipográfica: Bo@TeX{}.  A versão mais antiga de Bo@TeX{}
parece ter sido a 0.02 em 31 de outubro de 1984.

Bo@TeX{} somente poderia ser usado como uma linguagem de marcação
para documentos serem impressos, não para documentos online.  Richard
Stallman (RMS) trabalhou em ambos Bolio e Bo@TeX{}.  Ele também
desenvolveu um formato chique de ajuda on-line chamado Info, e então
combinou Bo@TeX{} e Info para criar Texinfo, uma linguagem de marcação
para texto que é entendida para ler ambos online e como cópia impressa.

Seguindo em frente, o tradutor original para criar Info foi escrito
(primariamente por RMS e Bob Chassell) em Emacs Lisp, a saber: o
@code{texinfo-format-buffer} e outras funções.  No começo dos anos 1990,
Brian Fox reimplementou o programa de conversão em C, agora chamado
@command{makeinfo}.

@subheading Reimplementando in Perl

@cindex Cons, Lionel
@cindex Dumas, Patrice
Em 2012, o @command{makeinfo} C foi ele próprio substituído por uma
implementação Perl chamada genericamente @command{texi2any}.  Essa
versão suporta o mesmo nível de personalização de saída que
@command{texi2html}, um programa independente originalmente escrito por
Lionel Cons, mais tarde com trabalho substancial de muitos outros.  As
muitas características adicionais necessárias para tornar
@command{texi2html} uma substituição para @command{makeinfo} foram
implementadas por Patrice Dumas.  A primeira versão jamais lançada de
@command{texi2any} foi baseada no código @command{texi2html}.  Essa
implementação, entretanto, foi abandonada em favor do atual programa,
que analisa a entrada Texinfo em uma árvore para processamento.  Ele
ainda suporta quase todas as características de @command{texi2html}.

O novo programa Perl é muito mais lento que o antigo programa C.
Nós esperamos que a diferença de velocidade será fechada no futuro,
porém elas podem jamais ser inteiramente comparáveis.  Então porque nós
mudamos?  Em poucas palavras, nós pretendemos e esperamos que o presente
programa seja muito mais fácil que a prévia implementação C de
@command{makeinfo} para estender para diferentes estilos de saída,
formatos de infra estrutura de saída, e todas as outras personalizações.
Em mais detalhes:

@itemize @bullet
@item Personalização de HTML.  Muitos GNU e outros pacotes de software
livre tem sido felizes no uso das características de
personalização de HTML em @command{texi2html} por anos.  Assim, na
verdade, duas implementações independentes da linguagem Texinfo foram
desenvolvidas, e mantê-las em sincronia não foi simples.  Adicionar a
possibilidade de personalização de HTML em @command{texi2html} a um
programa C tem sido um esforço enorme.

@item Unicode, e suporte multilínguas genericamente, especialmente das
linguagens da Ásia Oriental.  Apesar que certamente é perfeitamente
plausível escrever tal suporte em C, no caso particular de
@command{makeinfo}, isso teria sido equivalente a reescrever o programa
inteiro.  Em Perl, muito disso vem essencialmente de graça.

@item Infra estrutura adicional.  O código @command{makeinfo} se tornou
tão complexo ao ponto de que, adicionar uma infra estrutura nova, era bastante
complexo, exigindo interações complexas com as infra estruturas
existentes.  Em contraste, nossa implementação Perl provê uma
representação limpa baseada em árvore para todas as infra estruturas
funcionarem.  Pessoas tem solicitado numerosas infra estruturas
diferentes (@LaTeX{}, o mais recente (X)HTML, @dots{}), e elas agora
serão muito mais viáveis de implementar.  O que conduz ao último item:

@item Tornando as contribuições mais fáceis.  Em geral, devido à
estrutura mais limpa, o programa Perl deveria ser consideravelmente mais
fácil que o C para qualquer pessoa ler e contribuir com, com os óbvios
benefícios resultantes.
@end itemize

Veja-se @ref{Implementação de Referência}, para mais sobre a razão de ser e função
de @command{texi2any}.


@node Escrevendo um Arquivo do Texinfo
@chapter Escrevendo um Arquivo do.Texinfo @c Capítulo 2

Este capítulo descreve a sintaxe Texinfo e o que é exigido em um arquivo
Texinfo, e dá um arquivo curto de amostra.

@menu
* Convenções::                Regras gerais para escrever um arquivo Texinfo.
* Comentários::                   Escrevendo comentários e texto ignorado em geral.
* Mínimo::                    O que um arquivo Texinfo deve ter.
* Amostra Curta::               Um arquivo curto de amostra Texinfo
@end menu


@node Convenções
@section Convenções Sintáticas Gerais
@cindex Convenções sintáticas gerais
@cindex Sintáticas, convenções
@cindex Convenções, sintáticas
@cindex Caracteres, entrada básica
@anchor{Comandos de Formatação} @c nome antigo

Esta seção descreve as convenções gerais usadas em todos os
documentos Texinfo.

@itemize @bullet
@item
@cindex Arquivos fonte, caracteres usados
Todos os caracteres ASCII imprimíveis, exceto @samp{@@}, @samp{@{} e
@samp{@}}, podem aparecer em um arquivo Texinfo e representam eles
mesmos.
@samp{@@} é o caractere de encapsulamento que introduz comandos, enquanto
@samp{@{} e @samp{@}} são usados para envolver argumentos a certos
comandos.   Para colocar um desses caracteres especiais no documento,
coloque um caractere @samp{@@} em frente a ele, como isto: @samp{@@@@},
@samp{@@@{}, e @samp{@@@}}.

@item
@cindex Comandos @@
@cindex Formatando, comandos
Em um arquivo Texinfo, os comandos que você escreve para descrever o
conteúdo do manual são precedidos por um caractere @samp{@@}; eles são
chamados @dfn{comandos @@}.   (O @samp{@@} em Texinfo tem o mesmo
significado que @samp{\} tem em @TeX{} plano).

@cindex Chaves, quando usar
Dependendo do que fazem ou quais argumentos@footnote{A palavra
argumento é oriunda da maneira como ela é empregada em matemática e não
se refere a uma disputa entre duas pessoas; ela se refere a informação
apresentada ao comando.  De acordo com o @cite{Oxford English
Dictionary}, a palavra é derivada do Latim para @dfn{tornar claro,
provar}; então, ela veio a significar `a evidência oferecida como
prova', o que é dizer `a informação oferecida', o que leva ao seu
significado matemático.  Em sua outra derivação subjacente, a palavra
veio a significar `afirmar em um modo contra o qual outros podem fazer
contra afirmações', o que levou ao significado de `argumento' como uma
disputa.} receberem, você precisa escrever comandos @@ em suas próprias
linhas, ou como parte de sentenças.   Como uma regra geral, um comando
exige chaves se esse comando se misturar entre outro texto; porém, ele
não necessita das chaves se estiver em sua própria linha.  Para mais
detalhes da sintaxe de comando Texinfo, veja-se @ref{Sintaxe de Comando}.


@item
Espaço em branco seguindo um nome de comando @@ é opcional e
(normalmente) ignorado se presente.  As exceções são contextos quando o
espaço em branco é significativo, por exemplo, um ambiente de
@code{@@example}.


@item
Texinfo suporta as marcações normais de encapsulamento usados em
Inglês e em outras linguagens; veja-se @ref{Inserindo Aspas}.

@item
@cindex Vários traços no fonte
@cindex Traços no fonte
@cindex Hifens no fonte, dois ou três em uma linha
@cindex Travessão, produzindo
@cindex Em dash, produzir
Use três hifens em uma linha, @samp{---}, para produzir um traço
longo---como esse (chamado um @dfn{travessão}), usado para pontuação
em sentenças.  Use dois hifens, @samp{--}, para produzir um traço
médio (chamado um @dfn{traço de ligação}), usado primariamente para
intervalos numéricos, como em ``Junho 25--26''.  Use um hífen
simples, @samp{-}, para produzir um hífen padrão usado em palavras
compostas.  Para exibir na tela, Info reduz três hifens para dois e dois
hifens para um (não transitivamente!).  Certamente, qualquer número de
hifens no fonte permanece como estiverem em contextos literais,
tais como @code{@@code} e @code{@@example}.

@item
@cindex Caracteres de avanço de formulário
@cindex @kbd{CTRL-l}
Os caracteres de alimentação de formulário (@kbd{CTRL-l}) na entrada são
manipulados conforme segue:

@table @asis
@item PDF/DVI
Em texto normal, tratado como finalizante de qualquer parágrafo aberto;
essencialmente ignorado entre parágrafos.

@item Info
Saída como-é entre parágrafos (o uso mais comum deles); em outros
contextos, eles podem ser tratados como espaços regulares (e então
consolidados com espaço em branco envolvente).

@item HTML
Escrito como uma entidade numérica, exceto contextos onde espaços são
ignorados; por exemplo, em @samp{@@footnote@{ ^L foo@}}, a alimentação
de formulário é ignorada.

@item XML
Mantenha-os em qualquer lugar; em atributos, encapsulados como
@samp{\f}; também, @samp{\} é encapsulado como @samp{\\} e uma nova
linha como @samp{\n}.

@item Docbook
Completamente removidos, dado que não são permitidos.
@end table

Como você pode ver, por causa dessas exigências diferentes dos formatos
de saída, não é possível se usar alimentações de formulário
completamente portáveis.

@item
@cindex Tabulações; não use!
@strong{Aviso:} Por último, não use caracteres de tabulação em um arquivo
Texinfo! (Exceto, talvez, em modos textuais.)  @TeX{} usa fontes de largura
variável, o que significa que é impraticável, na melhor das hipóteses, se
definir uma tabulação para funcionar em todas as circunstâncias.
Consequentemente, @TeX{} trata tabulações como espaços únicos, e isso não é o
que eles aparentam no fonte. Além disso, @code{makeinfo} não faz nada especial
com tabulações, e então um caractere de tabulação em teu arquivo de entrada
geralmente terá uma aparência diferente na saída.

@noindent
Para evitar esse problema, o modo Texinfo em GNU Emacs insere espaços
múltiplos quando você pressiona a tecla @key{TAB}.   Ainda, você pode
executar @code{untabify} em Emacs para converter tabulações em uma região para
espaços múltiplos, ou usar o comando @code{unexpand} a partir do
shell.
@end itemize


@node Comentários
@section Comentários

@cindex Comentários
@findex comment
@findex c

Você pode escrever comentários em um arquivo Texinfo usando o
comando @code{@@comment}, o qual pode ser abreviado para @code{@@c}.
Tais comentários são para uma pessoa examinando o arquivo fonte Texinfo.
Todo o texto em uma linha que se seguir ou a @code{@@comment} ou a
@code{@@c} é um comentário; o restante da linha não aparece na saída
visível.  (Para ser preciso, o caractere após o @code{@@c} ou
@code{@@comment} deve necessariamente ser algo que não um traço ou
alfanumérico, ou será tomado como sendo parte do comando.)

Frequentemente, você pode escrever o @code{@@comment} ou @code{@@c} no
meio de uma linha, e somente o texto que se seguir após o comando
@code{@@comment} ou @code{@@c} não aparece; porém alguns comandos, tais
como @code{@@settitle}, funcionam sobre uma linha inteira.  Você não
pode usar @code{@@comment} ou @code{@@c} dentro de uma linha que se
inicie com um tal comando.

@findex DEL @r{(caractere de comentário)}
@cindex Código de categoria para comentários no @TeX{}
Em casos de invocações de comando aninhado, definições complicadas de macro,
etc., @code{@@c} e @code{@@comment} podem provocar um erro quando do
processamento com @TeX{}.  Por conseguinte, você também pode usar o caractere
@kbd{DEL} (decimal 127 ASCII, hexadecimal 0x7f, octal 0177) como um verdadeiro
caractere de comentário do @TeX{} (código de categoria 14, nos internos do
@TeX{}). Tudo na linha após o @kbd{DEL} será ignorado.

@cindex Texto ignorado
@cindex Texto não processado
@findex ignore
Você também pode ter trechos longos de texto ignorados pelos
processadores Texinfo com os comandos @code{@@ignore} e
@code{@@end ignore}.
Escreva cada um desses comandos em sua própria linha, iniciando cada
comando no começo da linha.  O texto entre esses dois comandos não
aparece na saída processada.  Você pode usar @code{@@ignore} e
@code{@@end ignore} para escrever comentários.  (Para algumas
advertências relativamente ao aninhamento de tais comandos, veja-se
@ref{Aninhamento de Condicional}.)


@node Mínimo
@section O Que um Arquivo do Texinfo Deve Ter
@cindex Arquivo mínimo do Texinfo (requisitos)
@cindex Deve ter no arquivo do Texinfo
@cindex Obrigatório no arquivo do Texinfo
@cindex Mínimo do arquivo do Texinfo

Por convenção, o nome de um arquivo Texinfo termina com uma das
extensões @file{.texinfo}, @file{.texi}, @file{.txi}, ou
@file{.tex}.@footnote{As extensões mais longas são as preferidas, dado
que elas descrevem mais claramente a um leitor humano a natureza do
arquivo.  As extensões mais curtas são para sistemas operacionais que
não conseguem lidar com nomes longos de arquivos.}

Para fazer com que seja um manual impresso e outros formatos de saída,
um arquivo Texinfo deve necessariamente iniciar com linhas como estas:

@example
@group
\input texinfo
@@settitle @var{nome-do-manual}
@end group
@end example

@noindent
O conteúdo do arquivo segue esse início, e então você deve finalizar o
fonte Texinfo com uma linha como esta:

@example
@@bye
@end example

@findex \input @r{(raw @TeX{} startup)}
@noindent
Aqui está uma explanação:

@itemize @bullet
@item
A linha @samp{\input texinfo} manda @TeX{} usar o arquivo
@file{texinfo.tex}, o qual instrui @TeX{} como traduzir os comandos @@
Texinfo em comandos de tipografia @TeX{}.  (Note-se o uso da barra
invertida, @samp{\}; isso é correto para @TeX{}.)

@item
A linha @code{@@settitle} especifica um título para os cabeçalhos de
página (ou rodapés) do manual impresso, e o título padrão e descrição de
documento para o marcador @samp{<head>} em HTML@.  Estritamente falando,
@code{@@settitle} é opcional---se você não se importar de ver o seu
documento sendo intitulado `Untitled'.

@item
A linha @code{@@bye} ao final do arquivo em uma linha própria informa
aos formatadores que o arquivo está finalizado e para parar de formatar.
Se você deixar isso fora, você será colocado no prompt de @TeX{} ao
final da execução.
@end itemize

Além disso, você geralmente proverá um arquivo Texinfo com uma página de
título, índices, e semelhantes, tudo isso é explanado neste manual.
Porém, o mínimo, que pode ser útil para documentos curtos, é apenas as
duas linhas no início e aquela no final.



@node Amostra Curta
@section Um Arquivo Curto de Amostra do Texinfo
@cindex Arquivo de amostra do Texinfo, com comentários

Aqui está um curto, porém completo, arquivo Texinfo, de forma que você
possa ver como um fonte Texinfo se aparenta na prática.  As primeiras
três partes do arquivo são em sua maioria clichê: quando da escrita de
um manual, você simplesmente modifica os nomes conforme apropriado.

O arquivo completo, sem os comentários intercalados, é mostrado em
@ref{Arquivo Curto de Amostra do Texinfo}.

Veja-se @ref{Iniciando e Finalizando um Arquivo}, para mais documentação acerca dos
comandos listados aqui.


@subheading Cabeçalho

@noindent
O cabeçalho diz a @TeX{} qual arquivo de definições usar, nomeia o
manual, e realiza outras tais tarefas domésticas.

@example
@group
\input texinfo
@@settitle Manual de Amostra 1.0
@end group
@end example


@subheading Descrição Resumida e Direitos Autorais

Este segmento descreve o documento e contém o aviso de direitos autorais
e permissões de cópia.  Isso é feito com o comando @code{@@copying}.

@noindent
Um manual real inclui mais texto aqui, de acordo com a licença sob a
qual ele é distribuído. Veja-se @ref{Textos GNU de Amostra}.

@example
@group
@@copying
Este é um exemplo curto de um arquivo completo Texinfo, versão 1.0.

Direitos autorais @@copyright@{@} 2016 Free Software Foundation, Inc.
@@end copying
@end group
@end example

@subheading Página de Título, Direitos Autorais, Conteúdo

O segmento de título e direitos autorais contém as páginas de título e
de direitos autorais para o manual impresso.   O segmento deve
necessariamente estar incluso entre os comandos @code{@@titlepage} e
@code{@@end titlepage}.  A página de título e de direitos autorais não
aparece na saída online.

@noindent
Nós usamos o comando @code{@@insertcopying} para incluir o texto de
permissão a partir da seção anterior, em vez de escrevê-lo outra vez; o
texto é colocado no verso da página de título.  O comando
@code{@@contents} gera um sumário.

@example
@group
@@titlepage
@@title Título de Amostra
@end group

@group
@@c Os dois comandos seguintes iniciam a página de direitos autorais.
@@page
@@vskip 0pt plus 1filll
@@insertcopying
@@end titlepage
@end group

@@c Coloca o sumário no início.
@@contents
@end example

@subheading Nó `Top' e Menu Mestre

O nó `Top' começa a saída online; ela não aparece no manual impresso.
Nós repetimos a descrição curta do início do texto @samp{@@copying},
porém não há a necessidade de se repetir a informação de direitos
autorais, de forma que nós não usamos @samp{@@insertcopying} aqui.

O próprio comando @samp{@@top} ajuda @command{makeinfo} a determinar o
relacionamento entre os nós.  O nó `Top' contém, pelo menos, um
@dfn{menu} de alto nível listando os capítulos, e possivelmente um
@dfn{Menu Mestre} listando todos os nós no documento inteiro.


@example
@@ifnottex
@@node Top
@@top Amostra Curta

Este é um arquivo curto de amostra Texinfo.
@@end ifnottex

@group
@@menu
* Primeiro Capítulo:: O primeiro capítulo é o único capítulo nesta
amostra.
* Índice::            Índice completo.
@@end menu
@end group
@end example


@subheading O Corpo do Documento

@noindent
O segmento corpo contém todo o texto do documento, porém não os índices
ou sumário.  Este exemplo ilustra um nó e um capítulo contendo uma
lista enumerada.

@example
@group
@@node Primeiro Capítulo
@@chapter Primeiro Capítulo

@@cindex capítulo, primeiro
@end group

@group
Este é o primeiro capítulo.
@@cindex entrada de índice, um outro
@end group

@group
Aqui está uma lista numerada.

@@enumerate
@@item
Este é o primeiro item.

@@item
Este é o segundo item.
@@end enumerate
@end group
@end example


@subheading O Fim do Documento

Isto pode conter comandos para a impressão de índices, o fecha com o
comando @code{@@bye}, o qual marca o fim do documento.

@example
@group
@@node Índice
@@unnumbered Índice
@end group

@group
@@printindex cp

@@bye
@end group
@end example


@subheading Alguns Resultados

Aqui está com o que se parece o conteúdo do primeiro capítulo da
amostra:

@sp 1
@need 700
@quotation
Este é o primeiro capítulo.

Aqui está uma lista numerada.

@enumerate
@item
Este é o primeiro item.

@item
Este é o segundo item.
@end enumerate
@end quotation


@node Iniciando e Finalizando um Arquivo
@anchor{Iniciando um Arquivo} @c nome antigo
@chapter Começando e Terminando um Arquivo Texinfo @c Capítulo 3
@cindex Iniciando um arquivo do Texinfo
@cindex Arquivo do Texinfo, iniciando
@cindex Iniciamento de arquivo

Este capítulo se estende sobre o arquivo fonte mínimo completo de
Texinfo previamente dado (veja-se @ref{Amostra Curta}).

Certos pedaços de informação devem necessariamente ser providos no
início de um arquivo Texinfo, tais como o título do documento e o nó
Top.   Um sumário geralmente também é produzido aqui.

@cindex Cabeçalho, texto em
Texto direto fora de qualquer comando antes do nó Top deveria ser
evitado.  Tal texto é tratado diferentemente nos diferentes formatos de
saída: no momento da escrita, é visível em @TeX{} e HTML, por padrão não
mostrado em leitores Info, e assim por diante.

@menu
* Inicialização de Amostra::     Um início de amostra para um arquivo Texinfo.
* Cabeçalho do Arquivo do Texinfo::         As primeiras linhas.
* Permissões do Documento::    Assegurando-se de que o seu manual é livre.
* Página de Título e Página de Direitos Autorais:: Criando as páginas de título e de direitos autorais.
* Conteúdo::                    Como criar uma tabela do conteúdo.
* O Nó Top::                Criando o nó `Top' e menu mestre.
* Comandos Globais de Documento::    Afetando a formatação ao longo do documento.
* Finalizando um Arquivo::               O que está ao final de um arquivo Texinfo?
@end menu


@node Inicialização de Amostra
@section Exemplo de Início do Arquivo do Texinfo

@cindex Exemplo de início de arquivo Texinfo

A amostra seguinte mostra o que é necessário.  Os elementos dados aqui
são explanados em maiores detalhes nas seções seguintes.  Outros
comandos frequentemente são incluídos no início de arquivos Texinfo,
porém aqueles aqui são os mais críticos.

Veja-se @ref{Textos GNU de Amostra}, para os textos completos a serem usados em
manuais GNU.

@example
\input texinfo
@@settitle @var{nome-do-manual} @var{versão}

@@copying
Este manual é para @var{programa}, versão @var{versão}.

Direitos autorais @@copyright@{@} @var{anos} @var{titular-direitos-autorais}.

@group
@@quotation
É concedida permissão para @dots{}
@@end quotation
@@end copying
@end group

@group
@@titlepage
@@title @var{nome-do-manual-quando-impresso}
@@subtitle @var{subtítulo-se-algum}
@@subtitle @var{segundo-subtítulo}
@@author @var{autor}
@end group

@group
@@c  Os dois comandos seguintes
@@c  iniciam a página de direitos autorais.
@@page
@@vskip 0pt plus 1filll
@@insertcopying
@end group

Publicado por @dots{}
@@end titlepage

@@c Então o sumário é impresso no início.
@@contents

@@ifnottex
@@node Top
@@top @var{título}

Este manual é para @var{programa}, versão @var{versão}.
@@end ifnottex

@group
@@menu
* First Chapter::    Iniciando @dots{}
* Second Chapter::       @dots{} @dots{}
* Copying::          Seus direitos e liberdades.
@@end menu
@end group

@group
@@node Primeiro Capítulo
@@chapter Primeiro Capítulo

@@cindex primeiro capítulo
@@cindex capítulo, primeiro
@dots{}
@end group
@end example


@node Cabeçalho do Arquivo do Texinfo
@section Cabeçalho do Arquivo do Texinfo
@cindex Cabeçalho para arquivos do Texinfo
@cindex Cabeçalho de arquivo do Texinfo

Os arquivos Texinfo iniciam com pelo menos duas linhas.  Essas são a
linha @code{\input texinfo} e a linha @code{@@settitle}.

Também, se você desejar formatar somente parte do arquivo Texinfo em
Emacs, você deve necessariamente escrever a linha @code{@@settitle}
entre as linhas `start-of-header' e `end-of-header'.  Essas linhas
`start-' e `end-of-header' são opcionais, porém elas não produzem danos,
de forma que você pode muito bem sempre incluí-las.

Qualquer comando que afete a formatação do documento como um todo faz
sentido incluir no cabeçalho.  @code{@@synindex}
(veja-se @ref{@code{@@synindex}}), por exemplo, é outro comando frequentemente
incluído no cabeçalho.

Assim, o início de um arquivo Texinfo se parece aproximadamente com
isto:

@example
@group
\input texinfo
@@settitle Manual de Amostra 1.0
@end group
@end example

(Veja-se @ref{Textos GNU de Amostra} para textos de amostra completos).

@menu
* Primeira Linha::                  A primeira linha de um arquivo Texinfo.
* Início de Cabeçalho::             Formatar uma região exige isso.
* @code{@@setfilename}::        Informe a Info o nome do arquivo Info.
* @code{@@settitle}::           Crie um título para o trabalho impresso.
* Fim de Cabeçalho::               Formatar uma região exige isso.
@end menu


@node Primeira Linha
@subsection A Primeira Linha de um Arquivo do Texinfo
@cindex Primeira linha de um arquivo do Texinfo
@cindex Linha de início de um arquivo do Texinfo
@cindex Cabeçalho de um arquivo do Texinfo

Cada arquivo Texinfo que é para ser a entrada de alto nível para @TeX{}
deve necessariamente iniciar com uma linha que se parece com isto:

@example
\input texinfo
@end example

Quando o arquivo é processado por @TeX{}, o comando @samp{\input
texinfo} manda @TeX{} carregar as macros necessárias para o
processamento de um arquivo Texinfo.
Essas estão em um arquivo chamado @file{texinfo.tex}, o qual deveria ter
sido instalado em seu sistema juntamente com o software @TeX{} ou
Texinfo.  @TeX{} usa uma barra invertida, @samp{\}, para marcar o
início de um comando, exatamente como Texinfo usa @samp{@@}.  O
arquivo @file{texinfo.tex} provoca a permuta de @samp{\} para @samp{@@};
antes que a permuta ocorra, @TeX{} exige @samp{\}, o que é o motivo pelo qual
ela aparece no início do arquivo.

Você pode opcionalmente seguir essa linha com um comentário para
informar a GNU Emacs para usar o modo Texinfo quando o arquivo for
editado:

@example
\input texinfo   @@c -*-texinfo-*-
@end example

@noindent Isso pode ser útil quando Emacs não detectar automaticamente o
tipo do arquivo a partir da extensão do arquivo.

@node Início de Cabeçalho
@subsection Início de Cabeçalho
@cindex Linha de Início de Cabeçalho

Uma linha `start-of-header' é um comentário Texinfo que se parece com
isto:

@example
@@c %**start of header
@end example

Escreva a linha `start-of-header' na segunda linha de um arquivo
Texinfo.  Prossiga a linha `start-of-header' com uma linha
`@code{@@settitle}' e, opcionalmente, com outros comandos que
globalmente afetam a formatação do documento, tais como
@code{@@synindex} ou @code{@@footnotestyle}; e então por uma linha
`end-of-header' (@pxref{Fim de Cabeçalho}).

As linhas `start-' e `end-of-header` te permitem formatar somente parte
de um arquivo Texinfo para Info ou impressão.
@xref{Comandos @code{texinfo-format}}.

A estranha sequência de caracteres, @samp{%**}, é para assegurar que
nenhum outro comentário seja acidentalmente tomado por uma linha
`start-of-header'.  Você pode modificá-la se você desejar, configurando
as variáveis Emacs @code{tex-start-of-header} e/ou
@code{tex-end-of-header}. @xref{Impressão no Modo Texinfo}.


@node @code{@@setfilename}
@subsection @code{@@setfilename}: Configura o Nome do Arquivo de Saída

@anchor{setfilename}@c nome antigo
@findex setfilename
@cindex Texinfo exige @code{@@setfilename}
@cindex Nome de arquivo de saída, exigido

A linha @code{@@setfilename} especifica o nome do arquivo de saída a ser
gerado.
Quando presente, ele deveria ser o primeiro comando Texinfo (isto é,
após @samp{\input texinfo}).
Escreva o comando @code{@@setfilename} no início de uma linha e siga-o
na mesma linha pelo nome do arquivo Info.

@example
@@setfilename @var{nome-arquivo-info}
@end example

O nome deve necessariamente ser diferente do nome do arquivo Texinfo.
Existem duas convenções para a escolha do nome: você ou pode remover a
extensão (tal como @samp{.texi}) inteiramente do nome do arquivo de
entrada; ou (recomendado) substitui-lo com a extensão @samp{.info}.

@cindex Ignorado antes de @code{@@setfilename}
@cindex Linha @samp{\input} do fonte, ignorada
Quando uma linha @code{@@setfilename} está presente, os processadores
Texinfo ignoram tudo escrito antes da linha @code{@@setfilename}.  Isso
é o motivo da primeiríssima linha do arquivo (a linha @code{\input}) não
aparecer na saída.

Se não existir uma linha @code{@@setfilename}, @code{makeinfo} usa o
arquivo de entrada para determinar o nome de saída: primeiro, qualquer
das extensões @code{.texi}, @code{.tex}, @code{.txi} ou @code{.texinfo}
é removida do nome do arquivo de entrada; então, a extensão específica
do formato de saída é adicionada---@code{.html} quando da geração de
HTML; @code{.info} quando da geração de Info, etc.  A linha
@code{\input} ainda é ignorada nesse processamento, bem como as linhas
em branco iniciais.

Quando da produção de outro formato de saída, @code{makeinfo}
substituirá qualquer extensão final com a extensão de saída específica
de formato (@samp{html} quando da geração de HTML, por exemplo), ou
adicionar um ponto seguido pela extensão (@samp{.html} para HTML), se o
nome dado não tiver extensão.

@code{@@setfilename} costumava ser exigido pelos processadores Texinfo,
e alguns outros programas ainda podem esperar que ele esteja presente;
por exemplo, Automake (veja-se @ref{Texinfo,,,automake, GNU Automake}).

@cindex Comprimento dos nomes dos arquivos
@cindex Colisão de nome de arquivo
@cindex Nome de arquivo do Info, escolhendo
Apesar que uma extensão @samp{.info} explícita seja preferível, alguns
sistemas operacionais não conseguem lidar com nomes longos de arquivo.
Você pode acabar com problemas mesmo quando o nome de arquivo que você
especificar for ele próprio curto o suficiente.
Isso ocorre porque os formatadores Info dividem um arquivo longo Info em
sub arquivos curtos indiretos, e os nomeia acrescentando ao final
@samp{-1}, @samp{-2}, @dots{}, @samp{-10}, @samp{-11}, e assim por
diante, ao nome de arquivo original. (Veja-se @ref{Arquivos de Etiqueta e de Divisão}.)  O
nome de subarquivo @file{texinfo.info-10}, por exemplo, é longo demais
para sistemas antigos com um limite de 14 caracteres em nomes de
arquivo; assim, o nome de arquivo Info para este documento é
@file{texinfo} em vez de @file{texinfo.info}.  Quando @code{makeinfo}
está em execução em sistemas operacionais tais como MS-DOS que impõe
limites severos sobre nomes de arquivo, ele pode remover alguns
caracteres do nome original do arquivo para deixar espaço suficiente
para o sufixo do subarquivo, assim produzindo arquivos chamados
@file{texin-10}, @file{gcc.i12}, etc.

Veja-se também a opção @option{--output} em
@ref{Invocando @command{texi2any}}.


@node @code{@@settitle}
@subsection @code{@@settitle}: Configura o Título do Documento

@anchor{settitle}@c nome antigo
@findex settitle
@cindex Título de documento, especificando

Um arquivo Texinfo deveria conter uma linha que se pareça com isto:

@example
@@settitle @var{título}
@end example

Escreva o comando @code{@@settitle} no início de uma linha e siga-o na
mesma pelo título.  Não escreva nada mais na linha.  O comando
@code{@@settitle} deveria preceder tudo o que gera saída atual.  O
melhor lugar para ele é logo após o comando @code{@@setfilename}
(descrito na seção anterior).

Esse comando informa a @TeX{} o título a usar em um cabeçalho ou
rodapé para saída de lado duplo, no caso de tais cabeçalhos serem
impressos.  Para mais sobre cabeçalhos para @TeX{}, veja-se
@ref{Geração de Cabeçalho}.

@cindex Etiqueta @code{<title>} do HTML
No arquivo HTML produzido por @command{makeinfo}, @var{título} serve
como o @samp{<título>} do documento.  Ele também se torna a descrição
padrão do documento na parte @samp{<head>}
(@pxref{@code{@@documentdescription}}).

Quando a página de título for usada na saída, o título no comando
@code{@@settitle} não afeta o título conforme ele aparece na página de
título.  Assim, os dois não precisam coincidir exatamente.  Uma prática
que se recomenda é incluir a versão ou número de edição do manual no
título @code{@@settitle}; na página de título, o número de versão
geralmente aparece como um @code{@@subtitle}, de forma que ele poderia
ser omitido do @code{@@title}. Veja-se @ref{@code{@@titlepage}}.


@node Fim de Cabeçalho
@subsection Fim de Cabeçalho
@cindex Linha de fim de cabeçalho

Siga as linhas de cabeçalho com uma linha @w{end-of-header}, que é um
comentário Texinfo que se parece com isto:

@example
@@c %**end of header
@end example

Veja-se @ref{Início de Cabeçalho}.


@node Permissões do Documento
@section Permissões do Documento
@cindex Permissões do Documento
@cindex Permissões de cópia

O aviso de direitos autorais e permissões de cópia para um documento
precisam aparecer em vários lugares nos vários formatos de saída de
Texinfo.  Portanto, Texinfo provê um comando (@code{@@copying}) para
declarar esse texto uma vez, e outro comando (@code{@@insertcopying})
para inserir o texto em pontos apropriados.

@anchor{Permissões de Copiagem de Software}@c nome antigo de nó
Esta seção é sobre a licença do documento Texinfo.  Se o documento for
um manual de software, o software está tipicamente sob uma licença
diferente---para GNU e muitos outros pacotes de software livre, o
software é usualmente publicado sob a GNU GPL, e os manuais são
publicados sob a GNU FDL@.  É de muita ajuda declarar a licença do
software do manual, porém fornecer o texto completo da licença de
software não é necessariamente exigido.

@menu
* @code{@@copying}::                    Declare as permissões de cópia do documento.
* @code{@@insertcopying}::              Onde inserir as permissões.
@end menu


@node @code{@@copying}
@subsection @code{@@copying}: Declare as Permissões de Cópia

@anchor{copiagem}@c nome antigo
@findex copying

O comando @code{@@copying} deveria ser dado cedissimo no documento; a
localização recomendada é logo após o material de cabeçalho
(@pxref{Cabeçalho do Arquivo do Texinfo}).  Convencionalmente consiste de uma
sentença ou duas sobre o que é o programa, identificação da própria
documentação, a linha de direitos autorais legal, e as permissões de
cópia.  Aqui está um exemplo esqueletal:

@example
@@copying
Este documento é para @var{programa} (versão @var{versão}, atualizada
@var{date}), o qual @dots{}

Direitos autorais @@copyright@{@} @var{anos} @var{titular-direitos-autorais}.

@@quotation
É concedida permissão para @dots{}
@@end quotation
@@end copying
@end example

O @code{@@quotation} não tem significado legal; ele está lá para
melhorar a legibilidade em alguns contextos.

O texto de @code{@@copying} é produzido como um comentário no início dos
arquivos de saída Info, HTML, XML, e Docbook.  O texto @emph{não} é
produzido implicitamente em texto plano ou @TeX{}; depende de você
usar @code{@@insertcopying} para emitir a informação de direitos
autorais.  Veja a próxima seção para detalhes.

@findex copyright
O comando @code{@@copyright@{@}} gera um @samp{c} dentro de um círculo
quando o formato de saída suportar essa figura (imprimir e HTML sempre
suportam, por exemplo).  Quando a figura não for suportada na saída, o
comando gera a sequência de três caracteres @samp{(C)}.

O próprio aviso de direitos autorais tem a seguinte forma legalmente
prescrita:

@example
Direitos autorais @copyright{} @var{anos} @var{titular-direitos-autorais}.
@end example

@cindex Palavra Copyright, sempre em inglês
A palavra `Copyright' deve necessariamente estar escrita em inglês, mesmo se o
documento estiver escrito em outro idioma. Isso é devido ao direito
internacional.

@cindex Anos, na linha copyright
A lista dos anos deveria incluir todos os anos nos quais uma versão foi
completada (mesmo se ela foi publicada em um ano subsequente).  É mais
simples que cada ano seja escrito individualmente e na íntegra,
separados por vírgulas.

@cindex Titular dos direitos autorais das obras da FSF
@cindex Obras da FSF, titular dos direitos autorais
@cindex Dono(a) do copyright das obras da FSF
O titular (ou titulares) dos direitos autorais é quem quer que detenha
os direitos autorais legais sobre o trabalho.  No caso de trabalhos
atribuídos à FSF, o titular é `Free Software Foundation, Inc.'.

A `linha' de direitos autorais atualmente pode ser dividida em linhas
múltiplas, tanto no documento fonte quanto na saída.  Isso acontece
frequentemente para documentos com um histórico longo, tendo muitos anos
diferentes de publicação.  Se você usar várias linhas, não endente
qualquer delas (ou qualquer outra coisa no bloco @code{@@copying}) no
arquivo fonte.

Veja-se @ref{Copyright Notices,,, maintain, GNU Maintainer Information}, para
informação adicional. Veja-se @ref{Textos GNU de Amostra}, para o texto completo a
ser usado em manuais GNU. Veja-se @ref{Licença GNU de Documentação Livre},
para a própria licença sob a qual GNU e outros manuais livres são
distribuídos.


@node @code{@@insertcopying}
@subsection @code{@@insertcopying}: Incluir Texto de Permissões

@anchor{insertcopying}@c nome antigo
@findex insertcopying
@cindex Texto de reprodução, incluindo
@cindex Texto das permissões, incluindo
@cindex Incluindo texto das permissões

O comando @code{@@insertcopying} simplesmente é escrito em uma linha
própria, como esta:

@example
@@insertcopying
@end example

Isso insere o texto previamente definido por @code{@@copying}.  Para
atender às exigências legais, o texto deve necessariamente ser usado
na página de direitos autorais no manual impresso (veja-se @ref{Direitos Autorais}).

O próprio comando @code{@@copying} faz com que o texto das permissões
apareça em um arquivo Info @emph{antes} do primeiro nó.  O texto
também é copiado no início de cada arquivo dividido de saída Info, como
é legalmente necessário.  Essa localização implica que um humano lendo o
manual usando Info @emph{não} vê esse texto (exceto quando da
uso do comando avançado @kbd{g *} de Info), porém isso não
importa para propósitos legais, pois o texto está presente.

Similarmente, o texto @code{@@copying} é automaticamente incluído no
início de cada arquivo de saída HTML, como um comentário HTML.  De novo,
esse texto não é visível (a menos que o(a) leitor(a) visualize o fonte HTML).

O texto de permissões definido por @code{@@copying} também aparece
automaticamente no início dos arquivos de saída XML e Docbook.


@node Página de Título e Página de Direitos Autorais
@section Páginas de Título e de Direitos Autorais

Em saída impressa, o nome e autor do manual são usualmente impressos em
uma página de título.   A informação de direitos autorais é geralmente
impressa no verso de página de título.

As páginas de título e de direitos autorais aparecem em manuais
impressos, porém não na maior parte dos outros formatos de saída.  Por
causa disso, é possível usar vários comandos de tipografia
ligeiramente obscuros que não são para ser usados no texto
principal.  Adicionalmente, esta parte do início de um arquio Texinfo
contém o texto das permissões de cópia que aparece no manual impresso.

@menu
* @code{@@titlepage}::                  Crie um título para o documento impresso.
* @code{@@titlefont @@center @@sp}::    Os comandos @code{@@titlefont}, @code{@@center} e @code{@@sp}.
* @code{@@title @@subtitle @@author}::  Os comandos @code{@@title}, @code{@@subtitle}, e @code{@@author}.
* Direitos Autorais::                   Como escrever o aviso de direitos autorais e incluir permissões de cópia.
* Geração de Cabeçalho::          Ligue o cabeçalho de página após as páginas de título e de direitos autorais.
@end menu


@node @code{@@titlepage}
@subsection @code{@@titlepage}

@anchor{titlepage}@c nome antigo
@cindex Página de título
@findex titlepage

Inicie o material para a página de título e seguinte à página de
direitos autorais com @code{@@titlepage} em uma linha própria e finalize
com @code{@@end titlepage} em uma linha própria.

O comando @code{@@end titlepage} inicia uma página nova e liga a
numeração de página (@pxref{Geração de Cabeçalho}).  Todo o material que
você deseja que apareça em páginas não numeradas deveria ser colocado
entre os comandos @code{@@titlepage} e @code{@@end titlepage}.
Você pode forçar que o sumário apareça ali com o comando
@code{@@setcontentsaftertitlepage} (@pxref{Conteúdo}).

@findex page@r{, dentro de @code{@@titlepage}}
Ao usar o comando @code{@@page} você pode forçar uma quebra de
página dentro da região delineada pelos comandos @code{@@titlepage} e
@code{@@end titlepage} e assim criar mais que uma página não numerada.
É assim que a página de direitos autorais é produzida.  (O comando
@code{@@titlepage} talvez pudesse ter sido melhor nomeado de
@code{@@titleandadditionalpages}, porém isso poderia ter sido até certo
ponto longo!)

Quando você escreve um manual acerca de um programa de computador, você
deveria escrever, na página de título, a versão do programa para a qual
o manual se aplica.
Se o manual muda mais frequentemente que o programa ou é independente
dele, você também deveria incluir um número de
edição@footnote{Entendeu-se que é útil se referir a versões de manuais
independentes como `edições' e versões de programas como `versões'; do
contrário, nós achamos que estamos sujeitos a confundir cada um em
conversas, referenciando a ambos, a documentação e o software, com as
mesmas palavras.} para o manual.  Isso ajuda os leitores a se manterem
informados sobre qual manual é para qual versão do programa.  (O nó
`Top' também deveria conter essa informação; veja-se
@ref{O Nó Top}).

Texinfo provê dois métodos principais para criar uma página de título.
Um método usa os comandos @code{@@titlefont}, @code{@@sp}, e
@code{@@center} para gerar uma página de título na qual as palavras na
página são centralizadas.

O segundo método usa os comandos @code{@@title}, @code{@@subtitle},
e @code{@@author} para criar uma página de título com traços negros sob
as linhas de título e autor e o texto de subtítulo colocado rente ao
lado direito da página.   Com esse método, você não especifica nada da
formatação atual da página de título.  Você especifica o texto que você
deseja, e Texinfo faz a formatação.

Você pode usar qualquer método, ou você pode combiná-los; veja os
exemplos nas seções abaixo.

@findex shorttitlepage
@cindex Página órfã de título
@cindex Página de título, órfã
Para documentos suficientemente simples, e para a página de anterrosto
em formatador tradicional de livro, Texinfo também provê um comando,
@code{@@shorttitlepage}, o qual toma o restante da linha como o título.
O argumento é tipografado em uma página própria e seguido por uma página
em branco.


@node @code{@@titlefont @@center @@sp}
@subsection @code{@@titlefont}, @code{@@center} e @code{@@sp}

@anchor{titlefont center sp}@c nome antigo
@findex titlefont
@findex center
@findex sp @r{(titlepage line spacing)}

Você pode usar os comandos @code{@@titlefont}, @code{@@sp}, e
@code{@@center} para criar uma página de título para um documento
impresso.  (Esse é o primeiro de dois métodos para a criação de uma
página de título em Texinfo).

Use o comando @code{@@titlefont} para selecionar uma fonte larga
adequada para o próprio título.  Você pode usar @code{@@titlefont}
mais que uma vez se você tiver um título especialmente longo.

Para saída HTML, cada comando @code{@@titlefont} produz um cabeçalho
@code{<h1>}, porém o @code{<title>} do documento HTML não é afetado.
Para isso, você deve necessariamente colocar um comando
@code{@@settitle} antes do comando @code{@@titlefont}
(veja-se @ref{@code{@@settitle}}).

@need 700
Por exemplo:

@example
@@titlefont@{Texinfo@}
@end example

Use o comando @code{@@center} no início de uma linha para
centralizar o restante do texto naquela linha.  Assim,

@example
@@center @@titlefont@{Texinfo@}
@end example

@noindent
centraliza o título, o qual neste exemplo é ``Texinfo'' impresso na
fonte de título.

Use o comando @code{@@sp} para inserir espaço vertical.  Por
exemplo:

@example
@@sp 2
@end example

@noindent
Isso insere duas linhas em branco na página impressa.
(Veja-se @ref{@code{@@sp}}, para mais informação acerca do comando
@code{@@sp}).

Um modelo para esse método se parece com isto:

@example
@group
@@titlepage
@@sp 10
@@center @@titlefont@{@var{nome-do-manual-quando-impresso}@}
@@sp 2
@@center @var{subtítulo-se-algum}
@@sp 2
@@center @var{autor}
@dots{}
@@end titlepage
@end group
@end example

O espaçamento do exemplo se encaixa em um manual de 8.5 por 11
polegadas.

Você de fato pode usar esses comandos em qualquer lugar, não somente
em uma página de título, porém dado que eles não são comandos lógicos de
marcação, não se recomenda-os.


@node @code{@@title @@subtitle @@author}
@subsection @code{@@title}, @code{@@subtitle}, e @code{@@author}

@anchor{title subtitle author}@c nome antigo
@findex title
@findex subtitle
@findex author

Você pode usar os comandos @code{@@title}, @code{@@subtitle}, e
@code{@@author} para criar uma página de título na qual o espaçamento
vertical e horizontal seja feito para você automaticamente.  Isso
contrasta com o método descrito na seção anterior, no qual o comando
@code{@@sp} é necessário para ajustar o espaçamento vertical.

Escreva os comandos @code{@@title}, @code{@@subtitle}, ou
@code{@@author} no início de uma linha seguido pelo título, subtítulo,
ou autor.  O comando @code{@@author} pode ser usado para uma citação
em um bloco @code{@@quotation} (veja-se @ref{@code{@@quotation}});
exceto para isso, é um erro usar quaisquer desses comandos fora de
@code{@@titlepage}.

O comando @code{@@title} produz uma linha na qual o título é configurado
rente ao lado esquerdo da página em um fonte mais larga que a normal.
O título é sublinhado com uma linha preta.  O título deve
necessariamente ser dado em uma linha única no arquivo fonte; ele será
quebrado em múltiplas linhas de saída se necessário.

Para títulos longos, o comando @code{@@*} pode ser usado para
especificar as quebras de linha em títulos longos se as quebras
automáticas não servirem.  Tais quebras explícitas de linha geralmente
são refletidas em todos os formatos de saída; se você desejar somente
especificá-las para a saída impressa, use um condicional
(veja-se @ref{Condicionais}).  Por exemplo:

@example
@@title Este Título Longo@@inlinefmt@{tex,@@*@} É Quebrado em @@TeX@{@}
@end example

O comando @code{@@subtitle} configura subtítulos em uma fonte de tamanho
normal rente ao lado direito da página.

O comando @code{@@author} configura os nomes do autor ou autores em uma
fonte de tamanho médio rente ao lado esquerdo da página em uma linha
próxima ao pé da página de título.  Os nomes são seguidos por uma linha
preta que é mais fina que a linha que sublinha o título.

Existem duas maneiras de se usar o comando @code{@@author}: você
pode escrever o nome ou nomes na parte restante da linha que inicia com
um comando @code{@@author}:

@example
@@author por Jane Smith e John Doe
@end example

@noindent
ou você pode escrever os nomes um acima do outro, usando múltiplos
comandos @code{@@author}:

@example
@group
@@author Jane Smith
@@author John Doe
@end group
@end example

@need 950
Um modelo para esse método se parece com isto:

@example
@group
@@titlepage
@@title @var{nome-do-manual-quando-impresso}
@@subtitle @var{subtítulo-se-algum}
@@subtitle @var{segundo-subtítulo}
@@author @var{autor}
@@page
@dots{}
@@end titlepage
@end group
@end example


@node Direitos Autorais
@subsection Página de Direitos Autorais
@cindex Página de direitos autorais
@cindex Permissões impressas
@cindex Permissões, impressas

Por acordo internacional, o aviso de direitos autorais para um livro
deve necessariamente estar ou na página de título ou no verso da página
de título. Quando o aviso de direitos autorais estiver no verso da
página de título, essa página é costumeiramente não numerada.  Portanto,
em Texinfo, a informação na página de direitos autorais deveria estar
entre os comandos @code{@@titlepage} e @code{@@end titlepage}.

@findex vskip @r{pulo vertical do @TeX{}}
@cindex filll @r{dimensão do @TeX{}}
Use o comando @code{@@page} para provocar uma quebra de página.
Para empurrar o aviso de direitos autorais e o outro texto na página de
direitos autorais em direção ao pé da página, use o seguinte
encantamento após @code{@@page}:

@example
@@vskip 0pt plus 1filll
@end example

@noindent
O comando @code{@@vskip} insere espaço em branco na saída @TeX{}; ele é
ignorado em todos os outros formatos de saída.  O @samp{0pt plus 1filll}
significa colocar em zero pontos de espaço em branco obrigatório, e
tantos espaços em branco opcionais quantos sejam necessários para
empurrar o texto seguinte para o pé da página.  Note o uso de três
@samp{l}s na palavra @samp{filll}; isso está correto.

Para inserir o próprio texto de direitos autorais, escreva
@code{@@insertcopying} depois (veja-se @ref{Permissões do Documento}):

@example
@@insertcopying
@end example

Siga o texto de direitos autorais pelo editor, números ISBN, créditos de
arte de capa, e outras tais informações.

Aqui está um exemplo de como colocar tudo isso junto:

@example
@@titlepage
@dots{}
@@page
@@vskip 0pt plus 1filll
@@insertcopying

Publicado por @dots{}

Arte de capa por @dots{}
@@end titlepage
@end example

Nós temos um caso especial a considerar: para saída de texto plano, você
deve necessariamente inserir a informação de direitos autorais
explicitamente se você deseja que ela apareça.  Por exemplo, você
poderia ter o seguinte após a página de direitos autorais:

@example
@@ifplaintext
@@insertcopying
@@end ifplaintext
@end example

Você poderia incluir outras informações de título para a saída de texto
plano no mesmo lugar.



@node Geração de Cabeçalho
@subsection Geração de Cabeçalho

@anchor{end titlepage}@c nome antigo
@cindex Cabeçalhos, página, começo para aparecer
@cindex Fim da página de título inicia cabeçalhos
@cindex Início de cabeçalhos, fim da página de título
@cindex Gerando títulos de página

Como todos os comandos @code{@@end} (veja-se @ref{Citações e Exemplos}), o
comando @code{@@end titlepage} deve estar escrito no início de uma linha
própria, com somente um espaço entre o @code{@@end} e o @code{titlepage}.
Ele somente marca o fim das páginas de título e de direitos autorais,
porém também manda que @TeX{} inicie a geração de cabeçalhos de página e
de números de página.

Texinfo tem dois formatos padrão de cabeçalho  de página, um para
documentos impressos em um lado de cada folha de papel (impressão de
lado único), e o outro para documentos impressos em ambos os lados de
cada folha (impressão de lado duplo).

Em generalidade plena, você pode controlar os cabeçalhos em diferentes
maneiras:

@itemize @bullet
@item
A maneira convencional é escrever um comando @code{@@setchapternewpage}
antes dos comandos de página de título, se exigido, e então ter o
comando @code{@@end titlepage} iniciando a geração de cabeçalhos de
página na maneira desejada.

A maioria dos documentos é formatada com os cabeçalhos padrão lado único
ou lado duplo, (as vezes) usando @code{@@setchapternewpageodd} para
impressão em lado duplo e (quase sempre) sem comando
@code{@@setchapternewpage} para impressão de lado único
(veja-se @ref{@code{@@setchapternewpage}}).

@item
Alternativamente, você pode usar o comando @code{@@headings} para
prevenir que os cabeçalhos de página sejam gerados ou para iniciá-los
para, ou impressão de lado único, ou duplo.  Escreva um comando
@code{@@headings} imediatamente após o comando @code{@@end titlepage}.
Para desligar os cabeçalhos, escreva @code{@@headings off}. Veja-se
@ref{@code{@@headings}}.

@item
Ou, você pode especificar o seu próprio formato de cabeçalho e rodapé de
página.
@xref{Cabeçalhos}.
@end itemize


@node Conteúdo
@section Gerando Um Sumário
@cindex Tabela do conteúdo
@cindex Conteúdo, tabela do
@cindex Tabela curta do conteúdo
@findex conteúdo
@findex summarycontents
@findex shortcontents

@code{@@chapter}, @code{@@section}, e outros comandos de estruturamento
(veja-se @ref{Estruturamento de Capítulo}) fornecem a informação para produzir
um Sumário, porém eles não fazem com que uma tabela atual apareça no
manual.   Para fazer isso, você deve necessariamente usar os
comandos @code{@@contents} e/ou @code{@@summarycontents}.

@table @code
@item @@contents
Gera um Sumário em um manual impresso, incluindo todos os
capítulos, seções, subseções, etc., bem como apêndices e capítulos não
numerados.   Os cabeçalhos gerados por @code{@@majorheading},
@code{@@chapheading}, e outros comandos @code{@@@dots{}heading} não
aparecem no Sumário
(veja-se @ref{Tipos de Comandos Estruturantes}).

@item @@shortcontents
@itemx @@summarycontents
(@code{@@summarycontents} é um sinônimo para @code{@@shortcontents}).

Gera uma tabela curta ou sumário do conteúdo que lista somente os
capítulos, apêndices e capítulos não numerados.   Seções, subseções e
subsubseções são omitidas.   Somente um manual longo precisa de uma
tabela curta de conteúdo em adição à tabela completa de conteúdo.
@end table

Ambos os comandos de conteúdo deveriam ser escritos em uma linha para
cada um deles, e colocados próximo do início do arquivo, após o
@code{@@endtitlepage} (veja-se @ref{@code{@@titlepage}}), antes de
qualquer comando de seccionamento.   Os comandos de conteúdo
automaticamente geram um cabeçalho estilo capítulo no topo da primeira
página do Sumário, portanto não inclua qualquer comando de
seccionamento tal qual @code{@@unnumbered} antes deles.

Dado que um arquivo Info usa menus em vez de tabelas de conteúdo, os
comandos de formatação de Info ignoram os comandos de conteúdo.   Porém,
o conteúdo é incluído na saída de texto plano (gerada por
@code{makeinfo --plaintext}) e em outros formatos de saída, tais como
HTML.

Quando @code{makeinfo} escreve uma tabela curta de conteúdo quando da
produção de saída HTML, os links na tabela curta de conteúdo apontam
para as entradas correspondentes na tabela completa de conteúdo, em vez
de apontar para o texto do documento.   Os links na tabela completa de
conteúdo apontam para o texto principal do documento.

No passado, os comandos de conteúdo algumas vezes foram colocados ao
final do arquivo, após quaisquer índices e pouco antes de @code{@@bye},
porém não mais se recomenda isso.

@findex setcontentsaftertitlepage
@findex setshortcontentsaftertitlepage
@cindex Conteúdo, depois da página de título
@cindex Tabela de conteúdo, depois da página de título
Entretanto, dado que muitos documentos Texinfo existentes ainda tem o
@code{@@contents} ao final do manual, se você for um usuário imprimindo
um manual, você pode desejar forçar que o conteúdo seja impresso após a
página de título.   Você pode fazer isso especificando
@code{@@setcontentsaftertitlepage} e/ou
@code{@@setshortcontentsaftertitlepage}.   O primeiro imprime somente o
conteúdo principal após o @code{@@end titlepage}; o segundo imprime
ambos o conteúdo curto e o conteúdo principal.   Em qualquer caso,
quaisquer @code{@@contents} ou @code{@@shortcontents} subsequentes são
ignorados.

Você precisa incluir os comandos
@code{@@set@dots{}contentsaftertitlepage} logo no documento (logo após
@code{@@setfilename}, por exemplo).   Recomenda-se usar
@command{texi2dvi} (veja-se @ref{Formatar com @command{texi2dvi}}) para
especificar isso sem nenhuma alteração do arquivo fonte.   Por exemplo:

@example
texi2dvi --texinfo=@@setcontentsaftertitlepage foo.texi
@end example

Uma invocação alternativa, usando @command{texi2any}:

@example
texi2any --dvi --Xopt --texinfo=@@setcontentsaftertitlepage foo.texi
@end example



@node O Nó Top
@section O Nó `Top' e Menu Mestre
@cindex Nó Top
@cindex Nó, `Top'

O nó `Top' é o nó no qual um leitor acessa um manual Info.
Como tal, ele deveria iniciar com uma descrição breve do manual
(incluindo o número de versão), e terminar com um menu mestre para o
manual inteiro.  Certamente você deveria incluir qualquer outra
informação geral que você sinta que um leitor acharia de muita ajuda.

@findex top
É convencional e desejável escrever uma linha de comando de seccionamento
@code{@@top} contendo o título do documento imediatamente após a linha
@code{@@node Top} (veja-se @ref{Comando @code{@@top}}).

O conteúdo do nó `Top' deveria aparecer somente na saída online; nada
dele deveria aparecer em saída impressa, então envolva-o entre os
comandos @code{@@ifnottex} e @code{@@end ifnottex}.  (@TeX{} não imprime
nem uma linha @code{@@node} nem um menu; eles aparecem somente em Info;
estritamente falando, você não está obrigado a envolver essas partes
entre @code{@@ifnottex} e @code{@@end ifnottex}, porém é mais simples
fazer isso. Veja-se @ref{Condicionais, , Conditionally Visible Text}).

@menu
* Exemplo do Nó Top::
* Partes do Menu Mestre::
@end menu


@node Exemplo do Nó Top
@subsection Exemplo do Nó Top

@cindex Exemplo de nó Top

Aqui está um exemplo de um nó Top.

@example
@group
@@ifnottex
@@node Top
@@top Título de Amostra

Este é o texto do nó top.
@@end ifnottex
@end group

Informação geral adicional.

@group
@@menu
* Primeiro Capítulo::
* Segundo Capítulo::
@dots{}
* Index::
@end group
@@end menu
@end example


@node Partes do Menu Mestre
@subsection Partes de um Menu Mestre
@cindex Menu mestre
@cindex Menu, mestre
@cindex Partes de um Menu Mestre

Um @dfn{menu mestre} é o menu principal.  É costumeiro incluir um menu
detalhado listando todos os nós do documento nesse menu.

Como qualquer outro menu, um menu mestre é envolvido em @code{@@menu} e
@code{@@end menu} e não aparece na saída impressa.

Geralmente, um menu mestre é dividido em partes.

@itemize @bullet
@item
A primeira parte contém os nós principais no arquivo Texinfo: os nós
para os capítulos, seções em forma de capítulo, e os apêndices.

@item
A segunda parte contém nós para os índices.

@item
@findex detailmenu
@cindex Menu detalhado
A terceira e subsequentes partes contém uma listagem dos outros, nós
de baixo nível, frequentemente ordenados por capítulo.  Essa maneira, em
vez de se ir ao longo de um menu intermediário, um investigador pode ir
diretamente a um nó particular quando da busca por informação
específica.  Esses itens de menu não são exigidos; adicione-os se você
pensar que eles são uma conveniência.
Se você usá-los, coloque @code{@@detailmenu} antes do primeiro, e
@code{@@end detailmenu} após o último; do contrário, @code{makeinfo}
ficará confuso.
@end itemize

Cada seção no menu pode ser introduzida por uma linha descritiva.
Contanto que a linha não se inicie com um asterisco, ela não será
tratada como uma entrada de menu. (Veja-se @ref{Escrevendo um Menu}, para mais
informação).

Por exemplo, o menu mestre para este manual se parece com o seguinte
(porém tem muito mais entradas):

@example
@group
@@menu
* Condições de Cópia::  Seus direitos.
* Visão Geral::         Texinfo em resumo.
@dots{}
@end group
@group
* Índices de Comandos e Variáveis::
* Índices Gerais::
@end group

@group
@@detailmenu
--- A Listagem Detalhada do Nó ---

Visão geral de Texinfo

* Relatando Bugs:: @dots{}
@dots{}
@end group

@group
Iniciando um Arquivo Texinfo

* Início de Amostra:: @dots{}
@dots{}
@@end detailmenu
@@end menu
@end group
@end example


@node Comandos Globais de Documento
@section Comandos Globais de Documento
@cindex Comandos Globais de Documento

Ao lado dos comandos básicos mencionados nas seções anteriores, aqui
estão comandos adicionais que afetam o documento como um todo.  Eles
geralmente são todos dados antes do nó Top, se forem dados afinal.

@menu
* @code{@@documentdescription}::        Sumário do documento para a saída HTML.
* @code{@@setchapternewpage}::          Iniciar capítulos em páginas do lado direito.
* @code{@@headings}::                   Uma opção para ligar e desligar cabeçalhos e impressão em lado único ou duplo.
* @code{@@paragraphindent}::            Especificar recuo de parágrafo.
* @code{@@firstparagraphindent}::       Suprimindo o primeiro recuo de parágrafo.
* @code{@@exampleindent}::              Especificar recuo de ambiente.
@end menu


@node @code{@@documentdescription}
@subsection @code{@@documentdescription}: Texto de Resumo
@anchor{documentdescription}@c nome antigo

@cindex Descrição de documento
@cindex Descrição do documento
@cindex Sumário do documento
@cindex Resumo do documento
@cindex Etiqueta @code{<meta>} do HTML, e descrição de documento
@findex documentdescription

Quando da produção de saída HTML para um documento, @command{makeinfo}
escreve um elemento @samp{<meta>} no @samp{<head>} para dar alguma ideia
do conteúdo do documento.  Por padrão, essa @dfn{descrição} é o título
do documento, tomado a partir do comando @code{@@settitle}
(veja-se @ref{@code{@@settitle}}).  Para mudar isso, use o ambiente
@code{@@documentdescription}, como em:

@example
@@documentdescription
texto descritivo.
@@end documentdescription
@end example

@noindent
Isso produzirá a saída seguinte no @samp{<head>} do HTML:

@example
<meta name=description content="texto descritivo.">
@end example

@code{@@documentdescription} deve necessariamente estar especificado
antes do primeiro nó do documento.


@node @code{@@setchapternewpage}
@subsection @code{@@setchapternewpage}: Páginas em Branco Antes dos Capítulos

@anchor{setchapternewpage}@c nome antigo
@findex setchapternewpage
@cindex Iniciando capítulos
@cindex Páginas, iniciando ímpar

Em um oficialmente limitado livro, o texto normalmente é impresso em
ambos os lados do papel, capítulos iniciam em páginas do lado direito, e
as páginas do lado direito tem números ímpares.  Porém em relatórios
curtos, o texto frequentemente é impresso somente em um lado do papel.
Também em relatórios curtos, capítulos as vezes não iniciam em páginas
novas, mas são impressos na mesma página que o final do capítulo
precedente, após uma quantidade pequena de espaço em branco vertical.

Você pode usar o comando @code{@@setchapternewpage} com vários
argumentos para especificar como @TeX{} deveria iniciar capítulos e
quando deveria formatar cabeçalhos para impressão em um ou ambos os
lados do papel (impressão em lado único ou em lado duplo).

Escreva o comando @code{@@setchapternewpage} no início de uma linha
seguido pelo seu argumento.

Por exemplo, você escreveria o seguinte para fazer com que cada capítulo
iniciasse em uma nova página com numeração ímpar:

@example
@@setchapternewpage odd
@end example

Você pode especificar uma de três alternativas com o comando
@code{@@setchapternewpage}:

@table @asis

@item @code{@@setchapternewpage off}
Provoca @TeX{} a tipografar um novo capítulo na mesma página como o
último capítulo, após pular algum espaço em branco vertical.  Também faz
com que @TeX{} formate os cabeçalhos de página para impressão em lado
único.

@item @code{@@setchapternewpage on}
Provoca @TeX{} a iniciar novos capítulos em novas páginas e formatar os
cabeçalhos de página para impressão em lado único.  Essa é a forma
frequentemente mais usada para relatórios curtos ou impressão
pessoal.  Essa é a padrão.

@item @code{@@setchapternewpage odd}
Provoca @TeX{} a iniciar novos capítulos em novas, páginas de número
ímpar (páginas de lado direito) e a tipografar para impressão em lado
duplo.  Essa é a forma frequentemente mais usada para livros e
manuais.
@end table

Texinfo não tem um comando @code{@@setchapternewpage even}, pois não há
tradição de impressão de capítulos de início ou livros em uma página de
número par.

Se você não gosta dos cabeçalhos padrão que @code{@@setchapternewpage}
configura, você pode explicitamente controlá-los com o comando
@code{@@headings}. Veja-se @ref{@code{@@headings}}.

No início de um manual ou livro, as páginas não numeradas---por exemplo,
as páginas de título e de direitos autorais de um livro não são
numeradas.  Por convenção, as páginas de sumário e frontal são numeradas
com numerais romanos e não em sequência com o restante do documento.

O @code{@@setchapternewpage} não tem efeito em formatos de saída que não
tem páginas, tais como Info e HTML.

Recomenda-se não incluir qualquer comando @code{@@setchapternewpage} em
seu fonte de documento de jeito nenhum, dado que tal paginação desejada
não é intrínseca ao documento.  Para uma execução particular de
impressão em papel, se você não deseja que a saída padrão (sem páginas
em branco, mesmos cabeçalhos em todas as páginas) use a opção
@option{--texinfo} a @command{texi2dvi} para especificar a saída que
você deseja.


@node @code{@@headings}
@subsection O Comando @code{@@headings}

@anchor{headings on off}@c nome antigo
@findex headings

O comando @code{@@headings} raramente é usado.  Ele especifica o
tipo de cabeçalhos e rodapés a imprimir em cada página.  Usualmente,
isso é controlado pelo comando @code{@@setchapternewpage}.  Você precisa
do comando @code{@@headings} somente se o comando
@code{@@setchapternewpage} não fizer o que você desejar, ou se você
desejar desligar os cabeçalhos de página pré-definidos antes de definir
os seus próprios.  Escreva um comando @code{@@headings} imediatamente
após o comando @code{@@end titlepage}.

Você pode usar @code{@@headings} conforme a seguir:

@table @code
@item @@headings off
Desliga a impressão de cabeçalhos de páginas.

@item @@headings single
Liga os cabeçalhos de página apropriados para a impressão em lado único.

@item @@headings double
Liga os cabeçalhos de página apropriados para a impressão em lado duplo.

@item @@headings singleafter
@itemx @@headings doubleafter
Liga os cabeçalhos @code{single} ou @code{double}, respectivamente, após
ser produzida a saída da página atual.

@item @@headings on
Liga os cabeçalhos de página: @code{single} se
@samp{@@setchapternewpageon}; e @code{double} do contrário.
@end table

Por exemplo, suponha que você escreva @code{@@setchapternewpage off}
antes do comando @code{@@titlepage} para informar a @TeX{} para iniciar
um capítulo novo na mesma página como o final do mais recente capítulo.
Esse comando também faz com que @TeX{} tipografe os cabeçalhos de página
para a impressão em lado único.  Para fazer com que @TeX{} tipografe
para impressão em lado duplo, escreva @code{@@headingsdouble} após o
comando @code{@@end titlepage}.

Você pode fazer com que @TeX{} pare de gerar quaisquer cabeçalhos de
página em quaisquer circunstâncias, escrevendo @code{@@headings off} em
uma linha própria imediatamente após a linha contendo o comando
@code{@@end titlepage}, como isto:

@example
@@end titlepage
@@headings off
@end example

@noindent
O comando @code{@@headings off} anula o comando @code{@@end titlepage},
o qual do contrário faz com que @TeX{} imprima os cabeçalhos de página.

Você também pode especificar seu próprio estilo de cabeçalho e de rodapé
de página. Veja-se @ref{Cabeçalhos, , Cabeçalhos de Página}, para mais informação.


@node @code{@@paragraphindent}
@subsection @code{@@paragraphindent}: Controlando o Recuo de Parágrafo

@anchor{paragraphindent}@c nome antigo
@findex paragraphindent
@cindex Recuando parágrafos, controle de
@cindex Controle de recuo de parágrafo

Os processadores de Texinfo podem inserir espaços em branco no início da
primeira linha de cada parágrafo, consequentemente recuando esse
parágrafo.  Você pode usar o comando @code{@@paragraphindent} para
especificar tal recuo.  Escreva um comando @code{@@paragraphindent} no
início de uma linha seguido por ou @samp{asis} ou um número:

@example
@@paragraphindent @var{indent}
@end example

O recuo ocorre de acordo com o valor de @var{indent}:

@table @asis
@item @code{asis}
Não modifica o recuo existente (não implementado em @TeX{}).

@item @code{none}
@itemx 0
Omite todos os recuos.

@item @var{n}
Recua @var{n} caracteres de espaço em saída Info, @var{n} em @TeX{}.

@end table

O valor padrão de @var{indent} é três (3).  @code{@@paragraphindent} é
ignorado para saída HTML.

É melhor escrever o comando @code{@@paragraphindent} antes da linha de
fim de cabeçalho, no início de um arquivo Texinfo, de maneira que os
comandos de formatação de região recuem os parágrafos conforme
especificado. Veja-se @ref{Início de Cabeçalho}.


@node @code{@@firstparagraphindent}
@subsection @code{@@firstparagraphindent}: Recuando Após Cabeçalhos

@anchor{firstparagraphindent}@c nome antigo
@findex firstparagraphindent
@cindex Primeiro parágrafo, suprimindo recuo de
@cindex Suprimindo primeiro parágrafo, recuo
@cindex Impedindo recuo do primeiro parágrafo
@cindex Recuando, supressão do primeiro parágrafo
@cindex Cabeçalhos, recuo depois de

Conforme você pode ver no presente manual, o primeiro parágrafo em
qualquer seção não é recuado por padrão.  Tipograficamente, o recuo é um
separador de parágrafos, o que significa que ele é desnecessário quando
uma nova seção se inicia.  Esse recuo é controlado com o comando
@code{@@firstparagraphindent}:

@example
@@firstparagraphindent @var{word}
@end example

O primeiro parágrafo após um cabeçalho é recuado de acordo com o valor
de @var{word}:

@table @asis
@item @code{none}
Evita que o primeiro parágrafo seja recuado (padrão).
Essa opção é ignorada por @command{makeinfo} se
@code{@@paragraphindent asis} estiver em efeito.

@item @code{insert}
Inclui o recuo normal de parágrafo.  Isso respeita o recuo de parágrafo
configurado por um comando @code{@@paragraphindent}
(veja-se @ref{@code{@@paragraphindent}}).
@end table

@code{@@firstparagraphindent} é ignorado para saída HTML e Docbook.

É melhor escrever o comando @code{@@firstparagraphindent} antes da linha
de fim de cabeçalho, no início de um arquivo Texinfo, de maneira que os
comandos de formatação de região recuem os parágrafos conforme
especificado. Veja-se @ref{Início de Cabeçalho}.


@node @code{@@exampleindent}
@subsection @code{@@exampleindent}: Recuo de Ambiente

@anchor{exampleindent}@c nome antigo
@findex exampleindent
@cindex Ambientes de recuo
@cindex Recuo de ambiente
@cindex Recuo de exemplo

Os processadores Texinfo recuam cada linha de @code{@@example} e
ambientes similares.  Você pode usar o comando
@code{@@exampleindent} para especificar tal recuo.  Escreva um comando
@code{@@exampleindent} no início de uma linha seguido por ou @samp{asis}
ou um número:

@example
@@exampleindent @var{indent}
@end example

O recuo é de acordo com o valor de @var{indent}:

@table @asis
@item @code{asis}
Não modifica o recuo existente (não implementado em @TeX{}).

@item 0
Omite todos os recuos.

@item @var{n}
Recua ambientes em @var{n} caracteres de espaço em saída Info, @var{n}
em @TeX{}.

@end table

O valor padrão de @var{indent} é cinco (5) espaços em Info, e
0.4@dmn{in} em @TeX{}, o que é de alguma maneira menos.  (A redução é
para ajudar @TeX{} a encaixar mais caracteres em linhas físicas).

É melhor escrever o comando @code{@@exampleindent} antes da linha de fim
de cabeçalho, no início de um arquivo Texinfo, de maneira que os
comandos de formatação de região recuem os parágrafos conforme
especificado.  @xref{Início de Cabeçalho}.


@node Finalizando um Arquivo
@section Finalizando um Arquivo do Texinfo
@cindex Finalizando um Arquivo do Texinfo
@cindex Finalização de arquivo do Texinfo
@cindex Finalização de arquivo
@findex bye

O final de um arquivo Texinfo deveria incluir comandos para criar
índices (veja-se @ref{Imprimindo Índices e Menus}), e o comando @code{@@bye}
para marcar a última linha a ser processada.  Por exemplo:

@example
@@node Index
@@unnumbered Index

@@printindex cp

@@bye
@end example

@findex bye
@anchor{Fim de Arquivo}
Um comando @code{@@bye} termina o processamento Texinfo.  Nenhum dos
formatadores processa nada seguinte a @code{@@bye}; qualquer de tal
texto é completamente ignorado.  O comando @code{@@bye} deveria estar em
uma linha própria.

Assim, se você desejar, você pode seguir a linha @code{@@bye} com notas
arbitrárias.  Também, você pode seguir a linha @code{@@bye} com uma
lista de variáveis locais para Emacs, a maioria das vezes tipicamente um
@samp{compile-command}
(veja-se @ref{Comando de Compilação,, Usando a Lista de Variáveis Locais}).


@node Nós
@chapter Nós @c Capítulo 4
@anchor{node}@anchor{@@node} @c nomes antigos

@cindex Nó, definido
Um @dfn{nó} é uma região de texto que inicia no comando @code{@@node},
e continua até o próximo comando @code{@@node}.
Para especificar um nó, escreva um comando @code{@@node} no início de
uma linha, e siga-o com o nome do nó.
Cada nó contém a discussão de um tópico.  Os leitores Info exibem um
nó por vez, e disponibilizam comandos para o usuário se movimentar a
nós relacionados.  A saída HTML pode ser navegada similarmente.

Os nós são usados como os alvos de referências cruzadas.  As
referências cruzadas, tais quais aquelas ao final desta sentença, são
feitas com @code{@@xref} e comandos relacionados; veja-se
@ref{Referências Cruzadas}.  As referências cruzadas podem ser colocadas em
qualquer parte do texto, e proporcionam uma maneira de representar links
que não se encaixam em uma estrutura hierárquica.

Normalmente, você coloca um comando nó imediatamente antes de cada
comando de estruturação de capítulo---por exemplo, uma linha
@code{@@section} ou @code{@@subsection}. (Veja-se @ref{Estruturamento de Capítulo}).
Você deve necessariamente fazer isso, ainda que você não pretenda
formatar o arquivo para Info.
Isso é por que @TeX{} usa ambos, nomes @code{@@node} e nomes de
estruturação de capítulo, na saída para referências cruzadas.  A única
vez que você similarmente usa os comandos de estruturação de
capítulo sem também usar nós é se você estiver escrevendo um
documento que não contenha referências cruzadas e somente será impresso,
não transformado em Info, HTML, ou outros formatos.


@menu
* Estrutura do Documento Texinfo::  Estrutura dupla de documentos.
* Nomes de Nó::                  Como escolher nomes de nó.
* Escrevendo um Nó::              Como escrever uma linha @code{@@node}.
* Exigências de Linha de Nó::      Mantenha únicos os nomes.
* Primeiro Nó::                  Como escrever um nó `Top'.
* Comando @code{@@top}::           Como usar o comando @code{@@top}.
* Ilustração do Menu do Nó::      Um diagrama, e nós e menus de amostra.
* Criação de Ponteiros do @command{makeinfo}::   Permitindo que makeinfo determine os ponteiros de nó.
* Menus::                       Listando nós subordinados.
@end menu


@node Estrutura do Documento Texinfo
@section Estrutura do Documento Texinfo
@cindex Estrutura do Documento Texinfo
@cindex Documento, estrutura, do Texinfo
@cindex Estrutura, dos documentos do Texinfo
@cindex Estrutura dupla, dos documentos do Texinfo

@anchor{Dois Caminhos}@c nome de nó

Os nós podem conter @dfn{menus}, os quais contém os nomes de
@dfn{nós descendentes} dentro do nó pai; por exemplo, um nó
correspondente a um capítulo poderia ter um menu de seções nesse
capítulo.  Os menus permitem ao usuário se movimentar aos nós filhos
em uma maneira natural na saída em linha.

Adicionalmente, os nós contém @dfn{ponteiros de nó} que nomeiam outros
nós.  Os ponteiros `Próximo' e `Anterior' formam nós no mesmo nível de
seccionamento em uma cadeia.  Conforme você pode imaginar, o ponteiro
`Próximo' vincula ao próximo nó, e o ponteiro `Anterior' vincula ao nó
anterior.  Assim, por exemplo, todos os nós que estão ao nível de
seções dentro de um capítulo, são vinculados juntos, e a ordem dentro
dessa cadeia é a mesma que a ordem dos filhos no menu do capítulo pai.
Cada nó filho grava o nome de nó pai como o seu ponteiro `Acima'.

@opindex accesskey@r{, na saída HTML de nós}
A saída Info e HTML originada de @command{makeinfo} para cada nó
inclui vínculos aos nós `Próximo', `Anterior', e `Acima'.  O HTML também
usa o atributo @code{accesskey} com os valores @samp{n}, @samp{p}, e
@samp{u}, respectivamente.  Isso permite a pessoas que usem
navegadores web a seguir a navegação usando (tipicamente)
@kbd{M-@var{letter}}, por exemplo, @kbd{M-n} para o nó `Próximo', a
partir de qualquer lugar dentro do nó.
Os ponteiros e menus de nó proveem estrutura para os arquivos Info,
exatamente como capítulos, seções, subseções e semelhantes proveem
estrutura para livros impressos.  As duas estruturas teoricamente são
distintas; na prática, entretanto, a estrutura de árvore de livros
impressos é também essencialmente sempre usada para o nó e
estrutura de menu, pois isso conduz a um documento que é mais fácil de
seguir. Veja-se @ref{Estrutura do Documento Texinfo}.

Tipicamente, a estrutura de seccionamento e a estrutura de nó são
completamente paralelas, com um nó para cada capítulo, seção, etc., e
com os nós seguindo o mesmo arranjo hierárquico que o seccionamento.
Assim, se o nó estiver ao nível lógico de um capítulo, então seus
nós filhos estão ao nível de seções; similarmente, os nós filhos de
seções estão ao nível de subseções.

Apesar que é tecnicamente possível se criar documentos Texinfo com
somente uma estrutura ou a outra, ou para as duas estruturas não estarem
em paralelo, ou para ou o seccionamento ou estrutura de nó estarem
anormalmente formadas, etc., isso
@emph{terminantemente não é recomendado}.  Conforme é do nosso
conhecimento, todos os manuais Texinfo atualmente em uso geral seguem a
estrutura paralela convencional.


@node Nomes de Nó
@section Escolhendo Nomes de Nó

@cindex Nomes de nó, escolhendo
O nome de um nó identifica o nó.  Para todos os detalhes de nomes de
nó, veja-se @ref{Exigências de Linha de Nó}).

@anchor{Dicas de Linha de Nó}@c nome prévio de nó
Aqui estão algumas sugestões para nomes de nó:

@itemize @bullet
@item
Tente pegar nomes de nó que sejam informativos, porém curtos.

No arquivo Info, o nome de arquivo, nome de nó, e nomes de ponteiro
são todos inseridos em uma linha, os quais podem invadir a borda direita
da janela.  (Isso não causa um problema com Info, porém é horrível).

@item
Tente pegar nomes de nó que difiram uns dos outros próximo do início de
seus nomes.  Dessa maneira, é fácil usar a complementação automática
de nome em Info.

@item
Convencionalmente, os nomes de nó são capitalizados da mesma maneira
que os títulos de seção e capítulo.  Neste manual, as palavras iniciais
e significantes são capitalizadas; outras não o são.  Em outros manuais,
somente as palavras iniciais e substantivos próprios são capitalizados.
Qualquer forma está boa; nós somente recomendamos ser consistente.
@end itemize

Por que os nomes de nó são usados em referências cruzadas, não é
desejável casualmente modificá-los uma vez publicados.  Tais mudanças de
nome invalidam as referências a partir de outros manuais, a partir de
arquivamentos de correspondências, e assim por diante.
Veja-se @ref{Preservação de Link Xref do HTML}.

Os ponteiros a partir de um dado nó te habilitam a alcançar outros
nós e consistem simplesmente dos nomes de tais nós.  Os ponteiros
usualmente não estão especificados explicitamente, conforme
@command{makeinfo} possa determiná-los
(veja-se @ref{Criação de Ponteiros do @command{makeinfo}}).

Normalmente, um ponteiro `Acima' de nó contém o nome do nó cujo menu
menciona aquele nó.  O ponteiro `Próximo' de nó contém o nome do nó
que segue o presente nó naquele menu e seu ponteiro `Anterior' contém
o nome do nó que o precede naquele menu.  Quando um nó `Anterior' de
nó for o mesmo que seu nó `Acima', ambos os ponteiros nomeiam o mesmo
nó.

Usualmente, o primeiro nó de um arquio Texinfo é o nó `Top', e o seu
ponteiro `Acima' aponta para o arquivo @file{dir}, o qual contém o menu
principal para todos os Info.


@node Escrevendo um Nó
@section Escrevendo uma Linha de @code{@@node}
@cindex Escrevendo uma Linha de @code{@@node}
@cindex escrita de linha de @code{@@node}
@cindex Escrita de linha de nó

@findex node
A maneira mais fácil de se escrever uma linha @code{@@node} é escrever
@code{@@node} no início de uma linha e então o nome do nó, como isto:

@example
@@node @var{nome_do_nodo}
@end example

Após se ter inserido uma linha @code{@@node}, você deveria imediatamente
escrever um comando @@ para o capítulo ou seção e inserir o nome desse
capítulo ou seção.
Próximo (e isto é importante!), coloque várias entradas de índices.
Usualmente, você encontrará pelo menos duas e frequentemente por volta
de quatro ou cinco maneiras de se referir ao nó no índice.  Use-as
todas.  Isso tornará muito mais fácil para as pessoas encontrar o nó.

Se você desejar, você pode ignorar as linhas @code{@@node} completamente
em seu primeiro rascunho e então usar o comando
@code{texinfo-insert-node-lines} para criar as linhas @code{@@node} para
você.  Entretanto, não se recomenda essa prática.  É melhor nomear o
nó ao mesmo tempo em que você escreve um segmento, de forma que você
possa facilmente produzir referências cruzadas.
As referências cruzadas úteis são uma característica especialmente
importante de um bom manual Texinfo.

Mesmo quando você explicitamente especificar todos os ponteiros, você
não pode escrever os nós no arquivo fonte Texinfo em uma ordem
arbitrária!  Porque os formatadores devem necessariamente processar o
arquivo sequencialmente, sem considerar os ponteiros de nó, você deve
necessariamente escrever os nós na ordem que você os desejar para
aparecer na saída.  Para o formato Info, alguém pode imaginar que a
ordem pode não importar, porém ela importa para os outros formatos.

Você pode opcionalmente seguir o argumento de nome de nó a
@code{@@node} com até três argumentos opcionais no restante da mesma
linha, separando os argumentos com vírgulas.  Esses são os nomes dos
ponteiros `Próximo', `Anterior', e `Acima', nessa exata ordem.  Recomenda-se
omiti-los se o seu documento Texinfo for hierarquicamente organizado,
como virtualmente todos são
(veja-se @ref{Criação de Ponteiros do @command{makeinfo}}).

Quaisquer espaços antes ou após cada nome na linha @code{@@node} são
ignorados.

O modelo para uma linha de nó completamente preenchida com os
ponteiros `Próximo', `Anterior', e `Acima' se parece com isto:

@example
@@node @var{nome_do_nodo}, @var{next}, @var{previous}, @var{up}
@end example

O argumento @var{nome_do_nodo} deve necessariamente estar presente, porém
os outros são opcionais.  Se você desejar especificar algum, porém não
outros, apenas insira vírgulas conforme necessário, como em:
@samp{@@node meu_nodo,,,nodo_superior}.  Entretanto, recomenda-se deixar
desativados todos os ponteiros e permitir que @code{makeinfo} os
determine.

Se você estiver usando o GNU Emacs, você pode usar os comandos
de atualização de nós disponibilizados pelo modo Texinfo para inserir
os nomes dos ponteiros; ou (recomendado), você pode deixar os ponteiros
fora do arquivo Texinfo e permitir que @code{makeinfo} insira os
ponteiros de nó no arquivo Info que ele criar.
(Veja-se @ref{Modo Texinfo}, e @ref{Criação de Ponteiros do @command{makeinfo}}).

Alternativamente, você pode inserir os ponteiros `Próximo', `Anterior', e
`Acima' você mesmo.  Se você fizer isso, você pode achar de grande ajuda
usar o comando de teclado do modo Texinfo @kbd{C-c C-c n}.  Esse
comando insere @samp{@@node} e uma linha de comentário que te ajuda a
monitorar quais argumentos são para quais ponteiros.  Essa linha de
comentário é especialmente útil se você não estiver familiarizado com
Texinfo.


@node Exigências de Linha de Nó
@section Exigências de Linha de @code{@@node}

@cindex Exigências de Linha de Nó
@cindex Restrições a nomes de nó

Os nomes usados com @code{@@node} tem várias exigências:

@itemize @bullet
@item
@cindex Exigência de nomes exclusivos de nós
@cindex Nomes de nó precisam ser exclusivos
Todos os nomes de nó em um arquivo Texinfo devem ser únicos.

Isso significa, por exemplo, que, se você finalizar cada capítulo com um
sumário, você precisa nomear cada nó de sumário diferentemente. Você
não pode simplesmente chamá-los todos de ``Sumário''. Você pode,
entretanto, duplicar os títulos dos capítulos, seções, e afins. Assim,
você pode finalizar cada capítulo com uma seção chamada ``Sumário'',
contanto que os nomes de nó para tais seções sejam todos diferentes.

@item
@cindex Comandos em nomes de nó
@cindex Comandos @@ em nomes de nó
Os nomes de nó podem conter comandos @@. A saída geralmente é o
resultado natural do comando; por exemplo, usar @code{@@TeX@{@}} em um
nome de nó resulta no logotipo do @TeX{} sendo exibido, conforme
poderia estar em texto normal. As referências cruzadas deveriam usar
@code{@@TeX@{@}}, assim como o nome de nó usa.

Para saída Info e HTML, especialmente, é necessário expandir os comandos
para alguma sequência de caracteres planos; por exemplo,
@code{@@TeX@{@}} se expande para as três letras @samp{TeX} no nome de
nó do Info. Entretanto, as referências cruzadas ao nó não deveriam
tomar o ``atalho'' de usar @samp{TeX}; furar ao nome do nó real, comandos e tudo.

Alguns comandos não fazem sentido em nomes de nó; por exemplo, ambientes (e.g.,
@code{@@quotation}), comandos que leem uma linha inteira como seu argumento (e.g.,
@code{@@sp}), e muitos outros.

Para a lista completa de comandos permitidos, e suas expansões para identificadores
HTML e nomes de arquivo, veja-se @ref{Expansão do Comando Xref do HTML}. As
expansões para Info geralmente são dadas como a principal descrição do comando.

Antes do lançamento de Texinfo 5 em 2013, essa característica era suportada em
uma maneira ad hoc (a opção @option{--commands-in-node-names} para @command{makeinfo}).
Agora é parte da linguagem.

@item
@cindex Dois pontos em nome de nó
@cindex Vírgula em nome de nó
@cindex Parêntesis em nome de nó
@cindex Ponto em nome de nó
@cindex Caracteres, inválidos em nome de nó
@cindex Caracteres inválidos em nome de nó
@cindex Nomes de nó, caracteres inválidos em
Infelizmente, você não pode confiavelmente usar pontos, vírgulas ou dois pontos
em um nome de nó; esses podem confundir o leitor Info. Também,  um nome de nó
não pode iniciar com um abre parênteses precedendo um fecha parênteses, como
em @code{(não)permitido}, dado que tal sintaxe é usada para especificar um
manual externo. (Talvez essas limitações sejam removidas algum dia).

@command{makeinfo} alerta sobre tais usos problemáticos em nomes de nó,
itens de menu e referências cruzadas. Se você não quiser ver os alertas,
você pode configurar a variável de personalização @code{INFO_SPECIAL_CHARS_WARNING}
para @samp{0} (veja-se @ref{Outras Variáveis de Personalização}).

Também, se você insistir em usar tais caracteres em nomes de nó (aceitando
a saída Info subpadrão resultante), com o objetivo de não confundir os processadores
Texinfo, você deve ainda encapsular tais caracteres, usando ou inserções especiais
(veja-se @ref{Inserindo Uma Vírgula}) ou @code{@@asis} (veja-se @ref{@code{@@asis}}).
Por exemplo:

@example
@@node foo@@asis@{::@}bar
@end example

Como um exemplo de se evitar os caracteres especiais, o seguinte é um
título de seção neste manual:

@smallexample
@@section @@code@{@@@@unnumbered@}, @@code@{@@@@appendix@}: ...
@end smallexample

@noindent
Porém, falta ao nome de nó correspondente as vírgulas e o subtítulo:

@smallexample
@@node @code{@@unnumbered @@appendix}
@end smallexample

@cindex Maiúsculas e minúsculas em nome de nó
@item
Maiúsculas e minúsculas são significantes em nomes de nó.

@cindex Espaço em branco em nome de nó
@cindex Espaços em nome de nó
@item
Os espaços antes e depois dos nomes na linha @samp{@@node} são ignorados.
Caracteres espaços em branco múltiplos ``dentro'' de um nome são substituídos
por um espaço único. Por exemplo:

@example
@@node foo bar
@@node  foo bar,
@@node foo bar ,
@@node foo  bar,
@@node  foo  bar ,
@end example

@noindent todos definem o mesmo nó, chamado @samp{foo bar}. Em entradas de menu,
esse é o nome que deveria ser usado: sem espaços antes ou depois, e um espaço interno
único. (Para referências cruzadas, o nome de nó usado nos fontes Texinfo é
automaticamente normalizado dessa maneira).

@item
Os ponteiros next/previous/up em linhas @code{@@node} devem ser os nomes dos nós.
(É recomendado deixar esses nomes de ponteiros de nó explícitos, os quais
automaticamente evitam quaisquer problemas aqui;
veja-se @ref{Criação de Ponteiros do @command{makeinfo}}).
@end itemize


@node Primeiro Nó
@section O Primeiro Nó
@cindex O nó Top é primeiro
@cindex Primeiro nó

O primeiro nó de um arquivo Texinfo é o nó @dfn{Top}, exceto em um arquivo
incluído (@pxref{Arquivos de Inclusão}). O nó Top deveria conter um
sumário curto, permissões de cópia e um menu mestre. Veja-se @ref{O Nó Top},
para mais informações sobre o conteúdo e exemplos do nó Top.

Aqui está uma descrição dos ponteiros de nó a serem usados no nó Top:

@itemize @bullet
@item
@cindex Nó Acima do nó Top
@cindex (dir) como nó Acima do nó Top
O nó Top (o qual deve ser nomeado @samp{top} ou @samp{Top}) deveria ter como
seu nó `Acima' o nome de um nó em outro arquivo, onde existe um menu que leva
a esse arquivo. Especifique o nome de arquivo entre parênteses.

Usualmente, todos os arquivos Info estão disponíveis por meio de uma árvore
virtual única de Info, construída a partir de múltiplos diretórios. Nesse caso,
use @samp{(dir)} como o pai do nó Top; isso especifica o nó topo de nível no
arquivo @file{dir}, o qual contém o menu principal para o sistema Info como um
todo. (Cada diretório com arquivos Info deve conter um arquivo chamado @file{dir}).

Isso está bom para Info, porém para saída HTML, alguém bem pode desejar que o
link Acima oriundo do nó Top vá para algum lugar diferente de @samp{dir.html}.
Por exemplo, para GNU, o lugar natural seria @url{http://www.gnu.org/manual/}
(uma página da web contendo links para a maior parte dos manuais GNU), melhor
especificada que apenas @code{/manual/}, se o manual será instalado em
@code{www.gnu.org}. Isso pode ser especificado com a variável de personalização
@code{TOP_NODE_UP_URL} (veja-se @ref{Variáveis de Personalização de HTML}), como em

@example
$ @kbd{makeinfo --html -c TOP_NODE_UP_URL=/manual/} ...
@end example

Todos os links para @code{(dir)} serão substituídos pela URL dada.

@item
@cindex Nó Anterior do nó Top
O nó `Anterior' do nó Top é usualmente ou omitido ou também configurado para
@file{(dir)}. Qualquer uma está legal.

@item
@cindex Nó Próximo do nó Top
O nó `Próximo' do nó Top deveria ser o primeiro capítulo em seu documento.

@end itemize

Veja-se @ref{Instalando Um Arquivo do Info}, para mais informação sobre a instalação
de um arquivo Info no diretório @file{info}.

Geralmente, é melhor deixar os ponteiros completamente e deixar que as ferramentas
os definam implicitamente, com este resultado simples:

@example
@@node Top
@end example


@node Comando @code{@@top}
@section O Comando de Seccionamento @code{@@top}

@anchor{comando top}@c nome antigo
@anchor{makeinfo top}@c outro nome antigo
@anchor{comando makeinfo top}@c ainda outro nome
@findex top

O comando @code{@@top} é um comando especial de seccionamento que você
deveria somente usar após uma linha @samp{@@node Top} no início de um
arquivo Texinfo. O comando @code{@@top} diz ao formatador @code{makeinfo}
qual nó é para ser usado como raiz da árvore de nós.

O comando produz o mesmo tipo de saída que @code{@@unnumbered}
(veja-se @ref{@code{@@unnumbered @@appendix}}).

O nó @code{@@top} é convencionalmente envolto em um condicional
@code{@@ifnottex} de forma que não aparecerá na saída @TeX{}
(veja-se @ref{Condicionais}).
Assim, na prática, um nó Top geralmente se parece com isto:

@example
@@ifnottex
@@node Top
@@top @var{titulo-do-seu-manual}

@var{sumario-de-altissimo-nivel}
@@end ifnottex
@end example

@code{@@top} é ignorado ao se levantar ou abaixar seções. Ou seja, nunca
é baixado e nada pode ser levantado a ele (veja-se
@ref{Elevar/rebaixar seções}).

@node Ilustração do Menu do Nó
@section Ilustração de Menu e Nó @c Capítulo 4 - Nós - Seção 4.7

Aqui está uma diagrama que ilustra um arquivo Texinfo com três capítulos,
cada um dos quais contendo duas seções.

A ``raiz'' está no topo do diagrama e as ``folhas'' estão na parte
inferior. Assim é como tal diagrama é desenhado convencionalmente; ele
ilustra uma árvore de cabeça para baixo. Por essa razão, o nó raiz é
chamado de nó `Top', e ponteiros de nó `Acima' levam você para mais
perto da raiz.

@example
@group
                         Top
                          |
        -------------------------------------
       |                  |                  |
    Capítulo 1        Capítulo 2         Capítulo 3
       |                  |                  |
    --------           --------           --------
   |        |         |        |         |        |
 Seção    Seção     Seção    Seção     Seção    Seção
  1.1      1.2       2.1      2.2       3.1      3.2
@end group
@end example

Usando ponteiros explícitos (não recomendado, mas mostrado para fins do
exemplo), o comando totalmente escrito para iniciar o Capítulo@tie{}2
poderia ser isto:

@example
@group
@@node     Capítulo 2,  Capítulo 3, Capítulo 1, Top
@@comment  nome-nó,   next,       previous,   up
@end group
@end example

@noindent
Essa linha @code{@@node} diz que o nome desse nó é ``Capítulo@tie{}2'',
o nome do nó `Próximo' é ``Capítulo 3'', o nome do nó `Anterior' é
``Capítulo@tie{}1'' e o nome do nó `Acima' é ``Top''. Você pode (e
deveria) omitir a explicitação desses nomes de nó se o seu documento
estiver hierarquicamente organizado
(veja-se @ref{Criação de Ponteiros do @command{makeinfo}}), porém os
relacionamentos de ponteiros ainda serão obtidas.

@quotation Nota
`Próximo' e `Anterior' se referem a nós no @emph{mesmo nível hierárquico}
no manual, não necessariamente ao próximo nó dentro do arquivo Texinfo.
No arquivo Texinfo, o nó subsequente pode estar a um nível mais
baixo---um nó de nível de seção frequentemente segue um nó de nível
de capítulo, por exemplo. (O nó `Top' contém a exceção a essa regra.
Dado que o nó `Top' é o único nó naquele nível, `Próximo' se refere ao
primeiro nó seguinte, o qual quase sempre é um nó de capítulo ou
nível de capítulo).
@end quotation

Para ir para as Seções 2.1 e 2.2 usando Info, você precisa de um menu
dentro do Capítulo 2. (veja-se @ref{Menus}). Você escreveria o menu
pouco antes do início da Seção 2.1, como isto:

@example
@group
   @@menu
   * Seção. 2.1::    Descrição dessa seção.
   * Seção. 2.2::    Descrição.
   @@end menu
@end group
@end example

Usando ponteiros explícitos, o nó para a Seção.@: 2.1 é escrito como
isto:

@example
@group
@@node     Seção. 2.1, Seção. 2.2, Capítulo 2, Capítulo 2
@@comment  nome-nó,  next,       previous,   up
@end group
@end example

Em formato Info, os ponteiros `Próximo' e `Anterior' de um nó geralmente
conduzem à outros nós no mesmo nível---de capítulo para capítulo ou de
seção para seção (as vezes, conforme mostrado, o ponteiro `Anterior'
aponta para cima); um ponteiro `Acima' geralmente conduz à um nó ao nível
acima (mais perto do nó `Top'); e um `Menu' conduz à nós a um nível
abaixo (mais perto das `folhas'). (Uma referência cruzada pode apontar
para um nó em qualquer nível; veja-se @ref{Referências Cruzadas}).

Um comando @code{@@node} e um comando de estruturamento de capítulo são
convencionalmente usados juntos, nessa ordem, frequentemente seguidos
por comandos de indexação. (Conforme mostrado no exemplo acima, você
pode seguir a linha @code{@@node} com uma linha de comentário, por
exemplo, para mostrar qual ponteiro é qual se ponteiros explícitos são
usados). Os processadores Texinfo usam essa construção para determinar
os relacionamentos entre nós e comandos de seccionamento.

Aqui está o início de um capítulo neste manual chamado
``Finalizando um Arquivo Texinfo''. Isso mostra uma linha @code{@@node}
seguida por uma linha @code{@@chapter} e, então, por linhas de
indexação.

@example
@group
@@node Finalizando um Arquivo
@@chapter Finalizando um Arquivo Texinfo
@@cindex Finalizando um arquivo Texinfo
@@cindex Finalização de arquivo Texinfo
@@cindex Finalização de arquivo
@end group
@end example

Uma versão mais antiga do manual usava ponteiros de nó explícitos.
Aqui está o início do mesmo capítulo para esse caso. Isto mostra uma
linha @code{@@node} seguida por uma linha de comentário, uma linha
@code{@@chapter} e, então, por linhas de indexação.

@example
@group
@@node Finalizando um Arquivo, Estruturamento, Iniciando um Arquivo, Top
@@comment nome-nó,           next,           previous,             up
@@chapter Finalizando um Arquivo Texinfo
@@cindex Finalizando um Arquivo Texinfo
@dots{}
@end group
@end example

@node Criação de Ponteiros do @command{makeinfo}
@section Criação de Ponteiros do @command{makeinfo} @c Capítulo 4 - Nós - Seção 4.8

@cindex Criando ponteiros com @code{makeinfo}
@cindex Criação de Ponteiros do @command{makeinfo} com @code{makeinfo}
@cindex Criação Automática De Ponteiros do @command{makeinfo} com @code{makeinfo}
@cindex Criação Implícita de Ponteiros do @command{makeinfo} com @code{makeinfo}

O programa @code{makeinfo} pode automaticamente determinar ponteiros de
nó para um documento hierarquicamente organizado. Essa característica
de criação implícita de ponteiro de nó em @code{makeinfo} liberta você
da necessidade de atualizar menus e ponteiros manualmente ou com
comandos no Modo Texinfo. (@xref{Atualizando Nós e Menus}). Nós
recomendamos enfaticamente tomar vantagem disso.

Para fazer isso, escreva suas linhas @code{@@node} apenas com o nome do
nó:

@example
@@node Meu Nó
@end example

@noindent
Você não precisa escrever os ponteiros `Próximo', `Anterior', e `Acima'.

Então, você deve escrever um comando de seccionamento, como
@code{@@chapter} ou @code{@@section}, na linha imediatamente seguinte a
cada linha @code{@@node} truncada (exceto aquelas linhas de comentários
que podem intervir). Isso é como normalmente ocorre.

Também, você deve escrever o nome de cada nó (exceto para o nó
`Top') em um menu que esteja um ou mais níveis hierárquicos acima do
nível do nó.

Finalmente, você deve seguir a linha `Top' da linha @code{@@node} com
uma linha iniciando com @code{@@top} para marcar o nó de nível de topo
no arquivo. Veja-se @ref{Comando @code{@@top}}.

@cindex Menu de detalhe
@findex menudetalhe
Se você usa um menu detalhado no seu menu mestre (veja-se
@ref{Partes do Menu Mestre}), marque-o com o ambiente
@code{@@detailmenu @dots{} @@end detailmenu}, ou @command{makeinfo}
ficará confuso, tipicamente acerca do último e/ou primeiro nó no
documento.

Na maior parte dos casos, você desejará tomar vantagem dessa
característica e não redundantemente especificar ponteiros de nó que
os programas podem determinar. Entretanto, não se exige que os
documentos Texinfo sejam organizados hierarquicamente ou, de fato,
conterem quaisquer comandos de seccionamento (por exemplo, se você nunca
pretender que o documento seja impresso), de forma que os ponteiros de
nó ainda possam ser especificados explicitamente, em completa
generalidade.

@node Menus
@section Menus @c Capítulo 4 - Nós - Seção 4.9
@cindex Menus
@findex menu

@dfn{Menus} contém ponteiros para subordinar nós. Em saída online,
você usa menus para ir para tais nós. Os menus não tem efeito em
manuais impressos e não aparecem neles.

@menu
* Escrevendo um Menu::                O que é um menu?
* Exemplo de Menu::                   Entradas de menu de duas e três partes
* Local de Menu::               Menus vão ao final de nós
* Partes de Menu::                    Uma entrada de menu tem três partes
* Entrada de Menu Menos Desordenada:: Entrada de menu de duas partes
* Outros Arquivos do Info::           Como referenciar um arquivo Info diferente
@end menu

@node Escrevendo um Menu
@subsection Escrevendo um Menu
@cindex Escrevendo um Menu
@cindex Menu, Escrevendo

Um menu consiste de um comando @code{@@menu} em uma linha própria,
seguido por linhas de entrada de menu ou linhas de comentário de menu, e
então seguido por um comando @code{@@end menu} em uma linha própria.

Um menu se parece com isto:

@example
@group
@@menu
Unidades de Texto Mais Largas

* Arquivos::                    Tudo sobre a manipulação de arquivos
* Múltiplos: Buffers.           Múltiplos buffers; editando
                                 vários arquivos de uma vez
@@end menu
@end group
@end example

@cindex Espaços, em menus
Em um menu, cada linha que inicie com um @w{@samp{* }} é uma
@dfn{entrada de menu}. (Note o espaço após o asterisco).

Uma linha que não se inicie com um @w{@samp{* }} também pode aparecer em
um menu. Tal linha não é uma entrada de menu, mas sim uma linha de
@dfn{comentário de menu} que aparece no arquivo Info. No exemplo acima,
a linha @samp{Unidades de Texto Mais Largas} é uma linha de comentário
de menu; as duas linhas iniciando com @w{@samp{* }} são entradas de
menu.

@cindex Documentos hierárquicos, e menus
Tecnicamente, menus podem te transportar para qualquer nó,
independentemente da estrutura do documento; mesmo para nós em um
arquivo Info diferente. Entretanto, nós não recomendamos fazer uso
disso, pois é trabalhoso para os leitores seguirem. Também, a
característica de criação implícita de ponteiros do comando
@command{makeinfo} (@pxref{Criação de Ponteiros do @command{makeinfo}})
e os comandos de atualização do modo Texinfo do GNU Emacs funcionam
somente para criar menus de nós subordinados em um documentos
hierarquicamente estruturado. É muito melhor usar referências cruzadas
para se referir a nós arbitrários.

@cindex Menus, gerando automaticamente
@findex validatemenus
O comando @command{makeinfo} pode automaticamente gerar menus em nós
para saída Info e HTML, baseado na estrutura de capítulo do documento.
Para especificar que você deseja que o comando faça isso, coloque uma
linha @samp{@@validatemenus off} próxima do início do documento.

Em Info, um usuário seleciona um nó o comando @kbd{m}
(@code{Info-menu}). O nome de entrada de menu é o que o usuário digita
após o comando @kbd{m}.

@opindex accesskey@r{, em saída de menus HTML}
Na saída HTML oriunda de @command{makeinfo}, o atributo @code{accesskey}
é usado com os valores @samp{1}@dots{}@samp{9} para as primeiras nove
entradas. Isso permite que as pessoas usando navegadores da Internet
sigam a primeira entrada de menu usando (tipicamente)
@kbd{M-@var{digit}}, por exemplo, @kbd{M-1} para a primeira entrada.

@node Exemplo de Menu
@subsection Um Exemplo de Menu
@cindex Exemplo de Menu
@cindex Menu, Exemplo

@c mesclar com o nó Escrevendo um Menu?

Um menu se parece com isto em Texinfo:

@example
@group
@@menu
* Nome de entrada do menu: Nome do nó. Uma descrição curta.
* Nome do nó::                   Essa forma é preferida.
@@end menu
@end group
@end example

@need 800
@noindent
Isso produz:

@example
@group
* menu:

* Nome de entrada do menu: Nome do nó. Uma descrição curta.
* Nome do nó::                   Essa forma é preferida.
@end group
@end example

@need 700
Aqui está um exemplo de como você poderá vê-lo em um arquivo Texinfo:

@example
@group
@@menu
Unidades de Texto Mais Largas

* Arquivos::                    Tudo sobre a manipulação de arquivos.
* Múltiplos: Buffers.           Múltiplos buffers; editando
                                vários arquivos de uma vez.
@@end menu
@end group
@end example

@need 800
@noindent
Isso produz:

@example
@group
* menu:
Unidades de Texto Mais Largas

* Arquivos::                    Tudo sobre a manipulação de arquivos.
* Múltiplos: Buffers.           Múltiplos buffers; editando
                                vários arquivos de uma vez.
@end group
@end example

Nesse exemplo, o menu tem duas entradas. @samp{Arquivos} tanto é um nome
de entrada de menu quanto o nome do nó referenciado por aquele nome.
@samp{Múltiplos} é o nome de entrada de menu; ele se refere ao nó
chamado @samp{Buffers}. A linha @samp{Unidades de Texto Mais Largas} é
um comentário; ele aparece no menu, porém não é uma entrada.

Dado que nenhum nome de arquivo é especificado com @samp{Arquivos} ou
@samp{Buffers}, eles podem ser os nomes de nós no mesmo arquivo Info
(@pxref{Outros Arquivos do Info, , Referenciando Outros Arquivos do Info}).

@node Local de Menu
@subsection Local de Menu
@cindex Local de Menu
@cindex Menus, Local de

Pode existir ao menos um menu em um nó. Um menu é convencionalmente
localizado ao final de um nó, sem qualquer texto regular ou comandos
adicionais entre o @code{@@end menu} e o início do próximo nó.

@cindex Formato Info, e menus
Essa convenção é útil, dado que um leitor que usa o menu poderia
facilmente se esquecer de quaisquer de tais textos. Também, quaisquer de
tais textos pós menu serão considerados parte do menu na saída Info (a
qual não tem marcador para o final de um menu). Assim, uma linha
iniciando com @samp{* } será igualmente incorretamente manipulada.

Geralmente é melhor se um nó com um menu não contenha muito texto. Se
você se encontrar com um monte de texto antes de um menu, geralmente nós
recomendamos mover tudo, menos um par de parágrafos, para um novo
sub nó. Do contrário, é fácil para os leitores esquecerem o menu.

@ignore
Anos atrás, nós recomendamos o uso de um comando @samp{@@heading} dentro
de um condicional @code{@@ifinfo} em vez dos comandos de seccionamento
normais após um nó muito curto com um menu. Isso tinha a vantagem de
tornar a saída impressa visualmente melhor, pois não havia texto muito
curto entre dois cabeçalhos no pagina. Porém, não funcionava com a
criação de ponteiros implícita de @command{makeinfo}, e também tornava a
saída XML incorreta, dado que não refletia a verdadeira estrutura do
documento. Dessa maneira, nós não mais recomendamos isso.
@end ignore


@node Partes de Menu
@subsection As Partes de um Menu
@cindex Partes de um menu
@cindex Menu, partes
@cindex Partes de um @code{@@menu}

Uma entrada de menu tem três partes, das quais apenas a segunda é
exigida:

@enumerate
@item
O nome de entrada de menu (opcional).

@item
O nome do nó (exigido).

@item
Uma descrição do item (opcional).
@end enumerate

O modelo para uma entrada de menu genérica se parece com isto (porém,
veja a próxima seção para mais uma possibilidade):

@example
* @var{nome_de_entrada_de_menu}: @var{nome_de_nodo}.   @var{descrição}
@end example

Coloque um único dois pontos após o nome de entrada de menu, seguido do
nome de nó e um tab, vírgula, enter ou os dois caracteres ``ponto'' e
``espaço'' (@samp{. }).

A terceira parte de uma entrada de menu é uma frase descritiva ou
sentença. Os nomes de entrada de menu e os nomes de nó frequentemente
são curtos; a descrição explana para o(a) leitor(a) a respeito de que se trata
o nó. Uma descrição útil complementa o nome de nó em vez de
repeti-lo. A descrição, a qual é opcional, pode ser espraiada por várias
linhas; se isso acontecei, alguns autores preferem recuar a segunda
linha enquanto outros preferem alinhá-lo com a primeira (e todas as
outras). É completamente com você. Uma linha variz, ou a próxima entrada
de menu, finaliza a descrição.

Os caracteres de espaço em um menu são preservados como estão na saída
Info; isso permite formatar o menu como se desejar. Infelizmente, você
deve digitar os nomes de nó sem quaisquer espaços extra ou algumas
versões de alguns leitores Info não encontrarão o nó
(@pxref{Exigências de Linha de Nó}).

@command{makeinfo} alerta quando o texto de um item de menu (e nomes de
nó e referências cruzadas) contem uma construção problemática que
interferirá com sua análise em Info. Se você não deseja ver esses
alertas, você pode configurar a variável de personalização
@code{INFO_SPECIAL_CHARS_WARNING} para @samp{0}
(@pxref{Outras Variáveis de Personalização}).

@node Entrada de Menu Menos Desordenada
@subsection Entrada de Menu Menos Desordenada
@cindex Entrada de menu de duas partes
@cindex Entradas de menu de dois pontos
@cindex Entradas de menu com dois ``dois pontos''
@cindex Entrada de menu menos desordenada
@cindex Entrada de menu organizada

Quando o nome de entrada de menu e o nome de nó são os mesmos, você
pode escrever o nome imediatamente após o asterisco e espaço no início
da linha e seguir com o nome com ``dois pontos'' duas vezes.

@need 800
Por exemplo, escreva

@example
* Nome::                        @var{descrição}
@end example

@need 800
@noindent
em vez de

@example
* Nome: Nome.                   @var{descrição}
@end example

Nós recomendamos usar o nome de nó para o nome de entrada de menu
sempre que possível, dado que isso reduz a confusão visual no menu.

@node Outros Arquivos do Info
@subsection Referenciando Outros Arquivos do Info
@cindex Referenciando outros arquivos do Info
@cindex Nós em outros arquivos do Info
@cindex Nós de outros arquivos do Info
@cindex Indo para outros nós de arquivos do Info
@cindex Info; nós de outros arquivos

Você pode criar uma entrada de menu que habilite um leitor em Info a ir
para um nó em outro arquivo Info, escrevendo o nome de arquivo entre
parênteses um pouco antes do nome do nó. Alguns exemplos:

@example
@group
@@menu
* @var{nome-da-primeira-entrada}:(@var{nome-do-arquivo})@var{nome-do-nó}.     @var{descrição}
* (@var{nome-do-arquivo})@var{segundo-nó}::                                   @var{descrição}
@@end menu
@end group
@end example

Por exemplo, para se referir diretamente aos nós @samp{Outlining} e
@samp{Rebinding} no @cite{Manual do Emacs}, você poderia escrever um
menu como este:

@example
@group
@@menu
* Outlining: Modo Contorno(emacs). O principal modo de edição de
                                   contornos.

* (emacs)Rebinding::          Como redefinir o significado de uma tecla.

@@end menu
@end group
@end example

Se você não listar o nome de nó, mas apenas nomear o arquivo, então
Info presume que você está se referindo ao nó `Top'. Exemplos:

@example
@group
* Info: (info).         Sistema de navegação de documentação.
* (emacs)::             Editor de texto, extensível, auto-documentador

@end group
@end example

Os comandos de atualização de menu do modo Texinfo do GNU Emacs somente
funcionam com nós dentro do buffer atual, de forma que você não pode
usá-los para criar menus que se refiram a outros arquivos. Você deve
escrever tais menus manualmente.

@node Estruturamento de Capítulo
@chapter Estruturamento de Capítulo @c Capítulo 5
@anchor{Estruturamento}@c nome antigo
@cindex Estruturamento de Capítulo
@cindex Estruturamento de capítulos
@cindex Seccionamento

Os comandos de @dfn{Estruturamento de Capítulo} do Texinfo dividem um
documento em uma hierarquia de capítulos, seções, subseções e
subsubseções. Esses comandos geram cabeçalhos largos no texto, como o
acima. Eles também proveem informação para a geração de índices
(@pxref{Conteúdo,, Gerando Um Sumário}).

Normalmente você coloca um comando @code{@@node} imediatamente antes de
cada comando de Estruturamento de Capítulo. @xref{Nós}.

@menu
* Estruturamento de Árvore::            Um manual é como uma árvore de cabeça para baixo @dots{}
* Tipos de Comandos Estruturantes::     Como dividir um manual em partes.
* @code{@@chapter}::                    Estruturamento de capítulo.
* @code{@@unnumbered @@appendix}::
* @code{@@majorheading @@chapheading}::
* @code{@@section}::
* @code{@@unnumberedsec @@appendixsec @@heading}::
* @code{@@subsection}::
* @code{@@unnumberedsubsec @@appendixsubsec @@subheading}::
* @code{@@subsubsection}::              Comandos para as seções de mais baixo nível.
* @code{@@part}::                       Coleções de capítulos.
* Elevar/rebaixar seções::              Como mudar o nível hierárquico dos comandos.
@end menu


@node Estruturamento de Árvore
@section Estrutura de Árvore das Seções @c Capítulo 5 - Estruturamento de Capítulo; Seção 5.1 - Estrutura de Árvore das Seções
@cindex Estruturamento de Árvore

Um arquivo Texinfo é geralmente estruturado como um livro com capítulos,
seções, subseções, e afins. Essa estrutura pode ser visualizada como uma
árvore (ou melhor, como uma árvore de cabeça para baixo) com a raiz no
topo e as folhas correspondendo aos capítulos, seções, subseções e
subsubseções.

Aqui está um diagrama que mostra um arquivo Texinfo com três capítulos,
cada qual com duas seções.

@example
@group
                         Top
                          |
        -------------------------------------
       |                  |                  |
    Capítulo 1         Capítulo 2         Capítulo 3
       |                  |                  |
    --------           --------           --------
   |        |         |        |         |        |
 Seção    Seção     Seção    Seção     Seção    Seção
  1.1      1.2       2.1      2.2       3.1      3.2

@end group
@end example

Em um arquivo Texinfo que tenha essa estrutura, o início do Capítulo 2
poderia ser escrito assim:

@example
@group
@@node    Capítulo 2
@@chapter Capítulo 2
@end group
@end example

@noindent
Para o propósito do exemplo, aqui está como poderia ser escrito com
ponteiros de nó explícitos:

@example
@group
@@node    Capítulo 2,  Capítulo 3, Capítulo 1, Top
@@chapter Capítulo 2
@end group
@end example

Os comandos de estruturamento de capítulo estão descritos nas seções
seguintes; o comando @code{@@node} está descrito no capítulo anterior
(@pxref{Nós}).

@node Tipos de Comandos Estruturantes
@section Tipos de Comandos Estruturantes @c Capítulo 5 - Estruturamento de Capítulo; Seção 5.2 - Tipos de Comandos Estruturantes

Os comandos de estruturamento de capítulo se dividem em quatro grupos ou
séries, cada um dos quais contendo comandos de estruturamento
correspondentes aos níveis hierárquicos de capítulos, seções, subseções
e subsubseções.

Os quatro grupos de comandos são: a série @code{@@chapter}; a série
@code{@@unnumbered}; a série @code{@@appendix}; e a série
@code{@@heading}. Cada comando produz um título com uma aparência
diferente no corpo do documento. Alguns dos comandos listam seus títulos
no sumário, enquanto outros não. Aqui estão os detalhes:

@itemize @bullet
@item
As séries de comandos @code{@@chapter} e @code{@@appendix} produzem
entradas numeradas ou letradas, ambas no corpo de um documento e em seu
sumário.

@item
A série de comandos @code{@@unnumbered} produzem entradas não numeradas,
ambas no corpo de um documento e em seu sumário. O comando @code{@@top},
o qual tem um uso especial, é um membro dessa série
(@pxref{Comando @code{@@top}}). Uma seção @code{@@unnumbered} é uma
parte normal da estrutura do documento.

@item
A série de comandos @code{@@heading} produzem cabeçalhos não numerados
simples que não aparecem em um sumário, não são associados com nós e
não podem ser referenciados. Esses comandos de cabeçalhos nunca iniciam
uma nova página.
@end itemize

Quando um comando @code{@@setchapternewpage} diz para fazer isso, ou
seja, novo capítulo com nova página, os comandos @code{@@chapter},
@code{@@unnumbered} e @code{@@appendix} iniciam novas páginas no manual
impresso; os comandos @code{@@heading} não.
@xref{@code{@@setchapternewpage}}.

Aqui está um sumário:

@tex
{\globaldefs=1 \smallfonts \rm}
@end tex

@multitable @columnfractions .19 .30 .29 .22
@item                        @tab                              @tab                       @tab Sem nova página
@item @i{Numerada}           @tab @i{Não numerada}             @tab @i{Letrada/numerada}  @tab @i{Não numerada}
@item No conteúdo            @tab No conteúdo                  @tab No conteúdo           @tab Não no conteúdo
@item                        @tab @code{@@top}                 @tab                       @tab @code{@@majorheading}
@item @code{@@chapter}       @tab @code{@@unnumbered}          @tab @code{@@appendix} @tab @code{@@chapheading}
@item @code{@@section}       @tab @code{@@unnumberedsec}       @tab @code{@@appendixsec} @tab @code{@@heading}
@item @code{@@subsection}    @tab @code{@@unnumberedsubsec}    @tab @code{@@appendixsubsec} @tab @code{@@subheading}
@item @code{@@subsubsection} @tab @code{@@unnumberedsubsubsec} @tab @code{@@appendixsubsubsec} @tab @code{@@subsubheading}
@end multitable
@tex
{\globaldefs=1 \textfonts \rm}
@end tex


@node @code{@@chapter}
@section @code{@@chapter}: Estruturamento de Capítulo @c Capítulo 5 - Estruturamento de Capítulo; Seção 5.3 - Estruturamento de Capítulo

@anchor{chapter}@c nome antigo
@findex chapter

@code{@@chapter} identifica um capítulo no documento--a nível mais alto
da hierarquia de estruturamento normal do documento. Escreva o comando
no início de uma linha e o siga na mesma linha pelo título ou capítulo.
O capítulo é numerado automaticamente, iniciando a partir de@tie{}1.

Por exemplo, o capítulo presente neste manual é intitulado
``@code{@@chapter}: Estruturamento de Capítulo'';  a linha
@code{@@chapter} se parece com isto:

@example
@@chapter @@code@{@@@@chapter@}: Estruturamento de Capítulo
@end example

Em @TeX{}, o comando @code{@@chapter} produz um cabeçalho de capítulo no
documento.

Em saída Info e texto plano, o comando @code{@@chapter} faz com que o
título apareça em uma linha própria, com uma linha de asteriscos
inserida abaixo. Assim, o exemplo acima produz a seguinte saída:

@example
@group
5 Estruturamento de Capítulo
****************************
@end group
@end example

Em HTML, o comando @code{@@chapter} produz um cabeçalho de nível
@code{<h2>} por padrão (controlado pela variável de personalização
@code{CHAPTER_HEADER_LEVEL}, @pxref{Outras Variáveis de Personalização}).

Na saída XML e Docbook, um elemento @code{<chapter>} é produzido, o qual
inclui todas as seções seguintes, até o próximo capítulo.

@node @code{@@unnumbered @@appendix}
@section @code{@@unnumbered}, @code{@@appendix}: Capítulos com Outra Rotulagem

@anchor{unnumbered e appendix}@c nome antigo
@findex unnumbered
@findex appendix

Use o comando @code{@@unnumbered} para iniciar um elemento de nível de
capítulo que aparece sem números de capítulos de qualquer tipo. Use o
comando @code{@@appendix} para iniciar um apêndice que é rotulado por
letras (`A', `B', @dots{}) em vez de números; apêndices também estão ao
nível de estruturamento de capítulo.

Escreva um comando @code{@@appendix} ou @code{@@unnumbered} no início de
uma linha e siga-o, na mesma linha, pelo título, exatamente como com
@code{@@chapter}.

@findex centerchap
Texinfo também provê um comando @code{@@centerchap}, o qual é análogo a
@code{@@unnumbered}, porém centraliza seus argumentos nas saídas
impressa e HTML. Esse tipo de escolha estilística geralmente não é
oferecida por Texinfo. Ela pode ser adequada para documentos curtos.
@c porém, o Dicionário do Hacker desejava, antes de abandonarem Texinfo.

@cindex Docbook e seções prévias
@cindex Prefácio, etc., e Docbook
Com @code{@@unnumbered}, se o nome do nó associado é uma destas
palavras do Inglês (não diferencia maiúsculas de minúsculas):

@example
Acknowledgements  Colophon  Dedication  Preface
@end example

@cindex @code{<acknowledgements>} Etiqueta do Docbook
@cindex @code{<colophon>} Etiqueta do Docbook
@cindex @code{<dedication>} Etiqueta do Docbook
@cindex @code{<preface>} Etiqueta do Docbook
@cindex @code{<chapter>} Etiqueta do Docbook
@cindex @code{<title>} Etiqueta do Docbook
@noindent então a saída Docbook usa etiquetas especiais correspondentes
(@code{<preface>}, etc.)@: em vez do padrão @code{<chapter>}. O
argumento ao próprio @code{@@unnumbered} pode ser qualquer coisa, e é
produzido como o texto @code{<title>} a seguir como de costume.

@node @code{@@majorheading @@chapheading}
@section @code{@@majorheading}, @code{@@chapheading}: Cabeçalhos de Nível de Capítulo
@c Capítulo 5 - Nós; Seção 5.5 - Cabeçalhos de Nível de Capítulo

@anchor{majorheading e chapheading}@c nome antigo
@findex majorheading
@findex chapheading

Os comandos @code{@@majorheading} e @code{@@chapheading} produzem
cabeçalhos semelhantes a capítulos no corpo de um documento.

Entretanto, nenhum desses comandos produz uma entrada no índice, e
nenhum desses comandos faz com que @TeX{} inicie uma nova página em um
manual impresso.

Em @TeX{}, um comando @code{@@majorheading} gera um espaço em branco
vertical mais largo, antes do cabeçalho, que um comando
@code{@@chapheading}, porém, de outra forma, é o mesmo.

Em Info e texto plano, os comandos @code{@@majorheading} e
@code{@@chapheading} produzem a mesma saída que @code{@@chapter}: o
título é impresso em uma linha própria com uma linha de asteriscos
abaixo. Semelhante para HTML@. A única diferença é a falta de numeração
e a falta de qualquer associação com Nós. @xref{@code{@@chapter}}.

@node @code{@@section}
@section @code{@@section}: Seções Abaixo de Capítulos
@c Capítulo 5 - Nós; Seção 5.6 - Seções Abaixo de Capítulos

@anchor{section}@c nome antigo
@findex section

Um comando @code{@@section} identifica uma seção dentro de uma unidade
de capítulo, seja ela criada com @code{@@chapter}, @code{@@unnumbered},
ou @code{@@appendix}, seguindo o esquema de numeração do comando de
nível de capítulo. Assim, dentro de um Capítulo @code{@@chapter}
numerado `1', as seções são numeradas `1.1', `1.2', etc.; dentro de um
``capítulo'' @code{@@appendix} rotulado `A', as seções são numeradas
`A.1', `A.2', etc.; dentro de um capítulo @code{@@unnumbered}, a seção
não é numerada. A saída é sublinhada com @samp{=} em Info e texto plano.

Para criar uma seção, escreva o comando @code{@@section} no início de
uma linha e siga-o, na mesma linha, pelo título da seção. Por exemplo,

@example
@@section Isto é uma seção
@end example

@noindent
pode produzir o seguinte em Info:

@example
@group
5.7 Isto é uma seção
====================
@end group
@end example

Os títulos de seção são listados no índice.

A saída @TeX{}, HTML, Docbook e XML é toda análoga à saída de nível de
capítulo, apenas ``um nível abaixo''; @pxref{@code{@@chapter}}.


@node @code{@@unnumberedsec @@appendixsec @@heading}
@section @code{@@unnumberedsec}, @code{@@appendixsec}, @code{@@heading}
@c Capítulo 5 - Nós; Seção 5.7 - @code{@@unnumberedsec}, @code{@@appendixsec}, @code{@@heading}

@anchor{unnumberedsec appendixsec heading}@c nome antigo
@findex unnumberedsec
@findex appendixsec
@findex heading

Os comandos @code{@@unnumberedsec}, @code{@@appendixsec} e
@code{@@heading} são respectivamente, os equivalentes não numerado,
apêndice e cabeçalho do comando @code{@@section} (veja a seção
anterior).

@code{@@unnumberedsec} e @code{@@appendixsec} não precisam ser usados em
circunstâncias normais, pois @code{@@section} também pode ser usado
dentro de capítulos @code{@@unnumbered} e @code{@@appendix}; novamente,
veja a seção anterior.

@table @code
@item @@unnumberedsec
O comando @code{@@unnumberedsec} pode ser usado dentro de um capítulo
não numerado ou dentro de um capítulo ou apêndice normal para produzir
uma seção não numerada.

@item @@appendixsec
@itemx @@appendixsection
@findex appendixsection
@findex appendixsec
@code{@@appendixsection} é a escrita mais longa do comando
@code{@@appendixsec}; os dois são sinônimos.

Convencionalmente, o comando @code{@@appendixsec} ou
@code{@@appendixsection} é usado somente dentro de apêndices.

@item @@heading
Você pode usar o comando @code{@@heading} (quase) em qualquer lugar para
um cabeçalho estilo seção que não aparecerá no índice. Os comandos da
série @code{@@heading} podem aparecer dentro da maior parte dos
ambientes, por exemplo, ao longo de localizações patológicas e inúteis
como dentro de @code{@@titlepage}, como um argumento para outro comando,
etc., não são permitidos.

@end table


@node @code{@@subsection}
@section @code{@@subsection}: Subseções Abaixo de Seções
@c Capítulo 5 - Nós; Seção 5.8 - @code{@@subsection}: Subseções Abaixo de Seções

@anchor{subsection}@c nome antigo
@findex subsection

Subseções estão para seções como seções estão para capítulos;
@pxref{@code{@@section}}. Em Info e texto plano, os títulos de subseções
são sublinhados com @samp{-}. Por exemplo,

@example
@@subsection Esta é uma subseção
@end example

@noindent
pode produzir

@example
@group
1.2.3 Esta é uma subseção
-------------------------
@end group
@end example

Os títulos das subseções são listados no índice.

A saída @TeX{}, HTML, Docbook e XML é toda análoga à saída de nível de
capítulo, apenas ``dois níveis abaixo''; @pxref{@code{@@chapter}}.


@node @code{@@unnumberedsubsec @@appendixsubsec @@subheading}
@section Os Comandos do Tipo @code{@@subsection}
@c Capítulo 5 - Nós; Seção 5.9 - Os Comandos do Tipo @code{@@subsection}

@anchor{unnumberedsubsec appendixsubsec subheading}@c nome antigo
@findex unnumberedsubsec
@findex appendixsubsec
@findex subheading
@cindex Comandos similares ao Subsection

Os comandos @code{@@unnumberedsubsec}, @code{@@appendixsubsec} e
@code{@@subheading} são, respectivamente, os equivalentes não numerado,
tipo apêndice e tipo cabeçalho do comando @code{@@subsection}.
(@xref{@code{@@subsection}}).

@code{@@unnumberedsubsec} e @code{@@appendixsubsec} não precisam ser
usados em circunstâncias normais, pois @code{@@subsection} também pode
ser usado dentro de seções de capítulos @code{@@unnumbered} e
@code{@@appendix} (@pxref{@code{@@section}}).

Um comando @code{@@subheading} produz um cabeçalho semelhante àquele de
uma subseção, exceto que não é numerado e não aparece no índice.
Similarmente, um comando @code{@@unnumberedsubsec} produz um cabeçalho
não numerado semelhante àquele de uma subseção e um comando
@code{@@appendixsubsec} produz um cabeçalho do tipo subseção rotulado
com uma letra e números; ambos esses comandos produzem cabeçalhos que
aparecem no índice. Em Info e texto plano, os comandos do tipo
@code{@@subsection} geram um título sublinhado com hifens.


@node @code{@@subsubsection}
@section @code{@@subsection} e Outros Comandos Subsub
@c Capítulo 5 - Nós; Seção 5.10 - @code{@@subsection} e Outros Comandos Subsub

@anchor{subsubsection}@c nome antigo
@findex subsubsection
@findex unnumberedsubsubsec
@findex appendixsubsubsec
@findex subsubheading
@cindex Comandos de seccionamento Subsub

O quarto e menor nível de comandos de seccionamento em Texinfo são os
comandos `subsub'. São eles:

@table @code
@item @@subsubsection
Subsubseções estão para subseções como subseções estão para seções.
(@xref{@code{@@subsection}}). Os títulos das subsubseções aparecem no
índice.

@item @@unnumberedsubsubsec
Os títulos de subsubseções não numeradas aparecem no índice, porém
faltam números. Do contrário, subsubseções não numeradas são o mesmo que
subsubseções.

@item @@appendixsubsubsec
Convencionalmente, os comandos de apêndice são usados somente para
apêndices e são indicados e numerados apropriadamente. Eles também
aparecem no índice.

@item @@subsubheading
O comando @code{@@subsubheading} pode ser usado em qualquer lugar onde
você desejar um pequeno cabeçalho que não aparecerá no índice.

@end table

Como com subseções, @code{@@unnumberedsubsubsec} e
@code{@@appendixsubsubsec} não precisam ser usados em circunstâncias
normais, pois @code{@@subsubsection} também pode ser usado dentro de
subseções de capítulos @code{@@unnumbered} e @code{@@appendix}
(@pxref{@code{@@section}}).

Em Info, os títulos `subsub' são sublinhados com pontos. Por exemplo,

@example
@@subsubsection Esta é uma subsubseção
@end example

@noindent
pode produzir

@example
@group
1.2.3.4 Esta é uma subsubseção
..............................
@end group
@end example

A saída @TeX{}, HTML, Docbook e XML é toda análoga à saída de nível de
capítulo, apenas ``três níveis abaixo''; @pxref{@code{@@chapter}}.


@node @code{@@part}
@section @code{@@part}: Grupos de Capítulos
@c Capítulo 5 - Nós; Seção 5.11 - @code{@@part}: Grupos de Capítulos
@findex part
@cindex Páginas Part

O comando de seccionamento final é o @code{@@part}, para marcar uma
@dfn{parte} de um manual, isto é, um grupo de capítulos ou (raramente)
apêndices. Isso se comporta bem diferentemente de outros comandos de
seccionamento, para se encaixar com a maneira que tais ``partes'' são
convencionalmente usadas em livros.

Nenhum comando @code{@@node} é associado com @code{@@part}. Apenas
escreva o comando em uma linha própria, incluindo o título da parte, no
lugar no documento que você desejar marcar como o início daquela parte.
Por exemplo:

@example
@@part Parte I:@@* O Início
@end example

Como pode ser inferido desse exemplo, nenhuma numeração ou rotulamento
automático do texto do @code{@@part} é feito. O texto é tomado como
está.

Por causa de as partes não serem associadas com nós, nenhum texto
geral pode seguir a linha @code{@@part}. Para produzir a saída
pretendida, a linha deve ser seguida por um comando de nível de
capítulo (incluindo seu nó). Assim, para continuar o exemplo:

@example
@@part Parte I:@@* O Início

@@node Introdução
@@chapter Introdução
...
@end example

Na saída @TeX{}, o texto @code{@@part} é incluído em ambos os índices,
o normal e o resumido, (@pxref{Conteúdo}), sem um número de página
(dado que é a convenção normal). Adicionalmente, uma ``página da parte''
é saída no corpo do documento, apenas contendo o texto @code{@@part}. No
exemplo acima, o @code{@@*} causa uma quebra de linha no página da parte
(porém, é substituída com um espaço no índice). Essa página da parte é
sempre forçada a estar em uma página ímpar (a direita),
independentemente da capitulação do capítulo
(@pxref{@code{@@setchapternewpage}}).

Na saída HTML, o texto @code{@@part} é similarmente incluído no índice,
e um cabeçalho é incluído no texto do documento principal, como parte do
nó do capítulo ou apêndice seguinte.

Na saída XML e Docbook, o elemento @code{<part>} inclui todos os
capítulos seguintes, até o próximo @code{<part>}. Um @code{<part>}
contendo capítulos também é fechado em um apêndice.

Na saída Info e texto plano, @code{@@part} não tem efeito.

@code{@@part} é ignorado quando do levantamento ou do abaixamento de
seções (veja a próxima seção). Isto é, nunca é abaixado e nada pode ser
levantado para ele.


@node Elevar/rebaixar seções
@section Elevar/rebaixar seções: @code{@@raisesections} e @code{@@lowersections}
@c Capítulo 5 - Nós; Seção 5.12 - Elevar/rebaixar seções: @code{@@raisesections} e @code{@@lowersections}
@findex raisesections
@findex lowersections
@cindex Elevando e rebaixando seções
@cindex Rebaixando e elevando seções
@cindex Seções, elevando e rebaixando

Os comandos @code{@@raisesections} e @code{@@lowersections}
implicitamente levantam e abaixam o nível hierárquico dos seguintes
capítulos, seções e dos outros comandos de seccionamento (excluindo as
partes).

Isto é, o comando @code{@@raisesections} modifica seções para capítulos,
subseções para seções, e assim por diante. Por outro lado, o comando
@code{@@lowersections} modifica capítulos para seções, seções para
subseções, e assim por diante. Assim, um comando @code{@@lowersections}
cancela um comando @code{@@raisesections}, e vice versa.

@cindex Arquivos de Inclusão, e níveis de seção
Você pode usar @code{@@lowersections} para incluir texto escrito como um
arquivo Texinfo externo ou autônomo em outro arquivo Texinfo como um
arquivo interno, arquivo included (@pxref{Arquivos de Inclusão}). O uso
típico se parece com isto:

@example
@@lowersections
@@include algum_arquivo.texi
@@raisesections
@end example

@noindent (Sem o @code{@@raisesections}, todas as seções subsequentes no
arquivo principal também poderiam ser rebaixadas).

Se o arquivo included sendo rebaixado tiver um nó @code{@@top}, você
precisará condicionar sua inclusão com um parâmetro
(@pxref{@code{@@set @@value}}).

De um ponto de vista prático, você geralmente só quer elevar ou rebaixar
grandes blocos, geralmente em arquivos externos, como mostrado acima. O
resultado final tem que ter menus que levem em conta a elevação e o
rebaixamento, de forma que você não pode simplesmente intercalar
arbitrariamente os comandos @code{@@raisesections} e
@code{@@lowersections} por todo o documento.

O uso repetido dos comandos continua a elevar ou a rebaixar o nível
hierárquico um passo de cada vez. Uma tentativa de elevar `capítulo'
acima reproduz comandos de capítulo; uma tentativa de rebaixar
`subsubseção' abaixo reproduz comandos subsubseção. Também, subsubseções
rebaixadas e capítulos elevados não funcionarão com a característica de
@command{makeinfo} de implicitamente determinar ponteiros de nó, dado
que a estrutura de menu não pode ser representada corretamente.

Escreva cada comando @code{@@raisesections} e @code{@@lowersections} em
uma linha própria.


@node Referências Cruzadas
@chapter Referências Cruzadas @c Capítulo 6
@cindex Fazendo referências cruzadas
@cindex Referências cruzadas
@cindex Referências

@dfn{Referências cruzadas} são usadas para guiar o(a) leitor(a) para outras
partes do mesmo ou de diferentes arquivos Texinfo.

@menu
* Referências::                  Para que são as referências cruzadas.
* Comandos de Referências Cruzadas::    Um sumário dos diferentes comandos.
* Partes de Referências Cruzadas::      Uma Referência Cruzada tem várias partes.
* @code{@@xref}::                       Inicie uma referência com `Veja' @dots{}
* Referenciando Um Manual Como Um Todo::   Referência a um manual inteiro.
* @code{@@ref}::                        Uma referência para a última parte de uma sentença.
* @code{@@pxref}::                      Como escrever uma Referência Cruzada entre parênteses.
* @code{@@anchor}::                     Definindo alvos de Referência Cruzada arbitrários.
* @code{@@inforef}::                    Como referenciar um arquivo somente Info.
* @code{@@url}::                        Como referenciar um Localizador Uniforme de Recursos.
* @code{@@cite}::                       Como referenciar livros que não estão no sistema Info.
@end menu


@node Referências
@section Para Que São As Referências Cruzadas
@c Capítulo 6 - Referências Cruzadas; Seção 6.1 - Para Que São As Referências Cruzadas

Frequentemente, porém nem sempre, um documento impresso deveria ser
projetado de forma que possa ser lido sequencialmente. As pessoas se
cansam de ir e vir para encontrar informações que deveriam ser
apresentadas a elas conforme necessário.

Entretanto, em qualquer documento, algumas informações estarão
detalhadas demais para o contexto atual, ou incidental; use referências
cruzadas para fornecer acesso a tais informações. Também, um sistema de
ajuda online ou um manual de referência não é como um romance; poucos
leem tais documentos em sequência do início ao final. Em vez disso, as
pessoas buscam o que precisam. Por essa razão, tais criações deveriam
conter muitas referências cruzadas para ajudar os leitores a achar outra
informação que eles podem não ter lido.

Em um manual impresso, uma referência cruzada resulta em uma referência
de página, a menos que seja para outro manual, caso no qual a referência
cruzada nomeia esse manual. Em Info, uma referência cruzada resulta em
uma entrada que você pode seguir usando o comando @samp{f}
(@xref{Help-Xref,, Following cross-references, info, Info}.). Em HTML,
uma referência cruzada resulta em um hiperlink.

Os vários comandos de referências cruzadas usam nós
(ou âncoras, @pxref{@code{@@anchor}}) para definir localizações de
referências cruzadas. @TeX{} precisa de nós para definir localizações
de referências cruzadas. Quando @TeX{} gera um arquivo DVI, grava cada
número de página do nó e usa os números de página na produção das
referências. Assim, mesmo que você esteja escrevendo um manual que será
somente impresso, e não usado online, você deve, ainda assim, escrever
linhas @code{@@node} para nomear os lugares para os quais você faz
referências cruzadas.

@need 800
@node Comandos de Referências Cruzadas
@section Diferentes Comandos de Referência Cruzada
@c Capítulo 6 - Referências Cruzadas; Seção 6.2 - Diferentes Comandos de Referência Cruzada
@cindex Diferentes comandos de referência cruzada

Existem três diferentes comandos de referência cruzada:

@table @code
@item @@xref
Usado para iniciar uma frase no manual impresso e em HTML com
@w{`Veja @dots{}'} ou uma referência cruzada Info dizendo
@samp{*Nota @var{name}: @var{node}.}.

@item @@ref
Usado dentro de, ou mais frequentemente, ao final de uma frase; produz
apenas a referência no manual impresso e em HTML, sem ser precedida por
`Veja' (mesmo que @code{@@xref} para Info).

@item @@pxref
Usado dentro de parênteses, ao final de uma frase, ou, do contrário,
antes de pontuação, para fazer uma referência. Sua saída inicia com um
`veja' escrito com letras todas minúsculas no manual impresso e em HTML,
e um @samp{*nota} também escrito com letras todas minúsculas em Info.
(@samp{p} é para `parênteses').
@end table

Adicionalmente, existem comandos que produzem referências a documentos
fora do sistema Texinfo. O comando @code{@@cite} é usado para fazer
referências a livros e manuais. @code{@@url} produz um @acronym{URL},
por exemplo, uma referência a uma página na Rede Mundial de
Computadores. @code{@@inforef} é usado para fazer uma referência a um
arquivo Info para o qual não existe manual impresso.


@node Partes de Referências Cruzadas
@section Partes de Uma Referência Cruzada
@c Capítulo 6 - Referências Cruzadas; Seção 6.3 - Partes de Uma Referência Cruzada
@cindex Partes da referência cruzada
@cindex Partes de uma referência cruzada
@anchor{Sintaxe de Referência} @c nó mesclado

Um comando de referência cruzada exige apenas um argumento, o qual é o
nome do nó para o qual se refere. Aqui está um exemplo simples:

@example
@@xref@{Nome do nó@}.
@end example

@noindent
Em saída Info, isso produz

@example
*Nota Nome do nó::.
@end example

@noindent
Em um manual impresso, a saída é

@quotation
Veja Seção @var{nnn} [Nome do nó], página @var{ppp}.
@end quotation

Um comando de referência cruzada pode conter até quatro argumentos
adicionais. Usando esses argumentos, você pode fornecer um nome de
referência cruzada, uma descrição de tópico ou título de seção para a
saída impressa, o nome de um arquivo diferente de manual e o nome de um
manual diferente impresso. Para se referir a outro manual como um todo,
o arquivo de manual e/ou o nome do manual impresso são os únicos
argumentos exigidos (@pxref{Referenciando Um Manual Como Um Todo}).

@need 700
Aqui está um exemplo de uma referência cruzada completa de cinco partes:

@example
@group
@@xref@{Nome do nó, Rótulo Online, Rótulo Impresso,
nome-arquivo-info, Um Manual Impresso@}, para detalhes.
@end group
@end example

@noindent
o qual produz

@example
*Nota Rótulo Online: (nome-arquivo-info)Nome do nó,
para detalhes.
@end example

@noindent
em Info e

@quotation
Veja seção ``Rótulo Impresso'' em @i{Um Manual Impresso}, para detalhes.
@end quotation

@noindent
em um livro impresso.

Os cinco argumentos possíveis para uma referência cruzada são:

@enumerate
@item
O nome do nó ou âncora (exigido, exceto para referência a manuais
inteiros). Isso é a localização para onde a referência cruzada leva
você. Em um documento impresso, a localização do nó fornece a
referência de página apenas para referências dentro do mesmo documento.
Use @code{@@node} para definir o nó (@pxref{Escrevendo um Nó}), ou
@code{@@anchor} (@pxref{@code{@@anchor}}).

Escreva um nome de nó em uma referência cruzada exatamente da mesma
maneira que na linha @code{@@node}, incluindo a mesma capitalização; do
contrário, os formatadores podem não encontrar a referência.

@item
Um rótulo para saída online. Ele geralmente é omitido; então a descrição
do tópico (terceiro argumento) é usado foi especificado; se também foi
omitido, o nome do nó é usado.

@item
Um rótulo para saída impressa. Frequentemente, isso é o título ou tópico
da seção. Isso é usado como o nome da referência no manual impresso. Se
omitido, o nome do nó é usado.

@item
O nome do arquivo de manual no qual a referência está localizada, se for
diferente o arquivo atual. Esse nome é usado por Info e por HTML.

@item
O nome de um manual impresso oriundo de um diferente arquivo Texinfo.
@end enumerate

O modelo para uma referência cruzada de cinco argumentos completa é
semelhante a este

@example
@group
@@xref@{@var{nome-do-nó}, @var{rótulo-online}, @var{rótulo-impresso},
@var{nome-arquivo-info}, @var{título-manual-impresso}@}
@end group
@end example

Espaços em branco antes ou depois das vírgulas separando esses
argumentos são ignorados. Para incluir uma vírgula em um dos argumentos,
use @code{@@comma@{@}} (@pxref{Inserindo Uma Vírgula}).

@cindex Vírgula depois de referência cruzada
Quando do processamento com TeX, uma vírgula é automaticamente inserida
após o número da página para referências cruzadas para dentro do mesmo
manual, a menos que a chave de fechamento do argumento seja seguida por
espaços não brancos (como uma vírgula ou um ponto). Isso lhe dá opção de
ter uma vírgula lá na saída Info ou HTML. Por exemplo,

@example
@@xref@{Outra Seção@} para mais informação
@end example

@noindent produz
@w{`Veja Outra Seção, página @var{ppp}, para mais informação'} na saída
impressa, e
@w{@samp{*Nota Outra Seção:: para mais informação}} na saída Info.

Se uma vírgula indesejada for adicionada, siga o argumento com um
comando como @samp{@@:}. Por exemplo,
@w{@samp{@@xref@{Furacões@}@@: --- para os detalhes}} produz

@quotation
Veja Furacões, página @var{ppp} --- para os detalhes
@end quotation

@noindent em vez de
@w{`Veja Furacões, página @var{ppp}, --- para os detalhes'}.

Referências cruzados com um, dois, três quatro e cinco argumentos estão
descritas separadamente seguindo a descrição de @code{@@xref}.

@command{makeinfo} alerta quando o texto de uma referência cruzada (e
nomes de nó e itens de menu) contém uma construção problemática que
interferirá com sua análise em Info. Se você não deseja ver tais
alertas, você pode configurar a variável de personalização
@code{INFO_SPECIAL_CHARS_WARNING} para @samp{0}
(@pxref{Outras Variáveis de Personalização}).


@node @code{@@xref}
@section @code{@@xref}
@c Capítulo 6 - Referências Cruzadas; Seção 6.4 - @code{@@xref}

@anchor{xref}@c nome antigo
@findex xref
@cindex Referências cruzadas usando @code{@@xref}
@cindex Referências usando @code{@@xref}

O comando @code{@@xref} gera uma referência cruzada para o início de uma
frase.

@menu
* Um Argumento::                @code{@@xref} com um argumento.
* Dois Argumentos::             @code{@@xref} com dois argumentos.
* Três Argumentos::             @code{@@xref} com três argumentos.
* Quatro e Cinco Argumentos::   @code{@@xref} com quatro e cinco
                                argumentos.
@end menu

@node Um Argumento
@subsection @code{@@xref} com Um Argumento
@cindex Forma de um argumento das referências cruzadas

A forma mais simples do @code{@@xref} pega um argumento, o nome de outro
nó no mesmo arquivo Texinfo.

@need 700
@noindent
Por exemplo,

@example
@@xref@{Tempestades Tropicais@}.
@end example

@noindent
produz

@example
*Nota Tempestades Tropicais::.
@end example

@noindent
em Info e

@quotation
Veja Seção 3.1 [Tempestades Tropicais], página 24.
@end quotation

@noindent
em um manual impresso.


@node Dois Argumentos
@subsection @code{@@xref} com Dois Argumentos
@cindex Forma de dois argumentos das referências cruzadas

Com dois argumentos, o segundo é usado como um rótulo para a saída
online.

@need 750
@noindent
O modelo é semelhante a isto:

@example
@@xref@{@var{nome-nó}, @var{rótulo-online}@}.
@end example

@need 700
@noindent
Por exemplo,

@example
@@xref@{Efeitos Elétricos, Relâmpago@}.
@end example

@noindent
produz:

@example
*Nota Relâmpago: Efeitos Elétricos.
@end example

@noindent
em Info e

@quotation
Veja Seção 5.2 [Efeitos Elétricos], página 57.
@end quotation

@noindent
em um manual impresso, onde o nome do nó é impresso.

O segundo argumento para referências cruzadas deve observar algumas das
restrições para nomes de nó (@pxref{Exigências de Linha de Nó}). O
problema mais comum é que dois pontos não podem ser usados, pois isso
interfere na análise do arquivo Info.

@node Três Argumentos
@subsection @code{@@xref} com Três Argumentos
@cindex Forma de três argumentos das referências cruzadas

Um terceiro argumento substitui o nome de nó na saída @TeX{}. O
terceiro argumento deveria ser o nome da seção na saída impressa, ou,
pelo contrário, indicar o tópico debatido pela aquela seção.

@need 750
@noindent
O modelo é semelhante a isto:

@example
@group
@@xref@{@var{nome-nó}, @var{rótulo-online}, @var{rótulo-impresso}@}.
@end group
@end example

@need 700
@noindent
Por exemplo,

@example
@group
@@xref@{Efeitos Elétricos, Relâmpago, Trovão e Relâmpago@}, para
detalhes.
@end group
@end example

@noindent
produz:

@example
*Nota Relâmpago: Efeitos Elétricos, para detalhes.
@end example

@noindent
em Info e

@quotation
Veja Seção 5.2 [Trovão e Relâmpago], página 57, para detalhes.
@end quotation

@noindent
em um manual impresso.

Se um terceiro argumento for dado e o segundo estiver vazio, então e
terceiro argumento serve a ambos. (Note como duas vírgulas, lado a lado,
marcam o segundo argumento vazio).

@example
@group
@@xref@{Efeitos Elétricos, , Trovão e Relâmpago@}, para detalhes.
@end group
@end example

@noindent
produz:

@example
*Nota Trovão e Relâmpago: Efeitos Elétricos, para detalhes.
@end example

@noindent
em Info e

@quotation
Veja Seção 5.2 [Trovão e Relâmpago], página 57, para detalhes.
@end quotation

@noindent
em um manual impresso.

O terceiro argumento para referências cruzadas deve observar algumas das
restrições para nomes de nó (@pxref{Exigências de Linha de Nó}). O
problema mais comum é que dois pontos não podem ser usados, pois isso
interfere na análise do arquivo Info.

De um ponto de vista prático, geralmente é melhor escrever referências
cruzadas apenas com o primeiro argumento se o nome do nó e o título da
seção forem iguais (ou quase), e com o primeiro e terceiro
argumentos somente se o nome de nó e título forem diferentes.

@findex xrefautomaticsectiontitle
Texinfo oferece uma configuração para usar o título da seção em vez dos
nomes de nó por padrão em referências cruzadas (um terceiro argumento
explicitamente especificado ainda tem precedência):

@example
@@xrefautomaticsectiontitle on
@end example

Tipicamente essa linha deveria ser dada próxima do início do documento e
usada para o manual inteiro. Porém, você pode desativá-la se você
desejar (@code{@@xrefautomaticsectiontitle off}), por exemplo, se você
estiver incluindo algum outro subdocumento que não tenha nomes de seção
adequados.


@node Quatro e Cinco Argumentos
@subsection @code{@@xref} com Quatro e Cinco Argumentos
@cindex Formas de quatro e cinco argumentos das referências cruzadas

Em uma referência cruzada, um quarto argumento especifica o nome de
outro arquivo Info, diferente do arquivo no qual a referência aparece, e
um quinto argumento especifica seu título como um manual impresso.

@need 800
@noindent
O modelo completo é:

@example
@group
@@xref@{@var{nome-nó}, @var{rótulo-online}, @var{rótulo-impresso},
@var{nome-arquivo-info}, @var{título-manual-impresso}@}.
@end group
@end example

@need 700
@noindent
Por exemplo,

@example
@@xref@{Efeitos Elétricos, Relâmpago, Trovão e Relâmpago, clima, Uma
Introdução à Meteorologia@}.
@end example

@noindent
produz esta saída em Info:

@example
*Nota Relâmpago: (clima)Efeitos Elétricos.
@end example

@noindent
Como você pode ver, o nome do arquivo Info está entre parênteses e
precede o nome do nó.

@noindent
Em um manual impresso, a referência se parece com isto:

@quotation
Veja seção ``Trovão e Relâmpago'' em @cite{Uma Introdução à
Meteorologia}.
@end quotation

@noindent
O título do manual impresso é digitado como @code{@@cite}; e a
referência não possui um número de página, pois @TeX{} não tem como
saber para qual página uma referência se refere quando essa referência é
para outro manual.

Próximo caso: frequentemente você deixará de fora o segundo argumento
quando usar a versão longa de @code{@@xref}. Nesse caso, o terceiro
argumento, a descrição do tópico, será usada como o nome da referência
cruzada em Info. Por exemplo,

@example
@@xref@{Efeitos Elétricos, , Trovão e Relâmpago, clima, Uma Introdução à
Meteorologia@}.
@end example

@noindent
produz:

@example
@group
*Nota Trovão e Relâmpago: (clima)Efeitos Elétricos.
@end group
@end example

@noindent
em Info e

@quotation
Veja seção ``Trovão e Relâmpago'' in @cite{Uma Introdução à
Meteorologia}.
@end quotation

@noindent
em um manual impresso.


Próximo caso: se o nome do nó e o título de seção forem iguais no
outro manual, você também pode deixar de fora o título da seção. Nesse
caso, o nome de nó é usado em ambas as instâncias. Por exemplo,

@example
@@xref@{Efeitos Elétricos,,, clima, Uma Introdução à Meteorologia@}.
@end example

@noindent
produz:

@example
@group
*Nota (clima)Efeitos Elétricos::.
@end group
@end example

@noindent
em Info e

@quotation
Veja seção ``Efeitos Elétricos'' em @cite{Uma Introdução à Meteorologia}.
@end quotation

@noindent
em um manual impresso.

Um caso muito incomum: você pode querer se referir a outro arquivo de
manual que esteja dentro de um manual impresso único---quando
múltiplos arquivos Texinfo são incorporados à mesma execução de @TeX{},
porém pode criar arquivos de saída Info ou HTML separados. Nesse caso,
você precisa especificar apenas o quarto argumento e não o quinto.

Finalmente, também é permitido deixar de fora todos os argumentos,
@emph{exceto} o quarto e quinto, para referenciar outro manual como um
todo. Veja a próxima seção.

@node Referenciando Um Manual Como Um Todo
@section Referenciando Um Manual Como Um Todo
@c Capítulo 6 - Referências Cruzadas; Seção 6.5 - Referenciando Um Manual Como Um Todo
@cindex Manual, referenciando como um todo
@cindex Referenciando a um manual inteiro
@anchor{Nomeação do Nó Top} @c nome antigo

Normalmente, você sempre deve nomear um nó em uma referência
cruzada. Entretanto, não é incomum querer referenciar outro manual como
um todo, em vez de uma seção em particular dentro dele. Nesse caso, dar
qualquer nome de seção é uma distração desnecessária.

Assim, com referências cruzadas a outros manuais
(@pxref{Quatro e Cinco Argumentos}), se o primeiro argumento for ou
@samp{Top} (escrito com a primeira letra maiúscula) ou inteiramente
omitido, e o terceiro argumento for omitido, a saída impressa não inclui
nome de nó ou seção. (A saída Info inclui @samp{Top} se foi dado). Por
exemplo,

@example
@@xref@{Top,,, make, O Manual do GNU Make@}.
@end example

@noindent
produz:

@example
@group
*Nota (make)Top::.
@end group
@end example

@noindent
e

@quotation
Veja @cite{O Manual do GNU Make}.
@end quotation

@noindent
Os leitores Info irão para o nó Top do manual se o nó `Top' for
explicitamente especificado ou não.

Também é possível (e é prática histórica) referenciar uma manual inteiro
especificando-se o nó `Top' e uma entrada apropriada para o terceiro
argumento ao comando @code{@@xref}. Usando esse idioma, para fazer uma
referência cruzada para o @cite{O Manual do GNU Make}, você poderia
escrever:

@example
@@xref@{Top,, Visão Geral, make, O Manual do GNU Make@}.
@end example

@noindent
o qual produz:

@example
*Nota Visão Geral: (make)Top.
@end example

@noindent
em Info e

@quotation
Veja seção ``Visão Geral'' in @cite{O Manual do GNU Make}.
@end quotation

@noindent
em um manual impresso.

Nesse exemplo, @samp{Top} é o nome do primeiro nó e @samp{Visão Geral}
é o nome da primeira seção do manual. Não existe convenção amplamente
usada para nomear a primeira seção em um manual impresso; isso é apenas
o que o manual do Make usa. Essa arbitrariedade do primeiro nome é a
razão principal pela qual é preferível omitir o terceiro argumento em
referências cruzadas de manual inteiro.


@node @code{@@ref}
@section @code{@@ref}
@c Capítulo 6 - Referências Cruzadas; Seção 6.6 - @ref

@anchor{ref} @c nome antigo
@findex ref
@cindex Referências cruzadas usando @code{@@ref}
@cindex Referências usando @code{@@ref}

@code{@@ref} é aproximadamente o mesmo que @code{@@xref}, exceto que não
gera um `Veja' na saída impressa, apenas a própria referência. Isso a
torna útil como a última parte de uma frase.

@noindent
Por exemplo,

@cindex Furacões
@example
Para mais informação, @@pxref@{Isso@}, e @@ref@{Aquilo@}.
@end example

@noindent
produz em Info:

@example
Para mais informação, *nota Isso::, e *nota Aquilo::.
@end example

@noindent
e em saída impressa:

@quotation
Para mais informação, veja Seção 1.1 [Isso], página 1, e Seção 1.2
[Aquilo], página 2.
@end quotation

O comando @code{@@ref} pode instigar os escritores a se expressarem de
uma maneira que seja adequada para um manual impresso, porém parecerem
estranhos no formato Info. Tenha em mente que seu público pode estar
usando tanto o formato impresso quanto o Info. Por exemplo:

@cindex Ondas do mar
@example
Os surtos de mar estão descritos na @@ref@{Furacões@}.
@end example

@noindent
aparenta ok na saída impressa:

@quotation
Os surtos de mar estão descritos na Seção 6.7 [Furacões], página 72.
@end quotation

@noindent
porém, é estranho ler em Info, ``nota'' sendo um verbo:

@example
Os surtos de mar estão descritos na *nota Furacões::.
@end example


@node @code{@@pxref}
@section @code{@@pxref}
@c Capítulo 6 - Referências Cruzadas; Seção 6.7 - @pxref

@anchor{pxref} @c nome antigo
@findex pxref
@cindex Referências cruzadas usando @code{@@pxref}
@cindex Referências usando @code{@@pxref}

O comando de referência entre parênteses, @code{@@pxref}, é
aproximadamente o mesmo que @code{@@xref}, porém é melhor usado no final
de uma frase ou antes de um parêntese de fechamento. O comando difere do
@code{@@xref} em que @TeX{} digita a referência para o manual impresso
com um `veja' escrito em letras minúsculas em vez de `Veja' escrito com
a primeira letra maiúscula.

@noindent
Com um argumento, uma referência cruzada entre parênteses se parece com
isto:

@cindex Inundação
@example
@dots{} tempestades causam inundações (@@pxref@{Furacões@}) @dots{}
@end example

@need 800
@noindent
o qual produz:

@example
@group
@dots{} tempestades causam inundações (*nota Furacões::) @dots{}
@end group
@end example

@noindent
em Info e

@quotation
@dots{} tempestades causam inundações (veja Seção 6.7 [Furacões], página
72) @dots{}
@end quotation

@noindent
em um manual impresso.

Sem argumentos, uma referência cruzada entre parênteses tem este modelo:

@example
@dots{} (@@pxref@{@var{nome-nó}, @var{nome-referência-cruzada}@})
@dots{}
@end example

@noindent
o qual produz

@example
@dots{} (*nota @var{nome-referência-cruzada}: @var{nome-nó}.) @dots{}
@end example

@noindent
em Info e

@quotation
@dots{} (veja Seção @var{nnn} [@var{nome-nó}], página @var{ppp})
@dots{}
@end quotation

@noindent
em um manual impresso.

@code{@@pxref} pode ser usado com até cinco argumentos, exatamente como
@code{@@xref} (@pxref{@code{@@xref}}).

Em versões antigas de Texinfo, não era permitido escrever pontuação após
um @code{@@pxref}, de forma que o comando poderia ser usado
@emph{somente} antes de um parêntese de fechamento. Esse não mais é o
caso, de forma que agora o comando pode ser usado (por exemplo) no final
de uma frase, onde um ``'veja' escrito com letras minúsculas funciona
melhor. Por exemplo:

@example
@dots{} Para mais informação, @@pxref@{Mais@}.
@end example

@noindent
o qual tem a seguinte saída (em Info):

@example
@dots{} Para mais informação, *nota Mais::.
@end example

Por uma questão de estilo, @code{@@pxref} é mais usado nos finais de
frase. Embora tecnicamente o comando funcione no meio de uma frase, essa
localização interrompe o fluxo de leitura.

@node @code{@@anchor}
@section @code{@@anchor}: Definindo Alvos Arbitrários de Referências Cruzadas
@c Capítulo 6 - Referências Cruzadas;
@c Seção 6.8 - @code{@@anchor}: Definindo Alvos Arbitrários de Referências Cruzadas

@anchor{anchor} @c nome antigo
@findex anchor
@cindex Âncoras
@cindex Alvos das referências cruzadas, arbitrários
@cindex Alvos para referências cruzadas, arbitrários

Uma @dfn{âncora} é uma posição no teu documento, rotulada de forma que
referências cruzadas possam referenciá-la, exatamente como podem a
nós. Você cria uma âncora com o comando @code{@@anchor}, e dá o rótulo
como um argumento normal delimitado por chaves. Por exemplo:

@example
Isso marca o ponto @@anchor@{x-spot@}.
@dots{}
@@xref@{x-spot,,o ponto@}.
@end example

@noindent
produz:

@example
Isso marca o ponto.
@dots{}
Veja [o ponto], página 1.
@end example

Como você pode ver, o próprio comando @code{@@anchor} não produz saída.
Esse exemplo define uma âncora `x-spot' exatamente antes da palavra
`ponto'. Você referenciá-la depois com um @code{@@xref} ou outro comando
de referência cruzada, conforme mostrado (@pxref{Referências Cruzadas}).

É melhor colocar os comandos @code{@@anchor} exatamente antes da posição
de que deseja referenciar; dessa maneira o olho do(a) leitor(a) é guiado ao
texto correto quando pular para a âncora. Você pode colocar o comando
@code{@@anchor} em uma linha própria se isso ajudar a legibilidade do
fonte. Espaços em branco (incluindo novas linhas) são ignorados após
@code{@@anchor}.

Os nomes de âncora e os nomes de nós não podem conflitar. Às âncoras e
aos nós são dados tratamento similar de algumas maneiras; por exemplo,
o comando @code{goto-node} recebe ou um nome de âncora ou um nome de
nó como argumento. (@xref{Ir para o nó,,, info, Info}).

Também, como nomes de nó, os nomes de âncora não podem incluir alguns
caracteres (@pxref{Exigências de Linha de Nó}).

@cindex Nós, deletando ou renomeando
Por causa dessa dualidade, quando você deleta ou renomeia um nó,
geralmente é uma boa ideia definir um @code{@@anchor} com o nome antigo.
Dessa maneira, quaisquer vínculos ao nó antigo, seja originários de
outros manuais Texinfo ou páginas web em geral, continuam funcionando.
Você também pode fazer isso com a característica
@file{RENAMED_NODES_FILE} do @command{makeinfo}
(@pxref{Preservação de Link Xref do HTML}). Ambos os métodos mantém
links na web funcionando; a única diferença substantiva é que a
definição de âncoras também torna os nomes de nó antigos acessíveis
quando da leitura do documento em Info.

@node @code{@@inforef}
@section @code{@@inforef}: Referências cruzadas para material unicamente Info
@c Capítulo 6 - Referências Cruzadas;
@c Seção 6.9 - @code{@@inforef}: Referências cruzadas para material unicamente Info

@anchor{inforef} @c nome antigo
@findex inforef
@cindex Referências cruzadas usando @code{@@inforef}
@cindex Referências usando @code{@@inforef}

@code{@@inforef} é usado para fazer referências cruzadas para documentos
Info---mesmo a partir de um manual impresso. Isso pode ser porque você
quer referenciar um texto condicional @code{@@ifinfo}
(@pxref{Condicionais}), ou porque a saída impressa não está acessível
(talvez porque não exista um fonte Texinfo), entre outras
possibilidades.

O comando recebe ou dois ou três argumentos, na seguinte ordem:

@enumerate
@item
O nome do nó.

@item
O nome da referência cruzada (opcional).

@item
O nome do arquivo Info.
@end enumerate

@noindent
O modelo é:

@example
@@inforef@{@var{nome-nó}, @var{nome-referência-cruzada}, @var{nome-arquivo-info}@}
@end example

@need 800
@noindent
Por exemplo,

@example
@group
@@inforef@{Avançado, Comandos Info avançados, info@},
para mais informação.
@end group
@end example

@need 800
@noindent
produz (em Info):

@example
@group
*Nota Comandos Info avançados: (info)Avançado,
para mais informação.
@end group
@end example

@need 800
@noindent
e (na saída impressa):

@quotation
Veja arquivo Info @file{info}, nó @samp{Avançado}, para mais
informação.
@end quotation

(Esse exemplo em particular não é realístico, dado que o manual Info é
escrito em Texinfo, de forma que todos os formatos estão disponíveis. Na
verdade, não se sabe de nenhum manual existente unicamente Info).

O inverso de @code{@@inforef} é @code{@@cite}, que é usado para se
referir a trabalhos impressos para os quais não existe uma forma Info.
@xref{@code{@@cite}}.

@node @code{@@url}
@section @code{@@url}, @code{@@uref@{@var{url}[, @var{texto}][, @var{substituição}]@}}
@c Capítulo 6 - Referências Cruzadas;
@c Seção 6.10 - @url, @uref{url[, texto][, substituição]}

@anchor{uref} @c nome antigo
@findex uref
@cindex Localizador Uniforme de Recursos, referenciando a
@cindex URL, referenciando a

@cindex @code{href}, produzindo HTML
@code{@@uref} produz uma referência a um Localizador Uniforme de
Recursos (URL). O comando recebe um argumento obrigatório, a URL, e dois
argumentos opcionais que controlam o texto que é exibido. Em saída HTML
e PDF, @code{@@uref} produz um link que você pode seguir. (Para
meramente indicar uma URL sem criar um link que as pessoas possam
seguir, use @code{@@indicateurl}, @pxref{@code{@@indicateurl}}).

@findex url
@anchor{url}
@code{@@url} é um sinônimo para @code{@@uref}. (Originalmente,
@code{@@url} tinha o significado de @code{@@indicateurl}, porém, na
prática, era quase sempre mal usado. Então, mudou-se o significado).
O segundo argumento, se especificado, é o texto a exibir (o padrão é a
própria URL); em saída Info, DVI e PDF, porém não em saída HTML, a URL é
exibida adicionalmente a esse texto.

@cindex Página de Manual, referência a
O terceiro argumento, se especificado, é o texto a exibir, mas, nesse
caso, a URL não é exibida em qualquer formato de saída. Isso é útil
quando o texto já está suficientemente referencial, como em uma página
de manual. Também, se o terceiro argumento for dado, o segundo argumento
é ignorado.

@menu
* Exemplos @code{@@url}::           Exemplos do uso de todas as formas do @code{@@url}.
* Quebra de Linha de URL::       Como as linhas são quebradas dentro do texto do @code{@@url}.
* Formato de Saída PDF @code{@@url}::  Uma opção especial para ocultar links na saída PDF.
* Cores do PDF::              Colorindo URLs e outros links na saída PDF.
@end menu

@node Exemplos @code{@@url}
@subsection Exemplos @code{@@url}
@c Capítulo 6 - Referências Cruzadas;
@c Seção 6.10 - @code{@@url}, @code{@@uref@{@var{url}[, @var{text}][, @var{replacement}]@}}
@c Subseção 6.10.1 - Exemplos @code{@@url}

@cindex @code{@@url}, exemplos de uso
@cindex URL, exemplos de exibição

Primeiro, aqui está um exemplo da forma mais simples de @code{@@url},
com apenas um argumento. A URL dada é tanto o alvo quanto o texto
visível do link:

@example
O site ftp oficial do projeto GNU é @@uref@{http://ftp.gnu.org/gnu@}.
@end example

@noindent
produz:
@display
O site ftp oficial do projeto GNU é @uref{http://ftp.gnu.org/gnu}.
@end display

@subsubheading Forma de dois argumentos de @code{@@url}

Aqui está um exemplo da forma de dois argumentos:
@example
O @@uref@{http://ftp.gnu.org/gnu, site ftp oficial do projeto GNU@}
contém programas e textos.
@end example

@noindent
o que produz:
@display
O @uref{http://ftp.gnu.org/gnu, site ftp oficial do projeto GNU} contém
programas e textos.
@end display

@noindent
isto é, a saída Info (e @TeX{}, etc.)@: é esta:
@example
O site ftp oficial do projeto GNU (http://ftp.gnu.org/gnu) contém
programas e textos.
@end example

@noindent
enquanto que a saída HTML é esta:
@example
O <a href="http://ftp.gnu.org/gnu">O site ftp oficial do projeto GNU</a>
contém programas e textos.
@end example

@subsubheading Forma de três argumentos de @code{@@url}

Finalmente, um exemplo da forma de três argumentos:
@example
O programa @@uref@{/man.cgi/1/ls,,ls@} @dots{}
@end example

@noindent
o qual, exceto para HTML, produz:
@display
O programa @uref{/man.cgi/1/ls,,ls} @dots{}
@end display

@noindent
porém, com HTML:
@example
O programa <a href="/man.cgi/1/ls">ls</a> @dots{}
@end example


A propósito, algumas pessoas preferem exibir URLs no inequívoco formato:

@display
<URL:http://@var{host}/@var{path}>
@end display

@noindent
@cindex @code{<URL...>} convenção, não usada
Você pode usar essa forma no arquivo de entrada de desejar. Sentimos que
não é necessário incluir o @samp{<URL:} e @samp{>} na saída, dado que,
para ser útil, qualquer software que tente detectar URLs em texto já tem
de detectá-las sem o @samp{<URL:}.


@node Quebra de Linha de URL
@subsection Quebra de Linha de URL
@c Capítulo 6 - Referências Cruzadas;
@c Seção 6.10 - @code{@@url}, @code{@@uref@{@var{url}[, @var{text}][, @var{replacement}]@}}
@c Subseção 6.10.2 - Quebra de Linha de URL

@cindex Quebra de linha, e URLs
@cindex Pontos de interrupção dentro de URLs
@TeX{} permite quebra de linha dentro de URLs com apenas alguns
caracteres (os quais são especiais em URLs): @samp{&}, @samp{.},
@samp{#}, @samp{?}, e @samp{/}, (mas não entre dois caracteres
@samp{/}). Uma pequena quantidade de espaço elástico também é inserida
em torno desses caracteres para ajudar na quebra de linha.

Para saída HTML, os navegadores de Internet modernos também fazem quebra
de linha dentro das URLs exibidas. Se você precisar permitir quebras em
outros caracteres, você pode inserir @code{@@/} conforme necessário
(@pxref{Quebras de Linha}).

@findex estilo de quebra uref
@findex uref, estilo de quebra
Por padrão, em @TeX{}, quaisquer de tais quebras em caracteres especiais
ocorrerão após o caractere. Algumas pessoas preferem que tais quebras
aconteçam antes do caractere especial. Isso pode ser controlado com o
comando @code{@@urefbreakstyle} (esse comando tem efeito somente em
@TeX{}):

@example
@@urefbreakstyle @var{como}
@end example

@noindent
onde o argumento @var{como} é uma destas palavras:

@vindex after@r{, valor para @code{@@urefbreakstyle}}
@vindex before@r{, valor para @code{@@urefbreakstyle}}
@vindex none@r{, valor para @code{@@urefbreakstyle}}
@table @samp
@item after
(O padrão). Potencialmente quebra após os caracteres especiais.
@item before
Potencialmente quebra antes dos caracteres especiais.
@item none
Não considera a quebra em caracteres especiais em absoluto; quaisquer
quebras potenciais devem ser inseridas manualmente.
@end table


@node Formato de Saída PDF @code{@@url}
@subsection @code{@@url} Formato de Saída PDF
@c Capítulo 6 - Referências Cruzadas;
@c Seção 6.10 - @code{@@url}, @code{@@uref@{@var{url}[, @var{text}][, @var{replacement}]@}}
@c Subseção 6.10.3 - @code{@@url} Formato de Saída PDF

@cindex Saída PDF de URLs
@cindex URLs, saída PDF de
Se o propósito final de um PDF é apenas para ser visto online, talvez
similar a HTML de alguma maneira incipiente, você pode não querer que as
URLs sejam incluídas no texto visível (exatamente como as URLs não são
visíveis a leitores de páginas da web). Texinfo provê uma opção
específica de PDF para isso, a qual deve ser usado dentro de
@code{@@tex}:

@findex \urefurlonlylinktrue
@example
@@tex
\global\urefurlonlylinktrue
@@end tex
@end example

O resultado é que @code{@@url@{http://www.gnu.org, GNU@}} tem a saída
visível de apenas `GNU', com um alvo de link de
@url{http://www.gnu.org}. Normalmente, a saída visível incluiria tanto o
rótulo quanto a URL: `GNU (@url{http://www.gnu.org})'.

Essa opção somente tem efeito quando a saída PDF é produzida com o
programa pdf@TeX{}, não com outras maneiras de obter de Texinfo para PDF
(por exemplo, @TeX{} para DVI para PDF)@.  Consequentemente, está certo
especificar essa opção incondicionalmente dentro de @code{@@tex},
conforme mostrado acima. A opção é ignorada quando DVI está sendo
produzido.


@node Cores do PDF
@subsection Cores do PDF
@c Capítulo 6 - Referências Cruzadas;
@c Seção 6.10 - @code{@@url}, @code{@@uref@{@var{url}[, @var{text}][, @var{replacement}]@}}
@c Subseção 6.10.4 - Cores do PDF

@cindex Links coloridos, em saída PDF
@cindex Links, colorindo em saída PDF
@cindex URLs, colorindo em saída PDF

Por padrão, links de URLs e de referências cruzadas são impressos em
preto em saída PDF. Muito ocasionalmente, entretanto, você pode querer
destacar tais links ``vivos'' com uma cor diferente, como é feito
comumente em páginas da web. Texinfo prove uma opção específica de PDF
para especificar tais cores, a qual deve ser usada dentro de
@code{@@tex}:

@findex \linkcolor
@findex \urlcolor
@example
@@tex
\global\def\linkcolor@{1 0 0@}  % vermelha
\global\def\urlcolor@{0 1 0@}   % verde
@@end tex
@end example

@code{\urlcolor} muda a cor da saída @code{@@url} (tanto a URL atual,
quanto qualquer rótulo textual), ao passo que @code{\linkcolor} muda a
cor para referências cruzadas para nós, etc. As opções são
independentes.

@cindex especificação de cor RGB
Os três valores dados devem ser números entre 0 e 1, especificando a
quantidade de vermelho, verde e azul, respectivamente.

Essas definições somente tem efeito quando a saída PDF é produzida com o
programa pdf@TeX{}, não com outros meio de obter de Texinfo para PDF
(por exemplo, @TeX{} para DVI para PDF)@. Consequentemente, está certo
especificar essa opção incondicionalmente dentro de @code{@@tex},
conforme mostrado acima. A opção é ignorada quando DVI está sendo
produzido.

Não recomendamos colorir apenas por diversão; a menos que você tenha um
motivo específico para usar cores, melhor ignorá-las.


@node @code{@@cite}
@section @code{@@cite}@{@var{referência}@}
@c Capítulo 6 - Referências Cruzadas;
@c Seção 6.11 - @code{@@cite}@{@var{referência}@}

@anchor{cite} @c nome antigo
@findex cite

Use o comando @code{@@cite} para o nome de um livro que não tenha um
arquivo complementar Info. O comando produz itálicos no manual impresso
e aspas no arquivo Info.

Se um livro for escrito em Texinfo, é melhor usar um comando de
referência cruzada dado que um leitor pode facilmente seguir tal
referência em Info. @xref{@code{@@xref}}.


@node Marcando Texto
@chapter Marcação de Texto, Palavras e Frases
@cindex Parágrafo, marcando texto dentro
@cindex Marcando palavras e frases
@cindex Palavras e frases, marcando-as
@cindex Marcando texto dentro de um parágrafo
@cindex Texto, marcando
@c Capítulo 7 - Marcação de Texto, Palavras e Frases

Em Texinfo, você pode marcar palavras e frases de várias formas. Os
formatadores Texinfo usam essa informação para determinar como destacar
o texto. Você pode especificar, por exemplo, quando uma palavra ou frase
é uma ocorrência definidora, uma variável metassintática ou um símbolo
usado em um programa. Além disso, você pode enfatizar o texto, de
diferentes maneiras.

@menu
* Indicando::                  Como indicar definições, arquivos, etc.
* Ênfase::                    Como enfatizar texto.
@end menu


@node Indicando
@section Indicando Definições, Comandos, etc.
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.

@cindex Destacando texto
@cindex Realçando texto
@cindex Indicando comandos, definições, etc.

Texinfo tem comandos para indicar exatamente a que tipo de objeto um
pedaço de texto se refere. Por exemplo, endereços de correio eletrônico
são marcados por @code{@@email}; dessa maneira, o resultado pode ser um
link ``vivo'' para enviar mensagem eletrônica quando o formato de saída
for compatível. Se o endereço de correio eletrônico simplesmente fosse
marcado como ``imprimir em uma fonte de máquina de escrever'', isso não
seria possível.

@menu
* Realçamento Útil::                    Realçamento provê informação útil.
* @code{@@code}::                       Indicando código de programa.
* @code{@@kbd}::                        Mostrando entrada de teclado.
* @code{@@key}::                        Especificando teclas.
* @code{@@samp}::                       Indicando uma sequência literal de caracteres.
* @code{@@verb}::                       Indicando uma sequência literal de caracteres.
* @code{@@var}::                        Indicando variáveis metassintáticas.
* @code{@@env}::                        Indicando variáveis de ambiente.
* @code{@@file}::                       Indicando nomes de arquivo.
* @code{@@command}::                    Indicando nomes de comando.
* @code{@@option}::                     Indicando nomes de opção.
* @code{@@dfn}::                        Especificando definições.
* @code{@@abbr}::                       Indicando abreviações.
* @code{@@acronym}::                    Indicando siglas.
* @code{@@indicateurl}::                Indicando uma URL de exemplo.
* @code{@@email}::                      Indicando um endereço de correio eletrônico.
@end menu


@node Realçamento Útil
@subsection Comandos de Realçamento são Úteis
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.1 - Comandos de Realçamento são Úteis

Os comandos servem a uma variedade de propósitos:

@table @code
@item @@code@{@var{código-modelo}@}
Indica texto que é um exemplo literal de um pedaço de um programa.
@xref{@code{@@code}}.

@item @@kbd@{@var{caracteres-de-teclado}@}
Indica entrada de teclado.  @xref{@code{@@kbd}}.

@item @@key@{@var{nome-de-tecla}@}
Indica o nome convencional para uma tecla em um teclado.
@xref{@code{@@key}}.

@item @@samp@{@var{texto}@}
Indica texto que é um exemplo literal de uma sequência de caracteres.
@xref{@code{@@samp}}.

@item @@verb@{@var{texto}@}
Escreve uma sequência literal de caracteres.  @xref{@code{@@verb}}.

@item @@var@{@var{variável-metassintática}@}
Indica uma variável metassintática.  @xref{@code{@@var}}.

@item @@env@{@var{variável-de-ambiente}@}
Indica uma variável de ambiente.  @xref{@code{@@env}}.

@item @@file@{@var{nome-de-arquivo}@}
Indica o nome de um arquivo.  @xref{@code{@@file}}.

@item @@command@{@var{nome-de-comando}@}
Indica o nome de um comando.  @xref{@code{@@command}}.

@item @@option@{@var{nome-de-opção}@}
Indica uma opção de linha de comando.  @xref{@code{@@option}}.

@item @@dfn@{@var{termo}@}
Indica o uso definidor ou introdutório de um termo.  @xref{@code{@@dfn}}.

@item @@cite@{@var{referência}@}
Indica o nome de um livro.  @xref{@code{@@cite}}.

@item @@abbr@{@var{abreviação}@}
Indica uma abreviação, como `Comput.'.

@item @@acronym@{@var{sigla}@}
Indica uma sigla.  @xref{@code{@@acronym}}.

@item @@indicateurl@{@var{localizador-uniforme-de-recurso}@}
Indica um exemplo (isto é, não funcional) de Localizador Uniforme de
Recurso.  @xref{@code{@@indicateurl}}.  (Use @code{@@url}
(@pxref{@code{@@url}}) para URLs ``vivas'').

@item @@email@{@var{endereço-de-email}[, @var{texto-exibido}]@}
Indica um endereço de correio eletrônico.  @xref{@code{@@email}}.

@end table


@node @code{@@code}
@subsection @code{@@code}@{@var{código-modelo}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.2 - @code{código-modelo}

@anchor{code} @c nome antigo
@findex código

@cindex Tokens sintáticos, indicando
@cindex Símbolos sintáticos, indicando
Use o comando @code{@@code} para indicar texto que é um pedaço de um
programa e que consiste de símbolos sintáticos inteiros. Coloque o texto
entre chaves.

@cindex Expressões em um programa, indicando
@cindex Palavras chave, indicando
@cindex Palavras reservadas, indicando
Assim, você deveria usar @code{@@code} para uma expressão em um
programa, para o nome de uma variável ou função usada em um programa ou
para uma palavra chave em uma linguagem de programação.

Use @code{@@code} para nomes de comando em linguagens que reconstroem
linguagens de programação, como Texinfo.  Por exemplo, @code{@@code} e
@code{@@samp} são produzidos escrevendo @samp{@@code@{@@@@code@}} e
@samp{@@code@{@@@@samp@}} no fonte Texinfo, respectivamente.

@cindex Maiúscula, não alteração @code{@@code}
É incorreto alterar a primeira letra (para maiúscula) de uma palavra
dentro de um comando @code{@@code} quando esse aparece no início de uma
frase. A maioria das linguagens de programação diferencia maiúsculas de
minúsculas. Em C, por exemplo, @code{Printf} é diferente do
identificador @code{printf}, e possivelmente é um erro de ortografia.
Mesmo em linguagens que não diferenciam maiúsculas de minúsculas, é
confuso para um leitor humano ver identificadores escritos de diferentes
maneiras. Escolha uma grafia e sempre a use. Se você não quer iniciar
uma frase com um nome de comando escrito todo em letras minúsculas, você
deveria reorganizar a frase.

Na saída Info, @code{@@code} resulta em aspas simples em torno do texto.
Em outros formatos, o argumento @code{@@code} é formatado em uma fonte
de máquina de escrever (mono espaçada). Por exemplo,

@example
A função retorna @@code@{nulo@}.
@end example

@noindent
produz isto:

@quotation
A função retorna @code{nulo}.
@end quotation

Aqui estão alguns casos para os quais é preferível @emph{não} usar
@code{@@code}:

@itemize @bullet
@item
Para nomes de comando de shell como @command{ls} (use @code{@@command}).

@item
Para variável de ambiente como @env{TEXINPUTS} (use @code{@@env}).

@item
Para opções de shell como @samp{-c} quando tais opções são independentes
(use @code{@@option}).

@item
Um comando inteiro de shell frequentemente parece melhor se escrito
usando @code{@@samp} em vez de @code{@@code}. Nesse caso, a regra é
escolher o formato mais agradável.

@item
Para uma sequência de caracteres menor que um token sintático. Por
exemplo, se você está escrevendo sobre @samp{goto-ch}, que apenas é
parte do nome para a função @code{goto-char} da Emacs Lisp, você deveria
usar @code{@@samp}.

@item
Geralmente, quando escrever acerca dos caracteres usados em um token;
por exemplo, não use @code{@@code} quando estiver explanando quais
letras ou símbolos imprimíveis podem ser usados nos nomes das funções.
(Use @code{@@samp}). Ainda, você deveria não usar @code{@@code} para
marcar texto que é considerado entrada para programas, a menos que a
entrada seja escrita em uma linguagem que seja semelhante a uma
linguagem de programação. Por exemplo, você não deveria usar
@code{@@code} para os comandos de teclas do GNU Emacs (use @code{@@kbd}
em vez disso), apesar que você pode usar @code{@@code} para os nomes das
funções da Emacs Lisp que os comandos de teclas invocam.

@end itemize

Por padrão, @TeX{} considerará quebras de linhas nos caracteres @samp{-}
e @samp{_} dentro do @code{@@code} e comandos relacionados. Isso pode
ser controlado com @code{@@allowcodebreaks}
(@pxref{@code{@@allowcodebreaks}}). A saída HTML tenta respeitar isso
para @samp{-}, mas, no final, depende do comportamento do navegador.
Para Info, parece melhor nunca fazer tais quebras.

Para Info, as aspas são omitidas na saída do comando @code{@@code} e
comandos relacionados (por exemplo, @code{@@kbd}, @code{@@command}), em
contextos semelhantes a máquinas de escrever, como o ambiente
@code{@@example} (@pxref{@code{@@example}}) e o próprio @code{@@code},
etc.

Para controlar quais caracteres de citação são implicitamente inseridos
por processadores Texinfo na saída do @samp{@@code}, etc., veja as
variáveis de personalização @code{OPEN_QUOTE_SYMBOL} e
@code{CLOSE_QUOTE_SYMBOL} (@pxref{Outras Variáveis de Personalização}).
Isso é separado de como são manipulados os atuais caracteres de citação
no documento de entrada (@pxref{Inserindo Caracteres de Citação}).


@node @code{@@kbd}
@subsection @code{@@kbd}@{@var{caracteres-de-teclado}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.3 - @kbd{caracteres-de-teclado}

@anchor{kbd} @c nome antigo
@findex kbd
@cindex Entrada de teclado
@cindex Teclado, Entrada de

Use o comando @code{@@kbd} para caracteres de entrada a serem digitados
por usuários. Por exemplo, para se referir aos caracteres @kbd{M-a},
escreva:

@example
@@kbd@{M-a@}
@end example

@noindent
e para se referir aos caracteres @kbd{M-x shell}, escreva:

@example
@@kbd@{M-x shell@}
@end example

@cindex Entrada de usuário
@cindex Fonte de máquina de escrever inclinada, para @code{@@kbd}
Por padrão, o comando @code{@@kbd} produz uma fonte diferente (máquina
de escrever inclinada em vez da máquina de escrever normal), de forma
que os usuários podem distinguir os caracteres que deveriam digitar
daqueles que o computador exibe.

@findex kbdinputstyle
Dado que o uso de @code{@@kbd} varia de manual para manual, você pode
controlar a fonte trocando com o comando @code{@@kbdinputstyle}. Esse
comando não tem efeito sobre a saída Info. Escreva esse comando no
início de uma linha com uma única palavra como um argumento, uma das
seguintes:

@vindex distinct@r{, valor para @code{@@kbdinputstyle}}
@vindex example@r{, valor para @code{@@kbdinputstyle}}
@vindex code@r{, valor para @code{@@kbdinputstyle}}
@table @samp
@item code
Sempre use a mesma fonte para @code{@@kbd} como @code{@@code}.
@item example
Use a fonte de distinção para @code{@@kbd} somente em @code{@@example} e
ambientes similares.
@item distinct
(o padrão) Sempre use a fonte de distinção para @code{@@kbd}.
@end table

Você pode incorporar outro comando @@ dentro das chaves de um comando
@code{@@kbd}. Aqui, por exemplo, está a maneira para descrever um
comando que pressiona a tecla @key{RETURN}'':

@example
@@kbd@{r @@key@{RET@}@}
@end example

@noindent
Isso produz: @kbd{r @key{RET}}.  (O presente manual usa o padrão para
@code{@@kbdinputstyle}).

Você também usa o comando @code{@@kbd} se estiver soletrando as letras
que digitar; por exemplo:

@example
Para dar o comando @@code@{logout@}, digite os caracteres
@@kbd@{l o g o u t @@key@{RET@}@}.
@end example

@noindent
Isso produz:

@quotation
Para dar o comando @code{logout}, digite os caracteres
@kbd{l o g o u t @key{RET}}.
@end quotation

(Além disso, esse exemplo mostra que você pode adicionar espaços para
maior clareza. Se você deseja mencionar explicitamente um caractere
espaço como um dos caracteres da entrada, escreva @kbd{@@key@{SPC@}}
para ele).


@node @code{@@key}
@subsection @code{@@key}@{@var{nome-de-tecla}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.4 - @key{nome-de-tecla}

@anchor{key} @c nome antigo
@findex key

Use o comando @code{@@key} para o nome convencional para uma tecla em um
teclado, como em:

@example
@@key@{RET@}
@end example

Você pode usar o comando @code{@@key} dentro do argumento de um comando
@code{@@kbd} quando a sequência de caracteres a ser digitada incluir uma
ou mais teclas que sejam descritas por nome.

Por exemplo, para produzir @kbd{C-x @key{ESC}} e @kbd{M-@key{TAB}} você
digitaria:

@example
@@kbd@{C-x @@key@{ESC@}@}
@@kbd@{M-@@key@{TAB@}@}
@end example

Aqui está uma lista dos nomes recomendados para teclas:
@cindex Nomes recomendados para teclas
@cindex Teclas, nomes recomendados
@cindex Abreviações para teclas
@cindex Teclas de controle, especificando
@cindex Teclas Meta, especificando

@quotation
@table @t
@item SPC
Espaço
@item RET
Retorno (Nova linha)
@item LFD
Alimentação de Linha (no entanto, como a maioria dos teclados hoje em
dia não tem uma tecla de alimentação de linha, talvez seja melhor chamar
esse caractere @kbd {C-j})
@item TAB
Tab
@item BS
Backspace
@item ESC
Escape
@item DELETE
Delete
@item SHIFT
Shift
@item CTRL
Control
@item META
Meta
@end table
@end quotation

@cindex META, tecla
Existem sutilezas para lidar com palavras como `meta' ou `ctrl', que são
nomes de teclas modificadoras. Quando mencionar um caractere no qual a
tecla modificadora é usada, como @kbd{Meta-a}, use o comando
@code{@@kbd} sozinho; não use o comando @code{@@key}; porém, quando
estiver se referindo à tecla modificadora isoladamente, use o comando
@code{@@key}. Por exemplo, escreva @samp{@@kbd@{Meta-a@}} para produzir
@kbd{Meta-a} e @samp{@@key@{META@}} para produzir @key{META}.

@c por Richard Matthew Stallman (rms).
Como uma convenção em manuais GNU, @code{@@key} não deveria ser usado em
entradas de indexação.


@node @code{@@samp}
@subsection @code{@@samp}@{@var{texto}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.5 - @samp{texto}

@anchor{samp} @c nome antigo
@findex samp

Use o comando @code{@@samp} para indicar um texto que seja um exemplo
literal ou ``amostra'' de uma sequência de caracteres em um arquivo,
cadeia de caracteres, padrão, etc. Coloque o texto entre chaves. O
argumento aparece entre aspas simples tanto no arquivo Info quanto no
manual impresso; além disso, o texto é impresso em uma fonte de largura
fixa.

@example
Para combinar @@samp@{foo@} no final da linha, use a expressão regular
@@samp@{foo$@}.
@end example

@noindent
produz:

@quotation
Para combinar @samp{foo} no final da linha, use a expressão regular
@samp{foo$}.
@end quotation

Sempre que estiver se referindo a caracteres únicos, você deveria usar
@code{@@samp}, a menos que @code{@@kbd} ou @code{@@key} sejam mais
apropriados. Além disso, você pode usar @code{@@samp} para instruções
inteiras em C e para comandos inteiros do shell---nesse caso,
@code{@@samp} geralmente parece melhor que @code{@@code}. Basicamente,
@code{@@samp} é um ``pega tudo'' para o que não for coberto por
@code{@@code}, @code{@@kbd}, @code{@@key}, @code{@@command}, etc.

Somente inclua sinais de pontuação entre chaves se eles fizerem parte da
sequência de caracteres que você estiver especificando. Escreva sinais
de pontuação fora das chaves se tais sinais de pontuação fizerem parte
do texto em Inglês que envolve a sequência de caracteres. Na frase
seguinte, por exemplo, as vírgulas e pontos estão fora das chaves:

@example
@group
Em Inglês, as vogais são @@samp@{a@}, @@samp@{e@}, @@samp@{i@},
@@samp@{o@}, @@samp@{u@}, e, as vezes, @@samp@{y@}.
@end group
@end example

@noindent
Isso produz:

@quotation
Em Inglês, as vogais são @samp{a}, @samp{e}, @samp{i}, @samp{o},
@samp{u}, e, as vezes, @samp{y}.
@end quotation


@node @code{@@verb}
@subsection @code{@@verb}@{@var{char}@var{text}@var{char}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.6 - @verb{chartextchar}

@anchor{verb} @c nome antigo
@findex verb
@cindex Texto literal interno a linha

@cindex Caractere delimitador, para literalidade
Use o comando @code{@@verb} para imprimir uma sequência literal de
caracteres.

Semelhante ao comando @code{\verb} do @LaTeX{}, o texto literal pode ser
delimitado usando-se qualquer caractere delimitador único. Coloque o
texto literal, incluindo os delimitadores, entre chaves. O texto é
impresso em uma fonte de largura fixa:

@example
Quantos caracteres de escape @@verb@{|@@|@} alguém precisa para imprimir
esta sequência @@verb@{.@@a @@b.@@c.@} ou esta
@@verb@{+@@'e?`@{@}!`\+@}?
@end example

@noindent
produz:

@example
Quantos caracteres de escape @verb{|@|} alguém precisa para imprimir
esta sequência @verb{.@a @b.@c.} ou esta @verb{+@'e?`{}!`\+}?
@end example

Isso está em contraste com @code{@@samp} (veja a seção anterior),
@code{@@code} e comandos semelhantes; naqueles casos, o argumento é
texto normal Texinfo, onde os três caracteres @code{@@@{@}} são
especiais, como de costume. Com @code{@@verb}, nada é especial, exceto o
caractere delimitador que você escolher.

O próprio caractere delimitador pode aparecer dentro do texto literal,
conforme mostrado acima. Como outro exemplo, @samp{@@verb@{...@}}
imprime um único ponto (largura fixa).

Não é confiável usar @code{@@verb} dentro de outras construções do
Texinfo. Em particular, não funciona usar @code{@@verb} em nada
relacionado a referências cruzadas, como títulos de seção ou legendas de
figuras.


@node @code{@@var}
@subsection @code{@@var}@{@var{variável-metassintática}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.7 - @var{variável-metassintática}

@anchor{var} @c nome antigo
@findex var

Use o comando @code{@@var} para indicar variáveis metassintáticas. Uma
@dfn{variável metassintática} é algo que representa outro pedaço de
texto. Por exemplo, você deveria usar uma variável metassintática na
documentação de uma função para descrever os argumentos que são passados
para aquela função.

Não use @code{@@var} para os nomes de variáveis normais em programas de
computador. Esse são nomes específicos, de forma que @code{@@code} é
correto para eles (@code{@@code}). Por exemplo, a variável
@code{texinfo-tex-command} da Emacs Lisp não é uma variável
metassintática; ela é formatada apropriadamente usando @code{@@code}.

Tampouco use @code{@@var} para variáveis de ambiente; @code{@@env} é
correto para elas (veja a próxima seção).

O efeito de @code{@@var} no arquivo Info é modificar a escrita do
argumento para letras todas maiúsculas. No manual impresso e saída HTML,
o argumento é exibido em tipo inclinado.

@need 700
Por exemplo,

@example
Para deletar o arquivo @@var@{filename@}, digite
@@samp@{rm @@var@{filename@}@}.
@end example

@noindent
produz:

@quotation
Para deletar o arquivo @var{filename}, digite @samp{rm @var{filename}}.
@end quotation

@noindent
(Note que @code{@@var} pode aparecer dentro de @code{@@code},
@code{@@samp}, @code{@@file}, etc.).

Escreva uma variável metassintática toda em letras minúsculas e sem
espaços, e use hifens para torná-la mais legível. Assim, o fonte de
Texinfo para a ilustração de como iniciar um manual Texinfo se parece
com isto:

@example
@group
\input texinfo
@@@@settitle @@var@{nome-do-manual@}
@end group
@end example

@noindent
Isso produz:

@example
@group
\input texinfo
@@settitle @var{nome-do-manual}
@end group
@end example

Em alguns estilos de documentação, as variáveis metassintáticas são
mostradas entre colchetes angulares, por exemplo:

@example
@dots{}, digite rm <nome_arquivo>
@end example

@noindent
Entretanto, esse não é o estilo que Texinfo usa.

@c CONSERTE-ME: adicionar uma variável de personalização? Adicionar um
@c exemplo sobre como fazer isso para HTML?
@c (Você pode, certamente, modificar os fontes para @file{texinfo.tex} e
@c os comandos de formatação do Info para expedir o formato do
@c @code{<@dots{}>} se você quiser).


@node @code{@@env}
@subsection @code{@@env}@{@var{variável-de-ambiente}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.8 - @env{variável-de-ambiente}

@anchor{env} @c nome antigo
@findex env

Use o comando @code{@@env} para indicar variáveis de ambiente, conforme
usadas por muitos Sistemas Operacionais, incluindo GNU@. Não a use para
variáveis @emph{meta}ssintáticas; use @code{@@var} para essas (veja a
seção anterior).

@code{@@env} é equivalente a @code{@@code} em seus efeitos. Por exemplo:

@example
A variável de ambiente @@env@{PATH@} @dots{}
@end example
@noindent
produz:
@quotation
A variável de ambiente @env{PATH} @dots{}
@end quotation


@node @code{@@file}
@subsection @code{@@file}@{@var{nome-de-arquivo}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.9 - @file{nome-de-arquivo}

@anchor{file} @c nome antigo
@findex file

Use o comando @code{@@file} para indicar texto que é o nome de um
arquivo, buffer, ou diretório, ou é o nome de um nó em Info. Você
também pode usar o comando para extensões de nome de arquivo. Não use
@code{@@file} para símbolos em uma linguagem de programação; use
@code{@@code}.

@code{@@file} é equivalente a @code{code} em seus efeitos. Por exemplo,

@example
Os arquivos @@file@{.el@} estão no diretório
@@file@{/usr/local/emacs/lisp@}.
@end example

@noindent
produz:

@quotation
Os arquivos @file{.el} estão no diretório @file{/usr/local/emacs/lisp}.
@end quotation


@node @code{@@command}
@subsection @code{@@command}@{@var{nome-de-comando}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.10 - @command{nome-de-comando}

@anchor{command} @c nome antigo
@findex comando
@cindex Nomes de comando, indicando
@cindex Nomes de programa, indicando

Use o comando @code{@@command} para indicar os nomes de comando, como
@command{ls} ou @command{cc}.

@code{@@command} é equivalente a @code{@@code} em seus efeitos. Por
exemplo:

@example
O comando @@command@{ls@} lista o conteúdo de diretórios.
@end example
@noindent
produz:
@quotation
O comando @command{ls} lista o conteúdo de diretórios.
@end quotation

Você deveria escrever o nome de um programa na fonte de texto comum, em
vez de usar @code{@@command}, se considerá-lo uma nova palavra em
inglês, como `Emacs' or `Bison'.

Quando escrever uma invocação inteira de comando de shell, como em
@samp{ls -l}, você deveria usar ou @code{@@samp} ou @code{@@code} a seu
critério.


@node @code{@@option}
@subsection @code{@@option}@{@var{nome-de-opção}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.11 - @option{nome-de-opção}

@anchor{option} @c nome antigo
@findex opção

Use o comando @code{@@option} para indicar uma opção de linha de
comando; por exemplo, @option{-l} ou @option{--version} ou
@option{--output=@var{filename}}.

@code{@@option} é equivalente a @code{@@code} em seus efeitos. Por
exemplo:

@example
A opção @@option@{-l@} produz uma listagem longa.
@end example
@noindent
produz:
@quotation
A opção @option{-l} produz uma listagem longa.
@end quotation


@node @code{@@dfn}
@subsection @code{@@dfn}@{@var{termo}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.12 - @dfn{termo}

@anchor{dfn} @c nome antigo
@findex dfn

Use o comando @code{@@dfn} para identificar o uso introdutório ou
definidor de um termo técnico. Use o comando somente em passagens cujo
propósito é introduzir um termo o qual será usado novamente ou o qual o
leitor deve saber. A simples menção de um termo pela primeira vez não
merece um @code{@@dfn}. O comando gera itálicos no manual impresso, e
aspas duplas no arquivo Info. Por exemplo:

@example
Livrar-se de um arquivo chama-se @@dfn@{deletando@}.
@end example

@noindent
produz:

@quotation
Livrar-se de um arquivo chama-se @dfn{deletando}.
@end quotation

Como regra geral, uma frase contendo a ocorrência definidora de um termo
deve ser uma definição do termo. A frase não precisa dizer
explicitamente que é uma definição, mas deve conter a informação de uma
definição---ela deve deixar claro o significado.


@node @code{@@abbr}
@subsection @code{@@abbr}@{@var{abreviação}[, @var{significado}]@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.13 - @abbr{abreviação[, significado]}

@anchor{abbr} @c nome antigo
@findex abbr

@cindex Abreviaturas, marcação
Você pode usar o comando @code{@@abbr} para abreviações gerais. A
abreviação é dada como o argumento único entre chaves, como em
@samp{@@abbr@{Comput.@}}. Por uma questão de estilo, ou para
abreviações específicas, você pode preferir omitir pontos, como em
@samp{@@abbr@{Mr@} Stallman}.

@code{@@abbr} aceita um segundo argumento opcional, destinado a ser
usado para o significado da abreviação.

Se a abreviação finalizar com uma letra minúscula e um ponto, e não
estiver no final de uma frase, e não tiver um segundo argumento,
lembre-se de usar o comando @code{@@.} (@pxref{Finalizando Uma Frase})
para obter o espaçamento correto. Entretanto, você não tem de usar
@code{@@.} dentro da própria abreviação; Texinfo automaticamente assume
que pontos dentro da abreviação não finalizam uma frase.

@cindex marcações @code{<abbr>} e @code{<abbrev>}
Em @TeX{} e na saída Info, o primeiro argumento é impresso como está; se
o segundo argumento estiver presente, ele é impresso entre parênteses
após a abreviação. Em HTML, a marcação @code{<abbr>} é usada; em
Docbook, a marcação @code{<abbrev>} é usada. Por exemplo:

@example
@@abbr@{Comput. J., Jornal do Computador@}
@end example

@noindent
produz:

@display
@abbr{Comput. J., Jornal do Computador}
@end display

Para abreviações que consistem de todas as letras maiúsculas, você pode
preferir usar o comando @code{@@acronym}. Veja a próxima seção para mais
sobre o uso desses dois comandos.


@node @code{@@acronym}
@subsection @code{@@acronym}@{@var{sigla}[, @var{significado}]@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.14 - @acronym{sigla[, significado] }

@anchor{acronym} @c nome antigo
@findex sigla

@cindex NASA, como sigla
@cindex Siglas, marcando
Você pode usar o comando @code{@@acronym} para abreviações escritas
todas com letras maiúsculas, como `@acronym{NASA}'. A abreviação é dada
como o único argumento entre chaves, como em @samp{@@acronym@{NASA@}}.
Por uma questão de estilo, ou para siglas específicas, você pode
preferir usar pontos, como em @samp{@@acronym@{N.A.S.A.@}}.

@code{@@acronym} aceita um segundo argumento opcional, destinado a ser
usado para o significado da sigla.

Se a sigla estiver no final de uma frase, e se não existir segundo
argumento, lembre-se de usar o @code{@@.} ou comando similar
(@pxref{Finalizando Uma Frase}) para obter o espaçamento correto.

@cindex marcação @code{<acronym>}
Em @TeX{}, a sigla é impressa em fonte ligeiramente menor. Na saída
Info, o argumento é impresso como está. Em qualquer formato, se o
segundo argumento estiver presente, ele é impresso entre parênteses após
a sigla. Em HTML e Docbook a marcação @code{<acronym>} é usada.

Por exemplo (dado que GNU é uma sigla recursiva, nós usamos
@code{@@acronym} recursivamente):

@example
@@acronym@{GNU, @@acronym@{GNU@} Não é Unix@}
@end example

@noindent
produz:

@display
@acronym{GNU, @acronym{GNU} Não é Unix}
@end display

@cindex Nomes de família, todas letras maiúsculas
Em algumas circunstâncias, é convencional imprimir nomes de família em
letras maiúsculas. Não use @code{@@acronym} para isso, pois um nome não
é uma sigla. Use @code{@@sc} (@pxref{Versaletes}).

@code{@@abbr} e @code{@@acronym} são comandos intimamente relacionados:
ambos sinalizam para o(a) leitor(a) que uma forma abreviada está sendo usada,
e possivelmente dá um significado. Ao escolher usar esses dois comandos,
por favor tenha o seguinte em mente.

@itemize @minus
@item
No uso comum do Inglês, siglas são um subconjunto de abreviações: elas
incluem palavras pronunciáveis como `@acronym{NATO}', `radar' e `snafu';
algumas fontes também incluem siglas de siglas, como `Usenet'; híbridas,
como `@acronym{SIGGRAPH}'; e inicialismos impronunciáveis como
`@acronym{FBI}'.

@item
Em Texinfo, uma sigla (mas não uma abreviação) deveria consistir apenas
de letras maiúsculas e pontos, não minúsculas.

@item
Em @TeX{}, uma sigla (mas não uma abreviação) é impressa em uma fonte
ligeiramente menor.

@item
Alguns navegadores colocam uma borda inferior pontilhada em abreviações,
mas não em siglas.

@item
Geralmente é bastante difícil e/ou demorado usar consistentemente
@code{@@acronym} para todas as sequências de letras maiúsculas. Além do
mais, parece estranho para algumas siglas estar no tamanho normal da
fonte e outras estarem menores. Assim, uma abordagem mais simples que
você pode querer considerar é evitar @code{@@acronym} e apenas digitar
tudo como texto normal em todas maiúsculas: @samp{GNU}, produzindo a
saída `GNU'.

@item
Em geral, não é essencial usar quaisquer desses comandos para todas as
abreviações; use seu bom senso. O texto é perfeitamente legível sem tais
comandos.
@end itemize


@node @code{@@indicateurl}
@subsection @code{@@indicateurl}@{@var{localizador-uniforme-de-recurso}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.15 - @indicateurl{localizador-uniforme-de-recurso}

@anchor{indicateurl} @c nome antigo
@findex indicateurl
@cindex Localizador Uniforme de Recurso, indicando
@cindex URL, indicando

Use o comando @code{@@indicateurl} para indicar um Localizador Uniforme
de Recurso na Internet. Isso é puramente para propósitos de marcação e
não produz um link que você possa seguir (use o comando @code{@@url} ou
@code{@@uref} para isso, @pxref{@code{@@url}}). @code{@@indicateurl} é
útil para URLs que não existem atualmente. Por exemplo:

@example
Por exemplo, a URL poderia ser @@indicateurl@{http://example.org/path@}.
@end example

@noindent
que produz:

@display
Por exemplo, a URL poderia ser @indicateurl{http://example.org/path}.
@end display

A saída oriunda de @code{@@indicateurl} é mais ou menos como aquela de
@code{@@samp} (@pxref{@code{@@samp}}).


@node @code{@@email}
@subsection @code{@@email}@{@var{endereço-de-email}[, @var{texto-exibido}]@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.1 - Indicando Definições, Comandos, etc.
@c Subseção 7.1.16 - @email{endereço-de-email[, texto-exibido]}

@anchor{email} @c nome antigo
@findex email

Use o comando @code{@@email} para indicar um endereço de correio
eletrônico. O comando recebe um argumento obrigatório, o endereço, e um
argumento opcional, o texto a exibir (o padrão é o próprio endereço).

@cindex Link para EMail
Em Info, o endereço é mostrado entre colchetes angulares (sinal de
``maior que'' e ``menor que''), precedido pelo texto a ser exibido, se
houver. Em @TeX{}, os colchetes angulares são omitidos. Na saída HTML,
@code{@@email} produz um link @samp{mailto} que geralmente abre uma
janela de composição de correspondência. Por exemplo:

@example
Mande relatórios de bugs para @@email@{bug-texinfo@@@@gnu.org@},
sugestões para o @@email@{bug-texinfo@@@@gnu.org, algum lugar@}.
@end example

@noindent
produz:

@display
Mande relatórios de bugs para @email{bug-texinfo@@gnu.org},
sugestões para o @email{bug-texinfo@@gnu.org, algum lugar}.
@end display


@node Ênfase
@section Enfatizando Texto
@cindex Enfatizando Texto
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.2 - Enfatizando Texto

Normalmente, Texinfo modifica a fonte para marcar palavras no texto de
acordo com a categoria a que as palavras pertencem; um exemplo é o
comando @code{@@code}. Na maioria das vezes, essa é a melhor maneira de
marcar palavras. Entretanto, as vezes, você desejará enfatizar texto sem
indicar uma categoria. Texinfo tem dois comandos para fazer isso. Além
disso, Texinfo tem vários comandos que especificam a fonte na qual o
texto será produzido. Esses comandos não tem efeito em Info e apenas um
deles, o comando @code{@@r}, tem algum uso regular.

@menu
* @code{@@emph @@strong}::       Como enfatizar texto em Texinfo.
* Versaletes::                   Como usar a fonte de versaletes.
* Fontes::                       Comandos variados de fonte para saída impressa.
@end menu


@node @code{@@emph @@strong}
@subsection @code{@@emph}@{@var{texto}@} e @code{@@strong}@{@var{texto}@}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.2 - Enfatizando Texto
@c Subseção 7.2.1 - @emph{texto} e @strong{texto}

@anchor{enfatizar e fortalecer} @c nome antigo
@findex comando ``emph''
@findex comando ``strong''
@cindex Enfatizando Texto, fonte para

Os comandos @code{@@emph} e @code{@@strong} são para ênfase;
@code{@@strong} é o mais forte. Em saída impressa, @code{@@emph} produz
@emph{itálico} e @code{@@strong} produz @strong{negrito}. Na saída Info,
@code{@@emph} envolve o texto com sublinhados (@samp{_}), e
@code{@@strong} coloca asteriscos em volta do texto.

Por exemplo,

@example
@group
@@strong@{Cuidado:@} @@samp@{rm *@} remove @@emph@{todos@} os arquivos normais.
@end group
@end example

@noindent
produz o seguinte:

@quotation
@strong{Cuidado}: @samp{rm * .[^.]*} remove @emph{todos} os arquivos normais.
@end quotation

O comando @code{@@strong} raramente é usado, exceto para marcar que é,
na verdade, um elemento tipográfico, como a palavra `Cuidado' no exemplo
anterior.

@quotation Cuidado
Não use @code{@@strong} com a palavra @samp{Nota} seguida por um espaço;
Info confundirá a combinação para uma referência cruzada. Use uma frase,
como @strong{Por favor note} ou @strong{Cuidado} em vez disso, ou o
argumento opcional para @code{@@quotation}---@samp{Nota} é permitido lá.
@end quotation


@node Versaletes
@subsection @code{@@sc}@{@var{texto}@}: A Fonte de Versaletes
@cindex Fonte de versaletes
@findex sc @r{(fonte de versaletes)}
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.2 - Enfatizando Texto
@c Subseção 7.2.2 - @sc{texto}: A Fonte de Versaletes

Use o comando @samp{@@sc} para configurar texto em
@sc{uma fonte de versaletes} (onde for possível). Escreva o
texto que você quer que esteja em versaletes entre chaves e
em letras minúsculas, como isto:

@example
Richard @@sc@{Stallman@} commenc@'{e} GNU.
@end example

@noindent
Isso produz:

@display
Richard @sc{Stallman} commenc@'{e} GNU.
@end display

Como mostrado aqui, nós recomendamos reservar @code{@@sc} para casos
especiais onde você desejar versalete tipográfica; nomes de
família são um desses, especialmente em outros idiomas que não o Inglês,
embora não existam regras rígidas e rápidas acerca de tais coisas.

@cindex marcação @code{<small>}
@TeX{} escreve qualquer letra maiúscula entre as chaves de um comando
@code{@@sc} em letras maiúsculas de tamanho real; apenas letras
minúsculas são impressas na fonte de versaletes. Na saída
Info, o argumento para @code{@@sc} é impresso todo em maiúsculas. Em
HTML, o argumento é colocado em letras maiúsculas e a saída marcada com
a marcação @code{<small>} para reduzir o tamanho da fonte, dado que HTML
não pode facilmente representar capitalizações pequenas verdadeiras.

No geral, recomendamos o uso de letras maiúsculas e minúsculas padrão
sempre que possível.


@node Fontes
@subsection Fontes para Impressão
@cindex Fontes para impressão
@c Capítulo 7 - Marcação de Texto, Palavras e Frases
@c Seção 7.2 - Enfatizando Texto
@c Subseção 7.2.3 - Fontes para Impressão

@findex comando fonttextsize
@cindex Tamanho de fonte, reduzindo
@cindex Reduzindo tamanho de fonte
@cindex Fontes menores
O Texinfo fornece um comando para mudar o tamanho da fonte do corpo
principal na saída @TeX{} para um documento: @code{@@fonttextsize}. O
comando não tem efeito em outra saída. O comando recebe um argumento
único no restante da linha, o qual deve ser ou @samp{10} ou @samp{11}.
Por exemplo:

@example
@@fonttextsize 10
@end example

@cindex Custo de impressão, reduzindo
O efeito é reduzir a fonte do corpo para um tamanho de 10@dmn{pt} (o
padrão é 11@dmn{pt}). Fontes para outros elementos,  tais como seções e
capítulos, são reduzidas de acordo. Isso somente deveria ser usado em
conjunto com @code{@@smallbook} (@pxref{@code{@@smallbook}}) ou similar,
dado que fontes de 10@dmn{pt} em papel padrão (8.5x11 or A4) são muito
pequenas. Uma razão para usar esse comando é para economizar páginas, e,
assim, custo de impressão, para livros físicos.

Texinfo atualmente não tem comandos para alternar a família da fonte a
usar, ou comandos de alteração de tamanho mais gerais.

Texinfo também fornece vários comandos de fonte que especificam as
mudanças de fonte no manual impresso e (quando possível) na saída HTML.
Esses comandos não tem efeito em Info. Todos os comandos se aplicam a um
argumento a seguir cercados por chaves.

@table @code
@item @@b
@findex b @r{(negrito)}
@cindex Negrito
seleciona @b{negrito};

@item @@i
@findex i @r{(itálico)}
@cindex Fonte itálica
seleciona uma fonte @i{itálico};

@item @@r
@findex r @r{(fonte romana)}
@cindex Fonte romana
@cindex Fonte padrão
seleciona uma fonte @r{romana}, que é a fonte usual na qual o texto é
impresso. Ela pode ou não ser serifa.

@item @@sansserif
@findex sansserif @r{(fonte sans serifa)}
@cindex Fonte sans serifa
seleciona uma fonte @sansserif{sans serifa};

@item @@slanted
@findex slanted @r{(fonte inclinada)}
@cindex Fonte inclinada
@cindex Fonte oblíqua
seleciona uma fonte @slanted{inclinada};

@item @@t
@findex t @r{(fonte de máquina de escrever)}
@cindex Fonte mono espaçada
@cindex Fonte de tamanho fixo
@cindex Fonte de máquina de escrever
seleciona a fonte de @t{tamanho fixo}, estilo máquina de escrever usada
por @code{@@code};

@end table

(Os comandos com nomes mais longos foram inventados muito mais tarde que
os outros, quando não parecia desejável usar nomes muito curtos para
recursos tão pouco necessários).

@cindex marcação @code{<lineannotation>} do Docbook
O comando @code{@@r} pode ser útil em ambientes de exemplo, para
escrever comentários na fonte romana padrão em vez da fonte de largura
fixa. Isso fica melhor na saída impressa, e produz uma marca
@code{<lineannotation>} na saída do Docbook.

Por exemplo,

@example
@group
@@lisp
(+ 2 2)    ; @@r@{Adiciona dois mais dois.@}
@@end lisp
@end group
@end example

@noindent
produz

@lisp
(+ 2 2)    ; @r{Adiciona dois mais dois.}
@end lisp

O comando @code{@@t} pode ocasionalmente ser útil para produzir saída em
uma fonte de máquina de escrever onde isso for suportado (por exemplo,
HTML e PDF), mas nenhuma distinção é necessária em Info ou texto plano:
@code{@@t@{foo@}} produz @t{foo}, cf. @code{@@code@{foo@}} produzindo
@code{foo}.

Em geral, os outros comandos de fonte provavelmente não são úteis; eles
existem principalmente para possibilitar documentar a funcionalidade de
efeitos específicos de fontes, como no @TeX{} e pacotes relacionados.


@node Citações e Exemplos
@chapter Citações e Exemplos
@c Capítulo 8 - Citações e Exemplos

Citações e exemplos são blocos de texto que consistem em um ou mais
parágrafos inteiros que são separados da maior parte do texto e tratados
de forma diferente. Eles geralmente são recuados na saída.

@findex fim
Em Texinfo, você sempre inicia uma citação ou exemplo escrevendo um
comando @@ sozinho no início de uma linha, e o finaliza escrevendo um
comando @code{@@end} que também está sozinho no início de uma linha. Por
exemplo, você inicia um exemplo escrevendo @code{@@example} no início de
uma linha e finaliza o exemplo escrevendo @code{@@end example} sozinho,
no início daquela linha, e somente com um espaço entre o @code{@@end} e
o @code{example}.

@menu
* Comandos de Cercamento de Blocos::  Construtores diferentes para propósitos diferentes.
* @code{@@quotation}::                Escrevendo uma citação.
* @code{@@indentedblock}::            Bloco de texto recuado a esquerda.
* @code{@@example}::                  Escrevendo um exemplo em uma fonte de largura fixa.
* @code{@@verbatim}::                 Escrevendo um exemplo de literal.
* @code{@@lisp}::                     Ilustrando código Lisp.
* @code{@@display}::                  Escrevendo um exemplo na fonte atual.
* @code{@@format}::                   Escrevendo um exemplo sem margens estreitadas.
* @code{@@exdent}::                   Desfazer recuo em uma linha.
* @code{@@flushleft @@flushright}::   Empurrando texto alinhado à esquerda ou alinhado à direita.
* @code{@@raggedright}::              Evitando justificação à direita.
* @code{@@noindent}::                 Evitando recuo de parágrafo.
* @code{@@indent}::                   Forçando recuo de parágrafo.
* @code{@@cartouche}::                Desenhando retângulos por todos os lados ao redor do texto.
* @code{@@small@dots{}}::             Exemplos em uma fonte menor.
@end menu


@node Comandos de Cercamento de Blocos
@section Comandos de Cercamento de Blocos
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.1 - Comandos de Cercamento de Blocos

Aqui está um resumo de comandos que contém blocos de texto, também
conhecidos como @dfn{ambientes}. Eles estão mais explicados nas próximas
seções.

@table @code
@item @@quotation
Indica texto que é citado. O texto é preenchido, recuado (a partir de
ambas as margens) , e impresso em uma fonte romana por padrão.

@item @@indentedblock
Como @code{@@quotation}, mas o texto é recuado apenas a esquerda.

@item @@example
Ilustra código, comandos, e afins. O texto é impresso em uma fonte de
largura fixa, e recuado, mas não preenchido.

@item @@lisp
Como @code{@@example}, mas especificamente para ilustrar código da Lisp.
O texto é impresso em uma fonte de largura fixa, e recuado, mas não
preenchido.

@item @@verbatim
Marca um pedaço de texto que é para ser impresso literalmente; nenhuma
substituição de caractere é feita e todos os comandos são ignorados, até
o próximo @code{@@end verbatim}. O texto é impresso em uma fonte de
largura fixa, e não é recuado ou preenchido. Espaços extra e linhas em
branco são significantes, e TABs são expandidos.

@item @@display
Exibe texto ilustrativo. O texto é recuado, mas não preenchido, e
nenhuma fonte é selecionada (então, por padrão, a fonte ŕ romana).

@item @@format
Como @code{@@display} (o texto não é preenchido e nenhuma fonte é
selecionada), mas o texto não é recuado.

@item @@smallquotation
@itemx @@smallindentedblock
@itemx @@smallexample
@itemx @@smalllisp
@itemx @@smalldisplay
@itemx @@smallformat
Esses comandos @code{@@small...} são semelhantes aos seus equivalentes
não-small, exceto que emitem texto em um tamanho de fonte menor, quando
possível.

@item @@flushleft
@itemx @@flushright
O texto não é preenchido, mas é alinhado com a margem esquerda ou
direita, respectivamente.

@item @@raggedright
O texto é preenchido, mas justificado apenas a esquerda, deixando a
margem direita irregular.

@item @@cartouche
Realça o texto, geralmente um exemplo ou uma citação, desenhando uma
caixa com cantos arredondados ao redor.
@end table

O comando @code{@@exdent} é usado dentro das construções acima para
desfazer o recuo de uma linha.

O comando @code{@@noindent} pode ser usado após uma das construções
acima (ou no início de qualquer parágrafo) para prevenir que o texto
seguinte seja recuado como um novo parágrafo.


@node @code{@@quotation}
@section @code{@@quotation}: Citações de Bloco
@anchor{quotation} @c nome antigo
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.2 - @quotation: Citações de Bloco

@cindex Citações
@findex citação

O texto de uma citação é processado como texto normal (fonte regular,
texto é preenchido), exceto que:

@itemize @bullet
@item
ambas as margens esquerda e direita estão mais próximas ao centro da
página, de forma que a totalidade da citação é recuada;

@item
as primeiras linhas de parágrafos não são recuadas mais que outras
linhas; e

@item
um comando @code{@@author} pode ser dado para especificar o autor da
citação.
@end itemize

@quotation
Este é um exemplo de texto escrito entre um comando @code{@@quotation} e
um comando @code{@@end quotation}. Um comando @code{@@quotation} é usado
com frequência para indicar texto que é extraído de outro trabalho
impresso (real ou hipotético).
@end quotation

Escreva um comando @code{@@quotation} como texto sozinho em uma linha.
Essa linha desaparecerá da saída. Marque o final da citação com uma
linha iniciando com e contendo somente @code{@@end quotation}. A linha
do @code{@@end quotation} também desaparecerá da saída.

@code{@@quotation} aceita um argumento opcional, dado no restante da
linha. Esse texto, se presente, é incluído no início da citação, em
negrito, ou, caso contrário, enfatizado, e seguido com um @samp{:}. Por
exemplo:

@example
@@quotation Nota
Isto é
um foo.
@@end quotation
@end example

@noindent
produz:

@quotation Nota
Isto é
um foo.
@end quotation

Se o argumento do @code{@@quotation} for uma destas palavras do Inglês
(não diferencia maiúsculas de minúsculas):

@example
Caution  Important  Note  Tip  Warning
@end example

@cindex marcação @code{<caution>} do Docbook
@cindex marcação @code{<important>} do Docbook
@cindex marcação @code{<note>} do Docbook
@cindex marcação @code{<tip>} do Docbook
@cindex marcação @code{<warning>} do Docbook
@cindex marcação @code{<blockquote>} do HTML
@noindent
então a saída do Docbook usa marcações especiais correspondentes
(@code{<note>}, etc.)@: em vez do padrão @code{<blockquote>}. A saída
HTML sempre usa @code{<blockquote>}.

Se o autor da citação for especificado no bloco @code{@@quotation} com o
comando @code{@@author}, uma linha com o nome do autor é exibida após a
citação:

@example
@@quotation

As pessoas as vezes me perguntam se é pecado na Igreja do Emacs usar vi.
Usar uma versão livre do vi não é pecado; é uma penitência. Então, feliz
hacking.

@@author Richard Stallman
@@end quotation
@end example

@noindent
produz

@quotation
As pessoas as vezes me perguntam se é pecado na Igreja do Emacs usar vi.
Usar uma versão livre do vi não é pecado; é uma penitência. Então, feliz
hacking.

@author Richard Stallman
@end quotation

@findex citaçãopequena
Texinfo também fornece um comando @code{@@smallquotation}, o qual é
exatamente como @code{@@quotation}, mas usa um tamanho de fonte menor
onde for possível. @xref{@code{@@small@dots{}}}.


@node @code{@@indentedblock}
@section @code{@@indentedblock}: Blocos recuados de texto
@cindex Blocos recuados de texto
@findex blocorecuado
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.3 - @indentedblock: Blocos recuados de texto

O ambiente @code{@@indentedblock} é semelhante ao @code{@@quotation},
exceto que o texto somente é recuado a esquerda (e não existe argumento
opcional para um autor). Assim, a fonte do texto permanece inalterada, e
o texto é reunido e preenchido como de costume, mas a margem esquerda é
aumentada. Por exemplo:

@indentedblock
Este é um exemplo de texto escrito entre um comando
@code{@@indentedblock} e um comando @code{@@end indentedblock}. O
ambiente @code{@@indentedblock} pode conter qualquer texto ou outros
comandos desejados.
@end indentedblock

Isso é escrito no fonte do Texinfo como:

@example
@@indentedblock
Este é um exemplo ...
@@end indentedblock
@end example

@findex blocorecuadopequeno
Texinfo também fornece um comando @code{@@smallindentedblock}, que é
exatamente como @code{@@indentedblock}, mas usa um tamanho de fonte
menor onde possível. @xref{@code{@@small@dots{}}}.


@node @code{@@example}
@section @code{@@example}: Texto de Exemplo
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.4 - @example: Texto de Exemplo

@anchor{example} @c nome antigo
@findex exemplo
@cindex Exemplos, formatando
@cindex Formatando exemplos

O ambiente @code{@@example} é usado para indicar um exemplo que não é
parte do texto em execução, como uma saída ou entrada de computador.
Escreva um comando @code{@@example} sozinho no início de uma linha.
Marque o final do exemplo com um comando @code{@@end example}, também
escrito sozinho no início de uma linha.

Um ambiente @code{@@example} tem as seguintes características:

@itemize
@item
Cada linha no arquivo de entrada é uma linha na saída; isto é, o texto
fonte não é preenchido como normalmente é.
@item
Linhas em branco e espaços extras são significantes.
@item
A saída é recuada.
@item
A saída usa uma fonte de largura fixa.
@item
Os comandos do Texinfo @emph{são} expandidos; se você deseja que a saída
seja a entrada literalmente, use o ambiente @code{@@verbatim}
(@pxref{@code{@@verbatim}}).
@end itemize

Por exemplo,

@example
@@example
cp foo @@var@{dest1@}; \
 cp foo @@var@{dest2@}
@@end example
@end example

@noindent
produz:

@example
cp foo @var{dest1}; \
 cp foo @var{dest2}
@end example

As linhas contendo @code{@@example} e @code{@@end example} desaparecerão
da entrada. Para fazer com que a saída apareça bem, você deveria colocar
uma linha em branco antes do @code{@@example} e outra linha em branco
após o @code{@@end example}. As linhas em branco dentro do
@code{@@example} inicial e do @code{@@end example} final, por outro
lado, aparecem na saída.

@quotation Cuidado
Não use ``tabs'' nas linhas de um exemplo! (Ou em qualquer outro lugar
em Texinfo, exceto em ambientes ``verbatim''). O @TeX{} trata os
``tabs'' como espaços simples, e isso não é o que parecem. Em Emacs,
você pode usar @kbd{M-x untabify} para converter ``tabs'' em uma região
para espaços múltiplos.
@end quotation

Os exemplos frequentemente estão, falando logicamente, ``no meio'' de um
parágrafo, e o texto que continua após não deveria ser recuado, como no
exemplo acima. O comando @code{@@noindent} evita que um pedaço de texto
seja recuado como se fosse um parágrafo novo (@pxref{@code{@@noindent}}.

Se você deseja incorporar fragmentos de código em frases, em vez de
exibi-los, use o comando @code{@@code} ou seus parentes
(@pxref{@code{@@code}}).

Se você quer escrever um ``comentário'' em uma linha de um exemplo na
fonte romana normal, você pode usar o comando @code{@@r} (@pxref{Fontes}).


@node @code{@@verbatim}
@section @code{@@verbatim}: Texto Literal
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.5 - @verbatim: Texto Literal

@anchor{verbatim} @c nome antigo
@findex verbatim
@cindex Ambiente verbatim

Use o ambiente @code{@@verbatim} para a impressão de texto que pode
conter caracteres especiais ou comandos que não deveriam ser
interpretados, como saída ou entrada de computador (@code{@@example}
interpreta seu texto como comandos regulares do Texinfo). Isso é útil
especialmente para incluir arquivos gerados automaticamente em um manual
Texinfo.

Geralmente, a saída será exatamente a mesma que a entrada. Nenhuma
substituição de caracteres é feita, por exemplo, todas as linhas em
branco e espaços são significantes, incluindo ``tabs''. No manual
impresso, o texto é produzido em uma fonte de largura fixa, e não
recuado ou preenchido.

Escreva um comando @code{@@verbatim} sozinho no início de uma linha.
Essa linha desaparecerá da saída. Marque o final do bloco ``verbatim''
com um comando @code{@@end verbatim}, também escrito sozinho no início
de uma linha. O @code{@@end verbatim} também desaparecerá da saída.

Por exemplo:
@c oops, tive que enganar isso um pouco: não se pode usar @end verbatim
@c dentro de @verbatim

@example
@exdent @t{@@verbatim}
@exdent @t{@{}
@exdent @key{TAB}@t{@@command com caracteres estranhos: @@'e}
@exdent @t{expanda-@key{TAB}me}
@exdent @t{@}}
@exdent @t{@@end verbatim}
@end example

@noindent
Isso produz:

@verbatim
{
        @command com caracteres estranhos: @'e
expanda-	me
}
@end verbatim

Dado que as linhas contendo @code{@@verbatim} e @code{@@end verbatim}
não produzem saída, tipicamente você deveria colocar uma linha em branco
antes do @code{@@verbatim} e outra linha em branco após o
@code{@@end verbatim}. As linhas em branco entre o início do
@code{@@verbatim} e o final do @code{@@end verbatim} aparecerão na saída.

@cindex Verbatim, pequeno
@cindex Literal, pequeno
@cindex Pequeno verbatim
Você pode obter um literal ``pequeno'' colocando o @code{@@verbatim} em
um ambiente @code{@@smallformat}, conforme mostrado aqui:

@c mais trapaça ...
@smallexample
@exdent @t{@@smallformat}
@exdent @t{@@verbatim}
@exdent @t{... ainda literal, mas em uma fonte menor ...}
@exdent @t{@@end verbatim}
@exdent @t{@@end smallformat}
@end smallexample

Finalmente, uma palavra de alerta: não é confiável usar
@code{@@verbatim} dentro de outras construções do Texinfo.

Veja também @ref{@code{@@verbatiminclude}}.


@node @code{@@lisp}
@section @code{@@lisp}: Marcando um Exemplo da Lisp
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.6 - @lisp: Marcando um Exemplo da Lisp

@anchor{lisp} @c nome antigo
@findex lisp
@cindex Exemplo (ambiente) da Lisp

O comando @code{@@lisp} é usado para código da Lisp. Ele é um sinônimo
do comando @code{@@example}.

@lisp
Este é um exemplo de texto escrito entre um comando @code{@@lisp} e um
comando @code{@@end lisp}.
@end lisp

Use @code{@@lisp} em vez de @code{@@example} para preservar informação
relativa à natureza do exemplo. Isso é útil, por exemplo, se você
escrever uma função que avalia apenas e todo o código Lisp em um arquivo
do Texinfo. Então você pode usar o arquivo Texinfo como uma biblioteca
Lisp. Marque o final do @code{@@lisp} com @code{@@end lisp} sozinho em
uma linha.


@node @code{@@display}
@section @code{@@display}: Exemplos Usando a Fonte de Texto
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.7 - @display: Exemplos Usando a Fonte de Texto

@anchor{display} @c nome antigo
@findex exibição
@cindex Formatação de exibição

O comando @code{@@display} inicia outro tipo de ambiente, onde a fonte é
deixada inalterada, não trocada para máquina de escrever como com
@code{@@example}. Cada linha da entrada ainda produz uma linha de saída,
e a saída ainda é recuada.

@display
Este é um exemplo de texto escrito entre um comando @code{@@display} e
um comando @code{@@end display}. O comando @code{@@display} recua o
texto, mas não o preenche.
@end display

@findex exibiçãopequena
Texinfo também fornece o ambiente @code{@@smalldisplay}, que é como
@code{@@display}, mas usa um tamanho de fonte menor.
@xref{@code{@@small@dots{}}}.


@node @code{@@format}
@section @code{@@format}: Exemplos Usando a Largura Total da Linha
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.8 - @format: Exemplos Usando a Largura Total da Linha

@anchor{format} @c nome antigo
@findex formato

O comando @code{@@format} é similar a @code{@@display}, exceto que deixa
o texto sem recuo. Como @code{@@display}, não seleciona a fonte de
largura fixa.

@format
Este é um exemplo de texto escrito entre um comando @code{@@format} e um
comando @code{@@end format}. Como você pode ver a partir deste exemplo,
o comando @code{@@format} não preenche o texto.
@end format

@findex formatopequeno
Texinfo também fornece o ambiente @code{@@smallformat}, que é como
@code{@@format}, mas usa um tamanho de fonte menor.
@xref{@code{@@small@dots{}}}.


@node @code{@@exdent}
@section @code{@@exdent}: Desfazendo o Recuo de Uma Linha
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.9 - @exdent: Desfazendo o Recuo de Uma Linha

@anchor{exdent} @c nome antigo
@findex exdent
@cindex Recuo, desfazendo

O comando @code{@@exdent} remove qualquer recuo que uma linha possa ter.
O comando é escrito no início de uma linha e se aplica somente ao texto
que segue o comando que está na mesma linha. Não use chaves em volta do
texto. Em um manual impresso, o texto em uma linha @code{@@exdent} é
impresso na fonte romana.

@code{@@exdent} normalmente é usado dentro de exemplos. Assim,

@example
@group
@@example
Esta linha segue um comando @@@@example.
@@exdent Esta linha está sem recuo.
Esta linha segue a linha sem recuo.
O @@@@end example vem na próxima linha.
@@end example
@end group
@end example

@noindent
produz:

@example
@group
Esta linha segue um comando @@example.
@exdent Esta linha está sem recuo.
Esta linha segue a linha sem recuo.
O @@end example vem na próxima linha.
@end group
@end example

Na prática, o comando @code{@@exdent} raramente é usado. Geralmente,
você retira o recuo do texto finalizando o exemplo e retornando a página
para a sua largura normal.

@code{@@exdent} não tem efeito em saída HTML.


@node @code{@@flushleft @@flushright}
@section @code{@@flushleft} e @code{@@flushright}
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.10 - @flushleft e @flushright

@anchor{flushleft e flushright} @c nome antigo
@findex flushleft
@findex flushright
@cindex Direita irregular, sem preencher
@cindex Esquerda irregular, sem preencher

Os comandos @code{@@flushleft} e @code{@@flushright} alinham as
extremidades das linhas nas margens esquerda e direita de uma página,
mas não preenchem o texto. Os comandos são escritos sozinhos em linhas
próprias, sem chaves. Os comandos @code{@@flushleft} e
@code{@@flushright} são finalizados pelos comandos
@code{@@end flushleft} e @code{@@end flushright} sozinhos em suas
próprias linhas.

@need 1500
Por exemplo,

@example
@group
@@flushleft
Este texto está
escrito flushleft.
@@end flushleft
@end group
@end example

@noindent
produz:

@quotation
@flushleft
Este texto está
escrito flushleft.
@end flushleft
@end quotation


@code{@@flushright} produz o tipo de recuo frequentemente usado no
endereço de retorno de cartas. Por exemplo,

@example
@group
@@flushright
Aqui está um exemplo de texto escrito
flushright.  O comando @@code@{@@flushright@}
justifica a direita de cada linha, mas deixa a
extremidade esquerda irregular.
@@end flushright
@end group
@end example

@noindent
produz:

@flushright
Aqui está um exemplo de texto escrito
flushright.  O comando @code{@@flushright}
justifica a direita de cada linha, mas deixa a
extremidade esquerda irregular.
@end flushright


@node @code{@@raggedright}
@section @code{@@raggedright}: Texto Irregular a Direita
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.11 - @raggedright: Texto Irregular a Direita

@anchor{raggedright} @c nome antigo
@findex raggedright
@cindex Irregular a Direita, com preenchimento

O @code{@@raggedright} preenche texto como de costume, mas o texto só é
justificado a esquerda; a margem direita é irregular. O comando é
escrito sozinho em uma linha, sem chaves. O comando @code{@@raggedright}
é finalizado por @code{@@end raggedright} sozinho em uma linha. Esse
comando não tem efeito em saída Info e HTML, onde o texto sempre é
definido como irregular a direita.

O comando @code{@@raggedright} pode ser útil com parágrafos contendo
listas de comandos com nomes longos, quando se sabe antecipadamente que
justificar o texto em ambas as margens fará com que o parágrafo tenha
aparência ruim.

Um exemplo (originário de outro lugar neste manual):

@example
@group
@@raggedright
Comandos para aspas de ângulo duplo e único:
@@code@{@@@@guillemetleft@@@{@@@}@}, @@code@{@@@@guillemetright@@@{@@@}@},
@@code@{@@@@guillemotleft@@@{@@@}@}, @@code@{@@@@guillemotright@@@{@@@}@},
@@code@{@@@@guilsinglleft@@@{@@@}@}, @@code@{@@@@guilsinglright@@@{@@@}@}.
@@end raggedright
@end group
@end example

@noindent
produz:

@raggedright
Comandos para aspas de ângulo duplo e único:
@code{@@guillemetleft@{@}}, @code{@@guillemetright@{@}},
@code{@@guillemotleft@{@}}, @code{@@guillemotright@{@}},
@code{@@guilsinglleft@{@}}, @code{@@guilsinglright@{@}}.
@end raggedright


@node @code{@@noindent}
@section @code{@@noindent}: Omitindo Recuo
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.12 - @noindent: Omitindo Recuo

@anchor{noindent} @c nome antigo
@findex semrecuo
@cindex Omitindo recuo
@cindex Suprimindo recuo
@cindex Recuo, omitindo

Um exemplo ou outra inclusão pode quebrar um parágrafo em segmentos.
Normalmente, os formatadores recuam o texto que segue um exemplo como um
parágrafo novo. Você pode evitar isso caso a caso escrevendo
@code{@@noindent} no início de uma linha, precedendo o texto de
continuação. Você também pode desativar o recuo de todos os parágrafos
globalmente com @code{@@paragraphindent}
(@pxref{@code{@@paragraphindent}}).

Aqui está um exemplo mostrando como eliminar o recuo normal do texto
após um @code{@@example}, uma situação comum:

@example
@group
@@example
Este é um exemplo
@@end example

@@noindent
Esta linha não é recuada. Como você pode ver, o
início da linha é nivelado totalmente com a
linha seguinte.
@end group
@end example

@noindent
produz:

@display
@example
Este é um exemplo
@end example

@noindent
Esta linha não é recuada. Como você pode ver, o
início da linha é nivelado totalmente com a
linha seguinte.
@end display

O uso padrão do @code{@@indent} é exatamente como acima: no início do
que seria de outro modo um parágrafo, para eliminar o recuo que
normalmente acontece ali. O comando ou pode ser seguido por texto ou
estar sozinho em uma linha. Não há razão para usá-lo em outros
contextos, como no meio de um parágrafo ou dentro de um ambiente
(@pxref{Citações e Exemplos}).

Você pode controlar o número de linhas em branco na saída do arquivo
Info ajustando a entrada como desejado: uma linha contendo apenas
@code{@@noindent} não gera uma linha em branco, e também não o faz uma
linha @code{@@end} para um ambiente.

Não coloque chaves após um comando @code{@@noindent}; elas não usadas,
dado que @code{@@noindent} é um comando usado do lado de fora de
parágrafos (@pxref{Sintaxe de Comando}).


@node @code{@@indent}
@section @code{@@indent}: Forçando o Recuo
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.13 - @indent: Forçando o Recuo

@anchor{indent} @c nome antigo
@findex recuo
@cindex Forçando recuo
@cindex Inserindo recuo
@cindex Recuo, forçando

@indent
Para complementar o comando @code{@@noindent} (veja a seção anterior),
Texinfo fornece o comando @code{@@indent} para forçar que um parágrafo
seja recuado. Por exemplo, este parágrafo (o primeiro nesta seção) está
recuado usando um comando @code{@@indent}.

E, de fato, o primeiro parágrafo de uma seção é o lugar mais provável
para se usar @code{@@indent}, para anular o comportamento normal de não
recuo ali (@pxref{@code{@@paragraphindent}}). O comando ou pode ser
seguido por texto ou estar sozinho em uma linha.

Como um caso especial, quando @code{@@indent} é usado em um ambiente
onde o texto não é preenchido, ele produz um espaço de recuo de
parágrafo na saída @TeX{}. (Esses ambientes são onde uma linha de
entrada produz uma linha de saída, como @code{@@example} e
@code{@@display}; para um resumo de todos os ambientes,
@pxref{Comandos de Cercamento de Blocos}).

Não coloque chaves após um comando @code{@@indent}; elas não são usadas,
dado que @code{@@indent} é um comando usado do lado de fora de
parágrafos (@pxref{Sintaxe de Comando}).


@node @code{@@cartouche}
@section @code{@@cartouche}: Retângulos Arredondados
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.14 - @cartouche: Retângulos Arredondados

@anchor{cartouche} @c nome antigo
@findex cartouche
@cindex Caixa com cantos arredondados
@cindex Retângulos arredondados, ao redor do texto

Em um manual impresso, o comando @code{@@cartouche} desenha uma caixa
com cantos arredondados em torno do seu conteúdo. Em HTML, um retângulo
normal é desenhado. @code{@@cartouche} não tem efeito em saída Info.

Você pode usar esse comando para realçar ainda mais um exemplo ou
citação. Por exemplo, você poderia escrever um manual no qual um tipo de
exemplo esteja envolvido por um ``cartouche'' para ênfase.

Por exemplo,

@example
@@cartouche
@@example
% pwd
/usr/local/share/emacs
@@end example
@@end cartouche
@end example

@noindent
cerca o exemplo de duas linhas com uma caixa com cantos arredondados, no
manual impresso.

A saída oriunda do exemplo se parece com isto (se você estiver lendo
isto em Info, você verá que o @code{@@cartouche} não teve efeito):

@cartouche
@example
% pwd
/usr/local/info
@end example
@end cartouche

@code{@@cartouche} também implica @code{@@group}
(@pxref{@code{@@group}}).


@node @code{@@small@dots{}}
@section @code{@@small@dots{}} Comandos de Bloco
@c Capítulo 8 - Citações e Exemplos
@c Seção 8.15 - @code{@@small@dots{}} Comandos de Bloco

@anchor{small} @c nome antigo
@findex smallexample
@findex smallformat
@findex smalllisp
@findex smallquotation
@cindex Exemplos do comando small
@cindex Exemplos em fontes menores
@cindex Citações em fontes menores
@cindex Exemplos da Lisp em fontes menores

Adicionalmente ao @code{@@example} regular e comandos similares, Texinfo
tem comandos estilo de exemplo ``pequeno''. Esses são
@code{@@smallquotation}, @code{@@smallindentedblock},
@code{@@smalldisplay}, @code{@@smallexample}, @code{@@smallformat}, e
@code{@@smalllisp}.

Em saída Info, os comandos @code{@@small@dots{}} são equivalentes aos
seus comandos complementares não ``pequeno''.

Em @TeX{}, entretanto, os comandos @code{@@small@dots{}} produzem texto
em uma fonte menor que os comandos exemplo não-small. Assim, por
exemplo, exemplos de código podem conter linhas mais longas e ainda
caberem em uma página sem a necessidade de serem reescritos.

Um tamanho de fonte menor também é solicitado em saída HTML, e (como de
costume) retido na transliteração XML do Texinfo@tie{}.

Marque o fim de um bloco @code{@@small@dots{}} com um correspondente
@code{@@end small@dots{}} . Por exemplo, emparelhe @code{@@smallexample}
com @code{@@end smallexample}.

Aqui está um exemplo da fonte usada pelo comando @code{@@smallexample}
(em Info, a saída será a mesma como de costume):

@smallexample
@dots{} para ter certeza de que você tem a liberdade de
distribuir cópias de software livre (e cobrar por
esse serviço se você desejar), que você receba o código
fonte ou consiga obtê-lo se quiser, que você pode
modificar o software ou usar partes dele em novos
programas livres; e que você sabe que você pode fazer
essas coisas.
@end smallexample

Os comandos @code{@@small@dots{}} usam o mesmo estilo de fonte que suas
contrapartes normais: @code{@@smallexample} e @code{@@smalllisp} usam
uma fonte de largura fixa, e os demais usam a fonte regular. Eles também
tem o mesmo comportamento em outros aspectos---quando o preenchimento é
feito e quando as margens são reduzidas.

Como regra geral, um documento impresso terá uma melhor aparência se
você usar somente um de (por exemplo) @code{@@example} ou
@code{@@smallexample} consistentemente dentro de um capítulo.



@node Listas e Tabelas
@chapter Listas e Tabelas
@cindex Construindo listas e tabelas
@cindex Listas e tabelas, construindo
@cindex Tabelas e listas, construindo
@c Capítulo 9 - Listas e Tabelas

Texinfo tem várias maneiras de construir listas e tabelas. As listas
podem ser marcadas ou numeradas; tabelas de duas colunas podem realçar
os itens na primeira coluna; tabelas multi colunas também são
suportadas.

@menu
* Listas de Introdução::          Listas de formatos Texinfo para você.
* @code{@@itemize}::              Como construir uma lista simples.
* @code{@@enumerate}::            Como construir uma lista numerada.
* Tabelas de Duas Colunas::       Como construir uma tabela de duas colunas.
* Tabelas Multi Colunas::         Como construir tabelas generalizadas.
@end menu

@node Listas de Introdução
@section Listas de Introdução
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.1 - Listas de Introdução

Texinfo automaticamente recua o texto em listas ou tabelas, e numera uma
lista numerada. Esse último recurso é útil se você modificar a lista,
dado que não precisa renumerá-la você mesmo.

As listas numeradas e tabelas se iniciam com o comando @@ apropriado no
início de uma linha, e finalizam-se com o correspondente @code{@@end}
sozinho em uma linha. Os comandos de tabela e lista de itens também
exigem que você escreva informação de formatação na mesma linha do
comando @@ de inicialização.

Inicie uma lista numerada, por exemplo, com um comando
@code{@@enumerate} e finalize a lista com um comando
@code{@@end enumerate}. Inicie uma lista de itens com um comando
@code{@@itemize}, seguido na mesma linha por um comando de formatação
como @code{@@bullet}, e finalize a lista com um comando
@code{@@end itemize}.
@findex fim

Preceda cada elemento de uma lista com um comando @code{@@item} ou
@code{@@itemx}.

@sp 1
@noindent
Aqui está uma lista de itens dos diferentes tipos de tabela e listas:

@itemize @bullet
@item
Listas de itens com e sem marcações.

@item
Listas numeradas, usando números ou letras.

@item
Tabelas de duas colunas com realçamento.
@end itemize

@sp 1
@noindent
Aqui está uma lista numerada com os mesmos itens:

@enumerate
@item
Listas de itens com e sem marcações.

@item
Listas numeradas, usando números ou letras.

@item
Tabelas de duas colunas com realçamento.
@end enumerate

@sp 1
@noindent
E aqui está uma tabela de duas colunas com os mesmos itens e seus
comandos @w{@@}:

@table @code
@item @@itemize
Listas de itens com e sem marcações.

@item @@enumerate
Listas numeradas, usando números ou letras.

@item @@table
@itemx @@ftable
@itemx @@vtable
Tabelas de duas colunas, opcionalmente com indexação.
@end table


@node @code{@@itemize}
@section @code{@@itemize}: Construindo Uma Lista de Itens
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.2 - @itemize: Construindo Uma Lista de Itens

@anchor{itemize} @c nome antigo
@findex itemize
@cindex Itemização

O comando @code{@@itemize} produz uma sequência de ``itens'', cada um
iniciando com uma bola ou outra marca dentro da margem esquerda, e
geralmente recuados.

@cindex @code{@@w}, para itens em branco
Inicie uma lista de itens escrevendo @code{@@itemize} no início de uma
linha. Siga o comando, na mesma linha, com um caractere ou um comando do
Texinfo que gera uma marca. Geralmente, você usará @code{@@bullet} após
@code{@@itemize}, mas você pode usar @code{@@minus}, ou qualquer comando
ou caractere que resulte em um caractere único no arquivo Info. (Quando
você escrever o comando de marca como @code{@@bullet} após um comando
@code{@@itemize}, você pode omitir o @samp{@{@}}). Se você não
especificar um comando de marca, o padrão é @code{@@bullet}. Se você não
quer nenhuma marca, mas ainda quer itens lógicos, use @code{@@w@{@}}
(nesse caso as chaves são obrigatórias).

@findex item
Após o @code{@@itemize}, escreva seus itens, cada um iniciando com
@code{@@item}. O texto pode seguir na mesma linha que @code{@@item}. O
texto de um item pode continuar por mais que um parágrafo.

Deveria existir ao menos um @code{@@item} dentro do ambiente
@code{@@itemize}. Se nenhum estiver presente, @code{makeinfo} emite um
alerta. Se você apenas deseja texto recuado e não uma lista de itens,
use @code{@@indentedblock}; @pxref{@code{@@indentedblock}}.

As entradas de índice e comentários que são dados antes de um
@code{@@item} incluindo o primeiro, são automaticamente movidos
(internamente) para após o @code{@@item}, de forma que a saída esteja
como esperada. Historicamente essa tem sido uma prática comum.

Geralmente, você deveria colocar uma linha em branco entre os itens.
Isso coloca uma linha em branco no arquivo Info. (O @TeX{} insere o
espaço vertical apropriado em qualquer caso). Exceto quando as entradas
são muito breves, esses espaços em branco fazem a lista ter uma
aparência melhor.

Aqui está um exemplo do uso de @code{@@itemize}, seguido pela saída que
esse comando produz. O @code{@@bullet} produz um @samp{*} em Info e um
ponto redondo em outros formatos de saída.

@example
@group
@@itemize @@bullet
@@item
Algum texto para foo.

@@item
Algum texto
para bar.
@@end itemize
@end group
@end example

@noindent
Isso produz:

@quotation
@itemize @bullet
@item
Algum texto para foo.

@item
Algum texto
para bar.
@end itemize
@end quotation

As listas de itens podem ser incorporadas em outras listas de itens.
Aqui está uma lista marcada com traços embutida em uma lista marcada com
marcadores:

@example
@group
@@itemize @@bullet
@@item
Primeiro item.

@@itemize @@minus
@@item
Item interno.

@@item
Segundo item interno.
@@end itemize

@@item
Segundo item externo.
@@end itemize
@end group
@end example

@noindent
Isso produz:

@quotation
@itemize @bullet
@item
Primeiro item.

@itemize @minus
@item
Item interno.

@item
Segundo item interno.
@end itemize

@item
Segundo item externo.
@end itemize
@end quotation


@node @code{@@enumerate}
@section @code{@@enumerate}: Fazendo Uma Lista Numerada ou Uma Com Letras
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.3 - @code{@@enumerate}: Fazendo Uma Lista Numerada ou Uma Com Letras

@anchor{enumerate} @c nome antigo
@findex enumerar
@cindex Enumeração

@code{@@enumerate} é como @code{@@itemize} (@pxref{@code{@@itemize}}),
exceto que os rótulos nos itens são números inteiros sucessivos ou
letras em vez de marcadores.

Escreva o comando @code{@@enumerate} no início de uma linha. O comando
não exige um argumento, mas aceita ou um número ou uma letra como uma
opção. Sem um argumento, @code{@@enumerate} inicia a lista com o número
@samp{1}. Com um argumento numérico, como @samp{3}, o comando inicia a
lista com aquele número. Com uma letra maiúscula ou minúscula, como
@samp{A} ou @samp{a}, o comando inicia a lista com aquela letra.

Escreva o texto da lista numerada da mesma maneira que uma lista de
itens: escreva a linha iniciando com @code{@@item} no início de cada
item na enumeração. Está OK ter texto seguindo o @code{@@item}, e o
texto para um item pode continuar por vários parágrafos.

Você deveria colocar uma linha em branco entre as entradas na lista.
Isso geralmente torna mais fácil ler o arquivo Info.

@need 1500
Aqui está um exemplo do @code{@@enumerate} sem um argumento:

@example
@group
@@enumerate
@@item
Causas subjacentes.

@@item
Causas imediatas.
@@end enumerate
@end group
@end example

@noindent
Isso produz:

@enumerate
@item
Causas subjacentes.

@item
Causas imediatas.
@end enumerate
@sp 1
Aqui está um exemplo com um argumento de @kbd{3}:
@sp 1
@example
@group
@@enumerate 3
@@item
Causas predisponentes.

@@item
Causas precipitantes.

@@item
Causas perpetuantes.
@@end enumerate
@end group
@end example

@noindent
Isso produz:

@enumerate 3
@item
Causas predisponentes.

@item
Causas precipitantes.

@item
Causas perpetuantes.
@end enumerate
@sp 1
Aqui está um resumo breve das alternativas. O resumo é construído usando
@code{@@enumerate} com um argumento de @kbd{a}.

@sp 1
@enumerate a
@item
@code{@@enumerate}

Sem um argumento, produz uma lista numerada, com o primeiro item
numerado@tie{}1.

@item
@code{@@enumerate @var{unsigned-integer}}

Com um argumento numérico (não sinalado), inicia uma lista numerada com
aquele número. Você pode usar isso para continuar uma lista que você
interrompeu com outro texto.

@item
@code{@@enumerate @var{upper-case-letter}}

Com uma letra maiúscula como argumento, inicia uma lista na qual cada
item é marcado por uma letra, iniciando com aquela letra maiúscula.

@item
@code{@@enumerate @var{lower-case-letter}}

Com uma letra minúscula como argumento, inicia uma lista na qual cada
item é marcado por uma letra, iniciando com aquela letra minúscula.
@end enumerate

Você também pode aninhar listas enumeradas, como em uma estrutura de
tópicos.


@node Tabelas de Duas Colunas
@section Fazendo Uma Tabela de Duas Colunas
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.4 - Fazendo Uma Tabela de Duas Colunas

@cindex Tabelas, construindo duas colunas
@findex tabela

@code{@@table} é similar a @code{@@itemize} (@pxref{@code{@@itemize}}),
mas permite especificar um nome ou uma linha de título para cada item. O
comando @code{@@table} é usado para produzir tabelas de duas colunas, e
é especialmente útil para glossários, exibições explicativas, e resumos
de opções de linha de comando.

@menu
* @code{@@table}::                      Como construir uma tabela de duas colunas.
* @code{@@ftable @@vtable}::            Indexamento automático para tabelas de duas colunas.
* @code{@@itemx}::                      Como colocar mais entradas na primeira coluna.
@end menu

@node @code{@@table}
@subsection Usando o Comando @code{@@table}
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.4 - Fazendo Uma Tabela de Duas Colunas
@c Subseção 9.4.1 - Usando o Comando @table

@anchor{table} @c nome antigo

@cindex Listas de definição, compondo
Use o comando @code{@@table} para produzir uma tabela de duas colunas.
Esse comando tipicamente é usado quando você tem uma lista de itens e um
texto breve com cada um, como uma lista de definições.

Escreva o comando @code{@@table} no início de uma linha, após uma linha
em branco, e siga-o, na mesma linha, com um argumento que é um comando
de ``indicação'', como @code{@@code}, @code{@@samp}, @code{@@var},
@code{@@option}, ou @code{@@kbd} (@pxref{Indicando}). Esse comando será
aplicado ao texto na primeira coluna. Por exemplo, @code{@@table @@code}
fará com que o texto na primeira coluna seja produzido como se ele
tivesse sido o argumento para um comando @code{@@code}.

@anchor{@code{@@asis}} @c nome do comando com @, para consistência
@findex asis
Você pode usar o comando @code{@@asis} como um argumento para
@code{@@table}. @code{@@asis} é um comando que não faz nada: se você
usar esse comando após @code{@@table}, as entradas da primeira coluna
são exibidas sem realce adicional (``como está'').

O comando @code{@@table} funciona com outros comandos além daqueles
mencionados explicitamente aqui. Entretanto, você só pode usar comandos
predefinidos do Texinfo que recebam um argumento entre chaves. Você não
pode confiavelmente usar um comando novo definido com @code{@@macro},
embora um @code{@@alias} seja aceitável (para um comando predefinido
adequado). @xref{Definindo Novos Comandos do Texinfo}.

@findex item
Inicie cada entrada da tabela com um comando @code{@@item} no início de
uma linha. Escreva o texto para a primeira coluna na mesma linha que o
comando @code{@@item}. Escreva o texto para a segunda coluna na linha
seguinte à linha @code{@@item} e em linhas subsequentes. Você pode
escrever quantas linhas de texto de apoio desejar, até mesmo vários
parágrafos. Mas, somente o texto na mesma linha que @code{@@item} será
colocado na primeira coluna (incluindo quaisquer notas de rodapé). Você
não precisa digitar nada para uma segunda coluna vazia.

Normalmente, você deveria colocar uma linha em branco antes de uma linha
@code{@@item}, (exceto a primeira). Isso coloca uma linha em branco no
arquivo Info. Exceto quando as entradas são muito breves, uma linha em
branco parece melhor. Finalize a tabela com uma linha consistindo de
@code{@@end table}, seguido por uma linha em branco. O @TeX{} sempre
iniciará um parágrafo novo após a tabela, de forma que a linha em branco
é necessária para que a saída Info seja análoga.

@need 1500
Por exemplo, a tabela seguinte realça o texto na primeira coluna com o
comando @code{@@samp}:

@example
@group
@@table @@samp
@@item foo
Este é o texto para
@@samp@{foo@}.

@@item bar
Texto para @@samp@{bar@}.
@@end table
@end group
@end example

@noindent
Isso produz:

@table @samp
@item foo
Este é o texto para
@samp{foo}.
@item bar
Texto para @samp{bar}.
@end table

Se você quer listas dois ou mais itens nomeados com um bloco único de
texto, use o comando @code{@@itemx}. (@xref{@code{@@itemx}}).

O comando @code{@@table} (@pxref{@code{@@table}}) não é suportado dentro
do @code{@@display}. Dado que @code{@@display} é orientado a linha, não
faz sentido usá-los juntos. Se você deseja recuar uma tabela, tente
@code{@@quotation} (@pxref{@code{@@quotation}}) ou
@code{@@indentedblock} (@pxref{@code{@@indentedblock}}).


@node @code{@@ftable @@vtable}
@subsection @code{@@ftable} e @code{@@vtable}
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.4 - Fazendo Uma Tabela de Duas Colunas
@c Subseção 9.4.2 - @ftable e @vtable

@anchor{ftable vtable} @c nome antigo
@findex ftable
@findex vtable
@cindex Tabelas com indexação
@cindex Indexando entradas de tabela automaticamente

Os comandos @code{@@ftable} e @code{@@vtable} são os mesmos que o
comando @code{@@table}, exceto que @code{@@ftable} automaticamente
insere cada um dos itens na primeira coluna da tabela no índice de
funções e @code{@@vtable} automaticamente insere cada um dos itens na
primeira coluna da tabela no índice de variáveis. Apenas os itens na
mesma linha que os comandos @code{@@item} ou @code{@@itemx} são
indexados, e são indexados exatamente na forma em que aparecem nessa
linha. @xref{Índices}, para mais informação acerca de índices.

Inicie uma tabela de duas colunas usando @code{@@ftable} ou
@code{@@vtable} escrevendo o comando @@ no início de uma linha, seguido
na mesma linha por um argumento que é um comando do Texinfo, como
@code{@@code}, exatamente como você faria para um comando
@code{@@table}; e termine a tabela com um comando @code{@@end ftable} ou
@code{@@end vtable} sozinho em uma linha.

Veja o exemplo para @code{@@table} na seção anterior.


@node @code{@@itemx}
@subsection @code{@@itemx}: Segundo e Itens Subsequentes
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.4 - Fazendo Uma Tabela de Duas Colunas
@c Subseção 9.4.3 - @itemx: Segundo e Itens Subsequentes

@anchor{itemx} @c nome antigo
@cindex Dois itens nomeados para @code{@@table}
@findex itemx

Use o comando @code{@@itemx} dentro de uma tabela quando você tiver duas
ou mais entradas de primeira coluna para o mesmo item, cada uma das
quais deveria aparecer sozinha em uma linha.

Use @code{@@item} para a primeira entrada, e @code{@@itemx} para todas
as entradas subsequentes; @code{@@itemx} sempre deve seguir um comando
@code{@@item}, sem linhas em branco entre eles.

O comando @code{@@itemx} funciona exatamente como @code{@@item}, exceto
que não gera espaço vertical extra acima do texto da primeira coluna. Se
você tiver múltiplos comandos @code{@@itemx} consecutivos, não insira
quaisquer linhas em branco entre eles.

Por exemplo,

@example
@group
@@table @@code
@@item upcase
@@itemx downcase
Essas duas funções aceitam um caracter ou uma sequência de caracteres
como argumento, e retornam o correspondente caracter ou a sequência de
caracteres escritos em letras maiúsculas (minúsculas).
@@end table
@end group
@end example

@noindent
Isso produz:

@table @code
@item upcase
@itemx downcase
Essas duas funções aceitam um caractere ou uma sequência de caracteres
como argumento, e retornam o correspondente caractere ou a sequência de
caracteres escritos em letras maiúsculas (minúsculas).
@end table

@noindent
(Note também que esse exemplo ilustra texto de apoio multi linha em uma
tabela de duas colunas).


@node Tabelas Multi Colunas
@section @code{@@multitable}: Tabelas Multi Colunas
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.5 - @multitable: Tabelas Multi Colunas

@findex multitabela
@cindex Tabelas, construindo multi coluna

@code{@@multitable} permite que você construa tabelas com qualquer
número de colunas, com cada coluna tendo qualquer largura que você
goste.

Você define as larguras da coluna em uma linha @code{@@multitable}
sozinha, e escreve cada linha da atual tabela seguindo um comando
@code{@@item}, com colunas separadas por um comando @code{@@tab}.
Finalmente, @code{@@end multitable} completa a tabela. Detalhes nas
seções abaixo.

@menu
* Larguras de Colunas Multi Tabelas::   Definindo tamanhos de coluna multi tabela.
* Linhas de Multi Tabelas::             Definindo linhas multi tabela, com exemplos.
@end menu

@node Larguras de Colunas Multi Tabelas
@subsection Larguras de Colunas Multi Tabelas
@cindex Larguras de colunas multitabelas
@cindex Larguras de coluna, definindo para multitabelas
@cindex Larguras, definindo coluna multitabela
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.5 - @multitable: Tabelas Multi Colunas
@c Subseção 9.5.1 - Larguras de Colunas Multi Tabelas

Você pode definir as larguras de coluna para uma multi tabela de duas
maneiras: como frações do comprimento da linha; ou com uma linha de
protótipo. A mesclagem dos dois métodos não é suportada. Em qualquer
caso, as larguras são definidas inteiramente na mesma linha que o
comando @code{@@multitable}.

@enumerate
@item
@findex fraçõescolunas
@cindex Comprimento de linha, larguras de coluna como fração de
Para especificar larguras de coluna como frações do comprimento de
linha, escreva @code{@@columnfractions} e os números decimais
(presumivelmente menor que 1; um zero no início é permitido e ignorado)
após o comando @code{@@multitable}, como em:

@example
@@multitable @@columnfractions .33 .33 .33
@end example

As frações não precisam somar exatamente a 1.0, como essas não fazem.
Isso permite produzir tabelas que não precisam do comprimento total da
linha.

@item
@cindex Linha de protótipo, larguras de coluna definidas por
Para especificar uma linha de protótipo, escreva a entrada mais longa
para cada coluna entre chaves após o comando @code{@@multitable}. Por
exemplo:

@example
@@multitable @{algum texto para a coluna um@} @{para a coluna dois@}
@end example

@noindent
A primeira coluna terá então a largura do conjunto de caracteres `algum
texto para a coluna um' e a segunda coluna a largura de `para a coluna
dois'.

As entradas de protótipo não precisam aparecer na própria tabela.

Embora tenhamos usado texto simples nesse exemplo, as entradas de
protótipo podem conter comandos do Texinfo; comandos de marcação, como
@code{@@code}, são particularmente prováveis de serem úteis.

@end enumerate


@node Linhas de Multi Tabelas
@subsection Linhas de Multi Tabelas
@c Capítulo 9 - Listas e Tabelas
@c Seção 9.5 - @multitable: Tabelas Multi Colunas
@c Subseção 9.5.2 - Linhas de Multi Tabelas

@cindex Linhas de multi tabelas
@cindex Linhas, de uma multi tabela

@findex item
@findex tab
Após o comando @code{@@multitable} definindo as larguras de coluna (veja
a seção anterior), você inicia cada linha no corpo de uma multi tabela
com @code{@@item}, e separa as entradas de coluna com @code{@@tab}. As
quebras de linha não são especiais dentro do corpo da tabela, e você
pode quebrar linhas de entrada em seu arquivo fonte se necessário.

@findex headitem
@cindex Linha de cabeçalho, em tabela
@cindex Marcação @code{<thead>} do HTML/XML
Você também pode usar @code{@@headitem} em vez de @code{@@item} para
produzir uma @dfn{linha de cabeçalho}. A saída do @TeX{} para tal linha
é em negrito, e a saída HTML e Docbook usa a marcação @code{<thead>}. Em
Info, a linha de cabeçalho é seguida por uma linha separadora feita de
traços (caracteres @samp{-}).

@findex headitemfont
@cindex Fonte para linhas de cabeçalho multi tabela
O comando @code{@@headitemfont} pode ser usado em modelos quando as
entradas em uma linha @code{@@headitem} precisarem ser usadas em um
modelo. É um sinônimo para @code{@@b}, mas usar @code{@@headitemfont}
evita qualquer dependência daquele estilo específico de fonte, no caso
de fornecemos uma maneira de alterá-lo no futuro.

Aqui está um exemplo completo de uma tabela multi coluna (o texto é
originário de @cite{O Manual do GNU Emacs},
@pxref{Split Window,, Splitting Windows, emacs, O Manual do GNU Emacs}): @c Referência externa. Manter sem alteração!

@example
@@multitable @@columnfractions .15 .45 .4
@@headitem Tecla @@tab Comando @@tab Descrição
@@item C-x 2
@@tab @@code@{split-window-vertically@}
@@tab Divide a janela selecionada em duas janelas,
com uma acima da outra.
@@item C-x 3
@@tab @@code@{split-window-horizontally@}
@@tab Divide a janela selecionada em duas janelas
posicionadas lado a lado.
@@item C-Mouse-2
@@tab
@@tab Na linha de modo ou barra de rolagem de uma janela,
divide aquela janela.
@@end multitable
@end example

@noindent
produz:

@multitable @columnfractions .15 .45 .4
@headitem Tecla @tab Comando @tab Descrição
@item C-x 2
@tab @code{split-window-vertically}
@tab Divide a janela selecionada em duas janelas,
com uma acima da outra.
@item C-x 3
@tab @code{split-window-horizontally}
@tab Divide a janela selecionada em duas janelas
posicionadas lado a lado.
@item C-Mouse-2
@tab
@tab Na linha de modo ou barra de rolagem de uma janela,
divide aquela janela.
@end multitable


@node Exibições Especiais
@chapter Exibições Especiais
@cindex Exibições especiais
@c Capítulo 10 - Exibições Especiais

Os comandos neste capítulo permitem escrever texto que é especialmente
exibido (permissão de formato de saída), fora do fluxo normal de
documento.

Um conjunto de tais comandos é para a criação de ``flutuadores'', isto
é, figuras, tabelas, e afins, configuradas a partir do texto principal,
possivelmente numeradas, rotuladas, e (ou) referenciadas a partir de
outro lugar no documento. As imagens frequentemente são incluídas nessas
exibições.

Outro grupo de comandos é para a criação de notas de rodapé em Texinfo.

@menu
* Flutuações::                   Figuras, tabelas, e afins.
* Imagens::                      Incluindo gráficos e imagens.
* Notas de Rodapé::              Escrevendo notas de rodapé.
@end menu


@node Flutuações
@section Flutuações
@cindex Flutuações, em geral
@c Capítulo 10 - Exibições Especiais
@c Seção 10.1 - Flutuações

Um @dfn{flutuador} é uma exibição que é configurada a partir do texto
principal. É tipicamente rotulado como sendo uma ``Figura'', ``Tabela'',
``Exemplo'' ou algum tipo similar.

@cindex Flutuando, ainda não implementado
Um flutuador é assim nomeado porque, teoricamente, pode ser movido para
o pé ou topo da página atual, ou para uma página seguinte, na saída
impressa. (Flutuação não faz sentido em outros formatos de saída). Na
presente versão de Texinfo, entretanto, essa flutuação infelizmente
ainda não está implementada. Em vez disso, o material flutuante é
simplesmente produzido na localização atual, mais ou menos como se fosse
um @code{@@group} (@pxref{@code{@@group}}).

@menu
* @code{@@float}::                      Produzindo material que flutua.
* @code{@@caption @@shortcaption}::     Especificando descrições para flutuações.
* @code{@@listoffloats}::               Um Sumário para flutuações.
@end menu


@node @code{@@float}
@subsection @code{@@float} [@var{tipo}][,@var{rótulo}]: Material Flutuante
@c Capítulo 10 - Exibições Especiais
@c Seção 10.1 - Flutuadores
@c Subseção 10.1.1 - @float [tipo][,rótulo]: Material Flutuante

@anchor{float} @c nome antigo
@findex float
@cindex Ambiente float

Para produzir material flutuante, coloque o material que você quer que
seja exibido separado entre os comandos @code{@@float} e
@code{@@end float}, sozinhos em suas linhas.

Material flutuante geralmente usa @code{@@image} para exibir um gráfico
já existente (@pxref{Imagens}), ou @code{@@multitable} para exibir uma
tabela (@pxref{Tabelas Multi Colunas}). Entretanto, o conteúdo do
flutuador podem ser qualquer coisa. Aqui está um exemplo com texto
simples:

@example
@@float Figura,fig:ex1
Este é um flutuador de exemplo.
@@end float
@end example

@noindent
E a saída:

@float Figura,fig:ex1
Este é um flutuador de exemplo.
@end float

Como mostrado no exemplo, @code{@@float} recebe dois argumentos
(separados por vírgula), @var{tipo} e @var{rótulo}. Ambos são opcionais.

@table @var
@item tipo
Especifica a classe do flutuador; tipicamente uma palavra como
``Figura'', ``Tabela'', etc. Se não for dada, e @var{rótulo} for,
quaisquer referências cruzadas simplesmente usarão um número despojado.

@item rótulo
Especifica um rótulo de referência cruzada para este flutuador. Se dado,
a este flutuador é automaticamente dado um número, e aparecerá em
qualquer saída @code{@@listoffloats} (@pxref{@code{@@listoffloats}}).
Referências cruzadas a @var{rótulo} são permitidas.

@cindex Flutuadores, fazendo não numerados
@cindex Flutuador não numerado, criando
Por outro lado, se @var{rótulo} não for dado, então o flutuador não será
numerado e consequentemente não aparecerá na saída @code{@@listoffloats}
ou ser referenciável.
@end table

@noindent
Ordinariamente, você especifica ambos @var{tipo} e @var{rótulo}, para
obter um flutuador rotulado e numerado.

@cindex Flutuadores, numeração de
@cindex Numeração de flutuadores
Em Texinfo, todos os flutuadores são numerados na mesma maneira: com o
número do capítulo (ou letra do apêndice), um ponto, e o número do
flutuador, o qual simplesmente conta 1, 2, 3, @dots{}, e é zerado a cada
capítulo. Cada tipo de flutuador é contado independentemente.

Os flutuadores dentro de @code{@@unnumbered}, ou fora de qualquer
capítulo, são numerados simplesmente consecutivamente a partir de 1.

Essas convenções de numeração não são, atualmente, modificáveis.


@node @code{@@caption @@shortcaption}
@subsection @code{@@caption} e @code{@@shortcaption}
@c Capítulo 10 - Exibições Especiais
@c Seção 10.1 - Flutuadores
@c Subseção 10.1.2 - @caption e @shortcaption

@anchor{caption shortcaption} @c nome antigo
@findex caption
@findex shortcaption
@cindex Legendas, para flutuadores
@cindex Legendas curtas, para listas de flutuadores

Você pode escrever um @code{@@caption} em qualquer lugar dentro de um
ambiente @code{@@float}, para definir uma legenda para o flutuador.  Não
é permitido em qualquer outro contexto.  @code{@@caption} recebe somente
um argumento, envolvido em chaves.  Aqui está um exemplo:

@example
@@float
Um exemplo de flutuador, com caption.
@@caption@{Caption para exemplo de flutuador.@}
@@end float
@end example

@noindent A saída é:

@float
Um exemplo de flutuador, com caption.
@caption{Caption para exemplo de flutuador.}
@end float

@code{@@caption} pode aparecer em qualquer lugar dentro do flutuador;
@code{@@caption} não é processado até o @code{@@end float}.  O texto do
caption geralmente é uma sentença ou duas, porém pode consistir de
vários parágrafos se necessário.

Na saída, o caption sempre aparece abaixo do flutuador; isso atualmente
não é modificável.  O caption é precedido pelo número e/ou tipo do
flutuador, conforme especificado para o comando @code{@@float}
(veja-se a seção anterior).

O comando @code{@@shortcaption} igualmente pode ser usado somente dentro
de @code{@@float}, e recebe somente um argumento dentro de chaves.  O
texto curto de caption é usado em vez do texto de caption em uma lista
de flutuadores (veja-se a próxima seção).  Assim, você pode escrever um
caption longo para o documento principal, e um título curto aparecer na
lista de flutuadores.  Por exemplo:

@example
@@float
... conforme acima ...
@@shortcaption@{Texto para a lista de flutuadores.@}
@@end float
@end example

O texto para @code{@@shortcaption} pode não conter comentários
(@code{@@c}), texto literal (@code{@@verb}), ambientes como
@code{@@example}, notas de rodapé (@code{@@footnote}) ou outras
construções complexas.  As mesmas restrições se aplicam ao
@code{@@caption} a menos que exista um @code{@@shortcaption}.


@node @code{@@listoffloats}
@subsection @code{@@listoffloats}: Tabelas de Conteúdos para Flutuadores
@c Capítulo 10 - Exibições Especiais
@c Seção 10.1 - Flutuadores
@c Subseção 10.1.3 - @listoffloats: Tabelas de Conteúdos para Flutuadores

@anchor{listoffloats}@c nome antigo
@findex listoffloats
@cindex Lista de flutuadores
@cindex Flutuadores, lista de
@cindex Tabela de conteúdo, para flutuadores

Você pode escrever um comando @code{@@listoffloats} para gerar uma lista
de flutuadores para um dado tipo de flutuador (@pxref{@code{@@float}}),
semelhante ao Sumário geral do documento. Tipicamente, o
comando é escrito no nó @code{@@unnumbered} dele próprio para prover
um cabeçalho e estrutura, mais como @code{@@printindex}
(@pxref{Imprimindo Índices e Menus}).

@code{@@listoffloats} recebe um argumento opcional, o tipo de flutuador.
Eis um exemplo:

@example
@@node List of Figures
@@unnumbered List of Figures
@@listoffloats Figure
@end example

@noindent E aqui está com o que se parece a saída a partir de
@code{@@listoffloats}, dada a figura de exemplo anterior neste capítulo
(a saída Info está formatada como um menu):

@display
@ifinfo
*      Figure 12.1:      fig:ex1.
@end ifinfo
@ifnotinfo
@listoffloats Figure
@end ifnotinfo
@end display

Sem qualquer argumento, @code{@@listoffloats} gera uma lista de
flutuadores para os quais nenhum tipo de flutuador foi especificado,
isto é, sem primeiro argumento para o comando @code{@@float}
(@pxref{@code{@@float}}).

Cada linha na lista de flutuadores contém o tipo de flutuador (se
algum), o número do flutuador, e a legenda, se alguma---o argumento
@code{@@shortcaption}, se foi especificado, do contrário o argumento
@code{@@caption}. Em Info, o resultado é um menu onde cada flutuador
pode ser selecionado. Em HTML, cada linha é um link para o flutuador. Em
saída impressa, o número da página é incluído.

Flutuadores não numerados (aqueles sem rótulos de referência cruzada)
são omitidos da lista de flutuadores.


@node Imagens
@section Inserindo Imagens
@c Capítulo 10 - Exibições Especiais
@c Seção 10.2 - Inserindo Imagens

@cindex Imagens, inserindo
@cindex Fotos, inserindo
@findex image

Você pode inserir uma imagem dada em um arquivo externo com o comando
@code{@@image}. Apesar de imagens poderem ser usadas em qualquer lugar,
incluindo o meio de um parágrafo, nós as descrevemos neste capítulo dado
que elas (as imagens) são mais frequentemente parte de uma figura
exibida ou exemplo.

@menu
* Sintaxe da Imagem::
* Escalonamento da Imagem::
@end menu


@node Sintaxe da Imagem
@subsection Sintaxe da Imagem
@c Capítulo 10 - Exibições Especiais
@c Seção 10.2 - Inserindo Imagens
@c Subseção 10.2.1 - Sintaxe da Imagem

Aqui está a sinopse do comando @code{@@image}:

@example
@@image@{@var{filename}@r{[,} @var{width}@r{[,} @var{height}@r{[,} @var{alttext}@r{[, }@var{extension}@r{]]]]}@}
@end example

@cindex Formatos para imagens
@cindex Formatos de imagem
O argumento @var{filename} é obrigatório, e não deve ter uma extensão,
pois os diferentes processadores suportam formatos diferentes:

@itemize @bullet
@item
@pindex eps image format
@TeX{} (saída DVI) lê o arquivo @file{@var{filename}.eps}
(formato PostScript Encapsulado).

@item
@pindex pdftex@r{, e imagens}
@pindex png image format
@pindex jpeg image format
@pindex pdf image inclusions
pdf@TeX{} Lê @file{@var{filename}.pdf}, @file{@var{filename}.png},
@file{@var{filename}.jpg}, ou @file{@var{filename}.jpeg} (nessa ordem).
Também tenta as versões em letras maiúsculas das extensões. O formato
PDF não suporta imagens EPS, de forma que essas devem ser convertidas
primeiro.

@item
Para Info, @code{makeinfo} inclui @file{@var{filename}.txt} literal
(mais ou menos como se estivesse em @code{@@verbatim}). A saída Info
também pode incluir uma referência para @file{@var{filename}.png} ou
@file{@var{filename}.jpg}. (Veja-se abaixo).

@item
Para HTML, @code{makeinfo} emite uma referência para
@file{@var{filename}.png}, @file{@var{filename}.jpg},
@file{@var{filename}.jpeg} ou @file{@var{filename}.gif} (nessa ordem).
Se nenhum desses existir, então dá um erro, e emite uma referência para
@file{@var{filename}.jpg} de qualquer maneira.

@item
@cindex Imagens SVG, usadas em Docbook
Para Docbook, @code{makeinfo} emite referências para
@file{@var{filename}.eps}, @file{@var{filename}.gif}
@file{@var{filename}.jpeg}, @file{@var{filename}.jpg},
@file{@var{filename}.pdf}, @file{@var{filename}.png} e
@file{@var{filename}.svg}, para cada arquivo encontrado. Também,
@file{@var{filename}.txt} é incluído literalmente, se presente.
(Supõe-se que o processador Docbook subsequente escolha o adequado).

@item
Para saída Info e HTML, @code{makeinfo} usa o quinto argumento opcional
@var{extension} para @code{@@image} para a extensão de nome de arquivo,
se for especificado e o arquivo for encontrado. Qualquer ponto inicial
deveria ser incluído em @var{extension}. Por exemplo:

@pindex XPM image format
@example
@@image@{foo,,,,.xpm@}
@end example

@end itemize

Se você deseja instalar arquivos de imagens para uso por leitores Info,
então recomenda-se colocá-los em um subdiretório como
@samp{@var{foo}-figures} para um pacote @var{foo}. A cópia dos arquivos
para @code{$(infodir)/@var{foo}-figures/} deveria ser feita em seu
@code{Makefile}.

Os argumentos @var{width} e @var{height} estão descritos na próxima
seção.

Para saída @TeX{}, se uma imagem for a única coisa em um parágrafo, ela
ordinariamente será exibida em uma linha própria, respeitando o recuo
atual do ambiente, porém sem o recuo normal do parágrafo. Se você quiser
a imagem centralizada, então use @code{@@center}
(@pxref{@code{@@titlefont @@center @@sp}}).

@cindex Atributo Alt para imagens
@cindex Imagens, texto alternativo para
@findex @sortas{-} -@r{ (na string alt da imagem)} @c CONSERTE-ME
Para saída HTML, @code{makeinfo} configura o @dfn{atributo alt} para
imagens inline para o (quarto) argumento opcional @var{alttext} para
@code{@@image}, se fornecido. Se não fornecido, então @code{makeinfo}
usa o nome completo de arquivo da imagem sendo exibida. A @var{alttext}
é processada como texto Texinfo, de forma que caracteres especiais, tais
como @samp{"} e @samp{<} e @samp{&}, são escapados na saída HTML; também,
você pode obter uma sequência @code{alt} vazia com @code{@@-} (um
comando que não produz saída; @pxref{@code{@@- @@hyphenation}}).

Para saída Info, a sequência @code{alt} também é processada como texto
de Texinfo e saída. Nesse caso, @samp{\} é escapada como @samp{\\} e
@samp{"} como @samp{\"}; outros escapes não são feitos.

Em saída Info, @code{makeinfo} escreve uma referência para o arquivo
binário de imagem (tentando @var{filename} com a extensão
@file{@var{extension}}, @file{@var{.extension}}, @file{.png}, ou
@file{.jpg}, nessa ordem) se um existir. Também incluir literalmente o
arquivo @file{.txt} se um existir. Dessa maneira, os leitores Info que
podem exibir imagens (tais como o navegador Emacs Info, sendo executado
sob X) podem fazer isso, ao passo que leitores Info que somente podem
usar texto (tais como o leitor autônomo Info) podem exibir a versão
textual.

@cindex @samp{^@@^H} para imagens no Info
A implementação para isso é colocar o seguinte construtor na saída de
Info:

@example
^@@^H[image src="@var{binaryfile}" text="@var{txtfile}"
           alt="@var{alttext} ... ^@@^H]
@end example

@noindent onde @samp{^@@} e @samp{^H} significam os caracteres atuais de
controle ``null'' e ``backspace''. Se um dos arquivos não estiver
presente, então o correspondente argumento é omitido.

A justificativa para se mencionar isso aqui é que navegadores Info mais
antigos (essa característica foi introduzida na versão 4.6 de Texinfo)
exibirão o acima literalmente, o que, apesar de não ser agradável, não
deveria ser danoso.


@node Escalonamento da Imagem
@subsection Escalonamento da Imagem
@c Capítulo 10 - Exibições Especiais
@c Seção 10.2 - Inserindo Imagens
@c Subseção 10.2.2 - Escalonamento da Imagem

@cindex Imagens, dimensionamento
@cindex Dimensionando imagens
@cindex Largura das imagens
@cindex Altura das imagens
@cindex Proporção de aspecto das imagens
@cindex Distorcendo imagens
Os argumentos opcionais @var{width} e @var{height} para o comando
@code{@@image} (veja-se a seção anterior) especificam o tamanho para o
qual escalonar a imagem. Eles somente são levados em consideração no
@TeX{}. Se nenhum for especificado, a imagem será apresentada no tamanho
natural dela (fornecido no arquivo); se somente um for especificado, o
outro será escalonado proporcionalmente; e se ambos forem especificados,
ambos serão respeitados, portanto provavelmente distorcendo a imagem
original mudando a taxa de aspecto dela.

@cindex Dimensões em tamanhos de imagem
@var{width} e @var{height} podem ser especificados usando qualquer
dimensão @TeX{} válida, a saber:

@table @asis
@item pt
@cindex Pontos (dimensão)
ponto (72.27pt = 1in)
@item pc
@cindex Picas
pica (1pc = 12pt)
@item bp
@cindex Pontos grandes
ponto grande (72bp = 1in)
@item in
@cindex Polegadas
polegada
@item cm @c CONSERTE-ME
@cindex Centímetros
centímetro (2.54cm = 1in)
@item mm
@cindex Milímetros
milímetro (10mm = 1cm)
@item dd
@cindex Pontos de Did@^ot
ponto de did@^ot (1157dd = 1238pt)
@item cc
@cindex Cíceros
cicero (1cc = 12dd)
@item sp
@cindex Pontos escalonados
ponto escalonado (65536sp = 1pt)
@end table

@pindex ridt.eps
Por exemplo, o seguinte dimensionará um arquivo @file{ridt.eps} para uma
polegada verticalmente, com a largura dimensionada proporcionalmente:

@example
@@image@{ridt,,1in@}
@end example

@pindex epsf.tex
Para que o @code{@@image} funcione com o @TeX{}, o arquivo
@file{epsf.tex} deve ser instalado em algum lugar onde o @TeX{} possa
encontrá-lo. (O local padrão é
@file{@var{texmf}/tex/generic/dvips/epsf.tex}, onde @var{texmf} é a raiz
da árvore de diretórios do teu @TeX{}). Esse arquivo está incluído na
distribuição Texinfo e também está disponível a partir de
@uref{ftp://tug.org/tex/epsf.tex}, entre outros lugares.

@code{@@image} pode ser usado dentro de uma linha e também para figuras
exibidas. Portanto, se você pretende que ele seja exibido, assegure-se
de deixar uma linha em branco antes do comando, ou a saída gerada será
executada no texto anterior.


Atualmente, o dimensionamento de imagem está implementado somente no
@TeX{}, não em HTML ou qualquer outro tipo de saída gerada.


@node Notas de Rodapé
@section Notas de Rodapé
@cindex Notas de Rodapé
@findex footnote

Uma @dfn{nota de rodapé} serve para uma referência que documenta ou
elucida o texto principal. @footnote{Uma nota de rodapé deveria
complementar ou expandir o texto principal, mas o(a) leitor(a) não
deveria precisar ler uma nota de rodapé para entender o texto principal.
Para uma discussão completa das notas de rodapé, veja-se
@cite{The Chicago Manual of Style},
publicado pela University of Chicago Press}.

As notas de rodapé distraem; use-as com moderação, no máximo, e é melhor
evitá-las completamente.  As referências bibliográficas padrão
geralmente são melhor colocadas em uma bibliografia, ao final de um
documento, em vez de nas notas de rodapé.

@menu
* Comandos de Notas de Rodapé::           Como escrever uma nota de rodapé no Texinfo.
* Estilos de Notas de Rodapé::             Controlando como notas de rodapé aparecem no Info.
@end menu


@node Comandos de Notas de Rodapé
@subsection Comandos de Notas de Rodapé

No Texinfo, as notas de rodapé são criadas com o comando
@code{@@footnote}. Esse comando é seguido imediatamente por uma chave
esquerda, depois pelo texto da nota de rodapé e por uma chave direita
finalizante.  As notas de rodapé podem ter qualquer comprimento (elas
serão divididas entre páginas, se necessário), mas geralmente são
curtas. O modelo é:

@example
texto principal@@footnote@{@var{texto da nota de rodapé}@}
@end example

Conforme mostrado aqui, o comando @code{@@footnote} deveria vir logo
após o texto sendo anotado, sem espaço intermediário; caso contrário, o
marcador de nota de rodapé poderá acabar iniciando uma linha.

Por exemplo, esta cláusula é seguida por uma amostra de nota de
rodapé@footnote{Aqui está a amostra de nota de rodapé.}; no fonte do
Texinfo, se parece com isto:

@example
@dots{}uma amostra de nota de rodapé@@footnote@{Aqui está a amostra de
nota de rodapé.@}; no fonte do Texinfo@dots{}
@end example

Como você pode ver, esse fonte inclui dois sinais de pontuação próximos
um do outro; nesse caso, @samp{.@};} é a sequência. Isso é normal (o
primeiro termina a nota de rodapé e o segundo pertence à frase sendo
anotada), de forma que não se preocupe, pois pode parecer estranho.
(Outro estilo, perfeitamente aceitável, é colocar a nota de rodapé
depois da pontuação pertencente à frase, como em
@samp{;@@footnote@{...}).

Em um manual ou livro impresso, a marca de referência para uma nota de
rodapé é um número pequeno e sobrescrito; o texto da nota de rodapé
aparece na parte inferior da página, abaixo de uma linha horizontal.

No Info, a marca de referência para uma nota de rodapé é um par de
parênteses com o número da nota de rodapé entre eles, assim: @samp{(1)}.
A marca de referência é seguida por um link de referência cruzada para o
texto da nota de rodapé se as notas de rodapé forem colocadas em nós
separados (@pxref{Estilos de Notas de Rodapé}).

Na saída gerada HTML, as referências às notas de rodapé geralmente são
marcadas com um número pequeno e sobrescrito que é renderizado como um
link de hipertexto para o texto da nota de rodapé.

@cindex Edições críticas
@cindex Notas de rodapé aninhadas
As notas de rodapé não podem ser aninhadas e não podem aparecer em
títulos de seção de qualquer tipo ou em outros locais ``incomuns''.

Uma dica final: as notas de rodapé no argumento de um comando
@code{@@item} para um @code{@@table} devem estar inteiramente na mesma
linha que o @code{@@item} (como de costume).  @xref{Tabelas de Duas Colunas}.


@node Estilos de Notas de Rodapé
@subsection Estilos de Notas de Rodapé

O Info tem dois estilos de nota de rodapé, que determinam onde o texto
da nota de rodapé está localizado:

@itemize @bullet
@cindex Estilo de nota de rodapé de nó @samp{@r{End}}
@item
No estilo de nó `Fim', todas as notas de rodapé de um nó são colocadas
no final desse nó. As notas de rodapé são separadas do resto do nó por
uma linha de traços com a palavra @samp{Notas de rodapé} dentro dela.
Cada nota de rodapé começa com uma marca de referência @samp{(@var{n})}.

@need 700
@noindent
Aqui está um exemplo da saída gerada do Info para uma nota de rodapé no
estilo de fim de nó:

@example
@group
--------- Notas de rodapé ---------

(1)  Aqui está uma amostra de nota de rodapé.
@end group
@end example

@cindex Estilo de nota de rodapé @samp{@r{Separate}}
@item
No estilo de nó `Separado', todas as notas de rodapé para um nó são
colocadas em um nó próprio construído automaticamente.  Nesse estilo,
uma ``referência de nota de rodapé'' segue cada marca de referência
@samp{(@var{n})} no corpo do nó.  A referência da nota de rodapé é na
verdade uma referência cruzada que você usa para chegar ao nó da nota de
rodapé.

O nome do nó com as notas de rodapé é construído anexando-se
@w{@samp{-Footnotes}} ao nome do nó que contém as notas de rodapé.
(Consequentemente, o nó das notas de rodapé para o nó @file{Footnotes} é
@w{@file{Footnotes-Footnotes}})! O nó das notas de rodapé tem um
ponteiro de nó `Acima' que leva de volta ao nó ancestral dele.

@noindent
Aqui está como a primeira nota de rodapé neste manual aparenta depois de
ser formatada para o Info no estilo de nó separado:

@smallexample
@group
Arquivo: texinfo.info  Nó: Visão Geral-Footnotes, Acima: Visão Geral

(1) A primeira sílaba de "Texinfo" é pronunciada como "speck", não
"hex". @dots{}
@end group
@end smallexample
@end itemize

A menos que teu documento tenha notas de rodapé longas e importantes
(como em, por diga-se, @cite{Decline and Fall @dots{}} de Gibbon), nós
recomendamos o estilo @samp{end}, pois ele é mais simples para
leitores(as) seguirem.

@findex footnotestyle
Use o comando @code{@@footnotestyle} para especificar um estilo de nota
de rodapé de um arquivo do Info.  Escreva esse comando no início de uma
linha seguido por um argumento, seja @samp{end} para o estilo de nó
final ou @samp{separate} para o estilo do nó separado.

@need 700
Por exemplo,

@example
@@footnotestyle end
@end example
@noindent
ou
@example
@@footnotestyle separate
@end example

Escreva um comando @code{@@footnotestyle} antes ou logo depois da linha
de fim de cabeçalho no início de um arquivo Texinfo.  (Você deveria
incluir qualquer comando @code{@@footnotestyle} entre as linhas de
início de cabeçalho e fim de cabeçalho, de forma que os comandos de
formatação de região formatem as notas de rodapé conforme especificado).

Em HTML, quando o estilo da nota de rodapé for @samp{end}, ou se a saída
gerada não for dividida, as notas de rodapé são colocadas no final da
saída gerada. Se configurado como @samp{separate} e a saída gerada for
dividida, elas serão colocadas em um arquivo separado.


@node Índices
@chapter Índices
@cindex Índices

Usando o Texinfo, você consegue gerar índices sem ter que ordenar e
agrupar as entradas manualmente.  Em um índice, as entradas são listadas
em ordem alfabética, juntamente com informações acerca de como encontrar
a discussão de cada entrada.  Em um manual impresso, essas informações
consistem de números de páginas.  Em um arquivo Info, essa informação é
uma entrada de menu que leva para o primeiro nó referenciado.

O Texinfo fornece vários tipos predefinidos de índice: um índice para
funções, um índice para variáveis, um índice para conceitos e assim por
diante. Você pode combinar índices ou usá-los para outros fins que não
os canônicos. Por último, você consegue definir teus próprios novos
índices.


@menu
* Índices Predefinidos::         Use índices diferentes para tipos diferentes de entradas.
* Comandos de Indexação::        Como fazer uma entrada de índice.
* Entradas de Índice::           Escolha palavras diferentes para entradas de índice.
* Imprimindo Índices e Menus::   Como imprimir um índice em cópia impressa e gerar menus de índice no Info.
* Combinando Índices::           Como combinar índices.
* Novos Índices::                Como definir teus próprios índices.
@end menu


@node Índices Predefinidos
@section Índices Predefinidos

Texinfo fornece seis índices predefinidos.  Aqui estão os significados
nominais deles, abreviações e os correspondentes comandos de entrada de
índice:

@table @samp
@item cp
@cindex Índice @code{cp} (conceito)
@findex cindex
(@code{@@cindex}) índice de conceito, para conceitos gerais.
@item fn
@cindex Índice @code{fn} (função)
@findex findex
(@code{@@findex}) índice de função, para nomes de funções e semelhantes
a funções (como pontos de entrada de bibliotecas).
@item ky
@cindex Índice @code{ky} (pressionamento de tecla)
@findex kindex
(@code{@@kindex}) índice de pressionamento de tecla, para comandos de
teclado.
@item pg
@cindex Índice @code{pg} (programa)
@findex pindex
(@code{@@pindex}) índice de programas, para nomes de programas.
@item tp
@cindex Índice @code{tp} (tipo de dado)
@findex tindex
(@code{@@tindex}) índice de tipo de dados, para nomes de tipos (como
estruturas definidas em arquivos de cabeçalho).
@item vr
@cindex Índice @code{vr} (variável)
@findex vindex
(@code{@@vindex}) índice de variáveis, para nomes de variáveis (como
variáveis globais de bibliotecas).
@end table

@noindent
Nem todo manual precisa de tudo isso, e a maioria dos manuais usa
somente dois ou três, no máximo.  O presente manual, por exemplo, tem
dois índices: um índice de conceito e um índice de comando @@ (que na
verdade é o índice de função, mas é chamado de índice de comando no
cabeçalho de capítulo).

Você não é obrigado(a) a usar os índices predefinidos estritamente para
os fins canônicos deles.  Por exemplo, suponha que você deseje indexar
algumas macros do preprocessador C.  Você poderia colocá-las no índice
de função junto com as funções reais, apenas escrevendo comandos
@code{@@findex} para elas; então, quando você imprimir o ``Índice de
Função'' como um capítulo não numerado, você poderia dar a ele o título
de `Índice de Função e Macro' e tudo seria consistente para o(a)
leitor(a).

Por outro lado, é melhor não se afastar muito do significado dos índices
predefinidos.  Do contrário, caso o teu texto seja combinado com outro
texto proveniente de outros manuais, as entradas de índice não
corresponderão.  Em vez disso, defina teu próprio novo índice
(@pxref{Novos Índices}).

Nós recomendamos ter um índice no documento final sempre que possível,
independentemente de quantos índices de fonte você usar, pois assim
os(as) leitores(as) terão somente um lugar para procurar.  Dois ou mais
índices de fonte podem ser combinados em um índice de saída gerada,
usando-se os comandos @code{@@synindex} ou @code{@@syncodeindex}
(@pxref{Combinando Índices}).


@node Comandos de Indexação
@section Definindo as Entradas de um Índice

@cindex Definindo entradas de indexação
@cindex Entradas de índice, definindo
@cindex Entradas para um índice
@cindex Especificando entradas de índice
@cindex Criando entradas de índice

Os dados para criar um índice vem de muitos comandos individuais de
indexação espalhados pelo arquivo fonte do Texinfo.  Cada comando diz
para adicionar uma entrada para um índice específico; depois da
formatação, o índice fornecerá o número da página atual ou o nome do nó
como a referência.

Uma entrada de índice consiste de um comando de indexação no início de
uma linha seguido, no restante da linha, pela entrada.

Por exemplo, esta seção começa com as seguintes cinco entradas para o
índice de conceito:

@example
@@cindex Definindo entradas de indexação
@@cindex Entradas de índice, definindo
@@cindex Entradas para um índice
@@cindex Especificando entradas de índice
@@cindex Criando entradas de índice
@end example

Cada índice predefinido tem o próprio comando dele de
indexação---@code{@@cindex} para o índice de conceito, @code{@@findex}
para o índice de função e assim por diante, conforme listado na seção
anterior.

As entradas do índice deveriam preceder o material visível que está
sendo indexado.  Por exemplo:

@example
@@cindex alô
Alô, você!
@end example

@noindent Entre outros motivos, dessa forma, seguir os links de
indexação (em qualquer contexto) acaba antes do material, onde os(as)
leitores(as) querem estar, e não depois.

@cindex Tipos de fonte de índice
Por padrão, as entradas para um índice de conceito são impressas em uma
fonte romana pequena e as entradas para os outros índices são impressas
em uma fonte @code{@@code} pequena. Você pode mudar a forma como parte
de uma entrada é impressa com os comandos usuais do Texinfo, como
@code{@@file} para nomes de arquivos (@pxref{Marcando Texto}) e
@code{@@r} para a fonte normal romana (@pxref{Fontes}).

@findex sortas
@cindex ordenar chaves para entradas de índice
@cindex ordenamento de índice
Para a saída gerada impressa, você pode especificar uma chave explícita
de ordenação para uma entrada de índice usando @code{@@sortas}
imediatamente depois do comando de índice.  Por exemplo:
@samp{@@findex @@sortas@{\@} \ @@r@{(literal \ em @@code@{@@@@math@})}
ordena a entrada de índice que isso produz sob barra invertida.


@vindex txiindexbackslashignore
@vindex txiindexhyphenignore
@vindex txiindexlessthanignore
@vindex txiindexatsignignore
Para reduzir a quantidade de chaves de ordenação que você precisa
fornecer explicitamente, você pode optar por ignorar determinados
caracteres nas entradas de índice para fins de ordenação.  Os caracteres
que você pode, atualmente, optar por ignorar são @samp{\}, @samp{-},
@samp{<} e @samp{@@}, que são ignorados fornecendo-se como argumento
para o comando @code{@@ set}, respectivamente,
@code{txiindexbackslashignore}, @code{txiindexhyphenignore},
@code{txiindexlessthanignore} e @code{txiindexatsignignore}.  Por
exemplo, especificar @samp{@@set txiindexbackslashignore} faz com que a
entrada @samp{\mathopsup} no índice para este manual seja ordenada como
se fosse @samp{mathopsup}, de forma que apareça entre as outras entradas
que começam com ` M'.


@quotation Cuidado
Não use dois pontos em uma entrada de índice.  No Info, dois pontos
separam o nome da entrada de menu do nome do nó, portanto, dois pontos
na própria entrada confundem o Info.  @xref{Partes de Menu}, para mais
informações relativas a estrutura de uma entrada de menu.
@end quotation

@node Entradas de Índice
@section Criando Entradas de Índice
@cindex Entradas de índice, criando
@cindex Entradas, criando índice

@cindex Escrevendo entradas de índice
@cindex Entradas de índice, conselhos sobre redação
@cindex Conselhos sobre escrever entradas
@cindex Capitalização de entradas de índice
As entradas do índice de conceito consistem de texto.  A melhor maneira
de escrever um índice é a de elaborar entradas que sejam concisas, mas
claras.  Se você puder fazer isso, o índice geralmente parecerá melhor
se as entradas forem escritas exatamente como apareceriam no meio de uma
frase, ou seja, colocando em maiúscula somente nomes próprios e siglas
que sempre exigem letras maiúsculas. Essa é a convenção de caso que nós
usamos na maioria dos índices dos manuais GNU.

Se você não sabe como tornar uma entrada concisa, mas clara, torne-a
mais longa e clara---não concisa e confusa.  Se muitas das entradas
tiverem várias palavras, o índice poderá parecer melhor se você usar uma
convenção diferente: colocar em maiúscula a primeira palavra de cada
entrada.  Qualquer que seja a convenção de caso que você usar, use-a de
consistentemente.

Em qualquer caso, nunca coloque em maiúscula um nome que diferencia
maiúsculas de minúsculas, como um nome de função da C ou Lisp ou um
comando de shell; isso seria um erro ortográfico.  As entradas em
índices diferentes do índice de conceito são nomes de símbolos em
linguagens de programação ou nomes de programas; esses nomes geralmente
diferenciam maiúsculas de minúsculas, de forma que use letras maiúsculas
e minúsculas conforme exigido.

@cindex Entradas de índice exclusivas
É uma boa ideia tornar as entradas do índice exclusivas sempre que
possível. Dessa forma, as pessoas que usam a saída gerada impressa ou o
preenchimento on-line das entradas do índice não enxergarão listas
indiferenciadas.  Considere essa uma oportunidade para tornar mais
específicas entradas de índice idênticas, de forma que os(as)
leitores(as) consigam encontrar mais facilmente o lugar exato que
procuram.

Quando você estiver criando entradas de índice, é uma boa prática pensar
nas diferentes maneiras pelas quais as pessoas podem procurar algo.
Pessoas diferentes @emph{não} pensam nas mesmas palavras quando procuram
algo.  Um índice útil terá itens indexados sob todas as palavras
diferentes que as pessoas possam usar.  Por exemplo, um(a) leitor(a)
pode pensar que é óbvio que os nomes de duas letras para índices
deveriam ser listados sob ``Índices, nomes de duas letras, uma vez que
``Índices'' são o conceito geral.  Todavia, outro(a) leitor(a) pode
lembrar-se do conceito específico de nomes de duas letras e procurar a
entrada listada como ``Nomes de duas letras para índices''.  Um bom
índice terá ambas as entradas e ajudará ambos(as) os(as) leitores(as).

Assim como a composição tipográfica, a construção de um índice é uma
arte especializada, cujas sutilezas possivelmente não sejam apreciadas
até que você precise fazê-la você mesmo(a).


@node Imprimindo Índices e Menus
@section Imprimindo Índices e Menus
@cindex Imprimindo um índex
@cindex Índices, imprimindo e menus
@cindex Gerando menus com índices
@cindex Menus gerados com índices
Imprimir um índice significa incluí-lo como parte de um manual ou
arquivo do Info. Isso não acontece automaticamente apenas porque você
usa @code{@@cindex} ou outros comandos de geração de entrada de índice
no arquivo Texinfo; esses apenas faz com que os dados brutos do índice
sejam acumulados.  Para gerar um índice, você precisa incluir o comando
@code{@@printindex} no local no documento onde deseja que o índice
apareça.  Além disso, como parte do processo de criação de um manual
impresso, você precisa executar um programa chamado @code{texindex}
(@pxref{Impresso}) para ordenar os dados brutos para produzir um
arquivo de índice ordenado.  O arquivo de índice ordenado é o que
realmente é usado para imprimir o índice.

Texinfo oferece seis tipos de índices predefinidos, que são suficientes
na maioria dos casos.  @xref{Índices}, para informações a respeito
disso, bem como para definir teus próprios novos índices, combinar
índices e, o mais importante, conselhos sobre escrever as reais entradas
do índice.  Esta seção foca na impressão de índices, o que é feito com o
comando @code{@@printindex}.

@findex printindex
@code{@@printindex} recebe um argumento, uma abreviatura de índice de
duas letras.  Ele lê o correspondente arquivo ordenado de índice (para
saída gerada impressa) e o formata apropriadamente em um índice.

O comando @code{@@printindex} não gera um título de capítulo para o
índice, pois manuais diferentes tem necessidades diferentes.
Consequentemente, você deveria preceder o comando @code{@@printindex}
com um adequado comando de seção ou capítulo (geralmente
@code{@@appendix} ou @code{@@unnumbered}) para fornecer o título do
capítulo e colocar o índice no sumário.  Preceda o título do
capítulo com uma linha @code{@@node} como de costume.

Por exemplo:

@smallexample
@group
@@node Índice Variável
@@unnumbered Índice Variável

@@printindex vr
@end group

@group
@@node Índice de Conceito
@@unnumbered Índice de Conceito

@@printindex cp
@end group
@end smallexample

Se você tiver mais que um índice, nós recomendamos colocar o índice de
conceito por último.

@itemize
@item
Na saída gerada impressa, @code{@@printindex} produz um índice
tradicional de duas colunas, com líderes de pontos entre os termos do
índice e os números das páginas.

@item
Na saída gerada do Info, @code{@@printindex} produz um menu especial
contendo o número da linha da entrada, relativo ao início do nó.
Leitores(as) do Info podem usar isso para ir para a linha exata de uma
entrada, não apenas para o nó que a contém.  (Leitores(as) mais
antigos(as) do Info irão apenas para o nó). Aqui está um exemplo:

@smallexample
* Primeira entrada de índice:   Topo.   (linha  7)
@end smallexample

@noindent O número real de espaços é variável, para justificar à direita
o número da linha; foi reduzido aqui para que a linha caiba no manual
impresso.

@item
Na saída gerada de texto simples, @code{@@printindex} produz o mesmo
menu, mas os números das linhas são relativos ao início do arquivo, pois
isso é mais conveniente para esse formato.

@item
Na saída gerada de HTML, @code{@@printindex} produz links para as
entradas do índice.

@item
Na saída gerada XML e Docbook, ele simplesmente registra o índice a ser
impresso.
@end itemize


@node Combinando Índices
@section Combinando Índices
@cindex Combinando índices
@cindex Índices, combinando-os

Às vezes você irá querer combinar dois índices, como funções e
conceitos, talvez porque tenha poucas entradas suficientes que um índice
separado pareceria bobo.

Você poderia colocar funções no índice de conceito escrevendo comandos
@code{@@cindex} para elas em vez de comandos @code{@@findex} e produzir
um manual consistente imprimindo o índice de conceito com o título
`Índice de Função e Conceito' e não imprimir o `Índice de Função'; mas
esse não é um procedimento robusto.  Ele funciona somente se o teu
documento nunca for incluído como parte de outro documento que seja
projetado para ter um índice de função separado; se o teu documento
fosse incluído em tal documento, as funções oriundas do teu documento e
aquelas oriundas do outro não terminariam juntas.  Além disso, para
fazer com que os teus nomes de funções apareçam na fonte correta no
índice de conceito, você precisaria colocar cada uma delas entre chaves
de @code{@@code}.

@menu
* @code{@@syncodeindex}::               Como mesclar dois índices, usando a fonte @code{@@code} para o índice mesclado.
* @code{@@synindex}::                   Como mesclar dois índices, usando a fonte romana para o índice mesclado.
@end menu


@node @code{@@syncodeindex}
@subsection @code{@@syncodeindex}: Combinando índices usando @code{@@code}

@anchor{syncodeindex}@c antigo nome
@findex syncodeindex

Quando quiser combinar funções e conceitos em um índice, você deveria
indexar as funções com @code{@@findex} e indexar os conceitos com
@code{@@cindex} e usar o comando @code{@@syncodeindex} para redirecionar
as entradas do índice de função para o índice de conceito.

O comando @code{@@syncodeindex} recebe dois argumentos; eles são o nome
do índice para redirecionar e o nome do índice para o qual
redirecioná-lo. O modelo se parece com isto:

@example
@@syncodeindex @var{from} @var{to}
@end example
@cindex Nomes predefinidos para índices
@cindex Nomes de duas letras para índices
@cindex Índices, nomes de duas letras
@cindex Nomes para índices
Para esse propósito, para os índices são dados nomes de duas letras:

@table @samp
@item cp
índice de conceito
@item fn
índice de função
@item vr
índice de variável
@item ky
índice de tecla
@item pg
índice de programa
@item tp
índice de tipo de dados
@end table

Escreva um comando @code{@@syncodeindex} antes ou logo depois da linha
de fim do cabeçalho no início de um arquivo Texinfo. Por exemplo, para
mesclar um índice de função com um índice de conceito, escreva o
seguinte:

@example
@@syncodeindex fn cp
@end example

@noindent
Isso fará com que todas as entradas designadas para o índice de função
sejam mescladas com o índice de conceito.

Para mesclar ambos, um índice de variáveis e um índice de função, em um
índice de conceito, escreva o seguinte:

@example
@group
@@syncodeindex vr cp
@@syncodeindex fn cp
@end group
@end example

@cindex Fontes para índices
O comando @code{@@syncodeindex} coloca todas as entradas oriundas do
índice `from' (o índice redirecionado) na fonte @code{@@code},
substituindo qualquer fonte padrão que seja usada pelo índice para o
qual as entradas são agora direcionadas. Dessa forma, se você direcionar
nomes de funções oriundas de um índice de função para um índice de
conceito, todos os nomes de funções serão impressos na fonte
@code{@@code} como você esperaria.


@node @code{@@synindex}
@subsection @code{@@synindex}: Combinando índices

@anchor{synindex}@c nome antigo
@findex synindex

O comando @code{@@synindex} é quase o mesmo que o comando
@code{@@syncodeindex}, exceto que não coloca as entradas do índice
`from' na fonte @code{@@code}; em vez disso, coloca-os na fonte romana.
Assim, você usa @code{@@synindex} ao mesclar um índice de conceito em um
índice de função.

@xref{Imprimindo Índices e Menus}, para informações acerca de imprimir
um índice no final de um livro ou criar um menu de índice em um arquivo
Info.


@node Novos Índices
@section Definindo Novos Índices

@cindex Definindo novos índices
@cindex Índices, definindo novos
@cindex Novos índices, definindo
@findex defindex
@findex defcodeindex

Além dos índices predefinidos (@pxref{Índices Predefinidos}), você pode
usar os comandos @code{@@defindex} e @code{@@defcodeindex} para definir
novos índices. Esses comandos criam novos comandos @@ de indexação com
os quais você marca entradas de índice. O comando @code{@@defindex} é
usado assim:

@example
@@defindex @var{name}
@end example

Novos nomes de índice geralmente são palavras de duas letras, como @samp{au}.
Por exemplo:

@example
@@defindex au
@end example

Isso define um novo índice, chamado o índice @samp{au}. Ao mesmo tempo,
ele cria um novo comando de indexação, @code{@@auindex}, que você pode
usar para criar entradas de índice. Use esse novo comando de indexação
da mesma forma que usaria um comando de indexação predefinido.

Por exemplo, aqui está um título de seção seguido por uma entrada de
índice de conceito e duas entradas de índice @samp{au}.

@example
@@section Semântica Cognitiva
@@cindex esquemas de imagem cinestésica
@@auindex Johnson, Mark
@@auindex Lakoff, George
@end example

@noindent
(Evidentemente, @samp{au} aqui serve como uma abreviação para ``autor''.)

Texinfo constrói o novo comando de indexação concatenando o nome do
índice com @samp{index}; portanto, definir um índice @samp{xy} leva à
criação automática de um comando @code{@@xyindex}.

Use o comando @code{@@printindex} para imprimir o índice, como você faz
com índices predefinidos. Por exemplo:

@example
@group
@@node Índice de Autor
@@unnumbered Índice de Autor

@@printindex au
@end group
@end example

O @code{@@defcodeindex} é como o comando @code{@@defindex}, exceto que,
na saída impressa, ele imprime entradas em uma fonte @code{@@code} por
padrão, em vez de uma fonte romana.

Você deveria definir novos índices antes da linha de fim de cabeçalho de
um arquivo Texinfo e (é claro) antes de quaisquer comandos
@code{@@synindex} ou @code{@@syncodeindex}
(@pxref{Cabeçalho do Arquivo do Texinfo}).

Conforme mencionado anteriormente (@pxref{Índices Predefinidos}), nós
recomendamos ter um índice unitário no documento final sempre que
possível, independentemente de quantos índices de fonte você usar, pois
assim leitores(as) terão somente um lugar para procurar.

Ao criar um índice, @TeX{} cria um arquivo cuja extensão é o nome do
índice (@pxref{Nomes dos arquivos de índice}). Portanto, você deveria
evitar usar nomes de índices que colidam com extensões usadas para
outros propósitos, tais como @samp{.aux} ou @samp{.xml}.
@command{makeinfo} já informa um erro se um novo índice conflitar com um
nome de extensão bem conhecido.


@node Inserções
@chapter Inserções Especiais
@cindex Inserindo caracteres especiais e símbolos
@cindex Inserções especiais

Texinfo fornece vários comandos para inserir caracteres que tenham
significado especial no Texinfo, tais como colchetes, e para outros
elementos gráficos que não correspondem a caracteres simples que você
pode digitar.

@iftex
Esses são:

@itemize @bullet
@item Os caracteres especiais do Texinfo: @samp{@@ @{@} , \ #}.
@item Espaço em branco dentro e ao redor de uma frase.
@item Acentos.
@item Pontos e balas.
@item O logotipo @TeX{} e o símbolo de direitos autorais.
@item Os símbolos de moeda euro e libras.
@item O símbolo de graus.
@item O sinal de menos.
@item Expressões matemáticas.
@item Glifos para exemplos de programação: avaliação, macros, erros, etc.
@item Notas de rodapé.
@end itemize
@end iftex

@menu
* Caracteres Especiais::                  Inserindo @@ @{@} , \ #
* Inserindo Caracteres de Citação::       Inserindo aspas a esquerda e a direita, em código.
* Inserindo Espaço::                      Inserindo a quantidade correta de espaços em branco.
* Inserindo Acentos::                     Inserindo acentos e caracteres especiais.
* Inserindo Aspas::                       Inserindo aspas.
* Inserindo Subscritos e Sobrescritos::   Inserindo sub/sobrescritos.
* Inserindo Fórmulas Matemáticas::        Formatando expressões matemáticas.
* Glifos para Texto::                     Inserindo pontos, bullets, símbolos de moedas, etc.
* Glifos para Programação::               Indicando resultados de avaliação, expansão de macros, erros, etc.
* Inserindo Unicode::                     Inserindo um caractere Unicode por ponto de código.
@end menu


@node Caracteres Especiais
@section Caracteres Especiais: Inserindo @@ @{@} , \ #
@anchor{Chaves Sinal de Arroba}@c nomes anteriores para este nó
@anchor{Sinal de Arroba Chaves Vírgula}
@cindex Caracteres especiais, inserindo
@cindex Comandos para inserir caracteres especiais

@samp{@@} e chaves são os caracteres especiais básicos no Texinfo. Para
inserir esses caracteres de forma que apareçam no texto, você precisa
colocar um @samp{@@} na frente desses caracteres para evitar que o
Texinfo os interprete mal. Comandos alfabéticos também são fornecidos.

Os demais caracteres (vírgula, barra invertida, cerquilha) são especiais
somente em contextos restritos, conforme explicado nas respectivas
seções.

@menu
* Inserindo um Símbolo Arroba::         @code{@@@@}, @code{@@atchar@{@}}.
* Inserindo Chaves::                    @code{@@@{ @@@}}, @code{@@l rbracechar@{@}}.
* Inserindo Uma Vírgula::               , and @code{@@comma@{@}}.
* Inserindo uma Barra Invertida::       \ and @code{@@backslashchar@{@}}.
* Inserindo um Símbolo Cerquilha::      # and @code{@@hashchar@{@}}.
@end menu


@node Inserindo um Símbolo Arroba
@subsection Inserindo `@@' com @code{@@@@} e @code{@@atchar@{@}}
@cindex Símbolo arroba, inserindo
@cindex Inserindo @@ @r{(literal @samp{@@})}
@findex @sortas{@@} @@ @r{(literal @samp{@@})} @c CONSERTE-ME
@findex atchar@{@} @r{(literal @samp{@@})}

@code{@@@@} produz um caractere @samp{@@} na saída gerada. Não coloque
colchetes depois de um comando @code{@@@@}.

@code{@@atchar@{@}} também produz um caractere @samp{@@} na saída
gerada. Ele precisa de colchetes seguintes, como de costume para
comandos alfabéticos. Em Condicionais inline
(@pxref{Condicionais Inline}), pode ser necessário evitar usar o
caractere literal @samp{@@} no fonte (e possivelmente seja mais claro em
outros contextos).


@node Inserindo Chaves
@subsection Inserindo `@{ `@}' com @code{@@@{ @@@}} e @code{@@l rbracechar@{@}}

@findex @{ @r{(literal @samp{@{})}
@findex @} @r{(literal @samp{@}})}
@findex lbracechar@{@} @r{(literal @samp{@{})}
@findex rbracechar@{@} @r{(literal @samp{@}})}
@cindex Colchetes, inserindo

@code{@@@{} produz um @samp{@{} na saída gerada e @code{@@@}} produz um
@samp{@}}. Não coloque colchetes depois de um comando @code{@@@{} ou
@code{@@@}}.

@code{@@lbracechar@{@}} e @code{@@rbracechar@{@}} também produzem
caracteres @samp{@{} e @samp{@}} unitários na saída gerada. Eles
precisam de colchetes seguintes, como de costume para comandos
alfabéticos. Em Condicionais inline (@pxref{Condicionais Inline}), pode
ser necessário evitar usar caracteres de colchetes literais no fonte (e
possivelmente seja mais claro em outros contextos).


@node Inserindo Uma Vírgula
@subsection Inserindo `,' com @code{@@comma@{@}}

@findex vírgula
@cindex Vírgula, inserindo

Normalmente, uma vírgula `,' é um caractere normal que pode ser
simplesmente digitado em tua entrada onde você precisar dela.

No entanto, Texinfo usa a vírgula como um caractere especial somente em
um contexto: para separar argumentos para aqueles comandos do Texinfo,
como @code{@@acronym} (@pxref{@code{@@acronym}}) e @code{@@xref}
(@pxref{Referências Cruzadas}), bem como macros definidas por usuário(a)
(@pxref{Definindo Macros}), que levam mais que um argumento.
@c CONSERTE-ME
Como um caractere de vírgula confundiria a análise do Texinfo para esses
comandos, você precisa usar o comando @samp{@@comma@{@}} se quiser
passar uma vírgula real. Aqui estão alguns exemplos:

@example
@@acronym@{ABC, Uma @@comma@{@} bizarra@}
@@xref@{Vírgula,, O símbolo @@comma@{@}@}
@@mymac@{Um argument@@comma@{@} contendo uma vírgula@}
@end example

Embora @samp{@@comma@{@}} possa ser usada em praticamente qualquer
lugar, não existe necessidade dela em nenhum lugar, exceto nesse caso
incomum.

(Incidentalmente, o nome @samp{@@comma} carece do sufixo @samp{char}
usado nos comandos complementares dele somente por razões históricas.
Não pareceu importante o suficiente para definir um sinônimo).


@node Inserindo uma Barra Invertida
@subsection Inserindo `\' com @code{@@backslashchar@{@}}

@findex backslashchar
@cindex Barra invertida, inserindo

Normalmente, uma barra invertida `\' é um caractere normal no Texinfo
que pode ser simplesmente digitado em tua entrada onde você precisar. O
resultado é o de compor a barra invertida oriunda da fonte da máquina de
escrever.

Porém, Texinfo usa a barra invertida como um caractere especial em um
contexto restrito: para delimitar argumentos formais nos corpos de
macros definidas por usuário(a) (@pxref{Definindo Macros}).

Devido aos caprichos da análise de argumentos de macro, é mais confiável
passar um comando alfabético que produza uma barra invertida em vez de
usar uma \ literal. Daí @code{@@backslashchar@{@}}. Aqui está um exemplo
de chamada de macro:

@example
@@mymac@{Um argument@@backslashchar@{@} com uma barra invertida@}
@end example

@findex \backslash
Documentos do Texinfo também podem usar \ como um caractere de comando
dentro de @code{@@math} (@pxref{Inserindo Fórmulas Matemáticas}). Nesse
caso, @code{@@\} ou @code{\backslash} produz uma barra invertida
``matematicista'' (proveniente da fonte do símbolo matemático), enquanto
@code{@@backslashchar@{@}} produz uma barra invertida de máquina de
escrever como sempre.

Embora @samp{@@backslashchar@{@}} possa ser usado em praticamente
qualquer lugar, não existe necessidade dele, exceto nesses casos
incomuns.


@node Inserindo um Símbolo Cerquilha
@subsection Inserindo `#' com @code{@@hashchar@{@}}

@findex hashchar@{@} @r{(literal @samp{#})}
@cindex Inserindo #
@cindex Símbolo cerquilha, inserindo

Normalmente, uma cerquilha `#' é um caractere normal no Texinfo que pode
ser simplesmente digitado em tua entrada onde você precisar. O resultado
é o de compor o caractere cerquilha oriundo da fonte atual.

@cindex Símbolo de número, inserindo
@cindex Octotherp, inserindo
@cindex Sinal sustenido (não), inserindo
Esse caractere tem muitos outros nomes, variando de acordo com a
localidade, como ``sinal numérico'', ``libra'' e ``octothorp''. Às vezes
também é chamado de ``sustenido'' ou ``sinal sustenido'', uma vez que se
assemelha vagamente ao símbolo musical com esse nome. Em situações onde
Texinfo é usado, ``cerquilha'' é o mais comum em nossa experiência.

No entanto, Texinfo usa o caractere cerquilha como um caractere especial
em um contexto restrito: para introduzir a chamada diretiva @code{#line}
e variantes (@pxref{Processadores Externos de Macro}).

Portanto, para a finalidade de compor um caractere cerquilha real em tal
local (por exemplo, em um programa que precisa de documentação acerca de
@code{#line}), é necessário usar @code{@@hashchar@{@}} ou alguma outra
construção. Aqui está um exemplo:

@example
@@hashchar@{@} 10 "exemplo.c"
@end example

Embora @samp{@@hashchar@{@}} possa ser usado em praticamente qualquer
lugar, não existe necessidade dele em nenhum lugar, exceto nesse caso
incomum.

@node Inserindo Caracteres de Citação
@section Inserindo Caracteres de Citação

@cindex Inserindo caracteres de citação
@cindex Caracteres de citação, inserindo

Conforme explicado na seção anterior acerca de convenções gerais de
entrada do Texinfo (@pxref{Convenções}), arquivos fonte do Texinfo usam
o caractere ASCII @code{`} (decimal 96) para produzir uma aspa esquerda
(`), e o ASCII @code{'} (decimal 39) para produzir uma aspa direita (').
Duplicar esses caracteres de entrada (@code{``} e @code{''}) produz
aspas duplas (`` e ''). Essas são as convenções usadas pelo @TeX{}.

Isso funciona bem para texto. No entanto, em exemplos de código de
computador, leitores(as) são especialmente propensos(as) a recortar e
colar o texto literalmente---e, infelizmente, alguns visualizadores de
documentos estragarão esses caracteres. (O leitor livre de PDF
@command{xpdf} funciona bem, mas outros leitores de PDF, tanto livres
quanto não livres, tem problemas).

Se isso for uma preocupação para você, Texinfo fornece estes dois
comandos:

@table @code
@item @@codequoteundirected @var{on-off}
@findex codequoteundirected
@cindex aspas simples indirecionadas
faz com que a saída gerada para o caractere @code{'} em ambientes de
código seja a aspa simples indirecionada, como esta:

@set txicodequoteundirected on
@code{'}.
@set txicodequoteundirected off

@item @@codequotebacktick @var{on-off}
@findex codequotebacktick
@cindex crase
@cindex acento grave, autônomo
faz com que a saída gerada para o caractere @code{`} em ambientes de
código seja o caractere crase (acento grave autônomo), assim:

@set txicodequotebacktick on
@code{`}.
@set txicodequotebacktick off
@end table

Se você quiser essas configurações somente para parte do documento,
@code{@@codequote... off} restaurará o comportamento normal, como em
@code{@@codequoteundirected off}.

Essas configurações afetam @code{@@code}, @code{@@example},
@code{@@kbd}, @code{@@samp}, @code{@@verb} e @code{@@verbatim}.
@xref{Realçamento Útil}.

@vindex txicodequoteundirected@r{, variável obsoleta}
@vindex txicodequotebacktick@r{, variável obsoleta}

Esse recurso costumava ser controlado usando-se @code{@@set} para mudar
os valores das variáveis correspondentes @code{txicodequoteundirected} e
@code{txicodequotebacktick}; elas ainda são suportadas, mas a interface
de comando é preferida.


@node Inserindo Espaço
@section Inserindo Espaço

@cindex Inserindo espaço
@cindex Espaço, inserindo

As seções a seguir descrevem comandos que controlam espaçamentos de
vários tipos dentro e depois de frases.

@menu
* Espaços Múltiplos::               Inserindo múltiplos espaços.
* Não Finalizando Uma Frase::       Algumas vezes um ponto ``.'' não finaliza uma frase.
* Finalizando Uma Frase::           Algumas vezes finaliza.
* @code{@@frenchspacing}::          Especificando espaçamento de fim de frase.
* @code{@@dmn}::                    Formatando uma dimensão.
@end menu


@node Espaços Múltiplos
@subsection Espaços Múltiplos

@cindex Espaços múltiplos
@cindex Espaço em branco, inserindo
@cindex Espaço, inserindo horizontal
@findex <space>
@findex <tab>
@findex <newline>

Normalmente, vários caracteres de espaço em branco (espaço, tabulação e
nova linha) são recolhidos em um espaço.

Ocasionalmente, você pode querer produzir vários espaços consecutivos,
seja para fins de exemplo (por exemplo, o que teu programa faz com
vários espaços como entrada), ou meramente para fins de aparência em
títulos ou listas. Texinfo suporta três comandos: @code{@@@kbd{SPACE}},
@code{@@@kbd{TAB}} e @code{@@@kbd{NL}}, todos os quais inserem um espaço
na saída gerada. (Aqui, @code{@@@kbd{SPACE}} representa um caractere
@samp{@@} seguido por um espaço, ou seja, @samp{@@ }, @kbd{TAB}
representa um caractere de tabulação, e @code{@@@kbd{NL}} representa um
caractere @samp{@@} e fim de linha, ou seja, quando @samp{@@} é o último
caractere em uma linha).

Por exemplo,
@example
Exemplo@@ @@ @@ @@
espaçoso.
@end example

@noindent produz

@example
Exemplo@ @ @ @
espaçoso.
@end example

Outros usos possíveis de @code{@@@kbd{SPACE}} foram subsumidos por
@code{@@multitable} (@pxref{Tabelas Multi Colunas}).

Não coloque chaves depois de nenhum desses comandos.

Para produzir um espaço inquebrável, veja-se @ref{@code{@@tie}}.


@node Não Finalizando Uma Frase
@subsection Não Finalizando Uma Frase

@cindex Não finalizando uma frase
@cindex Pontuação sem fim de frase
@cindex Pontos, inserindo
@cindex Espaçamento, no meio de frases
Quando um ponto, ponto de exclamação ou ponto de interrogação estão no
final de uma frase, um pouco mais de espaço é inserido depois deles em
um manual tipográfico.

@findex <colon> @r{(suprimir espaço de fim de frase)}
@findex :
Geralmente, Texinfo consegue determinar automaticamente quando um ponto
termina uma frase. No entanto, comandos especiais são necessários em
algumas circunstâncias. Use o comando @code{@@:} depois de um ponto,
ponto de interrogação, ponto de exclamação ou dois pontos que não
deveriam ser seguidos por espaço extra. Isso é necessário nas seguintes
situações:

@enumerate
@item Depois de um ponto que finalize uma abreviação em minúscula que
não esteja no final de uma frase.

@item Quando uma observação entre parênteses no meio de uma frase (como
esta!)@: terminar com um ponto, ponto de exclamação ou ponto de
interrogação, @code{@@:} deveria ser usado depois do parêntese direito.
Da mesma forma para colchetes direitos e aspas direitas (ambas, simples
e duplas).

@end enumerate

Por exemplo:

@example
@samp{foo vs.@@: bar (ou?)@@: baz},
@end example

@noindent
A primeira linha abaixo mostra a saída gerada e, para comparação, a
segunda linha mostra o espaçamento quando os comandos @samp{@@:} não
foram usados.

@quotation
foo vs.@: bar (ou?)@: baz@*
foo vs. bar (ou?) baz
@end quotation

@iftex
Se você olhar atentamente, verá um pouco de espaço não essencial depois
de @samp{vs.}@: e @samp{(ou?)}@:.

@end iftex

Possivelmente te ajude lembrar o que @code{@@:} faz imaginando que ele
representa um caractere minúsculo invisível que impede que uma palavra
termine com um ponto final.

Alguns comandos do Texinfo forçam espaçamento normal entre palavras, de
forma que você não tenha que inserir @code{@@:} onde normalmente faria.
Esses são os comandos de realçamento semelhantes a código, @code{@@var},
@code{@@abbr} e @code{@@acronym} (@pxref{Realçamento Útil}). Por
exemplo, em @samp{@@code@{foo. bar@}} o ponto não é considerado ser o
fim de uma frase, e nenhum espaço extra é inserido.

@code{@@:} não tem efeito na saída HTML ou Docbook.


@node Finalizando Uma Frase
@subsection Finalizando Uma Frase

@cindex Finalizando Uma Frase
@cindex Frase, pontuação final

@findex . @r{(fim de frase)}
@findex ! @r{(fim de frase)}
@findex ? @r{(fim de frase)}
@cindex Espaçamento, ao final de frases
Como mencionado acima, Texinfo normalmente insere espaço adicional
depois do fim de uma frase. Ele usa a mesma heurística para isso que o
@TeX{}: uma frase termina com um ponto final, ponto de exclamação ou
ponto de interrogação, precedido ou seguido por pontuação opcional de
fechamento, e, então, espaço em branco, e @emph{não} precedido por uma
letra maiúscula.

Use @code{@@.}@: em vez de um ponto, @code{@@!}@: em vez de um ponto de
exclamação e @code{@@?}@: em vez de um ponto de interrogação ao final de
uma frase que termine com uma letra maiúscula. Não coloque chaves depois
de quaisquer desses comandos. Por exemplo:

@example
Dê para M.I.B. e para M.E.W@@. Também, dê para R.J.C@@.
Dê para M.I.B. e para M.E.W. Também, dê para R.J.C.
@end example

@noindent
A saída gerada segue. Na saída gerada impressa e no Info, você pode ver
o espaço em branco extra desejado depois do @samp{W} na primeira linha.

@quotation
Dê para M.I.B. e para M.E.W@. Também, dê para R.J.C@.@*
Dê para M.I.B. e para M.E.W. Também, dê para R.J.C.
@end quotation

Na saída gerada de HTML, @code{@@.}@: é equivalente a um simples
@samp{.}; o mesmo vale para @code{@@!}@: e @code{@@?}@:.

@cindex Pontuação de fechamento e finalização de frase
A ``pontuação de fechamento'' mencionada acima é definida como um
parêntese direito (@samp{)}, colchete direito (@samp{]}, ou aspa
direita, simples ou dupla (@samp{'} e @samp{''}; as muitas aspas
direitas Unicode adicionais possíveis não estão incluídas). Esses
caracteres podem ser considerados como invisíveis com respeito a se um
determinado ponto finaliza uma frase. (Essa é a mesma regra que @TeX{}).
Por exemplo, os pontos em @samp{foo.) Bar} e @samp{foo.'' Bar} finalizam
frases.

Os significados de @code{@@:} e @code{@@.}, etc.@: no Texinfo são
projetados para funcionar bem com os comandos de movimento de frase do
Emacs (@pxref{Sentences,,, emacs, O Manual do GNU Emacs}). Possivelmente
ajude imaginar que o @samp{@@} em @samp{@@.}, etc., é uma letra
minúscula invisível `a' que torna uma letra maiúscula antes dela
irrelevante para os propósitos de decidir se o ponto final termina a
frase.

Alguns comandos do Texinfo não são considerados como sendo uma
abreviação, mesmo que possam terminar com uma letra maiúscula quando
expandidos, de forma que você não tenha que inserir @code{@@.} e
acompanhantes. Notavelmente, esse é o caso para comandos de realçamento
semelhantes a código, argumentos @code{@@var} terminando com uma letra
maiúscula, @code{@@LaTeX} e @code{@@TeX}. Por exemplo, essa frase
terminou com @samp{... @@code@{@@@@TeX@}.}; @code{@@.} não foi
necessário. Da mesma forma, em @code{... @@var@{VARNAME@}. Texto} o
ponto depois de @var{VARNAME} termina a frase; não existe necessidade de
usar @code{@@.}.


@node @code{@@frenchspacing}
@subsection @code{@@frenchspacing} @var{val}: Controle de Espaçamento de Frase

@anchor{frenchspacing}@c Nome antigo
@findex frenchspacing
@cindex Espaçamento francês
@cindex Frases, espaçamento depois
@cindex Espaço, depois de frases

Na tipografia americana, é tradicional e correto colocar espaço extra ao
final de uma frase. Esse é o padrão no Texinfo (implementado no Info e
na saída gerada impressa; para HTML, nós não tentamos substituir o
navegador). Na tipografia francesa (e outras), esse espaço extra é
errado; todos os espaços são uniformes.

Portanto, Texinfo fornece o comando @code{@@frenchspacing} para
controlar o espaçamento depois da pontuação. Ele lê o resto da linha
como argumento, que precisa ser a única palavra @samp{on} ou @samp{off}
(sempre essas palavras, independentemente do idioma do documento). Aqui
está um exemplo:

@example
@@frenchspacing on
Isso é texto. Duas frases. Três frases. Espaçamento francês.

@@frenchspacing off
Isso é texto. Duas frases. Três frases. Espaçamento não francês.
@end example

@noindent produz:

@frenchspacing on
Isso é texto. Duas frases. Três frases. Espaçamento francês.

@frenchspacing off
Isso é texto. Duas frases. Três frases. Espaçamento não francês.

@code{@@frenchspacing} também afeta a saída gerada depois de @code{@@.},
@code{@@!} e @code{@@?} (@pxref{Finalizando Uma Frase}).

@code{@@frenchspacing} não tem efeito na saída gerada de HTML ou
Docbook; para XML, ele gera uma transliteração dele mesmo
(@pxref{Formatos de Saída}).


@node @code{@@dmn}
@subsection @code{@@dmn}@{@var{dimension}@}: Formatar uma dimensão

@anchor{dmn}@c nome antigo
@cindex Espaço fino entre número, dimensão
@cindex Formatação de dimensão
@cindex Formatar uma dimensão
@findex dmn

Você pode usar o comando @code{@@dmn} para formatar uma dimensão com um
pouco de espaço extra na saída gerada impressa. Ou seja, ao ver
@code{@@dmn}, @TeX{} insere apenas espaço suficiente para a composição
adequada; em outros formatos da saída gerada, os comandos de formatação
não inserem espaço algum.

Para usar o comando @code{@@dmn}, escreva o número e depois siga-o
imediatamente, sem espaço intermediário, por @code{@@dmn}, e depois pela
dimensão entre chaves. Por exemplo,

@example
Papel A4 tem 8,27@@dmn@{in@} de largura.
@end example

@noindent
produz

@quotation
Papel A4 tem 8,27@dmn{in} de largura.
@end quotation

Nem todo mundo usa esse estilo. Algumas pessoas preferem
`8.27@tie{}in.'@: ou `8.27@tie{}inches'. Nesses casos, no entanto, você
precisa usar @code{@@tie} (@pxref{@code{@@tie}}) ou @code{@@w}
(@pxref{@code{@@w}}) de forma que nenhuma quebra de linha possa ocorrer
entre o número e a dimensão. Além disso, se você escrever um ponto
depois de uma abreviação dentro de uma frase (como com `in.'@: acima),
você deveria escrever @samp{@@:} depois do ponto para evitar que @TeX{}
insira espaços em branco extras, como mostrado aqui.
@xref{Não Finalizando Uma Frase}.


@node Inserindo Acentos
@section Inserindo Acentos

@cindex Inserindo acentos
@cindex Acentos, inserindo
@cindex Acentos flutuantes, inserindo

Aqui está uma tabela com os comandos que Texinfo fornece para inserir
acentos flutuantes. Eles todos precisam de um argumento, o caractere a
ser acentuado, que pode ou ser fornecido entre chaves como de costume
(@code{@@'@{e@}}), ou, como um caso especial, as chaves podem ser
omitidas, em cujo caso o argumento é o próximo caractere (@code{@@'e}).
Isso é para tornar o fonte o mais conveniente possível para digitar-se e
ler-se, já que caracteres acentuados são muito comuns em alguns idiomas.

Se o comando for alfabético, como @code{@@dotaccent}, então precisa
existir um espaço entre o nome do comando e o argumento se chaves não
forem usadas. Se o comando for não alfabético, como @code{@@'}, então
precisa @emph{não} existir um espaço; o argumento é o exato próximo
caractere.

Exceção: o argumento para @code{@@tieaccent} precisa ser colocado entre
chaves (já que são dois caracteres em vez de um).

Para obter a saída gerada dos verdadeiros caracteres acentuados no Info,
não apenas as transliterações ASCII, é necessário especificar-se
@code{@@documentencoding} com uma codificação que suporte os caracteres
exigidos (@pxref{@code{@@documentencoding}}). Nesse caso, você também
pode usar caracteres não ASCII (por exemplo, pré-acentuados) no arquivo
fonte.

@findex " @r{(acento trema)}
@cindex Acento trema
@findex ' @r{(acento agudo)}
@cindex Acento agudo
@findex = @r{(acento Macron)}
@cindex Acento Macron
@findex ^ @r{(acento circunflexo)}
@cindex Acento circunflexo
@findex ` @r{(acento grave)}
@cindex Acento grave
@findex ~ @r{(acento til)}
@cindex Acento til
@findex , @r{(acento cedilha)}
@cindex Acento cedilha
@findex dotaccent
@cindex Acento ponto
@findex H @r{(acento trema húngaro)}
@cindex Acento trema húngaro
@findex ogonek
@cindex Diacrítico Ogonek
@findex ringaccent
@cindex Acento de anel
@findex tieaccent
@cindex Acento de ligação posterior
@findex u @r{(acento breve)}
@cindex Acento breve
@findex ubaraccent
@cindex Acento abaixo da barra
@findex udotaccent
@cindex Acento sublinhado
@findex v @r{(caron)}
@cindex Acento Hacek
@cindex Acento Check
@cindex Caron
@multitable {@t{@@questiondown@{@}}} {Output} {acento caron/hacek/check}
@headitem Comando           @tab Saída gerada   @tab O quê
@item @t{@@"o}              @tab @"o            @tab acento trema
@item @t{@@'o}              @tab @'o            @tab acento agudo
@item @t{@@,@{c@}}          @tab @,{c}          @tab acento cedilha
@item @t{@@=o}              @tab @=o            @tab acento macron/overbar
@item @t{@@^o}              @tab @^o            @tab acento circunflexo
@item @t{@@`o}              @tab @`o            @tab acento grave
@item @t{@@~o}              @tab @~o            @tab acento til
@item @t{@@dotaccent@{o@}}  @tab @dotaccent{o}  @tab acento overdot
@item @t{@@H@{o@}}          @tab @H{o}          @tab longo trema húngaro
@item @t{@@ogonek@{a@}}     @tab @ogonek{a}     @tab ogonek
@item @t{@@ringaccent@{o@}} @tab @ringaccent{o} @tab acento ring
@item @t{@@tieaccent@{oo@}} @tab @tieaccent{oo} @tab acento de ligação posterior
@item @t{@@u@{o@}}          @tab @u{o}          @tab acento breve
@item @t{@@ubaraccent@{o@}} @tab @ubaraccent{o} @tab acento underbar
@item @t{@@udotaccent@{o@}} @tab @udotaccent{o} @tab acento underdot
@item @t{@@v@{o@}}          @tab @v{o}          @tab acento caron/hacek/check
@end multitable

Esta tabela lista os comandos do Texinfo para inserir outros caracteres
comumente usados em idiomas diferentes do inglês.

@findex questiondown
@cindex @questiondown{}
@findex exclamdown
@cindex @exclamdown{}
@findex aa
@cindex @aa{}
@findex AA
@cindex @AA{}
@findex ae
@cindex @ae{}
@findex AE
@cindex @AE{}
@cindex Islandês
@cindex Eth
@findex dh
@cindex @dh{}
@findex DH
@cindex @DH{}
@findex dotless
@cindex @dotless{i} (dotless i)
@cindex @dotless{j} (dotless j)
@cindex Dotless i, j
@findex l
@cindex @l{}
@findex L
@cindex @L{}
@findex o
@cindex @o{}
@findex O
@cindex @O{}
@findex oe
@cindex @oe{}
@findex OE
@cindex @OE{}
@cindex Ordinais de romance
@cindex Ordinalis, Romance
@cindex Ordinal feminino
@findex ordf
@cindex @ordf{}
@cindex Ordinal masculino
@findex ordm
@cindex @ordm{}
@findex ss
@cindex @ss{}
@cindex Es-zet
@cindex Sharp S
@cindex S alemão
@cindex Thorn
@findex th
@cindex @th{}
@findex TH
@cindex @TH{}
@multitable {@t{@@questiondown@{@}}} {oe OE} {es-zet or sharp S}
@item @t{@@exclamdown@{@}}      @tab @exclamdown{}   @tab ! de cabeça para baixo
@item @t{@@questiondown@{@}}    @tab @questiondown{} @tab ? de cabeça para baixo
@item @t{@@aa@{@} @@AA@{@}}     @tab @aa{} @AA{}     @tab a,A com círculo
@item @t{@@ae@{@} @@AE@{@}}     @tab @ae{} @AE{}     @tab ligaduras ae,AE
@item @t{@@dh@{@} @@DH@{@}}     @tab @dh{} @DH{}     @tab eth islandês
@item @t{@@dotless@{i@}}        @tab @dotless{i}     @tab i sem ponto
@item @t{@@dotless@{j@}}        @tab @dotless{j}     @tab j sem ponto
@item @t{@@l@{@} @@L@{@}}       @tab @l{} @L{}       @tab L,l suprimido
@item @t{@@o@{@} @@O@{@}}       @tab @o{} @O{}       @tab O,o com barra
@item @t{@@oe@{@} @@OE@{@}}     @tab @oe{} @OE{}     @tab ligaduras de oe,OE
@item @t{@@ordf@{@} @@ordm@{@}} @tab @ordf{} @ordm{} @tab Ordinais espanhóis
@item @t{@@ss@{@}}              @tab @ss{}           @tab es-zet ou sharp S
@item @t{@@th@{@} @@TH@{@}}     @tab @th{} @TH{}     @tab thorn islandês
@end multitable


@node Inserindo Aspas
@section Inserindo Aspas
@cindex Inserindo aspas
@cindex Aspas, inserindo

@cindex Caracteres de citação (`'), no fonte
Use caracteres de aspas simples duplicadas para iniciar e terminar
citações:
@w{@t{`@w{}`@dots{}'@w{}'}}. @TeX{} converte duas aspas simples para
marcas duplicadas de citação à esquerda e à direita,
@c isso aparece como "assim" no Info, o que é simplesmente confuso.
@iftex
``assim'',
@end iftex
e Info converte caracteres duplicados de aspas simples para aspas duplas
ASCII: @w{@t{`@w{}`@dots{}'@w{}'}} se torna @w{@t{"@dots{}"}}.

Ocasionalmente, você pode precisar produzir duas aspas simples
consecutivas; por exemplo, ao documentar uma linguagem de computador
como Maxima, onde @t{'@w{}'} é um comando válido. Você pode fazer isso
com a entrada @t{'@@w@{@}'}; o comando vazio @code{@@w} interrompe a
combinação nos caracteres de aspas duplas.

@cindex Caracteres Unicode de citação
@cindex Acento grave, versus aspa esquerda
O caractere de aspa esquerda (@t{`}, código ASCII 96) usado no Texinfo é
um acento grave nos padrões de conjunto de caracteres ANSI e ISO. Nós o
usamos como um caractere de aspas porque assim é como @TeX{} está
configurado, por padrão.

Texinfo suporta várias outras aspas usadas em idiomas diferentes do
inglês. Abaixo está uma tabela com os comandos que Texinfo fornece para
inserir aspas.

@cindex UTF-8
@cindex ISO 8859-15
@cindex Latin 9
@cindex ISO 8859-1
@cindex Latin 1

Para a finalidade de se obter os símbolos para as aspas na saída gerada
codificada do Info, é necessário especificar-se
@code{@@documentencoding UTF-8}. (@xref{@code{@@documentencoding}}).
Guillemets duplos também estão presentes na ISO 8859-1 (também conhecida
como Latin@tie{}1) e na ISO 8859-15 (também conhecida como
Latin@tie{}9).

@cindex Fontes modernas de Computador Europeu
@cindex EC fontes
As fontes padrão do @TeX{} suportam as aspas usuais usadas em inglês
(aquelas produzidas com aspas simples de ASCII unitárias e duplicadas).
Para as outras aspas, @TeX{} usa fontes European Computer Modern (EC)
(@file{ecrm1000} e outras variantes). Essas fontes estão disponíveis
gratuitamente, é claro; você pode baixá-las a partir de
@url{http://ctan.org/pkg/ec}, entre outros lugares.

@cindex Fontes CM-Super
As fontes livres EC são fontes bitmap criadas com Metafont.
Especialmente para visualização on-line, as versões Type@tie{}1 (vetor)
das fontes são preferíveis; elas estão disponíveis no pacote de fontes
CM-Super (@url{http://ctan.org/pkg/cm-super}).

Ambas as distribuições incluem instruções de instalação.

@cindex Aspas simples
@cindex Aspas duplas
@cindex Aspas à esquerda
@cindex Aspas à direita
@findex quotedblleft
@cindex `@w{}`
@findex quoteleft
@cindex `
@cindex " (caractere de aspas duplas não direcionadas)
@findex quotedblright
@cindex '@w{}'
@findex quoteright
@cindex '
@cindex Aspas duplas baixo-9
@cindex Aspas simples baixo-9
@findex quotedblbase
@cindex @quotedblbase{} (aspas duplas baixo-9)
@findex quotesinglbase
@cindex @quotesinglbase{} (aspas simples baixo-9)
@cindex Aspas angulares
@cindex Guillemets
@cindex Guillemots
@cindex Aspas francesas
@cindex Aspas, francesas
@cindex Aspas alemãs
@cindex Aspas, alemãs
@cindex Guillemets duplos
@cindex Guillemets simples
@cindex Aspas de ângulo duplo
@cindex Aspas angulares simples
@cindex Aspas de ângulo apontando para a esquerda
@cindex Aspas de ângulo apontando para a direita
@cindex Aspas duplas de ângulo apontando para a esquerda
@cindex Aspas duplas de ângulo apontando para a direita
@cindex Aspas simples de ângulo apontando para a esquerda
@cindex Aspas simples de ângulo apontando para a direita
@findex guillemetleft
@findex guillemotleft
@cindex @guillemetleft{}
@findex guillemetright
@findex guillemotright
@cindex @guillemetright{}
@findex guilsinglleft
@cindex @guilsinglleft{}
@findex guilsinglright
@cindex @guilsinglright{}
@c A terceira coluna não tem o texto completo no protótipo,
@c de forma que a saída gerada do Info cabe em 72 colunas.
@multitable {@t{@@quotedblright@{@} '@w{}'}} {Glyph} {Aspas duplas apontando para a direita}
@headitem Comando                    @tab Glifo             @tab Nome Unicode (ponto)
@item @verb{.@quotedblleft{} ``.}    @tab @quotedblleft{}   @tab Aspas duplas esquerdas (U+201C)
@item @verb{.@quotedblright{} ''.}   @tab @quotedblright{}  @tab Aspas duplas direitas (U+201D)
@item @verb{.@quoteleft{} `.}        @tab @quoteleft{}      @tab Aspas simples esquerdas (U+2018)
@item @verb{.@quoteright{} '.}       @tab @quoteright{}     @tab Aspas simples direitas (U+2019)
@item @t{@@quotedblbase@{@}}         @tab @quotedblbase{}   @tab Aspas duplas baixo-9 (U+201E)
@item @t{@@quotesinglbase@{@}}       @tab @quotesinglbase{} @tab Aspas simples baixo-9 (U+201A)
@item @t{@@guillemetleft@{@}}        @tab @guillemetleft{}  @tab Aspas duplas apontando para a esquerda (U+00AB)
@item @t{@@guillemetright@{@}}       @tab @guillemetright{} @tab Aspas duplas apontando para a direita (U+00BB)
@item @t{@@guilsinglleft@{@}}        @tab @guilsinglleft{}  @tab Aspas simples apontando para a esquerda (U+2039)
@item @t{@@guilsinglright@{@}}       @tab @guilsinglright{} @tab Aspas simples apontando para a direita (U+203A)
@end multitable

@cindex Auk, espécies de pássaro
Para as aspas de ângulo duplo, nomes de glifos da Adobe e @LaTeX{}
também são suportados: @code{@@guillemotleft} e @code{@@guillemotright}.
Esses nomes estão incorretos; um ``guillemot'' é uma espécie de pássaro
(um tipo de auk).

As tradições para o uso de aspas variam muito entre os idiomas
(@url{http://en.wikipedia.org/wiki/Quotation_mark}). Texinfo não fornece
comandos ou configurações para composição de aspas de acordo com as
numerosas tradições. Portanto, você tem que escolher os comandos
apropriados para o idioma do teu manual. Às vezes, apelidos
(@pxref{@code{@@alias}}) podem simplificar o uso e tornar o código-fonte
mais legível. Por exemplo, em alemão, @code{@@quotedblbase} é usado para
as aspas duplas à esquerda, e as aspas duplas à direita são o glifo
produzido por @code{@@quotedblleft}, o que é contraintuitivo. Portanto,
nesse caso, os seguintes apelidos seriam convenientes:

@example
@@alias lgqq = quotedblbase
@@alias rgqq = quotedblleft
@end example


@node Inserindo Subscritos e Sobrescritos
@section @code{@@sub} e @code{@@sup}: Inserindo Subscritos e Sobrescritos

@findex sub
@findex sup
@cindex Subscritos e sobrescritos, texto

Você consegue inserir subscritos e sobrescritos, em texto ou matemática,
com os comandos @code{@@sub} e @code{@@sup}. (Para outras expressões
matemáticas, veja-se a próxima seção). Por exemplo, aqui está um
subscrito e sobrescrito puramente textual:

@example
aqui@@sub@{abaixo@}@@sup@{acima@}
@end example

@noindent produz:

@display
aqui@sub{abaixo}@sup{acima} @c CONSERTE-ME
@end display

@cindex Fonte itálica matemática
Dentro de @code{@@math}, @code{@@sub} e @code{@@sup} produzem subscritos
e sobrescritos matemáticos. Isso usa uma fonte diferente na saída gerada
do @TeX{} (itálico de matemática, em vez de itálico de texto); não faz
diferença nos outros formatos de saída. Aqui está um exemplo:

@example
@@math@{e@@sup@{x@}@}
@end example

@noindent produz:

@display
@math{e@sup{x}}
@end display

No Info e texto simples, independentemente de ser usado dentro de
@code{@@math}, @code{@@sub@{@var{texto}@}} é gerado como
@samp{_@{@var{texto}@}} e @code{@@sup@{@var{texto}@}} como
@samp{^@{@var{texto}@}}, incluindo as chaves literais (para marcar o
início e o fim do texto de ``script'' para o(a) leitor(a)).

Quando o formato da saída gerada (e o programa de exibição) permite
(matemática do @TeX{}, HTML), o sobrescrito é configurado acima do
subscrito quando ambos os comandos forem fornecidos consecutivamente.


@node Inserindo Fórmulas Matemáticas
@section @code{@@math}: Inserindo Expressões Matemáticas

@anchor{math}@c nome antigo
@findex math
@cindex Expressões matemáticas, inserindo
@cindex Fórmulas, matemática

Você consegue escrever uma expressão matemática curta com o comando
@code{@@math}. Escreva a expressão matemática entre chaves, assim:

@example
@@math@{(a + b) = (b + a)@}
@end example

@iftex
@noindent Isso produz o seguinte no @TeX{}:

@display
@math{(a + b) = (b + a)}
@end display

@noindent e o seguinte em outros formatos:
@end iftex
@ifnottex
@noindent Isso produz o seguinte no Info e em HTML:
@end ifnottex

@example
(a + b) = (b + a)
@end example

@cindex MathML, não usado
O comando @code{@@math} não tem efeito especial na saída gerada de Info
e de HTML. @command{makeinfo} expande quaisquer comandos @@ como de
costume, mas não tenta usar (ou produzir) boa formatação matemática de
forma alguma (sem uso de MathML, etc.). A saída gerada de HTML é
delimitada por @code{<em>...</em>}, mas nada mais.

@findex \mathopsup
No entanto, no que diz respeito à saída gerada do @TeX{}, comandos
matemáticos simples do @TeX{} são permitidos no @code{@@math}, começando
com @samp{\}. Em essência, o @code{@@math} comuta para o modo matemático
simples do @TeX{}. (Exceção: o comando simples do @TeX{} @code{\sup},
que tipografa o nome do operador matemático `sup', precisa ser acessado
como @code{\mathopsup}, devido ao conflito com o comando @code{@@sup} do
Texinfo).

Isso permite que você use todas as sequências de controle matemático
simples do @TeX{} para símbolos, funções e assim por diante, e assim
obtenha a formatação adequada na saída gerada do @TeX{}, pelo menos.

Os comandos @code{@@sub} e @code{@@sup} descritos na seção anterior
produzem subscritos e sobrescritos na saída gerada de HTML, bem como no
@TeX{}; os caracteres simples do @TeX{} @code{_} e @code{^} para
subscritos e sobrescritos são reconhecidos pelo @TeX{} dentro do
@code{@@math}, mas não fazem nada de especial em HTML ou outros formatos
de saída.

É melhor usar @samp{\} em vez de @samp{@@} para quaisquer comandos
matemáticos desse tipo; caso contrário, @command{makeinfo} reclamará.
Por outro lado, @command{makeinfo} permite entrada com chaves
correspondentes (inescapadas), como @samp{k_@{75@}}; ele reclama acerca
dessas chaves vazias na entrada regular.

Aqui está um exemplo:

@example
@@math@{\sin 2\pi \equiv \cos 3\pi@}
@end example

@iftex
@noindent que se parece com isto no @TeX{}:
@display
@math{\sin 2\pi \equiv \cos 3\pi}
@end display

@noindent mas
@end iftex
@noindent que se parece com a entrada no Info e em HTML:
@example
\sin 2\pi \equiv \cos 3\pi
@end example

@findex @sortas{\} \ @r{(\ literal em @code{@@math})} @c CONSERTE-ME
Como @samp{\} é um caractere de escape dentro de @code{@@math}, você
pode usar @code{@@\} para obter uma barra invertida literal (@code{\\}
funcionará no @TeX{}, mas você obteria os dois caracteres literais
@samp{\\} no Info). @code{@@\} não está definido fora de @code{@@math},
pois uma @samp{\} normalmente produz uma @samp{\} literal (máquina de
escrever). Você também pode usar @code{@@backslashchar@{@}} em qualquer
modo para obter uma barra invertida de máquina de escrever.
@xref{Inserindo uma Barra Invertida}.

@cindex Equações exibidas
@cindex Equações, exibidas
Para equações exibidas, você precisa, no presente, usar @TeX{}
diretamente (@pxref{Comandos do Formatador Bruto}).

@node Glifos para Texto
@section Glifos para Texto

@anchor{Glifos}@c nome antigo
@anchor{TeX e direitos autorais}@c outro nó antigo, agora dividido em dois
@cindex Glifos para texto
@cindex Glifos textuais

Texinfo tem suporte para alguns glifos adicionais que são comumente
usados em texto impresso, mas não disponíveis em ASCII@. Claro, existem
muitos milhares mais. É possível usar caracteres Unicode como estão no
que diz respeito ao @code{makeinfo}, mas o @TeX{} não é tão sortudo.

@menu
* @code{@@TeX @@LaTeX}::                As logomarcas do @TeX{}.
* @code{@@copyright}::                  O símbolo de direitos autorais (c em um círculo).
* @code{@@registeredsymbol}::           O símbolo de marca registrada (R em um círculo).
* @code{@@dots}::                       Como inserir reticências: @dots{} e @enddots{}
* @code{@@bullet}::                     Como inserir um marcador: @bullet{}
* @code{@@euro}::                       Como inserir o símbolo da moeda Euro.
* @code{@@pounds}::                     Como inserir o símbolo da moeda Libras.
* @code{@@textdegree}::                 Como inserir o símbolo de Graus.
* @code{@@minus}::                      Como inserir um sinal de menos.
* @code{@@geq @@leq}::                  Como inserir os sinais maior/menor que ou igual a.
@end menu


@node @code{@@TeX @@LaTeX}
@subsection @code{@@TeX}@{@} (@TeX{}) e @code{@@LaTeX}@{@} (@LaTeX{})

@anchor{tex}@c nome antigo
@findex TeX
@findex LaTeX
@cindex Logos, @TeX{}
@cindex Logomarca do @TeX{}
@cindex Logomarca do @LaTeX{}

Use o comando @code{@@TeX@{@}} para gerar `@TeX{}'. Em um manual
impresso, esse é um logotipo especial que é diferente de três letras
comuns. No Info, ele se parece apenas com @samp{TeX}.

Da mesma forma, use o comando @code{@@LaTeX@{@}} para gerar `@LaTeX{}',
que é ainda mais especial em manuais impressos (e diferente do incorreto
@code{La@@TeX@{@}}. No Info, o resultado é apenas @samp{LaTeX}.
(@LaTeX{} é outro pacote de macro criado com fundamento no @TeX{}, muito
vagamente análogo ao Texinfo, pois enfatiza a estrutura lógica, mas
muito (muito) maior).

A grafia desses comandos é incomum no Texinfo, pois eles usam ambas,
letras maiúsculas e minúsculas.


@node @code{@@copyright}
@subsection @code{@@copyright@{@}} (@copyright{})

@anchor{símbolo de direitos autorais}@c nome antigo
@findex copyright
@cindex Símbolo de copyright

Use o comando @code{@@copyright@{@}} para gerar o símbolo de copyright,
`@copyright{}'. Onde possível, esse é um @samp{c} dentro de um círculo;
no Info, isso é @samp{(C)}.

Juridicamente, não é necessário usar o símbolo de direitos autorais; a
palavra em inglês `Copyright' é suficiente, de acordo com tratado
internacional.


@node @code{@@registeredsymbol}
@subsection @code{@@registeredsymbol@{@}} (@registeredsymbol{})

@anchor{símbolo de registrado}@c nome antigo
@findex registeredsymbol
@cindex Símbolo Registrado

Use o comando @code{@@registeredsymbol@{@}} para gerar o símbolo de
Registrado, `@registeredsymbol{}'. Onde possível, esse é um @samp{R}
dentro de um círculo; no Info, isso é @samp{(R)}.


@node @code{@@dots}
@subsection @code{@@dots} (@dots{}) e @code{@@enddots} (@enddots{})

@anchor{dots}@c nome antigo
@findex dots
@findex enddots
@cindex Inserindo pontos
@cindex Inserindo reticências
@cindex Pontos, inserindo
@cindex Reticências, inserindo

@anchor{Pontos Marcadores}@c nome antigo

Uma @dfn{reticência} (uma sequência de pontos) seria espaçada
incorretamente quando tipografada como uma sequência de pontos, de forma
que um comando especial é usado no Texinfo: use o comando
@code{@@dots@{@}} para gerar uma reticência normal, que são três pontos
em uma linha, apropriadamente espaçados @dots{} assim. Para enfatizar:
não escreva simplesmente três pontos no arquivo de entrada; isso
funcionaria para a saída gerada do arquivo do Info, mas produziria a
quantidade errada de espaço entre os pontos no manual impresso.
@c CONSERTE-ME
O comando @code{@@enddots@{@}} gera reticências no final da frase, que
também tem três pontos, mas com espaçamento diferente depois, @enddots{}
. Observe atentamente para ver a diferença.

Aqui está uma reticência: @dots{} .
Aqui estão três pontos em uma linha: ... .

Na saída gerada impressa (e geralmente em HTML), os três pontos em uma
linha estão muito mais próximos um ao outro que os pontos nas
reticências.


@node @code{@@bullet}
@subsection @code{@@bullet} (@bullet{})

@anchor{bullet}@c nome antigo
@findex bullet

Use o comando @code{@@bullet@{@}} para gerar um ponto redondo grande, ou
o mais próximo possível de um. No Info, um asterisco é usado. Aqui está
um marcador: @bullet{}

Ao usar @code{@@bullet} em @code{@@itemize}, você não precisa digitar as
chaves, porque @code{@@itemize} as fornece.
(@pxref{@code{@@itemize}}).


@node @code{@@euro}
@subsection @code{@@euro} (@euro{}): Símbolo da Moeda Euro

@anchor{euro}@c nome antigo
@findex euro
@cindex Símbolo do Euro, produzindo

Use o comando @code{@@euro@{@}} para gerar `@euro{}'. Onde possível,
esse é o símbolo da moeda Euro. Caso contrário, a palavra @samp{Euro} é
usada.

Texinfo não pode magicamente sintetizar suporte para o símbolo do Euro
onde o sistema subjacente (fontes, software, o que for) não o suporta.
Portanto, você pode achar preferível usar a palavra ``Euro''. (Em
contextos bancários, a abreviação para o Euro é EUR).

@cindex ISO 8859-15, e Euro
@cindex Latin 9, e Euro
Para a finalidade de obter o símbolo do Euro na saída gerada codificada
do Info, por exemplo, é necessário especificar
@code{@@documentencoding ISO-8859-15} ou @code{@@documentencoding UTF-8}
(@xref{@code{@@documentencoding}}). O símbolo do Euro está na ISO
8859-15 (também conhecida como Latin@tie{}9) e @emph{não} está na mais
amplamente usada ISO 8859-1 (Latin@tie{}1).

@pindex feymr10
@cindex fonte Euro
O símbolo do Euro não existe nas fontes padrão do @TeX{} (que foram
projetadas antes da existência jurídica do Euro). Portanto, o @TeX{} usa
uma fonte adicional, chamada @code{feymr10} (junto com outras
variáveis). Ela está disponível gratuitamente, é claro; você consegue
baixá-la a partir de @url{http://ctan.org/pkg/eurosym}, entre outros
lugares. A distribuição inclui instruções de instalação.


@node @code{@@pounds}
@subsection @code{@@pounds} (@pounds{}): Libras esterlinas

@anchor{pounds}@c nome antigo
@findex libras
@cindex Libras, símbolo

Use o comando @code{@@pounds@{@}} para gerar `@pounds{}'. Onde possível,
esse é o símbolo para a Libra esterlina, moeda britânica. Caso
contrário, é @samp{#}.


@node @code{@@textdegree}
@subsection @code{@@textdegree} (@textdegree{}): símbolo de Graus

@anchor{textdegree}@c nome antigo
@findex textdegree
@cindex Símbolo de Graus

Use o comando @code{@@textdegree@{@}} para gerar `@textdegree{}'. Onde
possível, esse é o símbolo normal para Graus. Caso contrário, é um
@samp{o}.


@node @code{@@minus}
@subsection @code{@@minus} (@minus{}): Inserindo um Sinal de Menos

@anchor{minus}@c nome antigo
@findex minus
@cindex Sinal de menos

@cindex Travessão(em dash), comparado ao sinal de menos
@cindex Hífen, comparado ao sinal menos
Use o comando @code{@@minus@{@}} para gerar um sinal de menos. Em uma
fonte de largura fixa, isso é um hífen, mas em uma fonte proporcional, o
símbolo tem o comprimento habitual para um sinal de menos---um pouco
mais longo que um hífen, mais curto que um travessão:

@display
@samp{@minus{}} é um sinal de menos gerado com @samp{@@minus@{@}},

`-' é um hífen gerado com o caractere @samp{-},

`---' é um travessão para texto.
@end display

@noindent
Na fonte de largura fixa usada pelo Info, @code{@@minus@{@}} é o mesmo
que um hífen.

Você deveria não usar @code{@@minus@{@}} dentro de @code{@@code} ou
@code{@@example} porque a distinção de largura não é feita na fonte de
largura fixa que eles usam.

Ao usar @code{@@minus} para especificar a marca que inicia cada entrada
em uma lista de itens, você não precisa digitar as chaves
(@pxref{@code{@@itemize}}).

Se você realmente quer tipografar alguma matemática que faça uma
subtração, é melhor usar @code{@@math}. Então o caractere regular
@samp{-} produz um sinal de menos, como em @code{@@math@{a-b@}}
(@pxref{Inserindo Fórmulas Matemáticas}).


@node @code{@@geq @@leq}
@subsection @code{@@geq} (@geq{}) e @code{@@leq} (@leq{}): Inserindo Relações

@anchor{geq leq}@c nome antigo
@findex geq
@findex leq

Use os comandos @code{@@geq@{@}} e @code{@@leq@{@}} para gerar sinais de
maior/menor que ou igual a, `@geq{}' e `@leq{}'. Quando esses símbolos
não estão disponíveis, as sequências ASCII @samp{>=} e @samp{<=} são
geradas.


@node Glifos para Programação
@section Glifos para Programação

@cindex Glifos para programação
@cindex Exemplos, glifos para
@cindex Programação, glifos para

No Texinfo, o código frequentemente é ilustrado em exemplos que são
delimitados por @code{@@example} e @code{@@end example}, ou por
@code{@@lisp} e @code{@@end lisp}. Em tais exemplos, você pode indicar
os resultados da avaliação ou uma expansão usando @samp{@result{}} ou
@samp{@expansion{}}. Da mesma forma, existem comandos para inserir
glifos para indicar saída gerada impressa, mensagens de erro,
equivalência de expressões, o local do ponto em um editor e sequências
de operação da GUI.

Os comandos de inserção de glifos não precisam ser usados dentro de um
exemplo, mas na maioria das vezes são. Todos os comandos de inserção de
glifos são seguidos por chaves vazias.

@menu
* Sumário de Glifos::
* @code{@@result}::                     Como exibir o resultado da expressão.
* @code{@@expansion}::                  Como indicar uma expansão.
* @code{@@print}::                      Como indicar saída gerada.
* @code{@@error}::                      Como indicar uma mensagem de erro.
* @code{@@equiv}::                      Como indicar equivalência.
* @code{@@point}::                      Como indicar o local do ponto.
* Sequências de Clique::                Inserindo sequências de uso da GUI.
@end menu


@node Sumário de Glifos
@subsection Sumário de Glifos

Aqui está um resumo dos comandos de glifo:

@table @asis
@item @result{}
@code{@@result@{@}} indica o resultado de uma expressão.

@item @expansion{}
@code{@@expansion@{@}} indica os resultados de uma expansão de macro.

@item @print{}
@code{@@print@{@}} indica saída impressa.

@item @error{}
@code{@@error@{@}} indica que o texto seguinte é uma mensagem de erro.

@item @equiv{}
@code{@@equiv@{@}} indica a equivalência exata de duas formas.

@item @point{}
@code{@@point@{@}} mostra o local do ponto.

@item @clicksequence{A @click{} B}
@code{@@clicksequence@{A @@click@{@} B} indica uma sequência de operação
da GUI: primeiro A, depois clicar em B, ou escolher B em um menu, ou
então selecioná-lo.
@end table


@node @code{@@result}
@subsection @code{@@result@{@}} (@result{}): Resultado de uma Expressão

@anchor{result}@c nome antigo
@findex result
@cindex Resultado de uma expressão
@cindex Indicando avaliação
@cindex Glifo de avaliação
@cindex Valor de uma expressão, indicando

Use o comando @code{@@result@{@}} para indicar o resultado da avaliação
de uma expressão.

O comando @code{@@result@{@}} é exibido como @samp{@result{}}, uma seta
com haste dupla ou (quando essa não estiver disponível) como a sequência
ASCII @samp{=>}.

Assim, o seguinte,

@lisp
(cdr '(1 2 3))
    @result{} (2 3)
@end lisp

@noindent
pode ser lido como ``@code{(cdr '(1 2 3))} avalia para @code{(2 3)}''.


@node @code{@@expansion}
@subsection @code{@@expansion@{@}} (@expansion{}): Indicando uma Expansão

@anchor{expansion}@c nome antigo
@cindex Expansão, Indicando
@cindex Expansão de Macro, indicando
@findex expansion

Quando uma expressão é uma chamada de macro, ela se expande para uma
nova expressão. Você pode indicar o resultado da expansão com o comando
@code{@@expansion@{@}}.

O comando @code{@@expansion@{@}} é exibido como @samp{@expansion{}}, uma
seta longa com uma base plana ou (quando essa não estiver disponível)
como a sequência ASCII @samp{==>}.

@need 700
Por exemplo, o seguinte

@example
@group
@@lisp
(third '(a b c))
    @@expansion@{@} (car (cdr (cdr '(a b c))))
    @@result@{@} c
@@end lisp
@end group
@end example

@noindent
produz

@lisp
@group
(third '(a b c))
    @expansion{} (car (cdr (cdr '(a b c))))
    @result{} c
@end group
@end lisp

@noindent
que pode ser lido como:

@quotation
@code{(third '(a b c))} expande para @code{(car (cdr (cdr '(a b c))))};
o resultado da avaliação da expressão é @code{c}.
@end quotation

@noindent
Frequentemente, como nesse caso, um exemplo aparenta melhor se os
comandos @code{@@expansion@{@}} e @code{@@result@{@}} forem recuados.


@node @code{@@print}
@subsection @code{@@print@{@}} (@print{}): Indicando Saída Gerada

@anchor{Glifo de Imprimir}@c nome antigo
@findex print
@cindex Saída impressa, indicando

Às vezes, uma expressão gerará saída durante a execução dela. Você pode
indicar tal saída exibida com o comando @code{@@print@{@}}.

O comando @code{@@print@{@}} é exibido como @samp{@print{}}, um traço
horizontal encostado em uma barra vertical ou (quando isso não estiver
disponível) a sequência ASCII @samp{-|}.

No exemplo a seguir, o texto impresso é indicado com @samp{@print{}}, e
o valor da expressão segue na última linha.

@lisp
@group
(progn (print 'foo) (print 'bar))
    @print{} foo
    @print{} bar
    @result{} bar
@end group
@end lisp

@noindent
Em um arquivo fonte do Texinfo, esse exemplo é escrito como segue:

@lisp
@group
@@lisp
(progn (print 'foo) (print 'bar))
    @@print@{@} foo
    @@print@{@} bar
    @@result@{@} bar
@@end lisp
@end group
@end lisp


@node @code{@@error}
@subsection @code{@@error@{@}} (@error{}): Indicando uma Mensagem de Erro

@anchor{Glifo de Erro}@c nome antigo
@cindex Mensagem de erro, indicando
@findex error

Um pedaço de código pode causar um erro quando você o avalia. Você pode
designar a mensagem de erro com o comando @code{@@error@{@}}.

O comando @code{@@error@{@}} é exibido como @samp{@error{}}, a palavra
`error' em uma caixa na saída impressa, a palavra error seguida por uma
seta em outros formatos ou (quando nenhuma seta estiver disponível)
@samp{error-->}.

@need 700
Assim,

@example
@@lisp
(+ 23 'x)
@@error@{@} Argumento de tipo errado: integer-or-marker-p, x
@@end lisp
@end example

@noindent
produz

@lisp
(+ 23 'x)
@error{} Argumento de tipo errado: integer-or-marker-p, x
@end lisp

@noindent
Isso indica que a seguinte mensagem de erro é impressa quando você
avalia a expressão:

@lisp
Argumento de tipo errado: integer-or-marker-p, x
@end lisp

A própria palavra @samp{@error{}} não é parte da mensagem de erro.


@node @code{@@equiv}
@subsection @code{@@equiv@{@}} (@equiv{}): Indicando Equivalência

@anchor{Equivalência}@c nome antigo
@cindex Equivalência, indicando
@findex equiv

Às vezes, duas expressões produzem resultados idênticos. Você pode
indicar a equivalência exata de duas formas com o comando
@code{@@equiv@{@}}. O comando @code{@@equiv@{@}} é exibido como
@samp{@equiv{}}, um sinal de equivalência matemática padrão (três linhas
horizontais paralelas) ou (quando isso não estiver disponível) como a
sequência ASCII @samp{==}.

Assim,

@example
@@lisp
(make-sparse-keymap) @@equiv@{@} (list 'keymap)
@@end lisp
@end example

@noindent
produz

@lisp
(make-sparse-keymap) @equiv{} (list 'keymap)
@end lisp

@noindent
Isso indica que avaliar @code{(make-sparse-keymap)} produz resultados
idênticos à avaliação de @code{(list 'keymap)}.


@node @code{@@point}
@subsection @code{@@point@{@}} (@point{}): Indicando Ponto em um Buffer

@anchor{Glifo de Ponto}@c nome antigo
@cindex Ponto, indicando em um buffer
@findex point

Às vezes, você precisa mostrar um exemplo de texto em um buffer do
Emacs. Em tais exemplos, a convenção é a de incluir o conteúdo inteiro
do buffer em questão entre duas linhas de traços contendo o nome do
buffer.

Você pode usar o comando @samp{@@point@{@}} para mostrar o local do
ponto no texto no buffer. (O símbolo para ponto, é claro, não é parte do
texto no buffer; ele indica o lugar @emph{entre} dois caracteres onde o
ponto está localizado).

O comando @code{@@point@{@}} é exibido como @samp{@point{}}, uma estrela
pontiaguda ou (quando essa não estiver disponível) a sequência ASCII
@samp{-!-}.

O exemplo a seguir mostra o conteúdo do buffer @file{foo} antes e depois
de avaliar um comando Lisp para inserir a palavra @code{changed}.

@example
@group
---------- Buffer: foo ----------
Este é o @point{}conteúdo de foo.
---------- Buffer: foo ----------

@end group
@end example

@example
@group
(inserção "changed ")
    @result{} nil
---------- Buffer: foo ----------
Este é o @point{}conteúdo mudado de foo.
---------- Buffer: foo ----------

@end group
@end example

Em um arquivo fonte do Texinfo, o exemplo é escrito assim:

@example
@@example
---------- Buffer: foo ----------
Este é o @@point@{@}conteúdo de foo.
---------- Buffer: foo ----------

(inserção "changed ")
    @@result@{@} nil
---------- Buffer: foo ----------
Este é o @@point@{@}conteúdo mudado de foo.
---------- Buffer: foo ----------
@@end example
@end example


@node Sequências de Clique
@subsection Sequências de Clique

@cindex Sequências de cliques
@cindex Cliques, Sequência
@cindex Sequência de cliques da GUI

@findex clicksequence
Ao documentar interfaces gráficas, é necessário descrever sequências
como `Clique em @samp{Arquivo}, depois escolha @samp{Abrir}, depois
@dots{}'. O Texinfo oferece os comandos @code{@@clicksequence} e
@code{click} para representar isso, normalmente usados assim:

@example
@dots{} @@clicksequence@{Arquivo @@click@{@} Abrir@} @dots{}
@end example

@noindent
que produz:

@display
@dots{} @clicksequence{Arquivo @click{} Abrir} @dots{}
@end display

@findex click
@findex arrow
O comando @code{@@click} produz uma seta para a direita por padrão; esse
glifo também está disponível independentemente por meio do comando
@code{@@arrow@{@}}.

@findex clickstyle
Você pode mudar o glifo produzido por @code{@@click} com o comando
@code{@@clickstyle}, que recebe um nome de comando como o único
argumento dele no resto da linha, muito parecido com @code{@@itemize} e
amigos (@pxref{@code{@@itemize}}). O comando deveria produzir um glifo,
e as chaves vazias usuais @samp{@{@}} são omitidas. Aqui está um
exemplo:

@example
@@clickstyle @@result
@dots{} @@clicksequence@{Arquivo @@click@{@} Abrir@} @dots{}
@end example

@noindent
agora produz:

@display
@clickstyle @result
@dots{} @clicksequence{Arquivo @click{} Abrir} @dots{}
@end display


@node Inserindo Unicode
@section Inserindo Unicode: @code{@@U}

@cindex Unicode caractere, inserindo
@cindex Ponto de código de caractere Unicode, inserindo por
@findex U

O comando @code{@@U@{@var{hex}@}} insere uma representação do caractere
Unicode U+@var{hex}. Por exemplo, @code{@@U@{0132@}} insere a ligadura
holandesa `IJ' (pobremente mostrada aqui como simplesmente as duas
letras `I' e `J').

O valor @var{hex} deveria ter pelo menos quatro dígitos hexadecimais;
zeros à esquerda @emph{não} são adicionados. Em geral, @var{hex} precisa
especificar um caractere Unicode normal válido; por exemplo, U+10FFFF (o
último ponto de código) é inválido por definição e, portanto, não pode
ser inserido dessa forma.

@cindex ASCII, portabilidade de documentos fonte, usando
@code{@@U} é útil para inserir glifos ocasionais para os quais Texinfo
não tem comando dedicado, ao mesmo tempo em que permite que o fonte do
Texinfo permaneça puramente ASCII de 7 bits para máxima portabilidade.

@cindex Unicode e @TeX{}
Esse comando tem muitas limitações---as mesmas limitações de inserir
caracteres Unicode em UTF-8 ou outra forma binária. Primeiro e mais
importante, @TeX{} não sabe nada acerca da maioria do Unicode. Suportar
glifos adicionais específicos mediante solicitação é possível, mas não é
viável para @file{texinfo.tex} suportar scripts adicionais inteiros
(japonês, urdu, @dots{}). O comando @code{@@U} não faz nada para mudar
isso. Se o caractere especificado não for suportado no @TeX{}, um erro
será dado. (@xref{@code{@@documentencoding}}).

@cindex Referência de entidade em HTML et al.
@cindex @samp{&#x@var{hex};}, saída oriunda de @code{@@U}
Em HTML, XML e Docbook, a saída proveniente de @code{@@U} é sempre uma
referência de entidade do formato @samp{&#x@var{hex};}, como em
@samp{&#x0132;} para o exemplo acima. Isso deveria funcionar mesmo
quando um documento HTML usa alguma outra codificação (digamos,
Latin@tie{}1) e o caractere fornecido não é suportado nessa codificação.

@cindex UTF-8, saída oriunda de @code{@@U}
No Info e em texto simples, se a codificação do documento for
especificada explicitamente como UTF-8, a saída será a representação
UTF-8 do caractere U+@var{hex} (presumindo que seja um caractere
válido). Em todos os outros casos, a saída é a sequência ASCII
@samp{U+@var{hex}}, como nos seis caracteres ASCII @samp{U+0132} para o
exemplo acima.

Isso é tudo. Sem mágica!


@node Quebras
@chapter Forçando e Impedindo Quebras

@cindex Forçando quebras de linha e de página
@cindex Fazendo quebras de linha e de página
@cindex Impedindo quebras de linha e de página
@cindex Quebras de linha, estranhas
@cindex Quebras de página, estranhas

Quebras de linha e de página às vezes podem ocorrer no lugar `errado' em
uma ou outra forma de saída. Cabe inteiramente a você garantir que o
texto aparente corretamente em todos os formatos de saída.

Por exemplo, em um manual impresso, quebras de página podem ocorrer
estranhamente no meio de um exemplo; para impedir isso, você pode manter
o texto unido usando um comando de agrupamento que impede que o texto
seja dividido em duas páginas. Por outro lado, você pode querer forçar
uma quebra de página onde nenhuma ocorreria normalmente.

Você pode usar os comandos de quebra, prevenção de quebra ou paginação
para corrigir quebras de linha e de página problemáticas.

@menu
* Comandos de Quebra::                  Resumo dos comandos relacionados a quebra.
* Quebras de Linha::                    Forçando quebras de linha.
* @code{@@- @@hyphenation}::            Ajudando @TeX{} com pontos de hifenação.
* @code{@@allowcodebreaks}::            Controlando quebras de linhas dentro do texto de @@code.
* @code{@@w}::                          Impedindo quebras de linha indesejadas no texto.
* @code{@@tie}::                        Inserindo um inquebrável, porém variante espaço.
* @code{@@sp}::                         Inserindo linhas em branco.
* @code{@@page}::                       Forçando o início de uma página nova.
* @code{@@group}::                      Impedindo quebras de página indesejadas.
* @code{@@need}::                       Outra maneira de impedir quebras de página indesejadas.
@end menu


@node Comandos de Quebra
@section Comandos de Quebra

Os comandos de quebra criam ou permitem quebras de linha e de parágrafo:

@table @code
@item @@*
Força uma quebra de linha.

@item @@sp @var{n}
Pula @var{n} linhas em branco.

@item @@-
Insere um hífen opcional.

@item @@hyphenation@{@var{palavras hi-fe-na-das}@}
Define pontos de hífen em @var{palavras hi-fe-na-das}.
@end table

Esses comandos mantém o texto unido em uma linha:

@table @code
@item @@w@{@var{text}@}
Impede que @var{texto} seja dividido e hifenizado em duas linhas.

@item @@tie@{@}
Insere um espaço entre palavras normal no qual uma quebra de linha não
possa ocorrer.
@end table

Os comandos de paginação aplicam-se somente para a saída impressa, uma
vez que outros formatos de saída não tem páginas.

@table @code
@item @@page
Inicia uma nova página.

@item @@group
Mantém unido o texto que precisa aparecer em uma página.

@item @@need @var{mils}
Inicia uma nova página se não existir espaço suficiente nesta.
@end table


@node Quebras de Linha
@section @code{@@*} e @code{@@/}: Gerar e Permitir Quebras de Linha

@findex * @r{(força quebra de linha)}
@findex / @r{(permite quebra de linha)}
@cindex Quebras de linha, controlando
@cindex Controlando quebras de linha
@cindex Quebras em uma linha
@cindex Forçar quebra de linha
@cindex Permitir quebra de linha

O comando @code{@@*} força uma quebra de linha em todos os formatos de
saída.
O comando @code{@@/} permite uma quebra de linha (somente manual
impresso).

Aqui está um exemplo com @code{@@*}:

@example
Esta frase está dividida @@*em duas linhas.
@end example

@noindent produz

@example
@group
Esta frase está dividida
em duas linhas.
@end group
@end example

O comando @code{@@/} pode ser útil em URLs longas ou outros
identificadores onde o @TeX{} não consiga encontrar um bom lugar para
quebrar. O @TeX{} automaticamente quebrará as URLs nos lugares naturais
(@pxref{Quebra de Linha de URL}), de forma que use @code{@@/} somente se
você precisar. @code{@@/} não tem efeito no outro formato de saída.


@node @code{@@- @@hyphenation}
@section @code{@@-} e @code{@@hyphenation}: Ajudando @TeX{} Hifenizar

@anchor{- e hifenação}@c nome antigo
@findex @sortas{-} - @r{(hífen discricionário)} @c CONSERTE-ME
@findex hyphenation
@cindex Hifenização, ajudando @TeX{} a fazer
@cindex Ajuste fino, e hifenização

Embora o algoritmo de hifenização do @TeX{} geralmente seja muito bom,
ele perde pontos de hifenização úteis de vez em quando. (Ou, muito mais
raramente, insere uma hifenização incorreta). Então, para documentos com
um vocabulário incomum ou ao fazer ajustes finos para uma edição
impressa, você possivelmente queira ajudar o @TeX{}. Texinfo suporta
dois comandos para isso:

@table @code
@item @@-
Insere um hífen discricionário, ou seja, um lugar onde @TeX{} pode (mas
não precisa) hifenizar. Isso é especialmente útil quando você percebe
que um hbox cheio demais é devido a @TeX{} carecer de uma hifenização
(@pxref{hboxes lotados}). @TeX{} não inserirá ele próprio quaisquer
pontos de hifenização em uma palavra contendo @code{@@-}.

@item @@hyphenation@{@var{palavras hi-fe-na-das}@}
Diz ao @TeX{} como hifenizar @var{palavras hi-fe-na-das}. Como mostrado,
você coloca um @samp{-} em cada ponto de hifenização. Por exemplo:
@example
@@hyphenation@{man-u-scrito man-u-scritos@}
@end example
@noindent @TeX{} só usa os pontos de hifenização especificados quando as
palavras correspondem exatamente, portanto forneça todas as variantes
necessárias, como plurais.
@end table

Info, HTML e outras saídas não @TeX{} não são hifenizadas, de forma que
nenhum desses comandos tem qualquer efeito ali.


@node @code{@@allowcodebreaks}
@section @code{@@allowcodebreaks}: Controle Quebras de Linha no @code{@@code}

@anchor{allowcodebreaks}@c nome antigo
@findex allowcodebreaks
@cindex Quebras, dentro @code{@@code}
@cindex @sortas{-} -, ponto de interrupção dentro do @code{@@code} @c CONSERTE-ME
@cindex Hífen, ponto de interrupção dentro do @code{@@code}
@cindex Traço, ponto de interrupção dentro do @code{@@code}
@cindex _, ponto de interrupção dentro do @code{@@code}
@cindex Sublinhado, ponto de interrupção dentro do @code{@@code}

Normalmente, @TeX{} considera a quebra de linhas nos caracteres @samp{-}
e @samp{_} dentro do @code{@@code} e comandos relacionados
(@pxref{@code{@@code}}), mais ou menos como se fossem pontos de
hifenização ``vazios''.

Isso é necessário, pois muitos manuais, especialmente para linguagens da
família Lisp, precisam documentar identificadores muito longos. Por
outro lado, alguns manuais não tem esse problema, e você pode não
desejar permitir uma quebra de linha no sublinhado em, por exemplo,
@code{SIZE_MAX}, ou pior ainda, depois de qualquer um dos quatro
sublinhados em @code{__typeof__}.

Assim, Texinfo fornece este comando:

@example
@@allowcodebreaks false
@end example

@noindent para impedir quebras em @samp{-} ou @samp{_} dentro de
@code{@@code}. Você pode voltar a permitir tais quebras com
@code{@@allowcodebreaks true}. Escreva esses comandos em linhas
dedicadas.

Esses comandos podem ser dados em qualquer lugar no documento. Por
exemplo, você pode ter apenas um parágrafo problemático onde precisa
desativar as quebras, mas quer elas em geral, ou vice-versa.

Esse comando não tem efeito, exceto em saídas HTML e @TeX{}.


@node @code{@@w}
@section @code{@@w}@{@var{text}@}: Impedir Quebras de Linha

@anchor{w}@c nome antigo
@findex w
@cindex Quebras de linha, impedindo

@code{@@w@{@var{texto}@}} produz @var{texto}, ao mesmo tempo que proíbe quebras
de linha dentro de @var{texto}.

@cindex Espaço inquebrável, fixo
@cindex Inquebrável, espaço fixo
Assim, você pode usar @code{@@w} para produzir um espaço inquebrável, fixado na
largura de um espaço normal interpalavras:

@example
@@w@{ @} @@w@{ @} @@w@{ @} recuo.
@end example

@noindent produz:

@display
@w{ } @w{ } @w{ } recuo.
@end display

O espaço oriundo de @code{@@w@{@w{ }@}}, além de ser inquebrável, também não
estica nem encolhe. Às vezes isso é o que você quer, por exemplo, se estiver
fazendo recuo manual. No entanto, normalmente você quer um espaço normal
interpalavra que estica e encolhe (na saída impressa); para isso, veja o
comando @code{@@tie} na próxima seção.
@c CONSERTE-ME
@cindex Hifenização, impedindo
Você também pode usar o comando @code{@@w} para impedir que o @TeX{} hifenize
automaticamente um nome longo ou uma frase que esteja perto do fim de uma
linha. @command{makeinfo} nunca hifeniza palavras.
@c CONSERTE-ME
@cindex Expansão de palavras-chave, impedindo
@cindex Palavras-chave de controle de versão, impedindo expansão de
@cindex Expansão de $Id, impedindo
Você também pode usar @code{@@w} para evitar expansão indesejada de
palavras-chave em sistemas de controle de fonte. Por exemplo, para escrever
literalmente @t{@w{$}Id$} no teu documento, use @code{@@w@{$@}Id$}. No entanto,
esse truque não é eficaz no Info ou na saída de texto simples.


@node @code{@@tie}
@section @code{@@tie@{@}}: Inserindo um Espaço Inquebrável

@anchor{tie}@c nome antigo
@findex tie @r{(espaço inquebrável interpalavras)}
@cindex Espaço amarrado
@cindex Espaço inquebrável, variável
@cindex Inquebrável, espaço variável

O comando @code{@@tie@{@}} produz um espaço normal interpalavra no qual uma
quebra de linha possivelmente não ocorra. Sempre escreva-o com as seguintes
chaves (vazias), como de costume para comandos usados dentro de um parágrafo.
Aqui está um exemplo:

@example
@@TeX@{@} foi escrito por Donald E.@@tie@{@}Knuth.
@end example

@noindent produz:

@display
@TeX{} foi escrito por Donald E.@tie{}Knuth.
@end display

Existem duas diferenças importantes entre @code{@@tie@{@}} e
@code{@@w@{@w{ }@}}:

@itemize
@item
O espaço produzido por @code{@@tie@{@}} será esticado e encolhido ligeiramente
junto com os espaços normais entre palavras no parágrafo; o espaço produzido
por @code{@@w@{@w{ }@}} não variará.

@item
@code{@@tie@{@}} permite hifenização das palavras ao redor, enquanto
@code{@@w@{@w{ }@}} inibe a hifenização dessas palavras (por razões
@TeX{}nológicas, ou seja, porque produz um @samp{\hbox}).
@end itemize


@node @code{@@sp}
@section @code{@@sp} @var{n}: Inserir Linhas em Branco

@anchor{sp}@c nome antigo
@findex sp @r{(line spacing)}
@cindex Espaço, inserindo vertical
@cindex Linhas em branco
@cindex Espaçamento entre linhas

Uma linha que começa com e contém somente @code{@@sp @var{n}} gera @var{n}
linhas de espaço em branco tanto no manual impresso quanto no arquivo Info.
@code{@@sp} também força uma quebra de parágrafo. Por exemplo,

@example
@@sp 2
@end example

@noindent
gera duas linhas em branco.

O comando @code{@@sp} é usado mais frequentemente na página de título.


@node @code{@@page}
@section @code{@@page}: Comece uma Nova Página

@anchor{page}@c nome antigo
@findex page
@cindex Quebras de página, forçando

Uma linha contendo somente @code{@@page} inicia uma nova página em um manual
impresso. Em outros formatos, sem o conceito de páginas, ele inicia um novo
parágrafo. Um comando @code{@@page} frequentemente é usado na seção
@code{@@titlepage} de um arquivo do Texinfo para iniciar a página de direitos
autorais.


@node @code{@@group}
@section @code{@@group}: Impedir Quebras de Página

@anchor{group}@c nome antigo
@findex group
@cindex Agrupar (manter texto unido verticalmente)
@cindex Mantendo texto unido verticalmente
@cindex Verticalmente, mantendo texto unido

O comando @code{@@group} (em uma linha dedicada) é usado dentro de um
@code{@@example} ou construção similar para começar um grupo vertical não
divisível, que aparecerá inteiramente em uma página na saída impressa. O grupo
é encerrado por uma linha contendo somente @code{@@end group}. Essas duas
linhas não produzem saída própria e, na saída do arquivo do Info, elas não tem
efeito algum.

@c Uma vez disse que esses ambientes
@c desativam espaçamento vertical entre ``parágrafos''.
@c Também, citação costumava funcionar, mas não no texinfo-2.72
Embora @code{@@group} faça sentido conceitualmente em uma ampla variedade de
contextos, a implementação atual dele funciona confiavelmente somente dentro de
@code{@@example} e variantes, e dentro de @code{@@display}, @code{@@format},
@code{@@flushleft} e @code{@@flushright}. @xref{Citações e Exemplos}. (O que
todos esses comandos tem em comum é que cada linha de entrada produz uma linha
de saída). Em outros contextos, @code{@@group} pode causar espaçamento vertical
anômalo.

@need 750
Essa exigência de formatação significa que você deveria escrever:

@example
@group
@@example
@@group
@dots{}
@@end group
@@end example
@end group
@end example

@noindent
com os comandos @code{@@group} e @code{@@end group} dentro dos comandos
@code{@@example} e @code{@@end example}.

O comando @code{@@group} é mais frequentemente usado para manter um exemplo
junto em uma página. Neste manual Texinfo, mais de 100 exemplos contém texto
que é colocado entre @code{@@group} e @code{@@end group}.

Se você esquecer de encerrar um grupo, poderá receber mensagens de erro
estranhas e incompreensíveis ao executar @TeX{}. Isso ocorre porque @TeX{}
continua tentando colocar o restante do arquivo Texinfo em uma página e não
começa a gerar mensagens de erro até que tenha processado texto considerável. É
uma boa regra prática procurar por um @code{@@end group} ausente se você
receber mensagens de erro incompreensíveis no @TeX{}.


@node @code{@@need}
@section @code{@@need @var{mils}}: Impedir Quebras de Página

@anchor{need}@c nome antigo
@findex need
@cindex Precisa de espaço no final da página
@cindex Mils, argumento para @code{@@need}

Uma linha contendo somente @code{@@need @var{n}} inicia uma nova página em um
manual impresso se menos que @var{n} mils (milésimos de polegada) permanecerem
na página atual. Não use chaves ao redor do argumento @var{n}. O comando
@code{@@need} não tem efeito em outros formatos de saída, pois eles não são
paginados.

@need 800
Este parágrafo é precedido por um comando @code{@@need} que diz ao @TeX{} para
iniciar uma nova página se restarem menos que 800 mils (oito décimos de
polegada) na página. Parece algo assim:

@example
@group
@@need 800
Este parágrafo é precedido por @dots{}
@end group
@end example

@cindex Órfãs, linhas, impedindo
O comando @code{@@need} é útil para evitar órfãs: linhas únicas na parte
inferior das páginas impressas.


@node Comandos de Definição
@chapter Comandos de Definição
@cindex Comandos de definição

O comando @code{@@deffn} e os outros @dfn{comandos de definição} te habilitam a
descrever funções, variáveis, macros, comandos, opções de usuário(a),
formulários especiais e outros tais artefatos em um formato uniforme.

No arquivo Info, uma definição faz com que a categoria da
entidade---`Function', `Variable', ou qualquer outra---apareça no início da
primeira linha da definição, seguida pelo nome e argumentos da entidade. No
manual impresso, o comando faz com que o @TeX{} imprima o nome da entidade e os
argumentos dela na margem esquerda e imprima a categoria próximo da margem
direita. Em ambos os formatos de saída, o corpo da definição é recuado. Além
disso, o nome da entidade é inserido no índice apropriado: @code{@@deffn}
insere o nome no índice de funções, @code{@@defvr} insere-o no índice de
variáveis, e assim por diante (@pxref{Índices Predefinidos}).

Um manual não precisa e não deveria conter mais que uma definição para um nome
dado. Um anexo contendo um resumo deveria usar @code{@@table} em vez dos
comandos de definição.

@menu
* Modelos de Comando de Definição::                 Escrevendo descrições usando comandos de definição.
* Linhas de Continuação de Comando de Definição::   Continuando o cabeçalho por sobre linhas de fonte.
* Argumentos Opcionais::                            Manuseando argumentos opcionais e repetidos.
* @code{@@deffnx}::                                 Agrupe duas ou mais `primeiras' linhas.
* Comandos de Definição em Detalhe::                Referência para todos os comandos de definição.
* Convenções de Comando de Definição::              Convenções para a escrita de definições.
* Definição de Função de Amostra::                  Um exemplo.
@end menu


@node Modelos de Comando de Definição
@section O Modelo Para Uma Definição
@cindex Definição, modelo
@cindex Modelo para uma definição

O comando @code{@@deffn} é usado para definições de entidades que se assemelham
a funções. Para escrever uma definição usando o comando @code{@@deffn}, escreva
o comando @code{@@deffn} no início de uma linha e siga-o na mesma linha pela
categoria da entidade, o nome da entidade em si e os argumentos dela (se
existirem). Em seguida, escreva o corpo da definição nas linhas seguintes.
(Você pode embutir exemplos no corpo). Finalmente, termine a definição com um
comando @code{@@end deffn} escrito em uma linha própria.

Os outros comandos de definição seguem o mesmo formato: uma linha com o comando
@code{@@def@dots{}} e quaisquer argumentos apropriados para esse comando; o
corpo da definição; e uma linha @code{@@end} correspondente.

O modelo para uma definição se parece com isto:

@example
@group
@@deffn @var{categoria} @var{nome} @var{argumentos}@dots{}
@var{corpo-da-definição}
@@end deffn
@end group
@end example

@need 700
@noindent
Por exemplo,

@example
@group
@@deffn Command forward-word count
Esse comando move o ponto para frente @@var@{count@} palavras (ou para trás, se
@@var@{count@} for negativo). @dots{}
@@end deffn
@end group
@end example

@noindent
produz

@quotation
@deffn Command forward-word count
Esse comando move o ponto para frente @var{count} palavras (ou para trás, se
@var{count} for negativo). @dots{}
@end deffn
@end quotation

Coloque o nome da categoria em maiúsculas como um título. Se o nome da
categoria contiver espaços, como na frase `Comando Interativo', coloque-o entre
chaves. Por exemplo:

@example
@group
@@deffn @{Comando Interativo@} isearch-forward
@dots{}
@@end deffn
@end group
@end example

@noindent
Caso contrário, a segunda palavra será confundida com o nome da entidade. Como
regra geral, quando quaisquer dos argumentos na linha de título, @emph{exceto}
o último, forem mais que uma palavra, você precisa colocá-los entre chaves.
Isso também pode ser necessário se o texto contiver comandos, por exemplo,
@samp{@{declaraci@@'on@}} se você estiver escrevendo em espanhol.

Alguns dos comandos de definição são mais gerais que outros. O comando
@code{@@deffn}, por exemplo, é o comando geral de definição para funções e
similares---para entidades que possivelmente recebam argumentos. Quando usa
esse comando, você especifica a categoria à qual a entidade pertence. Três
variações predefinidas e especializadas (@code{@@defun}, @code{@@defmac} e
@code{@@defspec}) especificam a categoria para você: ``Função'', ``Macro'' e
``Forma Especial'' respectivamente. (Em Lisp, uma forma especial é uma entidade
muito parecida com uma função). Similarmente, o comando geral @code{@@defvr} é
acompanhado por diversas variações especializadas para descrever tipos
particulares de variáveis.

@xref{Definição de Função de Amostra}, para um exemplo detalhado de uma
definição de função, incluindo o uso de @code{@@example} dentro da definição.


@node Linhas de Continuação de Comando de Definição
@section Linhas de Continuação de Comando de Definição
@cindex Linhas de continuação em comandos de definição
@cindex Cabeçalhos de comando de definição, continuando
@cindex @sortas{@@} @samp{@@} como continuação em comandos de definição @c CONSERTE-ME

A linha de título de um comando de definição pode ficar muito longa. Portanto,
o Texinfo tem uma sintaxe especial que permite que elas sejam continuadas em
várias linhas do arquivo fonte: um solitário @samp{@@} no final de cada linha a
ser continuada. Aqui está um exemplo:

@example
@@defun fn-name @@
  arg1 arg2 arg3
Essa é a defun básica continuada.
@@end defun
@end example

@noindent produz:

@defun fn-name   arg1 arg2 arg3
Essa é a defun básica continuada.
@end defun

@noindent
Como você pode ver, as linhas contínuas estão combinadas, como se tivessem sido
digitadas em uma linha do fonte.

Embora esse exemplo mostre somente uma continuação de uma linha, as
continuações podem se estender por qualquer número de linhas, da mesma forma;
coloque um @code{@@} no final de cada linha a ser continuada.

@cindex Espaço em branco, recolhido em torno de continuações
@cindex Recolhendo espaços em branco em torno de continuações
Em geral, qualquer número de espaços ou tabulações antes do caractere de
continuação @code{@@} é recolhido em um espaço. Existe uma exceção: os
processadores Texinfo não recolherão totalmente espaços em branco em torno de
uma continuação dentro de chaves. Por exemplo:

@example
@@deffn @{Nome @@
  Categoria@} @dots{}
@end example

@noindent A saída gerada (não mostrada) tem excesso de espaço entre `Nome' e
`Categoria'. Para evitar isso, elimine os espaços em branco indesejados na tua
entrada ou coloque a continuação @code{@@} fora das chaves.

@code{@@} não funciona como um caractere de continuação em @emph{qualquer}
outro contexto. Normalmente, @samp{@@} seguido por um caractere de espaço em
branco (espaço, tabulação, nova linha) produz um espaço normal interpalavra
(@pxref{Espaços Múltiplos}).


@node Argumentos Opcionais
@section Argumentos Opcionais e Repetidos
@cindex Argumentos opcionais e repetidos
@cindex Argumentos repetidos e opcionais
@cindex Argumentos, repetidos e opcionais
@cindex Sintaxe, argumentos opcionais e repetidos
@cindex Caracteres metassintáticos para argumentos

@c Isto está consistente com o Manual de Referência da Lisp do Emacs.
Algumas entidades aceitam argumentos opcionais ou repetidos, convencionalmente
especificados usando-se colchetes e reticências: um argumento entre colchetes é
opcional, e um argumento seguido por reticências é opcional e pode ser repetido
mais que uma vez.

Assim, [@var{argumento-opcional}] significa que @var{argumento-opcional} é
opcional e @var{argumentos-repetidos}@code{@dots{}} representa zero ou mais
argumentos. Parênteses são usados quando vários argumentos são
agrupados em níveis adicionais de estrutura de lista na Lisp.

Aqui está a linha @code{@@defspec} de um exemplo de uma forma especial
(complicada) imaginária:

@quotation
@defspec foobar (var [from to [inc]]) body@dots{}
@end defspec
@end quotation

@noindent
Nesse exemplo, os argumentos @var{from} e @var{to} são opcionais, mas ambos
precisam estar presentes ou ambos ausentes. Se estiverem presentes, @var{inc}
opcionalmente pode ser especificado também. Esses argumentos são agrupados com
o argumento @var{var} em uma lista, para distingui-los de @var{body}, que
inclui todos os elementos restantes da forma.

Em um arquivo fonte do Texinfo, essa linha @code{@@defspec} é escrita assim:

@example
@@defspec foobar (var [from to [inc]]) body@@dots@{@}
@end example

@noindent
A função está listada no Índice de Comando e Variável sob @samp{foobar}.


@node @code{@@deffnx}
@section @code{@@deffnx}, et al.: Duas ou Mais `Primeiras' Linhas

@anchor{deffnx}@c nó antigo
@findex deffnx
@cindex Duas `Primeiras' Linhas para @code{@@deffn}
@cindex Agrupando duas definições juntas
@cindex Definições agrupadas

Para criar duas ou mais linhas `primeira' ou de cabeçalho para uma definição,
siga a primeira linha @code{@@deffn} por uma linha começando com
@code{@@deffnx}. O comando @code{@@deffnx} funciona exatamente como
@code{@@deffn}, exceto que ele não gera espaço em branco vertical extra entre
ele e a linha precedente.

@need 1000
Por exemplo,

@example
@group
@@deffn @{Comando Interativo@} isearch-forward
@@deffnx @{Comando Interativo@} isearch-backward
Esses dois comandos de pesquisa são semelhantes, exceto @dots{}
@@end deffn
@end group
@end example

@noindent
produz

@deffn {Comando Interativo} isearch-forward
@deffnx {Comando Interativo} isearch-backward
Esses dois comandos de pesquisa são semelhantes, exceto @dots{}
@end deffn

@findex defcvx
@findex defivarx
@findex defmacx
@findex defmethodx
@findex defoptx
@findex defopx
@findex defspecx
@findex deftpx
@findex deftypecvx
@findex deftypefnx
@findex deftypefunx
@findex deftypeivarx
@findex deftypemethodx
@findex deftypeopx
@findex deftypevarx
@findex deftypevrx
@findex defunx
@findex defvarx
@findex defvrx
Cada comando de definição tem uma forma `x': @code{@@defunx}, @code{@@defvrx},
@code{@@deftypefunx}, etc.

As formas `x' funcionam similarmente a @code{@@itemx} (@pxref{@code{@@itemx}}).


@node Comandos de Definição em Detalhe
@section Os Comandos de Definição

Texinfo fornece mais que uma dúzia de comandos de definição, todos estão
descritos nesta seção.

Os comandos de definição inserem automaticamente o nome da entidade no índice
apropriado: por exemplo, @code{@@deffn}, @code{@@defun} e @code{@@defmac}
inserem nomes de funções no índice de funções; @code{@@defvr} e @code{@@defvar}
inserem nomes de variáveis no índice de variáveis.

Embora os exemplos a seguir ilustrem principalmente Lisp, os comandos podem ser
usados para outras linguagens de programação.

@menu
* Comandos de Funções::          Comandos para funções e entidades similares.
* Comandos de Variáveis::        Comandos para variáveis e entidades similares.
* Funções Tipadas::              Comandos para funções em linguagens tipadas.
* Variáveis Tipadas::            Comandos para variáveis em linguagens tipadas.
* Tipos de Dados::               O comando de definição para tipos de dados.
* Objetos Abstratos::            Comandos para programação orientada a objetos.
@end menu

@node Comandos de Funções
@subsection Funções e Entidades Similares

Esta seção descreve os comandos para descrever funções e entidades similares:

@table @code
@findex deffn
@item @@deffn @var{categoria} @var{nome} @var{argumentos}@dots{}
O comando @code{@@deffn} é o comando geral de definição para funções, comandos
interativos e entidades similares que podem receber argumentos. Você precisa
escolher um termo para descrever a categoria da entidade sendo definida; por
exemplo, ``Function'' poderia ser usado se a entidade for uma função. O comando
@code{@@deffn} é escrito no início de uma linha e é seguido na mesma linha pela
categoria da entidade sendo descrita, o nome dessa entidade em particular e os
argumentos dela, se existirem. Termine a definição com @code{@@end deffn} em
uma linha própria.

@need 750
Por exemplo, aqui está uma definição:

@example
@group
@@deffn Comando forward-char nchars
Move ponto para frente @@var@{nchars@} caracteres.
@@end deffn
@end group
@end example

@noindent
Isso mostra uma definição bastante concisa para um ``comando'' chamado
@code{forward-char} com um argumento, @var{nchars}.

@code{@@deffn} imprime nomes de argumentos como @var{nchars} em tipo inclinado
na saída impressa, porque nós pensamos nesses nomes como variáveis
metassintáticas---elas representam os valores reais dos argumentos.  No texto
da descrição, no entanto, escreva um nome de argumento explicitamente
com @code{@@var} para se referir ao valor do argumento. No exemplo acima, nós
usamos @samp{@@var@{nchars@}} dessa forma.

No caso extremamente incomum quando um nome de argumento contiver @samp{--}, ou
outra sequência de caracteres que seja tratada especialmente
(@pxref{Convenções}), use @code{@@code} ao redor dos caracteres especiais. Isso
evita a conversão para traços de ligação e travessões tipográficos.
@c @var também funciona; isso é o que nós costumávamos recomendar.

O modelo para @code{@@deffn} é:

@example
@group
@@deffn @var{categoria} @var{nome} @var{argumentos}@dots{}
@var{corpo-da-definição}
@@end deffn
@end group
@end example

@findex defun
@item @@defun @var{nome} @var{argumentos}@dots{}
O comando @code{@@defun} é o comando de definição para funções. @code{@@defun}
é equivalente a @samp{@@deffn Função @dots{}}. Termine a definição com
@code{@@end defun} em uma linha própria. Assim, o modelo é:

@example
@group
@@defun @var{nome-função} @var{argumentos}@dots{}
@var{corpo-da-definição}
@@end defun
@end group
@end example

@findex defmac
@item @@defmac @var{nome} @var{argumentos}@dots{}
O comando @code{@@defmac} é o comando de definição para macros. @code{@@defmac}
é equivalente a @samp{@@deffn Macro @dots{}} e funciona como @code{@@defun}.

@findex defspec
@item @@defspec @var{nome} @var{argumentos}@dots{}
O comando @code{@@defspec} é o comando de definição para formas especiais. (Na
Lisp, uma forma especial é uma entidade muito parecida com uma função;
@pxref{Special Forms,,, elisp, GNU Emacs Lisp Reference Manual}).
@code{@@defspec} é equivalente a @samp{@@deffn @{Forma Especial@} @dots{}} e
funciona como @code{@@defun}.
@end table

Todos esses comandos criam entradas no índice de funções.


@node Comandos de Variáveis
@subsection Variáveis e Entidades Similares

Aqui estão os comandos para definir variáveis e entidades similares:

@table @code
@findex defvr
@item @@defvr @var{categoria} @var{nome}
O comando @code{@@defvr} é um comando geral de definição para algo como uma
variável---uma entidade que registra um valor. Você precisa escolher um termo
para descrever a categoria da entidade sendo definida; por exemplo,
``Variável'' poderia ser usado se a entidade for uma variável. Escreva o
comando @code{@@defvr} no início de uma linha e siga-o na mesma linha pela
categoria da entidade e o nome da entidade.

Nós recomendamos colocar o nome da categoria em maiúsculas como um título. Se o
nome da categoria contiver espaços, como no nome ``Opção de Usuário(a)'',
coloque-o entre chaves. Caso contrário, a segunda palavra será confundida com o
nome da entidade. Por exemplo,

@example
@group
@@defvr @{Opção de Usuário(a)@} fill-column
Essa variável local e de buffer especifica a largura máxima das linhas preenchidas.
@dots{}
@@end defvr
@end group
@end example

Termine a definição com @code{@@end defvr} em uma linha própria.

O modelo é:

@example
@group
@@defvr @var{categoria} @var{nome}
@var{corpo-da-definição}
@@end defvr
@end group
@end example

@code{@@defvr} cria uma entrada no índice de variáveis para @var{nome}.

@findex defvar
@item @@defvar @var{nome}
O comando @code{@@defvar} é o comando de definição para variáveis.
@code{@@defvar} é equivalente a @samp{@@defvr Variável @dots{}}.

@need 750
Por exemplo:

@example
@group
@@defvar kill-ring
@dots{}
@@end defvar
@end group
@end example

O modelo é:

@example
@group
@@defvar @var{nome}
@var{corpo-da-definição}
@@end defvar
@end group
@end example

@code{@@defvar} cria uma entrada no índice de variáveis para
@var{nome}.

@findex defopt
@item @@defopt @var{nome}
@cindex Opções de usuário(a), marcando
O comando @code{@@defopt} é o comando de definição para @dfn{opções de
usuário(a)}, ou seja, variáveis destinadas para usuários(as)
mudarem de acordo com o gosto; Emacs tem muitas dessas
(@pxref{Variables,,, emacs, O Manual do GNU Emacs}). @code{@@defopt} é
equivalente a @samp{@@defvr @{Opção de Usuário(a)@} @dots{}} e funciona como
@code{@@defvar}. Ele cria uma entrada no índice de variáveis.
@end table


@node Funções Tipadas
@subsection Funções em Linguagens Tipadas

@cindex Funções tipadas
@cindex Funções, em linguagens tipadas

O comando @code{@@deftypefn} e as variações dele são para descrever funções em
linguagens nas quais você precisa declarar tipos de variáveis e
funções, como C e C++.

@table @code
@findex deftypefn
@item @@deftypefn @var{categoria} @var{tipo-dados} @var{nome} @var{argumentos}@dots{}
O comando @code{@@deftypefn} é o comando geral de definição para funções e
entidades similares que podem receber argumentos e que são tipadas. O comando
@code{@@deftypefn} é escrito no início de uma linha e é seguido na mesma linha
pela categoria da entidade sendo descrita, o tipo do valor retornado, o nome
dessa entidade em particular e os argumentos dela, se existirem.

@need 800
@noindent
Por exemplo,

@example
@group
@@deftypefn @{Função de Biblioteca@} int foobar @@
  (int @@var@{foo@}, float @@var@{bar@})
@dots{}
@@end deftypefn
@end group
@end example

produz:

@quotation
@deftypefn {Função de Biblioteca} int foobar  (int @var{foo}, float @var{bar})
@dots{}
@end deftypefn
@end quotation

Isso significa que @code{foobar} é uma ``função de biblioteca'' que retorna um
@code{int}, e os argumentos dela são @var{foo} (um @code{int}) e @var{bar} (um
@code{float}).

Como em linguagens tipadas, os nomes reais dos argumentos são normalmente
espalhados entre nomes de tipos de dados e palavras-chave, Texinfo não consegue
encontrá-los sem ajuda. Você pode (a)@tie{}escrever tudo como texto simples, e
ele será impresso em tipo inclinado; (b)@tie{}usar @code{@@var} para os nomes
de variáveis, que colocará os nomes de variáveis em maiúsculas no
Info e usará a fonte de máquina de escrever inclinada na saída impressa;
(c)@tie{}usar @code{@@var} para os nomes de variáveis e
@code{@@code} para os nomes de tipos e palavras-chave, que serão obedientemente
obedecidos.

O modelo para @code{@@deftypefn} é:

@example
@group
@@deftypefn @var{categoria} @var{tipo-dados} @var{nome} @var{argumentos} @dots{}
@var{corpo-da-descrição}
@@end deftypefn
@end group
@end example

@noindent
Observe que se @var{categoria} ou @var{tipo-dados} for mais de uma palavra,
então ele precisa ser colocado entre chaves para torná-lo um argumento
unitário.

Se você estiver descrevendo um procedimento em uma linguagem que tenha pacotes,
como Ada, você pode considerar usar @code{@@deftypefn} de uma maneira um tanto
contrária à convenção descrita nos parágrafos precedentes. Por exemplo:

@example
@group
@@deftypefn stacks private push @@
       (@@var@{s@}:in out stack; @@
       @@var@{n@}:in integer)
@dots{}
@@end deftypefn
@end group
@end example

@noindent
(Nesses exemplos os argumentos @code{@@deftypefn} são mostrados usando
continuações (@pxref{Linhas de Continuação de Comando de Definição}), mas
poderiam estar em uma linha).

Nesse caso, o procedimento é classificado como pertencente ao pacote
@code{stacks} em vez de classificado como um `procedimento' e o tipo de dados
dele está descrito como @code{private}. (O nome do procedimento é @code{push},
e os argumentos dele são @var{s} e @var{n}).

@code{@@deftypefn} cria uma entrada no índice de funções para @var{nome}.

@item @@deftypefun @var{tipo-dados} @var{nome} @var{argumentos}@dots{}
@findex deftypefun
O comando @code{@@deftypefun} é o comando especializado de definição para
funções em linguagens tipadas. O comando é equivalente a @samp{@@deftypefn
Função @dots{}}. O modelo é:

@example
@group
@@deftypefun @var{tipo} @var{nome} @var{argumentos}@dots{}
@var{corpo-da-descrição}
@@end deftypefun
@end group
@end example

@code{@@deftypefun} cria uma entrada no índice de funções para @var{nome}.

@end table

@cindex Tipo de retorno, linha própria para
@findex deftypefnnewline
Normalmente, o tipo de retorno é impresso na mesma linha que o nome da função e
os argumentos, como mostrado acima. No código-fonte, o estilo GNU é o de
colocar o tipo de retorno em uma linha dedicada. Portanto, Texinfo fornece uma
opção para fazer isso: @code{@@deftypefnnewline on}.

Isso afeta somente funções tipadas---não funções não tipadas, variáveis
não tipadas, etc.. Especificamente, afeta os comandos nesta seção e
os comandos análogos para linguagens orientadas a objetos, ou seja,
@code{@@deftypeop} e @code{@@deftypemethod}
(@pxref{Métodos Orientados a Objetos}).

Especificar-se @code{@@deftypefnnewline off} reverte para o padrão.


@node Variáveis Tipadas
@subsection Variáveis em Linguagens Tipadas

@cindex Variáveis tipadas
@cindex Variáveis, em linguagens tipadas

Variáveis em linguagens tipadas são manuseadas de forma similar a
funções em linguagens tipadas. @xref{Funções Tipadas}. O comando geral de
definição @code{@@deftypevr} corresponde a @code{@@deftypefn} e o comando
especializado de definição @code{@@deftypevar} corresponde a
@code{@@deftypefun}.

@table @code
@findex deftypevr
@item @@deftypevr @var{categoria} @var{tipo-dados} @var{nome}
O comando @code{@@deftypevr} é o comando geral de definição para algo como uma
variável em uma linguagem tipada---uma entidade que registra um valor. Você
precisa escolher um termo para descrever a categoria da entidade sendo
definida; por exemplo, ``Variável'' poderia ser usado se a entidade for uma
variável.

O comando @code{@@deftypevr} é escrito no início de uma linha e é seguido na
mesma linha pela categoria da entidade sendo descrita, o tipo de dados e o nome
dessa entidade específica.

@need 800
@noindent
Por exemplo:

@example
@group
@@deftypevr @{Sinalizador Global@} int enable
@dots{}
@@end deftypevr
@end group
@end example

@noindent
produz o seguinte:

@quotation
@deftypevr {Sinalizador Global} int enable
@dots{}
@end deftypevr
@end quotation

@need 800
O modelo é:

@example
@@deftypevr @var{categoria} @var{tipo-dados} @var{nome}
@var{corpo-da-descrição}
@@end deftypevr
@end example

@findex deftypevar
@item @@deftypevar @var{tipo-dados} @var{nome}
O comando @code{@@deftypevar} é o comando especializado de definição para
variáveis em linguagens tipadas. @code{@@deftypevar} é equivalente
a @samp{@@deftypevr Variável @dots{}}. O modelo é:

@example
@group
@@deftypevar @var{tipo-dados} @var{nome}
@var{corpo-da-descrição}
@@end deftypevar
@end group
@end example
@end table

Esses comandos criam entradas no índice de variáveis.


@node Tipos de Dados
@subsection Tipos de Dados

Aqui está o comando para tipos de dados:

@table @code
@findex deftp
@item @@deftp @var{categoria} @var{nome} @var{atributos}@dots{}
O comando @code{@@deftp} é o comando genérico de definição para tipos de dados.
O comando é escrito no início de uma linha e é seguido na mesma linha pela
categoria, pelo nome do tipo (que é uma palavra como @code{int} ou
@code{float}) e, em seguida, pelos nomes de atributos de objetos desse tipo.
Portanto, você poderia usar esse comando para descrever @code{int} ou
@code{float}, em cujo caso você poderia usar @code{tipo de dados} como a
categoria. (Um tipo de dados é uma categoria de certos objetos para fins de
decidir quais operações podem ser realizadas sobre neles).

Na Lisp, por exemplo, @dfn{pair} nomeia um tipo de dado particular, e um objeto
desse tipo tem dois slots chamados @sc{car} e @sc{cdr}. Aqui está como você
escreveria a primeira linha de uma definição de @code{pair}.

@example
@group
@@deftp @{Tipo de dados@} pair car cdr
@dots{}
@@end deftp
@end group
@end example

@need 950
O modelo é:

@example
@group
@@deftp @var{categoria} @var{nome-do-tipo} @var{atributos}@dots{}
@var{corpo-da-definição}
@@end deftp
@end group
@end example

@code{@@deftp} cria uma entrada no índice de tipos de dados.
@end table


@node Objetos Abstratos
@subsection Programação Orientada a Objetos

@cindex Programação orientada a objetos

Aqui estão os comandos para formatar descrições acerca de objetos abstratos,
tais como são usados em programação orientada a objetos. Uma classe
é um tipo definido de objeto abstrato. Uma instância de uma classe é um objeto
particular que tem o tipo da classe. Uma variável de instância é uma variável
que pertence à classe, mas para a qual cada instância tem o próprio valor dela.

@menu
* Variáveis Orientadas a Objetos::   Variáveis Orientadas a Objetos.
* Métodos Orientados a Objetos::     Métodos Orientados a Objetos.
@end menu


@node Variáveis Orientadas a Objetos
@subsubsection Variáveis Orientadas a Objetos

@cindex Variáveis, orientadas a objetos

Estes comandos permitem que você defina diferentes tipos de variáveis em
linguagens de programação orientadas a objetos.

@table @code
@item @@defcv @var{categoria} @var{classe} @var{nome}
@findex defcv
O comando @code{@@defcv} é o comando geral de definição para variáveis
associadas a classes em programação orientada a objetos. O comando
@code{@@defcv} é seguido por três argumentos: a categoria da coisa sendo
definida, a classe à qual ela pertence e o nome dela. Por exemplo:

@example
@group
@@defcv @{Opção da Classe@} Janela padrão-borda
@dots{}
@@end defcv
@end group
@end example

@noindent produz:
@defcv {Opção da Classe} Janela padrão-borda
@dots{}
@end defcv

@code{@@defcv} cria uma entrada no índice de variáveis.

@item @@deftypecv @var{categoria} @var{classe} @var{tipo-dados} @var{nome}
@findex deftypecv
O comando @code{@@deftypecv} é o comando de definição para variáveis
de classe tipadas em programação orientada a objetos. Ele é análogo
ao @code{@@defcv} com a adição do parâmetro @var{tipo-dados} para especificar o
tipo da variável de instância. Normalmente, o tipo de dado é uma construção da
linguagem de programação que deveria estar marcada com @code{@@code}. Por
exemplo:

@example
@group
@@deftypecv @{Opção da Classe@} Janela @@code@{int@} padrão-borda
@dots{}
@@end deftypecv
@end group
@end example

@noindent produz:

@deftypecv {Opção da Classe} Janela @code{int} padrão-borda
@dots{}
@end deftypecv

@code{@@deftypecv} cria uma entrada no índice de variáveis.

@item @@defivar @var{classe} @var{nome}
@findex defivar
O comando @code{@@defivar} é o comando de definição para variáveis
de instância em programação orientada a objetos. @code{@@defivar} é
equivalente a @samp{@@defcv @{Variável da Instância@} @dots{}}. Por exemplo:

@example
@group
@@defivar Janela padrão-borda
@dots{}
@@end defivar
@end group
@end example

@noindent produz:

@defivar Janela padrão-borda
@dots{}
@end defivar

@code{@@defivar} cria uma entrada no índice de variáveis.

@item @@deftypeivar @var{classe} @var{tipo-dados} @var{nome}
@findex deftypeivar
O comando @code{@@deftypeivar} é o comando de definição para variáveis de
instância tipadas em programação orientada a objetos. Ele é análogo ao
@code{@@defivar} com a adição do parâmetro @var{tipo-dados} para
especificar o tipo da variável de instância. Normalmente, o tipo de dado é uma
construção da linguagem de programação que deveria estar marcada com
@code{@@code}. Por exemplo:

@example
@group
@@deftypeivar Janela @@code@{int@} padrão-borda
@dots{}
@@end deftypeivar
@end group
@end example

@noindent produz:

@deftypeivar Janela @code{int} padrão-borda
@dots{}
@end deftypeivar

@code{@@deftypeivar} cria uma entrada no índice de variáveis.

@end table


@node Métodos Orientados a Objetos
@subsubsection Métodos Orientados a Objetos

@cindex Métodos, orientados a objetos

Esses comandos permitem que você defina diferentes tipos de entidades
semelhantes a funções que lembram métodos em linguagens de programação
orientadas a objetos. Essas entidades recebem argumentos, como as funções, mas
são associadas a classes particulares de objetos.

@table @code

@findex defop
@item @@defop @var{categoria} @var{classe} @var{nome} @var{argumentos}@dots{}
O comando @code{@@defop} é o comando geral de definição para essas entidades
semelhantes a métodos.

Por exemplo, alguns sistemas tem construções chamadas @dfn{involucradores} que são
associadas a classes como métodos, mas que agem mais como macros que como
funções. Você poderia usar @code{@@defop Wrapper} para descrever uma delas.

Ocasionalmente, é útil distinguir métodos e @dfn{operações}. Você pode pensar
em uma operação como a especificação para um método. Assim, um sistema de
janelas pode especificar que todas as classes de janelas tem um método chamado
@code{expor}; nós diríamos que esse sistema de janelas define uma operação
@code{expor} sobre janelas em geral. Normalmente, a operação tem um nome e
também especifica o padrão de argumentos; todos os métodos que implementem a
operação precisam aceitar os mesmos argumentos, já que os aplicativos que usam
a operação o fazem sem saber qual método a implementará.

Frequentemente faz mais sentido documentar operações que métodos. Por exemplo,
desenvolvedores(as) de aplicativos de janela precisam saber acerca da operação
@code{expor}, mas não precisam se preocupar se uma determinada classe de
janelas tem o próprio método dela para implementar essa operação. Para
descrever essa operação, você escreveria:

@example
@@defop Operação janelas expor
@end example

O comando @code{@@defop} é escrito no início de uma linha e é seguido na mesma
linha pelo nome geral da categoria da operação, pelo nome da classe da
operação, pelo nome da operação e pelos argumentos dela, se existirem.

O modelo é:
@example
@group
@@defop @var{categoria} @var{classe} @var{nome} @var{argumentos}@dots{}
@var{corpo-da-definição}
@@end defop
@end group
@end example

@code{@@defop} cria uma entrada, como `@code{expor} sobre @code{janelas}', no
índice de funções.

@findex deftypeop
@item @@deftypeop @var{categoria} @var{classe} @var{tipo-dados} @var{nome} @var{argumentos}@dots{}
O comando @code{@@deftypeop} é o comando de definição para operações tipadas em
programação orientada a objetos. Ele é semelhante ao @code{@@defop} com a
adição do parâmetro @var{tipo-dados} para especificar o tipo de retorno do
método. @code{@@deftypeop} cria uma entrada no índice de funções.

@item @@defmethod @var{classe} @var{nome} @var{argumentos}@dots{}
@findex defmethod
O comando @code{@@defmethod} é o comando de definição para métodos em
programação orientada a objetos. Um método é um tipo de função que implementa
uma operação para uma classe particular de objetos e as subclasses dela.
@ignore
@c ADR: Quem se importa?!?
@c KB: Ah, eu não sei; eu penso que essa informação é crucial! Na Máquina Lisp,
os métodos eram, na verdade, funções, mas eles geralmente eram definidos com
@code{defmethod}.
@end ignore

@code{@@defmethod} é equivalente a @samp{@@defop Método @dots{}}. O comando é
escrito no início de uma linha e é seguido pelo nome da classe do método, pelo
nome do método e pelos argumentos dele, se existirem.

@noindent
Por exemplo:
@example
@group
@@defmethod @code{classe-barra} método-barra argumento
@dots{}
@@end defmethod
@end group
@end example

@noindent
ilustra a definição para um método chamado @code{método-barra} da classe
@code{classe-barra}. O método recebe um argumento.

@code{@@defmethod} cria uma entrada no índice de funções.

@item @@deftypemethod @var{classe} @var{tipo-dados} @var{nome} @var{argumentos}@dots{}
@findex deftypemethod
O comando @code{@@deftypemethod} é o comando de definição para métodos em
linguagens tipadas e orientadas a objetos, como C++ e Java. Ele é semelhante ao
comando @code{@@defmethod} com a adição do parâmetro @var{tipo-dados} para
especificar o tipo de retorno do método. @code{@@deftypemethod} cria uma
entrada no índice de funções.
@end table

Os comandos tipados são afetados pela opção @code{@@deftypefnnewline}
(@pxref{Funções Tipadas,, Funções em Linguagens Tipadas}).


@node Convenções de Comando de Definição
@section Convenções para Escrita de Definições
@cindex Convenções de definição
@cindex Convenções para escrever definições

Quando você escrever uma definição usando @code{@@deffn}, @code{@@defun} ou um
dos outros comandos de definição, por favor, tome cuidado para usar argumentos
que indiquem o significado, como com o argumento @var{count} para a função
@code{forward-word}. Além disso, se o nome de um argumento contiver o nome de
um tipo, como @var{integer}, tome cuidado para que o argumento seja realmente
desse tipo.


@node Definição de Função de Amostra
@section Uma Definição de Função de Amostra
@cindex Definições de funções
@cindex Definições de comando
@cindex Definições de macro, linguagem de programação
@cindex Definição de função de amostra

Uma definição de função usa os comandos @code{@@defun} e @code{@@end defun}. O
nome da função vem imediatamente depois do comando @code{@@defun} e é seguido,
na mesma linha, pela lista de parâmetros.

Aqui está uma definição oriunda de @ref{Calling Functions,,, elisp, The GNU
Emacs Lisp Reference Manual}.

@quotation
@defun apply function &rest arguments
@code{apply} chama @var{function} com @var{arguments}, assim como
@code{funcall}, mas com uma diferença: o último de @var{arguments} é uma lista
de argumentos para fornecer para @var{function}, em vez de um argumento
unitário. Nós também dizemos que essa lista é @dfn{anexada} aos outros
argumentos.

@code{apply} retorna o resultado da chamada de @var{function}. Assim como com
@code{funcall}, @var{function} precisa ser ou uma função da Lisp ou uma função
primitiva; formas especiais e macros não fazem sentido em @code{apply}.

@example
(setq f 'list)
    @result{} list
(apply f 'x 'y 'z)
@error{} Argumento de tipo errado: listp, z
(apply '+ 1 2 '(3 4))
    @result{} 10
(apply '+ '(1 2 3 4))
    @result{} 10

(apply 'append '((a b c) nil (x y z) nil))
    @result{} (a b c x y z)
@end example

Um exemplo interessante do uso de @code{apply} é encontrado na descrição de @code{mapcar}.
@end defun
@end quotation

No arquivo fonte do Texinfo, esse exemplo se parece com isto:

@example
@group
@@defun apply function &rest arguments
@@code@{apply@} chama @@var@{function@} com @@var@{arguments@}, assim como
@@code@{funcall@}, mas com uma diferença: o último de @@var@{arguments@} é uma
lista de argumentos para fornecer para @@var@{function@}, em vez de um
argumento unitário. Nós também dizemos que essa lista é @@dfn@{anexada@} aos
outros argumentos.
@end group

@group
@@code@{apply@} retorna o resultado da chamada de @@var@{function@}. Assim como
com @@code@{funcall@}, @@var@{function@} precisa ser ou uma função da Lisp ou
uma função primitiva; formas especiais e macros não fazem sentido em
@@code@{apply@}.
@end group

@group
@@example
(setq f 'list)
    @@result@{@} list
(apply f 'x 'y 'z)
@@error@{@} Argumento de tipo errado: listp, z
(apply '+ 1 2 '(3 4))
    @@result@{@} 10
(apply '+ '(1 2 3 4))
    @@result@{@} 10

(apply 'append '((a b c) nil (x y z) nil))
    @@result@{@} (a b c x y z)
@@end example
@end group

@group
Um exemplo interessante do uso de @@code@{apply@} é encontrado na descrição de
@@code@{mapcar@}.
@@end defun
@end group
@end example

@noindent
Neste manual, essa função está listada no Índice de Comandos e Variáveis sob
@code{apply}.

Variáveis comuns e opções de usuário(a) são descritas usando um formato
semelhante àquele para funções, exceto que variáveis não recebem argumentos.


@node Internacionalização
@chapter Internacionalização

@cindex Internacionalização
Texinfo tem algum suporte para escrita em outros idiomas além do inglês, embora
essa área ainda precise de trabalho considerável. (Se você mesmo(a) estiver
ajudando a traduzir as strings fixas escritas em documentos,
@pxref{Internacionalização de Strings de Documentos}).

Para uma lista dos vários caracteres acentuados e especiais que Texinfo
suporta, veja-se @ref{Inserindo Acentos}.

@menu
* @code{@@documentlanguage}::           Declarando o idioma atual.
* @code{@@documentencoding}::           Declarando a codificação de entrada.
@end menu


@node @code{@@documentlanguage}
@section @code{@@documentlanguage @var{ll}[_@var{CC}]}: Configurar Idioma do Documento
@anchor{documentlanguage}

@findex documentlanguage
@cindex Idioma, declarando
@cindex Localidade, declarando
@cindex Idioma do documento, declarando

O comando @code{@@documentlanguage} declara a localidade atual do documento.
Escreva-o em uma linha dedicada, perto do começo do arquivo.

@example
@@documentlanguage @var{ll}[_@var{CC}]
@end example

Inclua um código de idioma ISO@tie{}639-2 de duas letras (@var{ll}) seguindo o
nome do comando, opcionalmente seguido por um sublinhado e um código de país
ISO@tie{}3166 de duas letras (@var{CC}). Se você tiver um documento multi
idioma, a intenção é a de poder usar esse comando várias vezes para declarar
cada mudança de idioma. Se o comando não for usado, o padrão é @code{en_US}
para inglês dos Estados Unidos da América do Norte.

Assim como com GNU Gettext (@pxref{Top,,, gettext, Gettext}), se o código do
país for omitido, o dialeto principal é assumido onde possível. Por exemplo,
@code{de} é equivalente a @code{de_DE} (alemão como falado na Alemanha).

@cindex Strings de documentos, tradução de
Para Info e outras saídas on-line, esse comando muda a tradução de várias
@dfn{strings de documento}, tais como ``see'' em referências cruzadas
(@pxref{Referências Cruzadas}), ``Function'' em defuns
(@pxref{Comandos de Definição}), e assim por diante. Algumas strings, como
``Node:'', ``Next:'', ``Menu:'', etc., são palavras-chave na saída Info, de
forma que não são traduzidas lá; elas são traduzidas em outros formatos de
saída.

@cindex @file{txi-@var{cc}.tex}
Para @TeX{}, esse comando faz com que um arquivo @file{txi-@var{locale}.tex}
seja lido (se ele existir). Se o argumento @code{@@documentlanguage} contiver o
sufixo opcional @samp{_@var{cc}}, isso será tentado primeiro. Por exemplo, com
@code{@@documentlanguage de_DE}, @TeX{} primeiro procura por
@file{txi-de_DE.tex}, depois por @file{txi-de.tex}.

Esse arquivo @file{txi-*} é destinado a redefinir as várias palavras em inglês
usadas na saída do @TeX{}, como `Chapter', `See' e assim por diante. Nós
estamos cientes de que palavras individuais como essas nem sempre podem ser
traduzidas isoladamente, e que uma estratégia muito diferente seria exigida
para scripts ideográficos (entre outros). Ajuda para melhorar o suporte a
idiomas do Texinfo é bem-vinda.

@cindex Padrões de hifenização, dependentes do idioma
@code{@@documentlanguage} também muda os padrões de hifenização atuais do
@TeX{}, se o programa @TeX{} sendo executado tiver o suporte necessário
incluído. Isso geralmente não será o caso para @command{tex} em si, mas
geralmente será o caso para distribuições atualizadas dos programas @TeX{}
estendidos @command{etex} (saída DVI) e @command{pdftex} (saída PDF).
@command{texi2dvi} usará os @TeX{}s estendidos se estiverem disponíveis
(@pxref{Formatar com @command{texi2dvi}}).

Em setembro de 2006, a W3C Internationalization Activity lançou uma nova
recomendação para especificar idiomas:
@url{http://www.rfc-editor.org/rfc/bcp/bcp47.txt}. Quando Gettext suportar esse
novo esquema, Texinfo também suportará.

@cindex Códigos de idioma ISO 639-2
@cindex Códigos de país ISO 3166
@cindex Códigos de idioma
@cindex Códigos de país
Como as listas de códigos de idioma e códigos de país são atualizadas com
relativa frequência, nós não tentamos listá-los aqui. Os códigos válidos de
idioma estão na página inicial oficial do ISO@tie{}639,
@url{http://www.loc.gov/standards/iso639-2/}. Os códigos de país e o site
oficial do ISO@tie{}3166 podem ser encontrados via
@url{http://en.wikipedia.org/wiki/ISO_3166}.


@node @code{@@documentencoding}
@section @code{@@documentencoding @var{enc}}: Configurar Codificação de Entrada

@anchor{documentencoding}@c nome antigo
@findex documentencoding
@cindex Codificação, declarando
@cindex Codificação de entrada, declarando
@cindex Conjunto de caracteres, declarando
@cindex Codificação de entrada do documento

O comando @code{@@documentencoding} declara a codificação de entrada do
documento e também pode afetar a codificação da saída. Escreva-o em uma linha
dedicada, com uma especificação válida de codificação seguindo, perto do início
do arquivo.

@example
@@documentencoding @var{codificação}
@end example

Texinfo suporta estas codificações:

@table @code
@item US-ASCII
Isso não tem nenhum efeito específico, mas foi incluído para fins de
completude.

@item UTF-8
A vasta codificação global de caracteres, expressa em bytes de 8 bits.

@item ISO-8859-1
@itemx ISO-8859-15
@itemx ISO-8859-2
@cindex Símbolo do euro e codificações
Essas especificam as codificações padrão para idiomas da Europa Ocidental (os
dois primeiros) e da Europa Oriental (o terceiro), respectivamente. A ISO
8859-15 substitui alguns caracteres pouco usados provenientes da
8859-1 (por exemplo, frações pré-compostas) por outros mais comumente
necessários, como o símbolo do Euro (@euro{}).

Uma descrição completa das codificações está além do nosso escopo aqui; uma
referência útil é @uref{http://czyborra.com/charsets/iso8859.html}.

@item koi8-r
Essa é a codificação comumente usada para o idioma russo.

@item koi8-u
Essa é a codificação comumente usada para o idioma ucraniano.

@end table

Especificar uma codificação @var{codificação} tem os seguintes efeitos:

@cindex Seção Variáveis Locais, para codificação
@cindex Saída do Info, e codificação
Na saída do Info, uma seção chamada `Local Variables'
(@pxref{File Variables,,, emacs, O Manual do GNU Emacs}) é gerada incluindo
@var{codificação}. Isso permite que leitores Info configurem a codificação
apropriadamente. Parece com algo assim:

@example
Local Variables:
coding: @var{codificação}
End:
@end example

Além disso, na saída Info e na de texto simples, a menos que a opção
@option{--disable-encoding} seja fornecida para @command{makeinfo}, construções
de acentos e caracteres especiais, como @code{@@'e}, são produzidos como o
caractere real de 8 bits ou UTF-8 na codificação fornecida, onde possível.

@cindex Saída HTML e codificações
@cindex @code{http-equiv}, e especificação de conjunto de caracteres
@cindex Etiqueta @code{<meta>} do HTML, e especificação de conjunto de caracteres
Na saída HTML, uma etiqueta @samp{<meta>} é gerada, na seção @samp{<head>} do HTML,
que especifica @var{codificação}. Servidores web e navegadores cooperam para
usar essas informações, de modo que a codificação correta seja usada para
exibir a página, se suportada pelo sistema. Isso se parece com isto:

@example
<meta http-equiv="Content-Type" content="text/html;
     charset=@var{codificação}">
@end example

Na saída XML e Docbook, UTF-8 é sempre usado para a saída, de acordo com as
convenções desses formatos.

@cindex Fontes Computer Modern
Na saída @TeX{}, os caracteres que são suportados nas fontes Computer Modern
padrão são produzidos adequadamente. Por exemplo, isso significa usar acentos
construídos em vez de glifos pré-compostos. Usar um caractere ausente gera uma
mensagem de aviso, assim como especificar uma codificação não implementada.

Embora os sistemas @TeX{} modernos suportem quase todos os scripts em uso no
mundo, esse suporte abrangente não está disponível em @file{texinfo.tex}, e não
é viável duplicar ou incorporar todo esse esforço. (Nosso plano para suportar
outros scripts é o de criar uma estrutura de retaguarda @LaTeX{} para
@command{texi2any}, onde o suporte já está presente).

Para portabilidade máxima de documentos Texinfo entre os muitos ambientes de
usuário(a) diferentes no mundo, nós recomendamos manter ASCII de 7 bits na
entrada, a menos que teu manual em particular precise de uma quantidade
substancial de não-ASCII, por exemplo, ele esteja escrito em alemão. Você pode
usar o comando @code{@@U} para inserir um caractere ocasionalmente necessário
(@pxref{Inserindo Unicode}).

@node Condicionais
@chapter Texto Visível Condicionalmente
@cindex Texto visível condicionalmente
@cindex Texto, visível condicionalmente
@cindex Visibilidade de texto condicional
@cindex Se texto visível condicionalmente

Os @dfn{comandos condicionais} permitem que você use texto diferente para
formatos de saída diferentes, ou para condições gerais que você define. Por
exemplo, você pode usá-los para especificar texto diferente para o manual
impresso e para a saída Info.

Os comandos condicionais compreendem as seguintes categorias.

@itemize @bullet
@item
Comandos específicos para um formato de saída (Info, @TeX{}, HTML, @dots{}).

@item
Comandos específicos para qualquer formato de saída @emph{excluindo} um
determinado (por exemplo, não Info, não @TeX{}, @dots{}).

@item
Texto do formatador `bruto' para qualquer formato de saída, passado diretamente
com interpretação mínima (mas não nula) dos comandos @@.

@item
Substituições de variáveis independentes de formato e testagem se uma variável
está configurada ou limpa.

@end itemize

@menu
* Comandos Condicionais::             Texto para um dado formato.
* Não Comandos Condicionais::         Texto para qualquer outro formato que não um dado.
* Comandos do Formatador Bruto::      Usando comandos do formatador bruto.
* Condicionais Inline::               Texto condicional delimitado por chaves.
* @code{@@set @@clear @@value}::      Testes de variáveis e substituições.
* Testes para Comandos do Texinfo::   Testando se um comando Texinfo está disponível.
* Aninhamento de Condicional::           Usando condicionais dentro de condicionais.
@end menu


@node Comandos Condicionais
@section Comandos Condicionais

O Texinfo tem um ambiente @code{@@if@var{format}} para cada formato de saída,
para permitir inclusão condicional de texto para um formato de saída
específico.

@findex ifinfo
@code{@@ifinfo} inicia segmentos de texto que deveriam ser ignorados pelo
@TeX{} quando ele compuser o manual impresso, e pelo @command{makeinfo} quando
não produzir saída Info. O segmento de texto aparece somente no arquivo Info e,
para compatibilidade histórica, na saída de texto simples.

@findex ifdocbook
@findex ifhtml
@findex ifplaintext
@findex iftex
@findex ifxml
Os ambientes para os outros formatos são análogos:

@table @code
@item @@ifdocbook @dots{} @@end ifdocbook
Texto para aparecer somente na saída Docbook.

@item @@ifhtml @dots{} @@end ifhtml
Texto para aparecer somente na saída HTML.

@item @@ifplaintext @dots{} @@end ifplaintext
Texto para aparecer somente na saída de texto simples.

@item @@iftex @dots{} @@end iftex
Texto para aparecer somente no manual impresso.

@item @@ifxml @dots{} @@end ifxml
Texto para aparecer somente na saída XML.
@end table

Os comandos @code{@@if@dots{}} e @code{@@end if@dots{}} precisam aparecer em
linhas dedicadas no teu arquivo fonte. As quebras de linha que seguem os
comandos são (mais ou menos) tratadas como espaços em branco, de forma que o
texto condicional flua normalmente para um parágrafo circundante.

As construções @code{@@if@dots{}} são destinadas para condicionar fonte Texinfo
normal; @pxref{Comandos do Formatador Bruto}, para usar comandos de formatação
subjacentes diretamente.

Aqui está um exemplo mostrando todos esses Condicionais:

@example
@@iftex
Este texto aparecerá somente no manual impresso.
@@end iftex
@@ifinfo
No entanto, este texto aparecerá somente em Info e em texto simples.
@@end ifinfo
@@ifhtml
E este texto aparecerá somente em HTML.
@@end ifhtml
@@ifplaintext
Enquanto este texto aparecerá somente em texto simples.
@@end ifplaintext
@@ifxml
Não obstante, isto aparecerá somente em XML@.
@@end ifxml
@@ifdocbook
No entanto, isto aparecerá somente em Docbook.
@@end ifdocbook
@end example

@noindent
O exemplo precedente produz a seguinte linha:

@iftex
Este texto aparecerá somente no manual impresso.
@end iftex
@ifinfo
No entanto, este texto aparecerá somente em Info e em texto simples.
@end ifinfo
@ifhtml
E este texto aparecerá somente em HTML.
@end ifhtml
@ifplaintext
Enquanto este texto aparecerá somente em texto simples.
@end ifplaintext
@ifxml
Não obstante, isto aparecerá somente em XML@.
@end ifxml
@ifdocbook
No entanto, isto aparecerá somente em Docbook.
@end ifdocbook

@noindent
Observe que você vê somente uma das linhas de entrada, dependendo de qual
versão do manual estiver lendo.

@findex errormsg
Em documentos complexos, você pode querer que o Texinfo emita uma mensagem de
erro em alguns Condicionais que nunca deveriam ser processados. O comando
@code{@@errormsg@{@var{text}@}} fará isso; ele pega um argumento, o texto da
mensagem de erro, que é expandido mais ou menos como se fosse um texto do Info.

Nós mencionamos @code{@@errormsg@{@}} aqui, embora não esteja estritamente
relacionado a Condicionais, já que, na prática, é mais provável que seja útil
nesse contexto. Tecnicamente, ele pode ser usado em qualquer lugar.
@xref{Processadores Externos de Macro}, para uma ressalva relativa aos números
de linha que @code{@@errormsg} emite no @TeX{}.


@node Não Comandos Condicionais
@section Não Comandos Condicionais
@findex ifnotdocbook
@findex ifnothtml
@findex ifnotinfo
@findex ifnotplaintext
@findex ifnottex
@findex ifnotxml

Você pode especificar o texto a ser incluído em qualquer formato de saída
@emph{diferente} de um determinado, com os ambientes @code{@@ifnot@dots{}}:

@example
@@ifnotdocbook @dots{} @@end ifnotdocbook
@@ifnothtml @dots{} @@end ifnothtml
@@ifnotinfo @dots{} @@end ifnotinfo
@@ifnotplaintext @dots{} @@end ifnotplaintext
@@ifnottex @dots{} @@end ifnottex
@@ifnotxml @dots{} @@end ifnotxml
@end example

@noindent
O comando @code{@@ifnot@dots{}} e o comando @code{@@end} precisam aparecer em
linhas dedicadas no teu arquivo fonte real.

Se o arquivo de saída estiver sendo feito no formato fornecido, a região será
@emph{ignorada}. Caso contrário, ela será incluída.

Existe uma exceção (para compatibilidade histórica): texto @code{@@ifnotinfo}
será omitido para ambas saídas, Info e de texto simples, não apenas Info. Para
especificar texto que apareça somente em Info e não em texto simples, use
@code{@@ifnotplaintext}, assim:

@example
@@ifinfo
@@ifnotplaintext
Isto estará no Info, mas não em texto simples.
@@end ifnotplaintext
@@end ifinfo
@end example

As regiões delimitadas por esses comandos são fontes Texinfo comuns, como em
@code{@@iftex}, e não fontes de formatador bruto, como em @code{@@tex}
(@pxref{Comandos do Formatador Bruto}).


@node Comandos do Formatador Bruto
@section Comandos do Formatador Bruto
@cindex Comandos do formatador bruto

@cindex Comandos do @TeX{}, uso comum
@cindex Comandos comuns do @TeX{}, usando
@cindex Comandos, usando @TeX{} bruto
@cindex @TeX{} simples

Os Condicionais @code{@@if@dots{}} recém descritos precisam ser usados somente
com fonte normal do Texinfo. Por exemplo, a maioria dos recursos do @TeX{}
simples não funcionará dentro do @code{@@iftex}. O propósito do
@code{@@if@dots{}} é o de fornecer processamento condicional para fonte do
Texinfo, não fornecer acesso aos recursos de formatação subjacentes. Para isso,
Texinfo fornece os assim chamados @dfn{comandos do formatador bruto}. Eles
deveriam ser usados somente quando verdadeiramente exigidos (a maioria dos
documentos não precisa deles).

@findex tex
@cindex Códigos de categoria, do @TeX{} simples
O primeiro comando do formatador bruto é o @code{@@tex}. Você consegue entrar
completamente no @TeX{} simples e usar @samp{\} nos comandos do @TeX{},
delineando uma região com os comandos @code{@@tex} e @code{@@end tex}. Todos os
comandos e códigos de categoria do @TeX{} simples são restaurados dentro de uma
região do @code{@@tex}. A única exceção é a de que o caractere @code{@@} ainda
introduz um comando, de forma que @code{@@end tex} possa ser reconhecido. Os
processadores do Texinfo não produzirão material em tal região, a menos que a
saída @TeX{} esteja sendo produzida.

@findex \gdef @r{dentro de @code{@@tex}}
@findex \globaldefs @r{dentro de @code{@@tex}}
Em casos complexos, você pode desejar definir novas macros do @TeX{} dentro de
@code{@@tex}. Você precisa usar @code{\gdef} para fazer isso, não @code{\def},
porque as regiões de @code{@@tex} são processadas em um grupo do @TeX{}. Se
você precisar fazer várias definições, você pode desejar configurar
@code{\globaldefs=1} (o valor dele será restaurado para zero como de costume
quando o grupo terminar em @code{@@end tex}, de forma que não causará problemas
com o resto do documento).

@cindex Equação, exibida, em @TeX{} simples
@cindex Equação exibida, em @TeX{} simples
Como um exemplo, aqui está uma equação exibida escrita em @TeX{} simples:

@example
@@tex
$$ \chi^2 = \sum_@{i=1@}^N
         \left (y_i - (a + b x_i)
         \over \sigma_i\right)^2 $$
@@end tex
@end example

@noindent
A saída desse exemplo aparecerá somente em um manual impresso. Se estiver lendo
isso em um formato não gerado pelo @TeX{}, você não verá a equação que aparece
no manual impresso.

@tex
$$ \chi^2 = \sum_{i=1}^N
         \left(y_i - (a + b x_i)
         \over \sigma_i\right)^2 $$
@end tex

@cindex HTML, incluindo bruto
@findex ifhtml
@findex html
Analogamente, você pode usar @code{@@ifhtml @dots{} @@end ifhtml} para
delimitar o fonte do Texinfo a ser incluído somente na saída HTML, e
@code{@@html @dots{} @@end html} para uma região do HTML bruto.

@cindex XML, incluindo bruto
@findex ifxml
@findex xml
Da mesma forma, você pode usar @code{@@ifxml @dots{} @@end ifxml} para
delimitar o fonte do Texinfo a ser incluído somente na saída XML, e @code{@@xml
@dots{} @@end xml} para uma região de XML bruto. Regiões de texto bruto em
outros formatos também estarão presentes na saída XML, mas com proteção de
caracteres XML e dentro de elementos correspondentes. Por exemplo, o texto HTML
bruto:

@example
@group
@@html
<br />
@@end html
@end group
@end example

@noindent
será incluído na saída XML como:

@example
@group
<html>
&lt;br /&gt;
</html>
@end group
@end example

@cindex Docbook, incluindo bruto
@findex ifdocbook
@findex docbook
Novamente, da mesma forma, você pode usar @code{@@ifdocbook @dots{} @@end
ifdocbook} para delimitar o fonte do Texinfo a ser incluído somente na saída do
Docbook, e @code{@@docbook @dots{} @@end docbook} para uma região do Docbook
bruto.

O comportamento de novas linhas em regiões brutas não é especificado.

Em todos os casos, no processamento bruto, @code{@@} retém o mesmo significado
que no restante do documento. Assim, os processadores do Texinfo precisam
reconhecer e até mesmo executar, até certo ponto, o conteúdo das regiões
brutas, independentemente do formato final da saída. Portanto, especificar
mudanças que afetem globalmente o documento dentro de uma região bruta leva a
um comportamento imprevisível e geralmente indesejável. Por exemplo, usar o
comando @code{@@kbdinputstyle} dentro de uma região bruta é indefinido.

O remédio é simples: não faça isso. Use os comandos do formatador bruto para o
propósito pretendido deles, de fornecer material diretamente no formato
subjacente. Quando você simplesmente quiser dar especificações diferentes do
Texinfo para formatos diferentes de saída, use os Condicionais
@code{@@if@dots{}} e permaneça na sintaxe do Texinfo.


@node Condicionais Inline
@section Condicionais Inline: @code{@@inline}, @code{@@inlineifelse}, @code{@@inlineraw}
@findex inlinefmt
@findex inlinefmtifelse
@findex inlineraw
@cindex Condicionais Inline
@cindex Comandos condicionais, inline
@cindex Texto condicional delimitado por chaves
@cindex Novas linhas, evitando em Condicionais
@cindex Espaço em branco, controlando em Condicionais

Texinfo fornece um conjunto de comandos condicionais com argumentos fornecidos
entre chaves:

@table @code
@item @@inlinefmt@{@var{formato}, @var{texto}@}
Processa o @var{texto} do Texinfo se a saída @var{formato} estiver sendo
gerada.

@item @@inlinefmtifelse@{@var{formato}, @var{texto-então}, @var{texto-docontrário}@}
Processa o @var{texto-então} do Texinfo se a saída @var{formato} estiver sendo
gerada; caso contrário, processa @var{texto-docontrário}.

@item @@inlineraw@{@var{formato}, @var{texto}@}
Similar, porém para @var{texto} bruto (@pxref{Comandos do Formatador Bruto}).
@end table

Os nomes de @var{formato} suportados são:

@example
docbook  html  info  plaintext  tex  xml
@end example

Por exemplo,

@example
@@inlinefmt@{html, @@emph@{texto somente HTML@}@}
@end example

@noindent é quase equivalente a

@example
@@ifhtml
@@emph@{texto somente HTML@}
@@end ifhtml
@end example

@noindent exceto que nenhum espaço em branco é adicionado, como acontece no
último caso (ambiente).

Nesses comandos, o espaço em branco é ignorado depois da vírgula que separa os
argumentos, como de costume, mas @emph{não} é ignorado no final de @var{texto}.

Para inserir um sinal de arroba literal, uma chave esquerda ou uma chave
direita em um dos argumentos, você precisa usar os comandos alfabéticos
@code{@@atchar@{@}} (@pxref{Inserindo um Símbolo Arroba}) e
@code{@@lbracechar@{@}} ou @code{@@rbracechar@{@}} (@pxref{Inserindo Chaves}),
ou a análise se tornará confusa.

Com @code{@@inlinefmtifelse}, também é necessário usar @code{@@comma@{@}} para
evitar confundir uma @samp{,} no texto com o delimitador. Com
@code{@@inlinefmt} e @code{@@inlineraw}, @code{@@comma@{@}} não é exigido
(embora seja aceitável usá-lo), pois esses comandos sempre tem exatamente dois
argumentos.

Para @TeX{}, o @var{texto} processado não pode conter comandos delimitados por
nova linha. O texto a ser ignorado (por exemplo, para não-@TeX{}) pode, no
entanto.

Dois outros Condicionais @code{@@inline...} complementam os comandos
@code{@@ifset} e @code{@@ifclear}; veja-se a próxima seção.


@node @code{@@set @@clear @@value}
@section Sinalizadores: @code{@@set}, @code{@@clear}, condicionais e @code{@@value}

@anchor{set clear value}@c nome antigo
Você pode direcionar os comandos de formatação do Texinfo para formatar ou para
ignorar partes de um arquivo do Texinfo com os comandos @code{@@set},
@code{@@clear}, @code{@@ifset} e @code{@@ifclear}.

Aqui estão breves descrições desses comandos. Vejam-se as seções a seguir para
mais detalhes:

@table @code
@item @@set @var{sinalizador} [@var{valor}]
Configura a variável @var{sinalizador} para o @var{valor} opcional, se
especificado.

@item @@clear @var{sinalizador}
Desdefine a variável @var{sinalizador}, se ou não ela foi definida
anteriormente.

@item @@ifset @var{sinalizador}
Se @var{sinalizador} estiver configurado, o texto até o próximo comando
@code{@@end ifset} será formatado. Se @var{sinalizador} estiver limpo, o texto
até o comando @code{@@end ifset} seguinte será ignorado.

@item @@inlineifset@{@var{sinalizador}, @var{texto}@}
Versão delimitada por chaves de @code{@@ifset}.

@item @@ifclear @var{sinalizador}
Se @var{sinalizador} estiver configurado, o texto até o próximo comando
@code{@@end ifclear} será ignorado. Se @var{sinalizador} estiver limpo, o texto
até o comando @code{@@end ifclear} seguinte será formatado.

@item @@inlineifclear@{@var{sinalizador}, @var{texto}@}
Versão delimitada por chaves de @code{@@ifclear}.
@end table

@menu
* @code{@@set @@value}::                 Expanda uma variável de sinalização para uma string.
* @code{@@ifset @@ifclear}::             Formate uma região se um sinalizador estiver configurado.
* @code{@@inlineifset @@inlineifclear}:: Condicionais de sinalização delimitados por chaves.
* Exemplo de @code{@@value}::            Uma maneira fácil de atualizar informações de edição.
@end menu


@node @code{@@set @@value}
@subsection @code{@@set} e @code{@@value}

@anchor{set value}@c nome antigo
@findex set
@findex value
@findex clear

Use o comando @code{@@set} para especificar um valor para um sinalizador, que
posteriormente será expandido pelo comando @code{@@value}.

Um nome de @dfn{sinalizador} (também conhecido como @dfn{variável}) é um
identificador que começa com um alfanumérico, um @samp{-} ou um @samp{_}. Os
caracteres subsequentes, se existirem, não podem ser espaços em branco,
@samp{@@}, chaves, colchetes angulares ou quaisquer de @samp{~`^+|}; outros
caracteres, como @samp{%}, possivelmente funcionem. No entanto, é melhor usar
somente letras e numerais em um nome de sinalizador, não @samp{-} ou @samp{_}
ou outros---eles funcionarão em alguns contextos, mas não em todos, devido às
limitações no @TeX{}.

O valor é o restante da linha de entrada e pode conter qualquer coisa. No
entanto, diferentemente da maioria dos outros comandos que tomam o restante da
linha como um valor, @code{@@set} não precisa aparecer no começo de uma linha.

Escreva o comando @code{@@set} assim:

@example
@@set foo Esta é uma sequência de caracteres.
@end example

@noindent
Isso configura o valor do sinalizador @code{foo} para ``Esta é uma sequência de
caracteres.''.

Os formatadores do Texinfo então substituem um comando
@code{@@value@{@var{sinalizador}@}} pela string para a qual @var{sinalizador}
estiver configurado. Assim, quando @code{foo} for configurado como mostrado
acima, os formatadores do Texinfo convertem isto:

@example
@group
@@value@{foo@}
@exdent @r{para isto:}
Esta é uma sequência de caracteres.
@end group
@end example

Você pode escrever um comando @code{@@value} dentro de um parágrafo; mas
precisa escrever um comando @code{@@set} em uma linha própria.

Se você escrever o comando @code{@@set} assim:

@example
@@set foo
@end example

@noindent
sem especificar uma string, o valor de @code{foo} será a string vazia.

Se você limpar um sinalizador configurado anteriormente com @code{@@clear
@var{sinalizador}}, um comando @code{@@value@{sinalizador@}} subsequente
informará um erro.

Por exemplo, se você configurar @code{foo} conforme segue:

@example
@@set quanto muito, muito, muito
@end example

@noindent
então os formatadores transformam

@example
@group
É um dia @@value@{quanto@} chuvoso.
@exdent @r{into}
É um dia muito, muito, muito chuvoso.
@end group
@end example

Se você escrever

@example
@@clear quanto
@end example

@noindent
então os formatadores transformam

@example
@group
É um dia @@value@{quanto@} chuvoso.
@exdent @r{em}
É um dia @{Nenhum valor para "quanto"@} chuvoso.
@end group
@end example

@code{@@value} não pode ser usado confiavelmente como o argumento para um
comando de acento (@pxref{Inserindo Acentos}). Por exemplo, isto falha:

@example
@@set minhaletra a
@@'@@value@{minhaletra@}    @c falha!
@end example


@node @code{@@ifset @@ifclear}
@subsection @code{@@ifset} e @code{@@ifclear}

@anchor{ifset ifclear}@c nome antigo
@findex ifset

Quando um @var{sinalizador} é configurado, os comandos de formatação do Texinfo
formatam o texto entre pares subsequentes de comandos @code{@@ifset
@var{sinalizador}} e @code{@@end ifset}. Quando o @var{sinalizador} é limpo, os
comandos de formatação do Texinfo @emph{não} formatam o texto. @code{@@ifclear}
opera analogamente.

Escreva o texto formatado condicionalmente entre comandos @code{@@ifset
@var{sinalizador}} e @code{@@end ifset}, assim:

@example
@group
@@ifset @var{sinalizador}
@var{texto-condicional}
@@end ifset
@end group
@end example

Por exemplo, você pode criar um documento que tenha duas variantes, como um
manual para um modelo `grande' e para um `pequeno':

@cindex Arbusto
@example
Você pode usar esta máquina para desenterrar arbustos sem machucá-los.

@@set grande

@@ifset grande
Ela também pode desenterrar árvores adultas.
@@end ifset

Lembre-se de replantar imediatamente @dots{}
@end example

@noindent
No exemplo, os comandos de formatação formatarão o texto entre @code{@@ifset
grande} e @code{@@end ifset} porque o sinalizador @code{grande} está
configurado.

Quando @var{sinalizador} é limpo, os comandos de formatação do Texinfo
@emph{não} formatam o texto entre @code{@@ifset @var{sinalizador}} e
@code{@@end ifset}; esse texto é ignorado e não aparece, seja na saída
impressa, ou na do Info.

Por exemplo, se você limpar o sinalizador do exemplo precedente escrevendo um
comando @code{@@clear grande} depois do comando @code{@@set grande} (mas antes
do texto condicional), então os comandos de formatação do Texinfo ignorarão o
texto entre os comandos @code{@@ifset grande} e @code{@@end ifset}. Na saída
formatada, esse texto não aparece; tanto na saída impressa quanto na do Info,
você vê somente as linhas que dizem: ``Você pode usar esta máquina para
desenterrar arbustos sem machucá-los. Lembre-se de replantar imediatamente
@dots{}''.

@findex ifclear
Se um sinalizador for limpo com um comando @code{@@clear @var{sinalizador}},
então os comandos de formatação formatam o texto entre pares subsequentes de
comandos @code{@@ifclear} e @code{@@end ifclear}. Mas se o sinalizador for
configurado com @code{@@set @var{sinalizador}}, então os comandos de formatação
@emph{não} formatam o texto entre um comando @code{@@ifclear} e um @code{@@end
ifclear}; em vez disso, eles ignoram esse texto. Um comando @code{@@ifclear} se
parece com isto:

@example
@@ifclear @var{sinalizador}
@end example


@node @code{@@inlineifset @@inlineifclear}
@subsection @code{@@inlineifset} e @code{@@inlineifclear}

@findex inlineifset
@findex inlineifclear
@cindex Condicionais de sinalização, delimitados por chaves
@cindex Condicionais de sinalizadores delimitados por chaves

@code{@@inlineifset} e @code{@@inlineifclear} fornecem alternativas delimitadas
por chaves para as formas @code{@@ifset} e @code{@@ifclear}, similares aos
outros comandos @code{@@inline...} (@pxref{Condicionais Inline}). As mesmas
ressalvas acerca de análise de argumentos dadas ali se aplicam aqui também.

@table @code
@item @@inlineifset@{@var{variável}, @var{texto}@}
Processa o @var{texto} do Texinfo se o sinalizador @var{variável} estiver
definido.

@item @@inlineifclear@{@var{variável}, @var{texto}@}
Processa o @var{texto} do Texinfo se o sinalizador @var{variável} não estiver
definido.
@end table

Exceto para a sintaxe, o comportamento geral e propósitos deles são os mesmos
de @code{@@ifset} e @code{@@ifclear}, descritos na seção anterior.


@node Exemplo de @code{@@value}
@subsection Exemplo de @code{@@value}

@anchor{Exemplo do value}@c nome antigo

Você pode usar o comando @code{@@value} para minimizar o número de lugares que
precisa mudar ao registrar uma atualização para um manual. @xref{Textos GNU de
Amostra}, para o texto completo de um exemplo de uso disso para trabalhar com
distribuições Automake.

Este exemplo foi adaptado a partir do @ref{Top,,, make, The GNU Make Manual}.

@enumerate
@item
Configura os sinalizadores:

@example
@group
@@set EDITION 0.35 Beta
@@set VERSION 3.63 Beta
@@set UPDATED 14 de agosto de 1992
@@set UPDATE-MONTH Agosto de 1992
@end group
@end example

@item
Escreva texto para a seção @code{@@copying} (@pxref{@code{@@copying}}):

@example
@group
@@copying
Esta é a Edição @@value@{EDITION@},
atualizada mais recentemente em @@value@{UPDATED@},
do @@cite@{The GNU Make Manual@},
para @@code@{make@}, versão @@value@{VERSION@}.

Copyright @dots{}

Permissão é concedida @dots{}
@@end copying
@end group
@end example

@item
Escreva texto para a página de título, para pessoas leitoras do manual
impresso:

@example
@group
@@titlepage
@@title GNU Make
@@subtitle Um Programa para Direcionar Recompilação
@@subtitle Edição @@value@{EDITION@}, @dots{}
@@subtitle @@value@{UPDATE-MONTH@}
@@page
@@insertcopying
@dots{}
@@end titlepage
@end group
@end example

@noindent
(Em uma capa impressa, uma data listando o mês e o ano parece menos complicada
que uma data listando o dia, bem como o mês e o ano).

@item
Escreva texto para o nó Top, para as pessoas leitoras do arquivo Info:

@example
@group
@@ifnottex
@@node Top
@@top Make

Esta é a Edição @@value@{EDITION@},
atualizada mais recentemente em @@value@{UPDATED@},
do @@cite@{The GNU Make Manual@},
para @@code@{make@}, versão @@value@{VERSION@}.
@@end ifnottex
@end group
@end example

Depois de você formatar o manual, as construções @code{@@value} foram
expandidas, de forma que a saída contém texto como este:

@example
@group
Esta é a Edição 0.35 Beta, atualizada mais recentemente em 14 de agosto de 1992,
do `The GNU Make Manual', para `make', versão 3.63 Beta.
@end group
@end example
@end enumerate

Quando atualizar o manual, você muda somente os valores dos sinalizadores; você
não precisa editar as três seções.


@node Testes para Comandos do Texinfo
@section Testes para Comandos do Texinfo: @code{@@ifcommanddefined}, @code{@@ifcommandnotdefined}

@cindex Testes para comandos do Texinfo
@cindex Verificando comandos do Texinfo
@cindex Comandos do Texinfo, testando para
@cindex Comandos, testes para Texinfo
@cindex Versões do Texinfo, adaptando-se a
@cindex Recursos do Texinfo, adaptando-se a
@findex ifcommanddefined
@findex ifcommandnotdefined

Ocasionalmente, você possivelmente queira providenciar para que teu manual
teste se um dado comando do Texinfo está disponível e (presumivelmente) fazer
algum tipo de formatação residual se não estiver. Existem Condicionais
@code{@@ifcommanddefined} e @code{@@ifcommandnotdefined} para fazer isso.

Por exemplo:

@example
@@ifcommanddefined node
Bom, @@samp@{@@@@node@} está definido.
@@end ifcommanddefined
@end example

@noindent produzirá o esperado `Bom, @samp{@@node} está definido.'.

Esse condicional também considerará verdadeiros quaisquer novos comandos
definidos pelo documento via @code{@@macro}, @code{@@alias},
@code{@@definfoenclose} e @code{@@def@r{(}code@r{)}index}
(@pxref{Definindo Novos Comandos do Texinfo}). Ressalva: a implementação do
@TeX{} informa comandos internos do @TeX{}, além de todos os comandos do
Texinfo, como sendo ``definidos''; a implementação do @code{makeinfo} é
confiável a esse respeito, no entanto.

@pindex arquivo @file{NEWS} para Texinfo
Você pode verificar o arquivo @file{NEWS} na distribuição do fonte do Texinfo e
vinculado a partir da página inicial do Texinfo
(@url{http://www.gnu.org/software/texinfo}) para ver quando um comando
específico foi adicionado.

@vindex txicommandconditionals
Esses Condicionais de verificação de comando foram adicionados eles próprios no
Texinfo@tie{}5.0, lançado em 2013---décadas depois do início do Texinfo. Para a
finalidade de testar se eles próprios estão disponíveis, o sinalizador
predefinido @code{txicommandconditionals} pode ser testado, assim:

@example
@@ifset txicommandconditionals
@@ifcommandnotdefined foobarnode
(Bom, @@samp@{@@@@foobarnode@} não está definido).
@@end ifcommandnotdefined
@@end ifset
@end example

Como os sinalizadores (veja-se a seção anterior) foram adicionados no início da
existência do Texinfo, não existe problema em supor que eles estejam
disponíveis.

Nós recomendamos evitar esses testes sempre que possível---o que geralmente é o
caso. Para muitos pacotes de software, é razoável que todos os(as)
desenvolvedores(as) tenham uma determinada versão do Texinfo (ou mais recente)
instalada, e, portanto, não existe razão para se preocupar com versões mais
antigas. (É simples para qualquer um(a) baixar e instalar o código-fonte do
Texinfo; ele não tem quaisquer dependências problemáticas).

A questão das versões do Texinfo geralmente não surge para usuários(as) finais.
Com pacotes distribuídos corretamente, os(as) usuários(as) não precisam
processar o manual do Texinfo simplesmente para construir e instalar o pacote;
eles(as) conseguem usar arquivos pré-formatados de saída do Info (ou outros).
Isso é desejável em geral, para evitar dependências desnecessárias entre
pacotes (@pxref{Releases,,, standards, GNU Coding Standards}).


@node Aninhamento de Condicional
@section Aninhamento de Condicional
@cindex Condicionais, aninhados
@cindex Aninhando Condicionais

Condicionais podem ser aninhados; no entanto, os detalhes são um pouco
complicados. A dificuldade vem com Condicionais falhos, como @code{@@ifhtml}
quando HTML não está sendo produzido, onde o texto incluído é para ser
ignorado. No entanto, ele não é para ser @emph{completamente} ignorado, pois é
útil ter um @code{@@ifset} dentro de outro, por exemplo---essa é uma maneira de
incluir texto somente se duas condições forem atendidas. Aqui está um exemplo:

@example
@@ifset algumavarariável
@@ifset outravarariável
Ambas, algumavarariável e outravarariável estão configuradas.
@@end ifset
@@ifclear outravarariável
algumavarariável está configurada, outravarariável não está.
@@end ifclear
@@end ifset
@end example

Tecnicamente, Texinfo exige que, para um Condicional com falha, o texto
ignorado precisa ser aninhado corretamente com relação àquele Condicional com
falha. Infelizmente, nem sempre é possível verificar se @emph{todos} os
Condicionais estão aninhados corretamente, porque então os processadores
poderiam ter que interpretar completamente o texto ignorado, o que anula o
propósito do comando. Aqui está um exemplo ilustrando essas regras:

@example
@@ifset a
@@ifset b
@@ifclear ok  - ok, ignorado
@@end junky   - ok, ignorado
@@end ifset
@@c ERRADO - ausente @@end ifset.
@end example

Finalmente, como mencionado acima, todos os comandos condicionais precisam
estar em linhas próprias, sem texto (nem mesmo espaços) antes ou depois. Caso
contrário, os processadores não conseguem determinar confiavelmente quais
comandos considerar para fins de aninhamento.


@node Definindo Novos Comandos do Texinfo
@chapter Definindo Novos Comandos do Texinfo

@cindex Macros
@cindex Definindo novos comandos do Texinfo
@cindex Novos comandos do Texinfo, definindo
@cindex Comandos do Texinfo, definindo novos
@cindex Comandos do Texinfo definidos por usuário(a)

Texinfo fornece várias maneiras para definir novos comandos (em todos os casos,
não é recomendado tentar redefinir comandos existentes):

@itemize @bullet
@item
Uma @dfn{macro} do Texinfo permite que você defina um novo comando do Texinfo
como qualquer sequência de texto e (ou) comandos existentes (incluindo outras
macros). A macro pode ter qualquer número de @dfn{parâmetros}---texto que você
fornece cada vez que usa a macro.

Aliás, essas macros não tem nada a ver com o comando @code{@@defmac}, que serve
para documentar macros na área de assunto do manual
(@pxref{Modelos de Comando de Definição}).

@item
@samp{@@alias} é uma maneira conveniente para definir um novo nome para um comando existente.

@item
@samp{@@definfoenclose} permite que você defina novos comandos com saída
personalizada para todos os formatos de saída não @TeX{}.

@end itemize

De modo geral (não apenas para definir novos comandos), é possível invocar
qualquer processador externo de macro e fazer com que o Texinfo reconheça as
assim chamadas diretivas @code{#line} para informes de erros.

Se você quiser fazer substituição simples de texto, @code{@@set} e
@code{@@value} são a abordagem mais simples
(@pxref{@code{@@set @@clear @@value}}).

@menu
* Definindo Macros::                Definindo e indefinindo novos comandos.
* Invocando Macros::                Usando uma macro, uma vez que você a tiver definido.
* Detalhes de Macro::               Limitações das macros do Texinfo.
* @code{@@alias}::                  Apelidos de comandos.
* @code{@@definfoenclose}::         Destaque personalizado.
* Processadores Externos de Macro:: Diretivas @code{#line}.
@end menu


@node Definindo Macros
@section Definindo Macros
@cindex Definindo macros
@cindex Definições de macro, Texinfo

@findex macro
Você usa o comando @code{@@macro} do Texinfo para definir uma macro, como isto:

@example
@@macro @var{nomemacro}@{@var{parâmetro1}, @var{parâmetro2}, @dots{}@}
@var{texto} @dots{} \@var{parâmetro1}\ @dots{}
@@end macro
@end example

Os @dfn{parâmetros} @var{parâmetro1}, @var{parâmetro2}, @dots{} correspondem
aos argumentos fornecidos quando a macro for posteriormente usada no documento
(descrito na próxima seção).

@cindex Nomes de macro, caracteres válidos em
@cindex Nomes de macros, caracteres válidos de
Para uma macro funcionar consistentemente com @TeX{}, @var{nomemacro} precisa
consistir inteiramente de letras: sem dígitos, hifens, sublinhados ou outros
caracteres especiais. Portanto, nós recomendamos usar somente letras.
Entretanto, @command{makeinfo} aceitará qualquer coisa consistente de
alfanuméricos e (exceto como o primeiro caractere) @samp{-}. O caractere
@samp{_} é excluído, de forma que as macros possam ser chamadas dentro de
@code{@@math} sem um espaço seguinte (@pxref{Inserindo Fórmulas Matemáticas}).

Se uma macro não precisar de parâmetros, você pode defini-la ou com uma lista
vazia (@samp{@@macro foo @{@}}) ou sem chaves (@samp{@@macro foo}).

@cindex Corpo de uma macro
A definição ou @dfn{corpo} da macro pode conter a maioria dos comandos do
Texinfo, incluindo invocações de macro. No entanto, uma definição de macro que
define outra macro não funciona no @TeX{} devido a limitações no projeto do
@code{@@macro}.

@cindex Parâmetros para macros
No corpo da macro, instâncias de um nome de parâmetro cercado por barras
invertidas, como em @samp{\@var{parâmetro1}\} no exemplo acima, são
substituídas pelo argumento correspondente originário da invocação da macro.
Você pode usar nomes de parâmetros qualquer número de vezes no corpo, incluindo
zero.

@cindex Barra invertida em macros
Para obter um @samp{\} na expansão da macro, use @samp{\\}. Qualquer outro uso
de @samp{\} no corpo produz um aviso.

@cindex Espaços em macros
@cindex Espaço em branco em macros
Os caracteres de nova linha depois da linha @code{@@macro} e antes da linha
@code{@@end macro} são ignorados, isto é, não são incluídos no corpo da macro.
Todos os outros espaços em branco são tratados de acordo com as regras usuais
do Texinfo.

@cindex Invocações recursivas de macro
@findex rmacro
Para permitir que uma macro seja usada recursivamente, isto é, em um argumento
para uma chamada para si mesma, você precisa defini-la com @samp{@@rmacro},
assim:

@example
@@rmacro rmac @{arg@}
a\arg\b
@@end rmacro
@dots{}
@@rmac@{1@@rmac@{texto@}2@}
@end example

Isso produz a saída `a1atextob2b'. Com @samp{@@macro} em vez de
@samp{@@rmacro}, uma mensagem de erro é fornecida.

@findex unmacro
@cindex Macros, indefinindo
@cindex Indefinindo macros
Você pode indefinir uma macro @var{foo} com @code{@@unmacro @var{foo}}. Não é
um erro indefinir uma macro que já está indefinida. Por exemplo:

@example
@@unmacro foo
@end example


@node Invocando Macros
@section Invocando Macros

@cindex Invocando macros
@cindex Expandindo macros
@cindex Executando macros
@cindex Invocação de macro

Depois que uma macro estiver definida (veja-se a seção anterior), você pode
@dfn{invocar} (usá-la) em teu documento assim:

@example
@@@var{nomemacro} @{@var{arg1}, @var{arg2}, @dots{}@}
@end example

@noindent e o resultado será mais ou menos como se você tivesse digitado o
corpo de @var{nomemacro} naquele ponto. Por exemplo:

@example
@@macro foo @{p, q@}
Junto: \p\ & \q\.
@@end macro
@@foo@{a, b@}
@end example

@noindent produz:

@display
Junto: a & b.
@end display

@cindex Barra invertida, e macros
Assim, os argumentos e parâmetros são separados por vírgulas e delimitados por
chaves; qualquer espaço em branco depois (mas não antes) de uma vírgula é
ignorado. As chaves são exigidas na invocação mesmo quando a macro não receba
argumentos, consistente com outros comandos do Texinfo. Por exemplo:

@example
@@macro argless @{@}
Sem argumentos aqui.
@@end macro
@@argless@{@}
@end example

@noindent produz:

@display
Sem argumentos aqui.
@end display

@cindex Vírgula, em argumentos de macro
Passar argumentos de macro contendo vírgulas exige cuidado, pois vírgulas
também separam os argumentos. Para incluir um caractere de vírgula em um
argumento, o método mais confiável é o de usar o comando @code{@@comma@{@}}.
Para @code{makeinfo}, você também pode prefixar um caractere de barra
invertida, como em @samp{\,}, mas isso não funciona com @TeX{}.

@cindex Citação automática de vírgulas para algumas macros
@cindex Citação, automática para algumas macros
Nem sempre é necessário se preocupar com vírgulas. Para facilitar o uso de
macros, @command{makeinfo} implementa duas regras para @dfn{citação automática}
em algumas circunstâncias:

@enumerate 1
@item Se uma macro receber somente um argumento, todas as vírgulas na invocação
dela serão aspadas por padrão. Por exemplo:

@example
@group
@@macro TENTEME@{texto@}
@@strong@{TENTEME: \texto\@}
@@end macro

@@TENTEME@{Um recurso interessante, embora possa ser perigoso@}.
@end group
@end example

@noindent
produzirá a seguinte saída

@example
@strong{TENTEME: Um recurso interessante, embora possa ser perigoso}.
@end example

E, de fato, pode. Ou seja, @command{makeinfo} não controla o número de
argumentos passados para macros de um argumento, de forma que seja
cuidadoso(a) quando você invocá-las.

@item Se uma invocação de macro incluir outro comando (incluindo uma invocação
recursiva dela mesma), quaisquer vírgulas na(s) invocação(ões) de comando(s)
aninhado(s) serão aspadas por padrão. Por exemplo, em

@example
@@say@{@@strong@{Yes, I do@}, person one@}
@end example

a vírgula depois de @samp{Yes} é implicitamente aspada. Aqui está outro
exemplo, com uma macro recursiva:

@example
@group
@@rmacro cat@{a,b@}
\a\\b\
@@end rmacro

@@cat@{@@cat@{foo, bar@}, baz@}
@end group
@end example

@noindent
produzirá a string @samp{foobarbaz}.

@item Caso contrário, uma vírgula deveria ser explicitamente aspada, como
acima, para ser tratada como parte de um argumento.

@end enumerate

@cindex Barra invertida, em argumentos de macro
@cindex Chaves, em argumentos de macro
A própria barra invertida pode ser aspada em argumentos de macro com outra
barra invertida. Por exemplo:

@example
@@@var{nomemac} @{\\bleh@}
@end example

@noindent
passará o argumento @samp{\bleh} para @var{nomemac}.

@command{makeinfo} também reconhece sequências @samp{\@{} e @samp{\@}} para
chaves, mas elas não são reconhecidas pela implementação em @TeX{}. No entanto,
raramente deveria existir necessidade delas, pois elas são necessárias somente
quando um argumento de macro contiver chaves desbalanceadas.

Se uma macro for definida para receber exatamente um argumento, ela pode ser
invocada sem quaisquer chaves, recebendo toda a linha depois do nome da macro
como argumento. Por exemplo:

@example
@@macro bar @{p@}
Duas vezes: \p\ & \p\.
@@end macro
@@bar aah
@end example

@noindent produz:

@display
Duas vezes: aah & aah.
@end display

@noindent
Nesses argumentos, não existe escapagem de caracteres especiais, de forma que
cada @samp{\} representa ele mesmo.

Se uma macro for definida para receber mais que um argumento, mas for chamada
com somente um (entre chaves), os argumentos restantes serão configurados para
a string vazia e nenhum erro será dado. Por exemplo:

@example
@@macro addtwo @{p, q@}
Ambos: \p\\q\.
@@end macro
@@addtwo@{a@}
@end example

@noindent produz simplesmente:

@display
Ambos: a.
@end display


@node Detalhes de Macro
@section Detalhes e Ressalvas Acerca de Macro
@cindex Detalhes de macro
@cindex Detalhes do uso de macro
@cindex Ressalvas para uso de macro

@cindex Expansão, macro, contextos para
@cindex Expansão de macros, contextos para
Por projeto, expansão de macro não ocorre nos seguintes contextos no @command{makeinfo}:

@itemize @bullet
@item linhas @code{@@macro} e @code{@@unmacro};

@item linhas @code{@@if...}, incluindo @code{@@ifset} e similares;

@item @code{@@set}, @code{@@clear}, @code{@@value};

@item linhas @code{@@clickstyle};

@item linhas @code{@@end}.
@end itemize

@noindent Infelizmente, o @TeX{} pode fazer alguma expansão nessas situações,
possivelmente gerando erros.

Além disso, algumas construções relacionadas a macro causam problemas com
@TeX{}; algumas das ressalvas estão listadas abaixo. Portanto, se você obtiver
erros relacionados a macro ao produzir a versão impressa de um manual, você
pode tentar expandir as macros com @command{makeinfo} invocando
@command{texi2dvi} com a opção @samp{-E}
(@pxref{Formatar com @command{texi2dvi}}). Ou, mais confiavelmente, evite
completamente as macros do Texinfo e use uma linguagem projetada para
processamento de macros, como M4 (@pxref{Processadores Externos de Macro}).

@itemize @bullet
@item
Como mencionado anteriormente, os nomes de macro precisam consistir
inteiramente de letras.

@item
Não é aconselhável redefinir nenhum nome de comando primitivo do @TeX{},
simples ou Texinfo, como uma macro. Infelizmente, esse é um conjunto de nomes
grande e aberto, e os possíveis erros resultantes são imprevisíveis.

@item
Argumentos para macros recebendo mais que um argumento não podem cruzar linhas.

@item
Macros contendo um comando que precisa estar em uma linha própria, como um
Condicional, não podem ser invocadas no meio de uma linha. Similarmente, macros
contendo comandos orientados a linha ou texto, como ambientes @code{@@example},
possivelmente se comportem imprevisivelmente no @TeX{}.

@item
Comandos do Texinfo na expansão de uma macro no texto de uma entrada de índice
podem acabar sendo tipografados como texto literal (incluindo um sinal ``@@''),
em vez de serem interpretados com o significado pretendido deles.

@item
Espaços em branco são ignorados no início das linhas.

@item
Macros não podem ser usadas confiavelmente no argumento para comandos de acento
(@pxref{Inserindo Acentos}).

@item
O escape de barra invertida para vírgulas em argumentos de macro não funciona;
@code{@@comma@{@}} precisa ser usado.

@item
Da mesma forma, se você quiser passar um argumento com o comando do Texinfo
@code{@@,} (para produzir uma cedilha, veja-se @ref{Inserindo Acentos}), você
tem que usar @code{@@value} ou outra solução alternativa. Caso contrário, a
vírgula pode ser tomada como separadora dos argumentos. Por exemplo,

@example
@@macro mactwo@{argfirst, argsecond@}
\argfirst\+\argsecond\.
@@end macro
@@set fc Fran@@,cois
@@mactwo@{@@value@{fc@},@}
@end example

@noindent produz:

@display
Fran@,cois+.
@end display

@c Atualmente, @mactwo{Fran@,cois} funciona no TeX, mas @mactwo{Franc@\,cois}
@c funciona no makeinfo. É melhor evitar vírgulas completamente usando esse
@c truque. Uma alternativa ao @ poderia ser inventada se necessário.

@item
Terminar um corpo de macro com @samp{@@c} pode fazer com que o texto após a
invocação da macro seja ignorado como um comentário no @command{makeinfo}. Esse
não é o caso ao processar com @TeX{} (caso você realmente queira comentar o
texto seguinte, use @samp{@@comment} em vez disso). Isso era feito
frequentemente para ``comentar'' uma nova linha indesejada no final de um corpo
de macro, mas isso não mais é necessário, pois a nova linha final antes de
@samp{@@end macro} não é incluída no corpo da macro de qualquer maneira.

@item
Em geral, você não pode substituir arbitrariamente uma chamada de macro (ou
@code{@@value}) por argumentos de comando do Texinfo, mesmo quando o texto é o
mesmo. Texinfo não é M4 (nem mesmo @TeX{} simples). Pode funcionar com alguns
comandos, mas falha com outros. É melhor não fazer isso de jeito nenhum. Por
exemplo, isto falha:

@example
@@macro offmacro
off
@@end macro
@@headings @@offmacro
@end example

@noindent
Isso parece equivalente a @code{@@headings off}, mas por motivos
@TeX{}nológicos, falha com uma mensagem de erro misteriosa (ou seja,
@samp{Parágrafo terminou antes que @@headings estivesse completo}).

@item
Macros não podem definir macros na maneira natural. Para fazer isso, você
precisa usar Condicionais e @TeX{} bruto. Por exemplo:

@example
@@ifnottex
@@macro ctor @{nome, arg@}
@@macro \nome\
algo envolvendo \arg\ de alguma forma
@@end macro
@@end macro
@@end ifnottex
@@tex
\gdef\ctor#1@{\ctorx#1,@}
\gdef\ctorx#1,#2,@{\def#1@{algo envolvendo #2 de alguma forma@}@}
@@end tex
@end example
@end itemize

A implementação do @command{makeinfo} também tem as seguintes limitações (por
projeto):

@itemize
@item
@code{@@verbatim} e macros não se misturam; por exemplo, você não pode iniciar
um bloco verbatim dentro de uma macro e terminá-lo fora
(@pxref{@code{@@verbatim}}). Iniciar qualquer ambiente dentro de uma macro e
terminá-lo fora pode ou não funcionar, nesse caso.

@item
Macros que definem macros completamente são ok, mas não é possível ter
definições de macro aninhadas incompletamente. Ou seja, @code{@@macro} e
@code{@@end macro} (da mesma forma para @code{@@rmacro}) precisam ser pareados
corretamente. Por exemplo, você não pode iniciar uma definição de macro dentro
de uma macro e, em seguida, terminar essa definição aninhada fora da macro.
@end itemize

Na implementação do @code{makeinfo} antes do Texinfo 5.0, os fins de linhas
originários da expansão de uma definição do @code{@@macro} não terminavam um
argumento delimitado por linha do comando @@ (@code{@@chapter},
@code{@@center}, etc.). Esse não mais é o caso. Por exemplo:

@example
@@macro duaslinhas@{@}
aaa
bbb
@@end macro
@@center @@duaslinhas@{@}
@end example

No @code{makeinfo} atual, isso é equivalente a:

@example
@@center aaa
bbb
@end example

@noindent com apenas @samp{aaa} como argumento para @code{@@center}. Na
implementação anterior, ele teria sido analisado assim:

@example
@@center aaa bbb
@end example


@node @code{@@alias}
@section @samp{@@alias @var{novo}=@var{existente}}

@anchor{alias}@c nome antigo
@cindex Apelidos, comando
@cindex Comando, apelidos
@findex alias

O comando @samp{@@alias} define um novo comando para ser exatamente como um
existente. Isso é útil para definir nomes adicionais de marcação, preservando
assim informações semânticas adicionais na entrada, mesmo que o resultado da
saída possa ser o mesmo.

Escreva o comando @samp{@@alias} em uma linha própria, seguido pelo novo nome
do comando, um sinal de igual e o nome do comando existente. O espaço em branco
ao redor do sinal de igual é opcional e ignorado se presente. Assim:

@example
@@alias @var{novo} = @var{existente}
@end example

Por exemplo, se teu documento contiver citações para livros e algumas outras
mídias (filmes, por exemplo), você pode querer definir uma macro
@code{@@moviecite@{@}} que faz a mesma coisa que um @code{@@cite@{@}} comum,
mas transmite as informações semânticas extras também. Você faria isso conforme
segue:

@example
@@alias moviecite = cite
@end example

Macros nem sempre tem o mesmo efeito que apelidos, devido a caprichos da
análise de argumentos. Além disso, apelidos são muito mais simples de definir
que macros. Então o comando não é redundante.

Infelizmente, não é possível apelidar ambientes do Texinfo; por exemplo,
@code{@@alias lang=exemplo} é um erro.

Apelidos precisam não serem recursivos, direta ou indiretamente.

Não é aconselhável redefinir nenhum nome de comando do @TeX{} primitivo, do
@TeX{} simples ou do Texinfo como um apelido. Infelizmente, esse é um conjunto
muito grande de nomes, e os possíveis erros resultantes oriundos do @TeX{} são
imprevisíveis.

@command{makeinfo} aceitará os mesmos identificadores para apelidos que aceita
para nomes de macro, isto é, alfanuméricos e (exceto como o primeiro caractere)
@samp{-}.


@node @code{@@definfoenclose}
@section @code{@@definfoenclose}: Destaque Personalizado

@anchor{definfoenclose}@c nome antigo
@cindex Destaque, personalizado
@cindex Realce, personalizado
@findex definfoenclose

Um comando @code{@@definfoenclose} pode ser usado para definir um comando de
realce para todos os formatos de saída não @TeX{}. Um comando definido usando
@code{@@definfoenclose} marca o texto colocando-o entre strings que precedem e
seguem o texto. Você pode usar isso para obter um controle mais próximo da tua
saída.

Presumivelmente, se você definir um comando com @code{@@definfoenclose}, você
criará um comando correspondente para @TeX{}, ou em @file{texinfo.tex},
@file{texinfo.cnf}, ou dentro de um @samp{@@iftex} ou @samp{@@tex} no teu
documento.

Escreva um comando @code{@@definfoenclose} no início de uma linha seguido por
três argumentos separados por vírgula. O primeiro argumento para
@code{@@definfoenclose} é o nome do comando @@ (sem o @code{@@}); o segundo
argumento é a string delimitadora inicial; e o terceiro argumento é a string
delimitadora final. Os dois últimos argumentos cercam o texto destacado na
saída.

Uma string delimitadora pode conter espaços. Nem o delimitador inicial nem o
final são exigidos. Se você não quiser um delimitador inicial, mas quiser um
delimitador final, você precisa seguir o nome do comando com duas vírgulas em
uma linha; do contrário, a string delimitadora final que você pretendia será
naturalmente (mal)interpretada como a string delimitadora inicial.

Se você fizer um @code{@@definfoenclose} no nome de um comando predefinido
(como @code{@@emph}, @code{@@strong}, @code{@@t} ou @code{@@i}), a definição de
invólucro substituirá a definição interna. Nós não recomendamos isso.

Um comando de invólucro definido dessa maneira recebe um argumento entre
chaves, pois é destinado para novos comandos de marcação
(@pxref{Marcando Texto}).

@findex phoo
Por exemplo, você pode escrever:

@example
@@definfoenclose phoo,//,\\
@end example

@noindent
perto do início de um arquivo do Texinfo para definir @code{@@phoo} como um
comando de formatação do Info que insere `//' antes e `\\' depois do argumento
para @code{@@phoo}. Você pode então escrever @code{@@phoo@{bar@}} onde quiser
que `//bar\\' seja realçado no Info.

Para formatação do @TeX{}, você poderia escrever

@example
@@iftex
@@global@@let@@phoo=@@i
@@end iftex
@end example

@noindent
para definir @code{@@phoo} como um comando que faz com que o @TeX{} tipografe o
argumento para @code{@@phoo} em itálico.

Cada definição se aplica ao próprio formatador dela: uma para @TeX{}, o outra
para todo o resto. Os comandos do @TeX{} bruto precisam estar em
@samp{@@iftex}. O comando @code{@@definfoenclose} não precisa estar em
@samp{@@ifinfo}, a menos que você queira usar definições diferentes para
formatos de saída diferentes.

@findex headword
Aqui está outro exemplo: escreva

@example
@@definfoenclose headword, , :
@end example

@noindent
perto do início do arquivo, para definir @code{@@headword} como um comando de
formatação do Info que insere nada antes e dois pontos depois do argumento para
@code{@@headword}.

Definições de @samp{@@definfoenclose} precisam não serem recursivas, direta ou
indiretamente.


@node Processadores Externos de Macro
@section Processadores Externos de Macro: Diretivas de Linha
@cindex Processadores externos de macro
@cindex Processadores macro, externos

Macros do Texinfo (e os outros recursos dele de substituição de texto)
funcionam bem em casos simples. Se teu documento precisar de processamento
incomumente complexo, no entanto, a fragilidade e limitações delas podem ser um
problema. Nesse caso, você pode querer usar um processador de macro
completamente diferente, como M4 (@pxref{Top,,, m4, M4}) ou CPP
(@pxref{Top,,, cpp, The C Preprocessor}).

Com uma exceção, o Texinfo não precisa saber se a entrada dele é fonte
``original'' ou preprocessada a partir de algum outro arquivo fonte. Portanto,
você pode organizar teu sistema de construção para invocar quaisquer programas
que você goste para lidar com expansão de macro ou outras necessidades de
pré-processamento. O Texinfo não oferece suporte interno para nenhum
preprocessador em particular, já que nenhum programa parecia ser suficiente
para as exigências de todos os documentos.

@cindex Números de linha, em mensagens de erro
@cindex Mensagens de erro, números de linha em
A única exceção são os números de linha em mensagens de erro. Nesse caso, o
número de linha deveria se referir ao arquivo fonte original, seja ele qual
for. Existe um mecanismo bem conhecido para isso: a assim chamada diretiva
@samp{#line}. O Texinfo suporta isso.

@menu
* Diretiva @samp{#line}::
* TeX: @samp{#line} e @TeX{}.
* Sintaxe: Detalhes da Sintaxe @samp{#line}.
@end menu


@node Diretiva @samp{#line}
@subsection Diretiva @samp{#line}

@cindex Diretiva @samp{#line}

Uma linha de entrada como esta:

@example
@hashchar{}line 100 "foo.ptexi"
@end example

@noindent indica que a próxima linha era a linha 100 do arquivo
@file{foo.ptexi}, e, portanto, isso é ao que uma mensagem de erro deveria se
referir. Tanto M4 (@pxref{Preprocessor features,,, m4, GNU M4}) quanto CPP
(@pxref{Line Control,,, cpp, The C Preprocessor} e
@ref{Preprocessor Output,,, cpp, The C Preprocessor}) podem gerar tais linhas.

@vindex CPP_LINE_DIRECTIVES
O programa @command{makeinfo} reconhece essas linhas por padrão, exceto dentro
dos blocos @code{@@verbatim} (@pxref{@code{@@verbatim}}). O reconhecimento
delas pode ser desativado completamente com @code{CPP_LINE_DIRECTIVES}
(@pxref{Outras Variáveis de Personalização}), embora normalmente não haja razão
para isso.

Para aqueles poucos programas (M4, CPP, Texinfo) que precisam documentar
diretivas @samp{#line} e, portanto, tem exemplos que, de outra forma,
corresponderiam ao padrão, o comando @code{@@hashchar@{@}} pode ser usado
(@pxref{Inserindo um Símbolo Cerquilha}). A linha de exemplo acima se parece
com isto no fonte para este manual:

@example
@@hashchar@{@}line 100 "foo.ptexi"
@end example

O comando @code{@@hashchar} foi adicionado ao Texinfo em 2013. Se você não
quiser depender dele, você também pode usar @code{@@set} e @code{@@value} para
inserir o literal @samp{#}:

@example
@@set hash #
@@value@{hash@}line 1 "example.c"
@end example

Ou, se adequado, um ambiente @code{@@verbatim} pode ser usado em vez de
@code{@@example}. Como mencionado acima, o reconhecimento de @code{#line} é
desabilitado dentro de blocos verbatim.


@node @samp{#line} e @TeX{}
@subsection @samp{#line} e @TeX{}

@cindex @TeX{} e diretivas @samp{#line}
@cindex Diretivas @samp{#line}, não processando com @TeX{}

Conforme mencionado, @command{makeinfo} reconhece as diretivas @samp{#line}
descritas na seção anterior. No entanto, @file{texinfo.tex} não reconhece e não
consegue reconhecer. Portanto, tal linha será incorretamente tipografada
literal se @TeX{} a vir. A solução é a de usar as opções de expansão de macro
do @command{makeinfo} antes de executar @TeX{}. Existem três abordagens:

@itemize @bullet
@item
Se você executar @command{texi2dvi} ou as variantes dele
(@pxref{Formatar com @command{texi2dvi}}), poderá passar @option{-E} e
@command{texi2dvi} executará @command{makeinfo} primeiro para expandir macros e
eliminar @samp{#line}.

@item
Se você executar @command{makeinfo} ou as variantes dele
(@pxref{Tradutor Genérico @command{texi2any}}), poderá especificar
@option{--no-ifinfo --iftex -E algumarquivo.out} e, em seguida, fornecer
@file{algumarquivo.out} para @code{texi2dvi} em um comando separado.

@item
Ou você pode executar @option{makeinfo --dvi --Xopt -E}. (Ou @option{--pdf} em
vez de @option{--dvi}). @command{makeinfo} então chamará @command{texi2dvi -E}.
@end itemize

@findex errormsg@r{, e números de linha no @TeX{}}
Uma última ressalva relativa ao uso com @TeX{}: como as diretivas @code{#line}
não são reconhecidas, os números de linha emitidos pelo comando
@code{@@errormsg@{@}} (@pxref{Comandos Condicionais}), ou pelo próprio @TeX{},
são os números de linha (incorretos) provenientes do arquivo derivado que o
@TeX{} está lendo, em vez dos números de linha especificados pelo
preprocessador. Esse é outro exemplo do porque nós recomendamos executar
@command{makeinfo} para os melhores diagnósticos
(@pxref{Vantagens do @command{makeinfo}}).


@node Detalhes da Sintaxe @samp{#line}
@subsection Detalhes da Sintaxe @samp{#line}

@cindex Detalhes da sintaxe @samp{#line}
@cindex Detalhes da sintaxe, @samp{#line}
@cindex Expressão regular, para @samp{#line}

Detalhes de sintaxe para a diretiva @samp{#line}: o caractere @samp{#} pode ser
precedido ou seguido por um espaço em branco, a palavra @samp{line} é opcional,
e o nome do arquivo pode ser seguido por uma lista de inteiros separados por
espaços em branco (esses são os assim chamados ``sinalizadores'' produzidos
pelo CPP em alguns casos). Para aqueles(as) que gostam de saber os detalhes
sangrentos, a expressão regular (Perl) real que é correspondida é esta:

@example
/^\s*#\s*(line)? (\d+)(( "([^"]+)")(\s+\d+)*)?\s*$/
@end example

Até onde nós podemos dizer, os sinalizadores de inteiros finais somente ocorrem
em conjunto com um nome de arquivo, de forma que isso é refletido na expressão
regular.

Como exemplo, a seguir está uma diretiva @samp{#line} sintaticamente válida, ou
seja, a linha 1 de @file{/usr/include/stdio.h}:

@example
@hashchar{} 1 "/usr/include/stdio.h" 2 3 4
@end example

Infelizmente, o nome de arquivo aspado (@samp{"..."}) tem que ser opcional,
porque o M4 (especialmente) frequentemente pode gerar diretivas @samp{#line}
dentro de um arquivo. Como o @samp{line} também é opcional, o resultado é que
as linhas podem corresponder ao que você não esperaria, por exemplo,

@example
@hashchar{} 1
@end example

As soluções possíveis estão descritas acima (@pxref{Diretiva @samp{#line}}).


@node Arquivos de Inclusão
@chapter Arquivos de Inclusão

@cindex Inclusão de Arquivos

Quando um processador do Texinfo vê um comando @code{@@include} em um arquivo
do Texinfo, ele processa o conteúdo do arquivo nomeado pelo @code{@@include} e
o incorpora aos arquivos de saída sendo criados. Arquivos de inclusão permitem
que você mantenha um documento grande como uma coleção de partes
convenientemente pequenas.

@menu
* Usando Arquivos de Inclusão::          Como usar o comando @code{@@include}.
* @code{texinfo-multiple-files-update}:: Como criar e atualizar nós e menus ao usar arquivos incluídos.
* Exigências dos Arquivos de Inclusão::  Necessidades do @code{texinfo-multiple-files-update}.
* Arquivo de Inclusão de Amostra::       Um arquivo externo de amostra com arquivos incluídos dentro dele; e um arquivo incluído de amostra.
* @code{@@verbatiminclude}::             Incluindo um arquivo literal.
* Evolução da Inclusão de Arquivos::     Como o uso do comando @code{@@include} mudou ao longo do tempo.
@end menu


@node Usando Arquivos de Inclusão
@section Como Usar Arquivos de Inclusão

@findex include

Para incluir outro arquivo dentro de um arquivo do Texinfo, escreva o comando
@code{@@include} no começo de uma linha e siga-o na mesma linha pelo nome de um
arquivo a ser incluído. Por exemplo:

@example
@@include buffers.texi
@end example

comandos @@ são expandidos em nomes de arquivo. O mais provável de ser útil é
@code{@@value} (@pxref{@code{@@set @@value}}), e mesmo assim somente em
situações complicadas.

Um arquivo incluído deveria ser simplesmente um segmento de texto que você
espera que seja incluído como está no arquivo geral do Texinfo ou no
@dfn{exterior}; ele não deveria conter as partes padrão de início e fim de um
arquivo do Texinfo. Em particular, você não deveria iniciar um arquivo incluído
com uma linha dizendo @samp{\input texinfo}; se fizer isso, esse texto será
inserido no arquivo de saída literalmente. Da mesma forma, você não deveria
terminar um arquivo incluído com um comando @code{@@bye}; nada depois de
@code{@@bye} é formatado.

No passado distante, você era obrigado(a) a escrever uma linha
@code{@@setfilename} no início de um arquivo incluído, mas não mais. Agora, não
importa se você escrever tal linha. Se uma linha @code{@@setfilename} existir
em um arquivo incluído, ela será ignorada.


@node @code{texinfo-multiple-files-update}
@section @code{texinfo-multiple-files-update}

@findex texinfo-multiple-files-update

O modo Texinfo do GNU Emacs fornece o comando
@code{texinfo-multiple-files-update}. Esse comando cria ou atualiza os
ponteiros `Próximo', `Anterior' e `Acima' dos arquivos incluídos, bem como aqueles no
arquivo externo ou no geral do Texinfo, e cria ou atualiza um menu principal no
arquivo externo. Dependendo se você o chama com argumentos opcionais, o comando
atualiza somente os ponteiros na primeira linha @code{@@node} dos arquivos
incluídos ou todos eles:

@table @kbd
@item M-x texinfo-multiple-files-update
Chamado sem quaisquer argumentos:

@itemize @minus
@item
Cria ou atualiza os ponteiros `Próximo', `Anterior' e `Acima' da primeira linha
@code{@@node} em cada arquivo incluído em um arquivo externo ou em um geral do
Texinfo.

@item
Cria ou atualiza os ponteiros de nó de nível `Top' do arquivo externo ou do
geral.

@item
Cria ou atualiza um menu principal no arquivo externo.
@end itemize

@item C-u M-x texinfo-multiple-files-update
Chamado com @kbd{C-u} como um argumento de prefixo:

@itemize @minus{}
@item
Cria ou atualiza ponteiros na primeira linha @code{@@node} em cada arquivo
incluído.

@item
Cria ou atualiza os ponteiros de nó de nível `Top' do arquivo externo.

@item
Cria e insere um menu mestre no arquivo externo. O menu mestre é feito a partir
de todos os menus em todos os arquivos incluídos.
@end itemize

@item C-u 8 M-x texinfo-multiple-files-update
Chamado com um argumento numérico de prefixo, como @kbd{C-u 8}:

@itemize @minus
@item
Cria ou atualiza @emph{todos} os ponteiros `Próximo', `Anterior' e `Acima' de todos
os arquivos incluídos.

@item
Cria ou atualiza @emph{todos} os menus de todos os arquivos incluídos.

@item
Cria ou atualiza os ponteiros de nó de nível `Top' do arquivo externo ou do
geral.

@item
E então cria um menu mestre no arquivo externo. Isso é similar a invocar
@code{texinfo-master-menu} com um argumento quando você estiver trabalhando com
apenas um arquivo.
@end itemize
@end table

Observe o uso do argumento de prefixo no uso interativo: com um argumento
regular de prefixo, apenas @w{@kbd{C-u}}, o comando
@code{texinfo-multiple-files-update} insere um menu mestre; com um argumento
numérico de prefixo, como @kbd{C-u 8}, o comando atualiza @emph{cada} ponteiro
e cada menu em @emph{todos} os arquivos e então insere um menu mestre.


@node Exigências dos Arquivos de Inclusão
@section Exigências dos Arquivos de Inclusão
@cindex Exigências dos arquivos de inclusão
@cindex Exigências para arquivos de inclusão

Se você planeja usar o comando @code{texinfo-multiple-files-update}, o arquivo
externo do Texinfo que lista os arquivos incluídos dentro dele deveria conter
nada além das partes inicial e final de um arquivo do Texinfo, e uma série de
comandos @code{@@include} listando os arquivos incluídos. Ele não deveria nem
incluir índices, que deveriam ser listados em um arquivo incluído próprio.

Além disso, cada um dos arquivos incluídos precisa conter exatamente um nó de
nível mais alto (convencionalmente, @code{@@chapter} ou equivalente), e esse nó
precisa ser o primeiro nó no arquivo incluído. Além disso, cada um desses nós
de nível mais alto em cada arquivo incluído precisa estar no mesmo nível
hierárquico na estrutura do arquivo. Normalmente, cada um é um nó
@code{@@chapter}, um @code{@@appendix} ou um @code{@@unnumbered}. Assim,
normalmente, cada arquivo incluído contém um, e somente um, nó de capítulo ou
nível equivalente.

O arquivo externo deveria conter somente @emph{um} nó, o nó `Top'. Ele
@emph{não} deveria conter quaisquer nós além do nó único `Top'. O comando
@code{texinfo-multiple-files-update} não os processará.


@node Arquivo de Inclusão de Amostra
@section Arquivo de Amostra com @code{@@include}
@cindex Arquivo @code{@@include} de amostra
@cindex Amostra de arquivo de inclusão
@cindex Amostra de arquivo @code{@@include}

Aqui está um exemplo de um arquivo externo do Texinfo com arquivos
@code{@@include} dentro dele antes de executar
@code{texinfo-multiple-files-update}, que inseriria um menu principal ou um
mestre:

@example
@group
\input texinfo @@c -*-texinfo-*-
@c %**início do cabeçalho
@@settitle Exemplo de Inclusão
@c %**fim do cabeçalho
@end group

... @xref{Arquivos de Amostra do Texinfo}, para exemplos do restante do matéria
inicial ...

@group
@@ifnottex
@@node Top
@@top Exemplo de Inclusão
@@end ifnottex
@end group

@group
@@include foo.texinfo
@@include bar.texinfo
@@include indice-conceitos.texinfo
@@bye
@end group
@end example

Um arquivo incluído, como @file{foo.texinfo}, pode se parecer com isto:

@example
@group
@@node Primeiro
@@chapter Primeiro Capítulo

Conteúdo do primeiro capítulo @dots{}
@end group
@end example

O conteúdo completo de @file{indice-conceitos.texinfo} pode ser tão simples
quanto isto:

@example
@group
@@node Índice de Conceitos
@@unnumbered Índice de Conceitos

@@printindex cp
@end group
@end example

O arquivo fonte externo do Texinfo para @cite{The GNU Emacs Lisp Reference
Manual} é chamado @file{elisp.texi}. Esse arquivo externo contém um menu mestre
com 417 entradas e uma lista de 41 arquivos @code{@@include}.


@node @code{@@verbatiminclude}
@section  @var{arquivo} @code{@@verbatiminclude}: Incluir um Arquivo Literal

@anchor{verbatiminclude}@c nome antigo
@findex verbatiminclude
@cindex Literal, arquivo de inclusão
@cindex Incluindo um arquivo literal

Você pode incluir o conteúdo exato de um arquivo no documento com o comando
@code{@@verbatiminclude}:

@example
@@verbatiminclude @var{nomearquivo}
@end example

O conteúdo de @var{nomearquivo} é impresso em um ambiente literal
(@pxref{@code{@@verbatim}}). Geralmente, o arquivo é impresso exatamente como
está, com todos os caracteres especiais e espaços em branco retidos. Nenhum
recuo é adicionado; se você quiser recuo, cerque o @code{@@verbatiminclude}
dentro de @code{@@example} (@pxref{@code{@@example}}).

O nome do arquivo é tomado literalmente, com somente uma exceção: referências
@code{@@value@{@var{variável}@}} são expandidas. Isso torna possível incluir
arquivos em outros diretórios dentro de uma distribuição, por exemplo:

@example
@@verbatiminclude @@value@{top_srcdir@}/NEWS
@end example

@noindent (Você ainda tem de ter @code{top_srcdir} definido em primeiro lugar).

Para um método de impressão do conteúdo do arquivo em um tamanho menor de
fonte, veja-se o final da seção acerca do @code{@@verbatim}.


@node Evolução da Inclusão de Arquivos
@section Evolução dos Arquivos de Inclusão

Quando o Info foi criado, era costume criar muitos arquivos Info pequenos
acerca de um assunto. Cada arquivo do Info era formatado a partir do arquivo
fonte do Texinfo dele próprio. Esse costume significava que o Emacs não
precisava fazer um buffer grande para manter a íntegra de um grande arquivo do
Info quando alguém queria informações; em vez disso, o Emacs alocava apenas
memória suficiente para o pequeno arquivo do Info que continha as informações
específicas buscadas. Dessa maneira, o Emacs podia evitar desperdício de
memória.

As referências oriundas de um arquivo para outro foram feitas referindo-se ao
nome do arquivo e também ao nome do nó.
(@xref{Outros Arquivos do Info, , Referenciando Outros Arquivos do Info}).
Veja-se, também,
(@ref{Quatro e Cinco Argumentos, , @code{@@xref} com quatro e cinco argumentos}).

Os arquivos de inclusão foram projetados principalmente como uma maneira para
criar um manual impresso grande e unitário a partir de vários arquivos menores
do Info. Em um manual impresso, todas as referências estavam dentro do mesmo
documento, de forma que o @TeX{} podia determinar automaticamente os números de
página das referências. Os comandos de formatação do Info costumavam incluir
arquivos somente para criar índices conjuntos; cada um dos arquivos individuais
do Texinfo tinha que ser formatado para Info individualmente. (Cada um,
portanto, exigia a linha @code{@@setfilename} própria dele).

Entretanto, como arquivos grandes do Info agora são divididos automaticamente,
não mais é necessário mantê-los pequenos.

Hoje em dia, vários arquivos do Texinfo são usados principalmente
para documentos grandes, como o @cite{The GNU Emacs Lisp Reference Manual}, e
para projetos nos quais várias pessoas escrevem seções diferentes de um
documento simultaneamente.

Além disso, os comandos de formatação do Info foram estendidos para funcionarem
com o comando @code{@@include}, tão somente para criar um arquivo grande do
Info que seja dividido em arquivos menores, se necessário. Isso significa que
você pode escrever menus e referências cruzadas sem nomear os diferentes
arquivos do Texinfo.


@node Impresso
@chapter Formatando e Imprimindo Cópia Impressa
@cindex Formatar e imprimir versão impressa
@cindex Imprimindo versão impressa
@cindex Versão impressa, imprimindo
@cindex Fazendo um manual impresso
@cindex Índices de ordenação
@cindex Índices, ordenação
@cindex Ordenação de índices do @TeX{}

Executar o comando @command{texi2dvi} ou @command{texi2pdf} é a maneira mais
simples de criar uma saída imprimível. Esses comandos são instalados como parte
do pacote do Texinfo.

Em mais detalhes, três principais comandos de shell são usados para
imprimir saída formatada a partir de um manual do Texinfo: um converte o fonte
do Texinfo em algo imprimível; um segundo ordena índices; e um terceiro
efetivamente imprime o documento formatado. Quando usar os comandos de shell,
você pode ou trabalhar diretamente no shell do sistema operacional ou trabalhar
em um shell dentro do GNU Emacs (ou algum outro ambiente de computação).

Se estiver usando o GNU Emacs, você pode usar comandos fornecidos pelo modo
Texinfo em vez de comandos de shell. Além dos três comandos para formatar um
arquivo, ordenar os índices e imprimir o resultado, o modo Texinfo oferece
atalhos de teclado para comandos para recentralizar o buffer de saída, mostrar
a fila de impressão e deletar um trabalho da fila de impressão.

Detalhes estão nas seções seguintes.

@menu
* Use @TeX{}::                                    Use @TeX{} para formatar para cópia impressa.
* Formatar com @command{texi2dvi}::               A maneira mais simples para formatar.
* Formatar com @command{tex}/@command{texindex}:: Formatando com comandos explícitos de shell.
* Imprimir com @command{lpr}::                    Como imprimir.
* Dentro do Emacs::                               Como formatar e imprimir a partir de um shell do Emacs.
* Impressão no Modo Texinfo::                     Como formatar e imprimir no Modo Texinfo.
* Comando de Compilação::                         Como imprimir usando o comando de compilar do Emacs.
* Resumo das Exigências::                         Resumo de exigências de formatação do @TeX{}.
* Preparando para @TeX{}::                        O que se fazer antes de usar o @TeX{}.
* hboxes lotados::                                O que são e o que se fazer com hboxes superlotados.
* @code{@@smallbook}::                            Como imprimir livros e manuais formato pequeno.
* Papel A4::                                      Como imprimir em papel A4 ou A5.
* @code{@@pagesizes}::                            Como imprimir com tamanhos de página personalizados.
* Marcas de Corte e Ampliação::                   Como imprimir marcas para indicar o tamanho das páginas e como imprimir saída escalada.
* Saída PDF::                                     Saída em Formato Portável de Documento.
* Obtendo @TeX{}::                                Como obter @TeX{}.
@end menu


@node Use @TeX{}
@section Use @TeX{}

O programa de tipografar chamado @TeX{} é usado para formatar um documento do
Texinfo para saída imprimível. @TeX{} é um programa de tipografia muito
poderoso e, quando usado corretamente, faz um trabalho excepcionalmente bom.

@xref{Obtendo @TeX{}}, para informações acerca de como obter @TeX{}. Ele não
está incluso no pacote do Texinfo, sendo uma vasta suíte de software em si.


@node Formatar com @command{texi2dvi}
@section Formatar com @command{texi2dvi}

@pindex texi2dvi @r{(script de shell)}
@cindex DVI, saída em

O programa @code{texi2dvi} cuida de todos os passos para produzir um arquivo
DVI do @TeX{} a partir de um documento do Texinfo. Similarmente,
@code{texi2pdf} produz um arquivo PDF.

Para executar @code{texi2dvi} ou @code{texi2pdf} em um arquivo de entrada
@file{foo.texi}, faça isto (onde @samp{prompt$ } é o prompt do teu shell):

@example
prompt$ @kbd{texi2dvi foo.texi}
prompt$ @kbd{texi2pdf foo.texi}
@end example

Conforme mostrado nesse exemplo, os nomes dos arquivos de entrada para
@code{texi2dvi} e @code{texi2pdf} precisam incluir qualquer extensão, como
@samp{.texi}. (Sob MS-DOS e talvez em outras circunstâncias, você possivelmente
necessite executar @samp{sh texi2dvi foo.texi} em vez de depender do sistema
operacional para invocar o shell no script @samp{texi2dvi}).

Para uma lista de todas as opções, execute @samp{texi2dvi --help}. Algumas das
opções são discutidas abaixo.

@opindex --pdf@r{, para @command{texi2dvi}}
@pindex pdftexi2dvi
Com a opção @option{--pdf}, @command{texi2dvi} produz saída PDF em vez de DVI
(@pxref{Saída PDF}), executando @command{pdftex} em vez de @command{tex}.
Alternativamente, o comando @command{texi2pdf} é uma abreviação para executar
@samp{texi2dvi --pdf}. O comando @command{pdftexi2dvi} também é fornecido como
uma conveniência para AUC-@TeX{} (@pxref{Top,,, auctex, AUC-@TeX{}}, pois ele
prefere meramente antepor @samp{pdf} às ferramentas de produção de DVI para ter
ferramentas de produção de PDF.

@opindex --dvipdf@r{, para @command{texi2dvi}}
@pindex dvipdfmx
Com a opção @option{--dvipdf}, @command{texi2dvi} produz saída PDF executando
@TeX{} e então um programa DVI-para-PDF: se a variável de ambiente @env{DVIPDF}
estiver configurada, esse valor será usado, senão o primeiro programa existente
entre @code{dvipdfmx}, @code{dvipdfm}, @code{dvipdf}, @code{dvi2pdf},
@code{dvitopdf}. Esse método geralmente suporta melhor a tipografia de CJK que
o @command{pdftex}.

@opindex --ps@r{, para @command{texi2dvi}}
@pindex dvips
Com a opção @option{--ps}, @command{texi2dvi} produz PostScript em vez de DVI,
executando @command{tex} e então @command{dvips} (@pxref{Top,,, dvips, Dvips}).
(Ou o valor da variável de ambiente @env{DVIPS}, se configurada).

@opindex --language@r{, para @command{texi2dvi}}
@cindex @LaTeX{}, processando com @command{texi2dvi}
@command{texi2dvi} também pode ser usado para processar arquivos @LaTeX{}.
Normalmente, @command{texi2dvi} é capaz de adivinhar o idioma do arquivo de
entrada pelo conteúdo e extensão do nome do arquivo dele; no entanto, se ele
adivinhar errado, você pode especificar explicitamente o idioma de entrada
usando a opção de linha de comando @option{--language=@var{idioma}}, onde
@var{idioma} é ou @samp{latex} ou @samp{texinfo}.

@opindex --command@r{, para @command{texi2dvi}}
Uma opção útil para @code{texi2dvi} é @samp{--command=@var{comando}}. Isso
insere @var{comando} em uma linha própria, depois de uma linha
@code{@@setfilename} em uma cópia temporária do arquivo de entrada, antes de
executar o @TeX{}. Com isso, você pode especificar diferentes formatos de
impressão, tais como @code{@@smallbook} (@pxref{@code{@@smallbook}}),
@code{@@afourpaper} (@pxref{Papel A4}) ou @code{@@pagesizes}
(@pxref{@code{@@pagesizes}}), sem realmente mudar o fonte do documento. (Você
também pode fazer isso em todo o site com @file{texinfo.cnf};
@pxref{Preparando para @TeX{}}).

A opção @option{-E} (equivalentemente, @option{-e} e @option{--expand}) faz a
expansão de macro do Texinfo usando @command{makeinfo} em vez da implementação
do @TeX{} (@pxref{Detalhes de Macro}). Cada implementação tem limitações e
vantagens próprias delas. Se essa opção for usada, nenhuma linha no arquivo
fonte pode começar com a string @code{@@c@tie{}_texi2dvi} ou com a string
@code{@@c@tie{}(_texi2dvi)}.

@command{texi2dvi} usa a opção @option{--build=@var{modo}} para especificar
onde a compilação do @TeX{} acontece e, como consequência, como os arquivos
auxiliares são tratados. O modo de construção também pode ser configurado
usando a variável de ambiente @env{TEXI2DVI_BUILD_MODE}. Os valores válidos
para @var{modo} são:

@table @samp
@item local
 Compile no diretório atual, deixando todos os arquivos auxiliares por aí. Esse
é o uso tradicional do TeX.

@item tidy
 Compile em um diretório local @code{*.t2d}, onde os arquivos auxiliares são
deixados. Os arquivos de saída são copiados de volta para o arquivo original.

 Usar o modo @samp{tidy} traz várias vantagens:
 @itemize -
 @item o diretório atual não fica abarrotado com uma abundância de arquivos
temporários.
 @item a desordem pode ser ainda mais reduzida usando
@option{--build-dir=diretório}: todos os diretórios @code{*.t2d} são
armazenados lá.
 @item a desordem pode ser reduzida a zero usando, por exemplo,
@option{--build-dir=/tmp/\$USER.t2d} ou @option{--build-dir=\$HOME/.t2d}.
 @item o arquivo de saída é atualizado depois de cada execução bem-sucedida do
@TeX{}, para fins de visualização simultânea da saída gerada. Em uma construção
@samp{local}, o visualizador para durante a execução inteira do @TeX{}.
 @item se a compilação falhar, o estado anterior do arquivo de saída será
preservado.
 @item As compilações @acronym{PDF} e @acronym{DVI} são mantidas em
subdiretórios separados, evitando qualquer possibilidade de incompatibilidade
de arquivos auxiliares.
 @end itemize

 Por outro lado, como a compilação @samp{tidy} ocorre em outro diretório,
ocasionalmente o @TeX{} não conseguirá encontrar alguns arquivos (por exemplo,
ao usar @code{\graphicspath}): nesse caso, use @option{-I} para especificar os
diretórios adicionais a considerar.

@item clean
 O mesmo que @samp{tidy}, mas remove o diretório auxiliar depois. Cada
compilação, portanto, exige o ciclo completo.
@end table

@pindex etex
@pindex pdfetex
@command{texi2dvi} usará @command{etex} (ou @command{pdfetex}) se estiver
disponível, porque ele roda mais rápido em alguns casos e fornece informações
adicionais de rastreamento ao depurar @file{texinfo.tex}. No entanto, essa
versão estendida do @TeX{} não é exigida, e a saída DVI é idêntica. (Hoje em
dia, @command{pdftex} e @command{pdfetex} são exatamente os mesmos, mas nós
ainda executamos @command{pdfetex} para atender a instalações antigas do
@TeX{}).

@cindex gravador de nome de arquivo para @TeX{}
@cindex linha @samp{\openout} no arquivo de registro
@command{texi2dvi} tenta detectar arquivos auxiliares gerados pelo @TeX{}, seja
usando a opção @option{-recorder} ou procurando por @samp{\openout} no arquivo
de registro que uma execução do @TeX{} produz. Você pode controlar como
@command{texi2dvi} faz isso com a variável de ambiente
@env{TEXI2DVI_USE_RECORDER}. Os valores válidos são:

@table @samp
@item yes
use a opção @option{-recorder}, sem verificações.

@item no
procure por @samp{\openout} no arquivo de registro, sem verificações.

@item yesmaybe
verifique se a opção @option{-recorder} é suportada e, se sim, use-a; caso
contrário, verifique se o rastreamento de @samp{\openout} no arquivo de
registro é suportado e, se sim, use-o; caso contrário, será um erro.

@item nomaybe
o mesmo que @samp{yesmaybe}, exceto que o rastreamento @samp{\openout} no
arquivo de registro é verificado primeiro.
@end table

O padrão é @samp{nomaybe}. Essa variável de ambiente é fornecida para fins de
solução de problemas e possivelmente mude ou desapareça no futuro.


@node Formatar com @command{tex}/@command{texindex}
@section Formatar com @command{tex}/@command{texindex}

@cindex Formatação de shell com @code{tex} e @code{texindex}
@cindex Formatando com @code{tex} e @code{texindex}
@cindex Arquivo DVI

Você pode fazer a formatação básica de um arquivo do Texinfo com o comando de
shell @code{tex} seguido pelo nome do arquivo do Texinfo. Por exemplo:

@example
tex foo.texi
@end example

@noindent @TeX{} produzirá um @dfn{arquivo DVI}, bem como vários arquivos
auxiliares contendo informações para índices, referências cruzadas, etc. O
arquivo DVI (para arquivo @dfn{DeVice Independent}) pode ser impresso em
praticamente qualquer dispositivo, talvez depois de uma conversão adicional
(veja-se a seção anterior).

@pindex texindex
O comando de formatação @code{tex} em si não ordena os índices; ele escreve um
arquivo de saída de dados de índices desordenados. Para gerar um índice
impresso depois de executar o comando @command{tex}, você primeiro precisa de
um índice ordenado para trabalhar. O comando @command{texindex} ordena índices.
(@command{texi2dvi}, descrito na seção anterior, executa @command{tex} e
@command{texindex} conforme necessário).

@anchor{Nomes dos arquivos de índice}
@cindex Nomes dos arquivos de índice
@cindex Nomes de arquivos de índice
@code{tex} gera arquivos de índices desordenados sob nomes seguindo uma
convenção padrão: o nome do teu arquivo de entrada principal com qualquer
extensão @samp{.texi} ou similar substituída pelo nome de duas letras do
índice. Por exemplo, os arquivos de saída de índices brutos para o arquivo de
entrada @file{foo.texi} seriam, por padrão, @file{foo.cp}, @file{foo.vr},
@file{foo.fn}, @file{foo.tp}, @file{foo.pg} e @file{foo.ky}. Esses são
exatamente os argumentos a fornecer para @code{texindex}.

@need 1000
@cindex Curingas
@cindex Englobamento
Em vez de especificar-se explicitamente todos os nomes de arquivos de índices
desordenados, é comum usar @samp{??} como curingas de shell e fornecer o
comando neste formato:

@example
texindex foo.??
@end example

@noindent
Esse comando executará @code{texindex} em todos os arquivos de índices
desordenados, incluindo quaisquer índices de duas letras que você mesmo(a)
definiu usando @code{@@defindex} ou @code{@@defcodeindex}. Você pode
seguramente executar @samp{texindex foo.??}, mesmo se existirem arquivos com
extensões de duas letras que não sejam arquivos de índice, como @samp{foo.el}.
O comando @code{texindex} informa, mas, inobstante, ignora esses arquivos.

Para cada arquivo especificado, @code{texindex} gera um arquivo de índice
ordenado cujo nome é feito anexando @samp{s} ao nome do arquivo de entrada; por
exemplo, @file{foo.cps} é feito a partir de @file{foo.cp}. O comando
@code{@@printindex} procura um arquivo com esse nome
(@pxref{Imprimindo Índices e Menus}). @TeX{} não lê o arquivo de saída de
índice bruto e @code{texindex} não o altera.

Depois de ter ordenado os índices, você precisa reexecutar @code{tex} sobre o
arquivo do Texinfo. Isso regenera o arquivo de saída, dessa vez com entradas de
índices atualizadas.

Por fim, você possivelmente precise executar @code{tex} mais uma vez para
corrigir os números de página nas referências cruzadas.

Para resumir, este é um processo de cinco etapas. (Alternativamente, é um
processo de uma etapa: execute @code{texi2dvi}; veja-se a seção anterior).

@enumerate
@item
Execute @code{tex} sobre teu arquivo do Texinfo. Isso gera um arquivo DVI (com
referências cruzadas indefinidas e sem índices) e os arquivos de índices brutos
(com extensões de duas letras).

@item
Execute @code{texindex} sobre os arquivos de índices brutos. Isso cria os
correspondentes arquivos de índices ordenados (com extensões de três letras).

@item
Execute @code{tex} novamente sobre teu arquivo do Texinfo. Isso regenera o
arquivo DVI, dessa vez com índices e referências cruzadas definidas, mas com
números de página para as referências cruzadas oriundos da execução anterior,
geralmente incorretos.

@item
Ordene os índices novamente, com @code{texindex}.

@item
Execute @code{tex} uma última vez. Desta vez, os números de página corretos
serão escritos para as referências cruzadas.
@end enumerate

@menu
* Formatando Documentos Parciais::
* Detalhes do @command{texindex}::
@end menu

@node Formatando Documentos Parciais
@subsection Formatando Documentos Parciais

@cindex Formatando documentos parciais
@cindex Documentos parciais, formatando
@cindex Capítulos, formatando um de cada vez
@cindex Arquivos auxiliares, omitindo
@cindex Validação de ponteiro, suprimindo
@findex novalidate

Ocasionalmente, você possivelmente deseje imprimir um documento quando sabe que
ele está incompleto, ou imprimir apenas um capítulo de um documento. Nesse
caso, os arquivos auxiliares usuais que o @TeX{} cria e os avisos que o @TeX{}
dá acerca de referências cruzadas indefinidas são apenas incômodos. Você
consegue evitá-los com o comando @code{@@novalidate}, que você precisa fornecer
@emph{antes} de quaisquer comandos de seccionamento ou referência cruzada.

Assim, o início do teu arquivo aparentaria aproximadamente assim:

@example
\input texinfo
@@novalidate
@dots{}
@end example

@code{@@novalidate} também desativa a validação no @code{makeinfo}, assim como
a opção @code{--no-validate} dele (@pxref{Validação de Ponteiro}).

Além disso, você não precisa executar @code{texindex} toda vez depois de
executar @code{tex}. O comando de formatação @code{tex} simplesmente usa
quaisquer arquivos de índices ordenados que existam provenientes de um uso
anterior do @code{texindex}. Se eles estiverem desatualizados, isso geralmente
é aceitável enquanto você estiver criando ou depurando um documento.


@node Detalhes do @command{texindex}
@subsection Detalhes do @command{texindex}

@cindex Chaves, em entradas de índice
Na versão 6 do Texinfo, lançada em 2015, o programa @command{texindex} foi
completamente reimplementado. A principal diferença funcional é a de que
entradas de índice iniciando com uma chave esquerda ou chave direita (@samp{@{}
respectivamente @samp{@}}) conseguem funcionar corretamente. Por exemplo, essas
simples entradas de índice são processadas corretamente, incluindo o ``index
initial'' mostrado no índice:

@example
@@cindex @@@{
@@cindex @@@}
...
@@printindex cp
@end example

@findex \usebracesinindexestrue
Entretanto, para habilitar esse comportamento, é necessário (por enquanto)
fornecer uma opção especial para o @TeX{} no início de um documento fonte:

@example
@@tex
\global\usebracesinindexestrue
@@end tex
@end example

@cindex Ordenar string, incorreto @samp{|}
Isso ocorre porque a implementação anterior do @command{texindex} abortava com
uma mensagem de erro incorreta (@samp{Nenhum número de página em \entry...}) em
tais entradas de índice quando manuseadas da maneira normal. Portanto, o @TeX{}
escrevia uma ``ordenar string'' incorreta usando o caractere @samp{|}; isso não
afetava o texto da entrada, mas a inicial do índice era o incorreto @samp{|}, e
a ordenação não era perfeita.

Por causa desse erro fatal, e porque relativamente poucos documentos tem
entradas de índice iniciando com chaves, nós queremos fornecer algum tempo de
transição para instalações terem o novo @command{texindex}. Em algum ponto no
futuro, nós tornaremos @code{\usebracesinindexes} verdadeiro por padrão (o
código do @TeX{} acima continuará funcionando bem).

@cindex Programação letrada, com Texinfo e @code{awk}
@cindex Texinfo, e programação letrada
@cindex Robbins, Arnold
@pindex texiwebjr
@pindex ti.twjr
Embora não uma questão de funcionalidade, os(as) leitores(as) possivelmente
estejam interessados(as) em saber que o novo @command{texindex} é um programa
letrado (@url{http://en.wikipedia.org/wiki/Literate_programming}) usando
Texinfo para documentação e @code{awk} (portável) para código. Um arquivo
fonte, @file{texindex/ti.twjr} nesse caso, produz o programa executável, um
documento imprimível e um documento online.

O sistema é chamado TexiWeb Jr.@: e foi criado por Arnold Robbins, que também
escreveu o novo @command{texindex}. Não coincidentemente, ele também é o
mantenedor de longa data do @command{gawk} (GNU Awk,
@pxref{Top,,, gawk, The GNU Awk User's Guide}). O arquivo
@file{texindex/Makefile.am} mostra um exemplo de uso do sistema.


@node Imprimir com @command{lpr}
@section Imprimir com @command{lpr} a partir do Shell

@pindex lpr @r{(Comando de impressão DVI)}

A maneira de imprimir um arquivo DVI depende da instalação do teu sistema. Duas
comuns são @samp{dvips foo.dvi -o} para criar um arquivo do PostScript primeiro
e depois imprimi-lo; e @samp{lpr -d foo.dvi} para imprimir um arquivo DVI
diretamente.

Por exemplo, os comandos seguintes (provavelmente) serão suficientes para
ordenar os índices, formatar e imprimir este manual usando o script de shell
@code{texi2dvi} (@pxref{Formatar com @command{texi2dvi}}).

@example
@group
texi2dvi texinfo.texi
dvips texinfo.dvi -o
lpr texinfo.ps
@end group
@end example

Dependendo da configuração do @code{lpr} na tua máquina, você poderá combinar
as duas últimas etapas em @code{lpr -d texinfo.dvi}.

@cindex Arquivo PCL, para impressão
Você também pode gerar um arquivo PDF executando @code{texi2pdf} em vez de
@code{texi2dvi}; um PDF frequentemente é imprimível diretamente. Ou você pode
gerar um arquivo PCL usando @code{dvilj} em vez de @code{dvips}, se você tiver
uma impressora que prefira esse formato.

@cindex Impressão de shell, no MS-DOS/MS-Windows
@cindex Imprimindo arquivos DVI, no MS-DOS/MS-Windows
@pindex lpr@r{-d, substituições no MS-DOS/MS-Windows}
@code{lpr} é um programa padrão em sistemas Unix, mas geralmente está ausente
em MS-DOS/MS-Windows. Se for, basta criar um arquivo PostScript ou PDF ou PCL,
o que for mais conveniente, e imprimi-lo da maneira usual para tua máquina (por
exemplo, enviando para a porta apropriada, geralmente @samp{PRN}).


@node Dentro do Emacs
@section Imprimindo a Partir de um Shell do Emacs
@cindex Imprimir, formatar a partir do shell do Emacs
@cindex Formatar, imprimir a partir do shell do Emacs
@cindex Shell, formatar, imprimir a partir de
@cindex Shell do Emacs, formatar, imprimir a partir de
@cindex Shell do GNU Emacs, formatar, imprimir a partir de

Você consegue fornecer comandos de formatação e de impressão a partir de um
shell dentro do GNU Emacs, assim como qualquer outro comando de shell. Para
criar um shell dentro do Emacs, digite @kbd{M-x shell}
(@pxref{Shell,,, emacs, O Manual do GNU Emacs}). Nesse shell, você consegue
formatar e imprimir o documento.
@xref{Impresso, , Formatar e Imprimir Cópia Impressa}, para detalhes.

Você consegue comutar para e do buffer do shell enquanto @code{tex} estiver
executando e fazer outras edições. Se você estiver formatando um documento
longo em uma máquina lenta, isso pode ser muito conveniente.

Por exemplo, você consegue usar @code{texi2dvi} a partir de um shell do Emacs.
Aqui está uma maneira de usar @code{texi2pdf} para formatar e imprimir
@cite{Using and Porting GNU CC} a partir de um shell dentro do Emacs:

@example
@group
texi2pdf gcc.texi
lpr gcc.pdf
@end group
@end example

Veja-se a próxima seção para mais informações acerca de formatação e impressão
no modo Texinfo.


@node Impressão no Modo Texinfo
@section Formatando e Imprimindo no Modo Texinfo
@cindex Impressão de região no modo Texinfo
@cindex Formatar e imprimir no modo Texinfo
@cindex Imprimir e formatar no modo Texinfo

O modo Texinfo fornece vários comandos de tecla predefinidos para formatação e
para impressão do @TeX{}. Eles incluem comandos para ordenar índices, olhar a
fila da impressora, terminar o trabalho de formatação e recentralizar a
exibição do buffer no qual as operações ocorrem.

@table @kbd
@item C-c C-t C-b
@itemx M-x texinfo-tex-buffer
Execute @code{texi2dvi} no buffer atual.

@item C-c C-t C-r
@itemx M-x texinfo-tex-region
Execute @TeX{} na região atual.

@item C-c C-t C-i
@itemx M-x texinfo-texindex
Ordene os índices de um arquivo do Texinfo formatado com
@code{texinfo-tex-region}.

@item C-c C-t C-p
@itemx M-x texinfo-tex-print
Imprima um arquivo DVI que foi criado com @code{texinfo-tex-region} ou
@code{texinfo-tex-buffer}.

@item C-c C-t C-q
@itemx M-x tex-show-print-queue
Mostre a fila de impressão.

@item C-c C-t C-d
@itemx M-x texinfo-delete-from-print-queue
Delete um trabalho da fila de impressão; você será solicitado(a) a informar o
número do trabalho mostrado por um comando @kbd{C-c C-t C-q} precedente
(@code{texinfo-show-tex-print-queue}).

@item C-c C-t C-k
@itemx M-x tex-kill-job
Termine o trabalho @TeX{} executando atualmente iniciado por ou
@code{texinfo-tex-region} ou @code{texinfo-tex-buffer}, ou qualquer outro
processo executando no buffer do shell do Texinfo.

@item C-c C-t C-x
@itemx M-x texinfo-quit-job
Saia de um trabalho de formatação do @TeX{} que parou devido a um erro enviando
um @key{x} para ele. Quando você faz isso, o @TeX{} preserva um registro do que
ele fez em um arquivo @file{.log}.

@item C-c C-t C-l
@itemx M-x tex-recenter-output-buffer
Reexiba o buffer do shell no qual os comandos de impressão e de formatação do
@TeX{} forem executados para mostrar a saída mais recente deles.
@end table

@need 1000
Assim, a sequência usual de comandos para formatar um buffer é a seguinte (com
comentários à direita):

@example
@group
C-c C-t C-b             @r{Execute @code{texi2dvi} no buffer.}
C-c C-t C-p             @r{Imprima o arquivo DVI.}
C-c C-t C-q             @r{Exiba a fila da impressora.}
@end group
@end example

Os comandos de formatação do modo Texinfo do @TeX{} iniciam um subshell no
Emacs chamado @file{*tex-shell*}. Os comandos @code{texinfo-tex-command},
@code{texinfo-texindex-command} e @code{tex-dvi-print-command} são todos
executados nesse shell.

Você consegue observar os comandos operarem no buffer @samp{*tex-shell*} e
consegue comutar para e de, e usar o buffer @samp{*tex-shell*} como faria com
qualquer outro buffer de shell.

@need 1500
Os comandos de formatação e de impressão dependem dos valores de diversas
variáveis. Os valores padrão são:

@example
@group
    @r{Variável}                              @r{Valor padrão}

texinfo-texi2dvi-command                  "texi2dvi"
texinfo-tex-command                       "tex"
texinfo-texindex-command                  "texindex"
texinfo-delete-from-print-queue-command   "lprm"
texinfo-tex-trailer                       "@@bye"
tex-start-of-header                       "%**start"
tex-end-of-header                         "%**end"
tex-dvi-print-command                     "lpr -d"
tex-show-queue-command                    "lpq"
@end group
@end example

Você consegue mudar os valores dessas variáveis com o comando
@kbd{M-x set-variable}
(@pxref{Examining, , Examining and Setting Variables, emacs, O Manual do GNU Emacs})
ou com teu arquivo de inicialização @file{.emacs}
(@pxref{Init File, , , emacs, O Manual do GNU Emacs}).

@cindex Personalize o pacote Emacs (@t{Development/Docs/Texinfo})
Iniciando com a versão 20, o GNU Emacs oferece uma interface amigável, chamada
@dfn{Customize}, para mudar valores de variáveis definidas pelo(a) usuário(a).
@xref{Easy Customization, , Easy Customization Interface, emacs, O Manual do GNU Emacs},
para mais detalhes acerca disso. As variáveis do Texinfo podem ser
encontradas no grupo @samp{Development/Docs/Texinfo}, uma vez que você invoque
o comando @kbd{M-x customize}.


@node Comando de Compilação
@section Usando a Lista de Variáveis Locais
@cindex Variáveis locais
@cindex Comando de compilação para formatação
@cindex Formatar com o comando de compilar

Outra maneira de aplicar o comando de formatação do @TeX{} a um arquivo do
Texinfo é a de colocar esse comando em uma @dfn{lista de variáveis locais} no
final do arquivo do Texinfo. Você pode então especificar os comandos @code{tex}
ou @code{texi2dvi} como um @code{compile-command} e
fazer o Emacs executá-lo digitando @kbd{M-x compile}. Isso cria um shell
especial chamado o buffer @file{*compilation*} no qual o Emacs executa o
comando de compilar. Por exemplo, no final do arquivo @file{gdb.texi}, depois
do @code{@@bye}, você poderia colocar o seguinte:

@example
@group
Variáveis Locais:
compile-command: "texi2dvi gdb.texi"
End:
@end group
@end example

@noindent
Essa técnica é mais frequentemente usada por programadores(as) que também
compilam programas dessa maneira; veja-se
@ref{Compilation, , , emacs, O Manual do GNU Emacs}.


@node Resumo das Exigências
@section Resumo das Exigências de Formatação do @TeX{}
@cindex Exigências para formatação
@cindex Exigências mínimas para formatação
@cindex Exigências de formatação

Cada arquivo do Texinfo que deva ser entrada para o @TeX{} precisa iniciar com
um comando @code{\input}:

@example
\input texinfo
@end example

@noindent
Isso instrui o @TeX{} a carregar as macros que ele necessita para processar um
arquivo do Texinfo.

Cada arquivo do Texinfo precisa terminar com uma linha que encerre o
processamento do @TeX{} e force a saída de páginas inacabadas:

@example
@@bye
@end example

Estritamente falando, essas duas linhas são tudo o que um arquivo do Texinfo
precisa para ser processado com sucesso pelo @TeX{}.

Geralmente, no entanto, o início inclui um comando @code{@@settitle} para
definir o título do manual impresso, uma página de título, uma página de
direitos autorais, permissões e um tabela do conteúdo. Além de @code{@@bye}, o
fim de um arquivo geralmente inclui índices. (Sem mencionar que a maioria dos
manuais também contém um corpo de texto).

Para mais informações, veja-se:

@itemize @bullet
@item @ref{@code{@@settitle}}.
@item @ref{@code{@@setchapternewpage}}.
@item @ref{Cabeçalhos}.
@item @ref{Página de Título e Página de Direitos Autorais}.
@item @ref{Imprimindo Índices e Menus}.
@item @ref{Conteúdo}.
@end itemize


@node Preparando para @TeX{}
@section Preparando para @TeX{}
@cindex Preparando para @TeX{}
@cindex Inicialização de entrada do @TeX{}
@cindex @sortas{iniciação profile} arquivo de inicialização @file{.profile} @c CONSERTE-ME
@cindex @sortas{iniciação cshrc} arquivo de inicialização @file{.cshrc} @c CONSERTE-ME
@cindex Arquivo de inicialização para entrada do @TeX{}

@TeX{} precisa saber onde encontrar o arquivo @file{texinfo.tex} que o comando
@samp{\input texinfo} na primeira linha lê. O arquivo @file{texinfo.tex} diz ao
@TeX{} como lidar com comandos @@; ele está incluído em todas as distribuições
GNU padrão. A versão mais recente lançada para uso geral está disponível a
partir dos servidores e espelhos GNU usuais:

@smalldisplay
@uref{http://ftp.gnu.org/gnu/texinfo/texinfo.tex}
@uref{http://ftpmirror.gnu.org/texinfo/texinfo.tex}
@end smalldisplay

A versão de desenvolvimento mais recente está disponível a partir do
repositório de fonte do Texinfo:

@smalldisplay
@uref{http://svn.savannah.gnu.org/viewvc/trunk/doc/texinfo.tex?root=texinfo&view=log}
@end smalldisplay

@pindex texinfo.tex@r{, instalando}
@file{texinfo.tex} é essencialmente um arquivo independente, e a
compatibilidade é uma preocupação extrema; então, se você precisa ou quer
tentar uma versão mais nova que a que veio com teu sistema, quase sempre é
suficiente baixá-la e colocá-la em qualquer lugar que o @TeX{} a encontre
(primeiro). Você pode substituir qualquer @file{texinfo.tex} existente por uma
versão mais nova (claro, salvando a original em caso de desastre).

@pindex epsf.tex@r{, instalando}
Além disso, você deveria instalar @file{epsf.tex}, se ele ainda não estiver
instalado a partir de outra distribuição. Mais detalhes estão no final da
descrição do comando @code{@@image} (@pxref{Imagens}).

@cindex Fontes European Computer Modern, instalando
@cindex Fontes EC, instalando
@cindex Fontes CM-Super, instalando
Para usar aspas diferentes daquelas usadas em inglês, você precisará ter as
fontes European Computer Modern (por exemplo, @file{ecrm1000}) e (para saída em
PDF) as fontes CM-Super (@pxref{Inserindo Aspas}).

@pindex feymr10@r{, instalando}
@cindex Fonte europeia, instalando
Para usar o comando @code{@@euro}, você precisará das fontes @samp{feym*} (por
exemplo, @file{feymr10}). @xref{@code{@@euro}}.

Todos os arquivos acima (e muitos outros) deveriam ser instalados por padrão em
uma instalação razoável do @TeX{}.

@pindex texinfo.cnf @r{instalação}
@cindex Personalização do @TeX{} para o Texinfo
@cindex Arquivo de configuração do Texinfo abrangente ao sítio
Opcionalmente, você pode criar um arquivo @file{texinfo.cnf} para configuração
do sítio. Esse arquivo é lido pelo @TeX{} no início de um arquivo do Texinfo.
Você pode colocar quaisquer comandos que gostar lá, de acordo com as convenções
locais abrangentes a todo o sítio. Eles serão lidos pelo @TeX{} ao processar
qualquer documento do Texinfo. Por exemplo, se @file{texinfo.cnf} contiver a
linha @samp{@@afourpaper} (@pxref{Papel A4}), então todos os documentos do
Texinfo serão processados com esse tamanho de página em vigor. Se
você não tiver nada para colocar em @file{texinfo.cnf}, não precisa criá-lo.

@cindex Variável de ambiente @code{TEXINPUTS}
@vindex TEXINPUTS
Se nenhum dos locais acima para esses arquivos de sistema for suficiente, você
pode especificar os diretórios explicitamente. Para @file{texinfo.tex}, você
pode fazer isso escrevendo o caminho completo para o arquivo depois do comando
@code{\input}. Outra maneira, que funciona para ambos, @file{texinfo.tex} e
@file{texinfo.cnf} (e qualquer outro arquivo que o @TeX{} possa ler), é a de
configurar a variável de ambiente @code{TEXINPUTS} no teu arquivo
@file{.profile} ou @file{.cshrc}.

Se você usa @file{.profile} ou @file{.cshrc} depende se usa um interpretador de
comandos compatível com o shell Bourne (@code{sh}, @code{bash}, @code{ksh},
@dots{}) ou compatível com o shell C (@code{csh}, @code{tcsh}),
respectivamente.

Em um arquivo @file{.profile}, você poderia usar a seguinte sequência de
comandos do @code{sh}:

@example
@group
TEXINPUTS=.:/home/eu/minhabiblioteca:
export TEXINPUTS
@end group
@end example

@need 1000 @c CONSERTE-ME
Enquanto em um arquivo @file{.cshrc}, você poderia usar a seguinte sequência de
comandos do @code{csh}:

@example
setenv TEXINPUTS .:/home/eu/minhabiblioteca:
@end example

No MS-DOS/MS-Windows, você faria isto (observe o uso do caractere @samp{;} como
separador de diretório, em vez de @samp{:}):

@example
@group
set TEXINPUTS=.;d:/home/eu/minhabiblioteca;c:
@end group
@end example

@noindent
É costumeiro para usuários(as) de DOS/Windows coloquem tais comandos no arquivo
@file{autoexec.bat} ou no registro do Windows.

@noindent
Essas configurações fariam com que o @TeX{} procurasse o arquivo @file{\input}
primeiro no diretório atual, indicado por @samp{.}, depois no diretório
@file{minhabiblioteca} de um(a) usuário(a) hipotético(a) @samp{eu} e,
finalmente, nos diretórios do sistema. (Um @samp{:} anteposto, posposto ou
duplo indica a busca nos diretórios do sistema naquele ponto).


@node hboxes lotados
@section ``hboxes'' Lotados
@cindex @samp{hboxes} lotados
@cindex @samp{hbox}, lotado
@cindex Saída final

@TeX{} ocasionalmente não consegue tipografar uma linha dentro das margens
normais. Isso ocorre com mais frequência quando @TeX{} encontra o que
interpreta como uma palavra longa que ele não consegue hifenizar, como um
endereço de rede de correio eletrônico ou um identificador muito longo. Quando
isso acontece, @TeX{} imprime uma mensagem de erro como esta:

@example
Overfull @@hbox (20.76302pt too wide)
@end example

@findex hbox
@noindent
(No @TeX{}, as linhas estão em ``caixas horizontais'', daí o termo ``hbox''.
@samp{@@hbox} é um primitivo do @TeX{} não usado na linguagem do Texinfo).

@TeX{} também fornece o número da linha no arquivo fonte do Texinfo e o texto
da linha ofensiva, que é marcado em todos os lugares que @TeX{} considerou
hifenização. @xref{Depuração com @TeX{}}, para mais informações acerca de erros
de tipografia.

Se o arquivo do Texinfo tiver um hbox lotado, você pode reescrever a frase, de
forma que o hbox lotado não ocorra, ou você pode decidir deixá-lo. Uma pequena
excursão na margem direita frequentemente não importa e possivelmente nem seja
perceptível.

Se tiver muitas caixas lotadas e (ou) uma antipatia por reescrever, você pode
forçar o @TeX{} a aumentar bastante o espaçamento permitido entre palavras,
evitando assim (se tiver sorte) muitas das quebras ruins de linha, como esta:

@findex \emergencystretch
@example
@@tex
\global\emergencystretch = .9\hsize
@@end tex
@end example

@noindent
(Você deveria ajustar a fração conforme necessário). Esse valor enorme para
@code{\emergencystretch} não pode ser o padrão, pois a saída tipografada
geralmente seria de qualidade visivelmente inferior; o valor padrão dela é
@samp{.15\hsize}. @code{\hsize} é a dimensão do @TeX{} que contém a largura
atual da linha.

@cindex Retângulo preto em impresso
@cindex Retângulo, preto em impresso
@cindex Caixa, preto feio em impresso
@cindex Retângulos pretos feios em impresso
Para quaisquer caixas lotadas que você tenha, o @TeX{} imprimirá um retângulo
grande, feio e preto ao lado da linha que contém o hbox lotado, a menos que
seja informado do contrário. Isso é para que você perceba o local do problema
se estiver corrigindo um rascunho.

@findex finalout
Para evitar que tal monstruosidade estrague tua impressão final, escreva o
seguinte no início do arquivo do Texinfo, em uma linha própria, antes do
comando @code{@@titlepage}:

@example
@@finalout
@end example


@node @code{@@smallbook}
@section @code{@@smallbook}: Imprimindo Livros ``Pequenos''

@anchor{smallbook}@c nome antigo
@findex smallbook
@cindex Tamanho pequeno do livro
@cindex Livro, imprimindo pequeno
@cindex Tamanhos de página para livros
@cindex Tamanho do livro impresso

Por padrão, o @TeX{} tipografa páginas para impressão em um formato de 8,5 por
11 polegadas. No entanto, você pode direcionar o @TeX{} para tipografar um
documento em um formato de 7 por 9,25 polegadas que seja adequado para livros
encadernados inserindo o seguinte comando em uma linha própria no início do
arquivo do Texinfo, antes da página de título:

@example
@@smallbook
@end example

@noindent
(Como muitos livros tem cerca de 7 por 9,25 polegadas, esse comando poderia ter
sido melhor chamado de comando @code{@@regularbooksize}, mas veio a ser chamado
de comando @code{@@smallbook} por comparação ao formato de 8,5 por 11
polegadas).

Se você escrever o comando @code{@@smallbook} entre as linhas de início de
cabeçalho e fim de cabeçalho, o comando de formatação de região do modo Texinfo
do @TeX{}, @code{texinfo-tex-region}, formatará a região no tamanho de livro
``pequeno'' (@pxref{Início de Cabeçalho}).

@xref{@code{@@small@dots{}}}, para informações acerca de comandos que facilitam
produzir exemplos para um manual menor.

@xref{Formatar com @command{texi2dvi}} e @ref{Preparando para @TeX{}} para
outras maneiras de formatar com @code{@@smallbook} que não exigem mudar o
arquivo fonte.


@node Papel A4
@section Imprimindo em Papel A4
@cindex Papel A4, imprimindo em
@cindex Papel A5, imprimindo em
@cindex Tamanho de papel, A4
@cindex Papel europeu A4
@findex afourpaper
@findex afivepaper

Você pode dizer ao @TeX{} para formatar um documento para impressão em papel A4
(ou A5) de tamanho europeu com o comando @code{@@afourpaper} (ou
@code{@@afivepaper}). Escreva o comando em uma linha própria perto do início do
arquivo Texinfo, antes da página de título. Por exemplo, isto é como você
escreveria o cabeçalho para este manual:

@example
@group
\input texinfo    @@c -*-texinfo-*-
@@c %**start of header
@@settitle Texinfo
@@afourpaper
@@c %**end of header
@end group
@end example

@xref{Formatar com @command{texi2dvi}} e @ref{Preparando para @TeX{}} para
outras maneiras de formatar para diferentes tamanhos de papel que não exigem
mudar o arquivo fonte.

@findex afourlatex
@findex afourwide
Você pode ou não preferir a formatação que resulta do comando
@code{@@afourlatex}. Existe também @code{@@afourwide} para papel A4 em formato
largo.


@node @code{@@pagesizes}
@section @code{@@pagesizes} [@var{largura}][, @var{altura}]: Tamanhos Personalizados de Página
@anchor{pagesizes}@c nome antigo de nó

@findex pagesizes
@cindex Tamanhos personalizados de página
@cindex Tamanhos de página, personalizados
@cindex Largura e altura do texto
@cindex Largura da área de texto
@cindex Altura da área de texto
@cindex Profundidade da área de texto

Você pode especificar explicitamente a altura e (opcionalmente) a largura da
área principal de texto na página com o comando @code{@@pagesizes}. Escreva
isso em uma linha própria perto do começo do arquivo do Texinfo, antes da
página de título. A altura vem primeiro, depois a largura se desejado,
separados por uma vírgula. Exemplos:

@example
@@pagesizes 200mm,150mm  @c para papel b5
@end example
@noindent and
@example
@@pagesizes 11.5in       @c para papel ofício
@end example

@cindex Papel B5, imprimindo em
@cindex Papel ofício, imprimindo em
Isso seria razoável para impressão em papel tamanho B5. Para enfatizar, esse
comando especifica o tamanho da @emph{área de texto}, não o tamanho do papel
(que é 250@dmn{mm} por 177@dmn{mm} para B5, 14@dmn{in} por 8,5@dmn{in} para
ofício).

@cindex Margens na página, não controláveis
Para fazer mudanças mais elaboradas, como mudar qualquer uma das margens da
página, você precisa definir um novo comando no @file{texinfo.tex} ou
@file{texinfo.cnf}.

@xref{Formatar com @command{texi2dvi}} e @ref{Preparando para @TeX{}} para
outras maneiras de especificar @code{@@pagesizes} que não exigem mudar o
arquivo fonte.


@node Marcas de Corte e Ampliação
@section Marcas de Corte e Ampliação

@findex cropmarks
@cindex Marcas de corte para impressão
@cindex Imprimindo marcas de corte
Você pode (tentar) direcionar o @TeX{} para imprimir marcas de corte nos cantos
das páginas com o comando @code{@@cropmarks}. Escreva o comando
@code{@@cropmarks} em uma linha própria, perto do início do arquivo do Texinfo,
antes da página de título, assim:

@example
@@cropmarks
@end example

Esse comando é principalmente para impressoras que tipografam várias páginas em
uma folha de filme; mas, você pode tentar usá-lo para marcar os cantos de um
livro configurado para 7 por 9,25 polegadas com o comando @code{@@smallbook}.
(As impressoras não produzirão marcas de corte para saída de tamanho regular
que seja impressa em papel de tamanho regular). Como diferentes máquinas de
impressão funcionam de maneiras diferentes, você deveria explorar o uso desse
comando com um espírito de aventura. Você possivelmente tenha que redefinir o
comando no @file{texinfo.tex}.

O comando @code{@@cropmarks} é reconhecido e ignorado em formatos de saída não
@TeX{}.

@findex \mag @r{(ampliação do @TeX{} bruto)}
@cindex Impressão ampliada
@cindex Páginas maiores ou menores
Você pode tentar direcionar o @TeX{} para tipografar páginas maiores ou menores
que o normal com o comando @code{\mag} do @TeX{}. Tudo que seja tipografado é
dimensionado proporcionalmente maior ou menor. (@code{\mag} significa
``ampliação''). Esse @emph{não} é um comando @@ do Texinfo, mas é um comando do
@TeX{} bruto que é prefixado com uma barra invertida. Você tem que escrever
esse comando entre @code{@@tex} e @code{@@end tex}
(@pxref{Comandos do Formatador Bruto}).

Siga o comando @code{\mag} com um @samp{=} e então um número que seja 1.000
vezes a ampliação que você deseja. Por exemplo, para imprimir páginas em
tamanho normal 1,2, escreva o seguinte próximo ao início do arquivo do Texinfo,
antes da página de título:

@example
@group
@@tex
\global\mag=1200
@@end tex
@end group
@end example

Com algumas tecnologias de impressão, você pode imprimir cópias de tamanho
normal que parecem melhores que o normal, entregando um mestre maior que o
normal para tua gráfica. Eles(as) fazem a redução, aumentando assim
efetivamente a resolução.

Dependendo do teu sistema, arquivos DVI preparados com um @code{\mag} não
padrão podem não imprimir ou podem imprimir somente com certas ampliações.
Esteja preparado(a) para experimentar.


@node Saída PDF
@section Saída PDF
@cindex Saída PDF
@cindex Saída, em PDF

@pindex pdftex
A maneira mais simples de gerar saída PDF a partir do fonte do Texinfo é a de
executar o script de conveniência @command{texi2pdf} (ou
@command{pdftexi2dvi}); isso executa o script @command{texi2dvi} com a opção
@option{--pdf} (@pxref{Formatar com @command{texi2dvi}}). Se por algum motivo
você quiser processar o documento manualmente, você pode executar o programa
@command{pdftex} em vez do @command{tex} simples. Isto é, execute @samp{pdftex
foo.texi} em vez de @samp{tex foo.texi}.

@dfn{PDF} significa `Portable Document Format'. Foi inventado pela Adobe
Systems alguns anos atrás para intercâmbio de documentos, baseados na linguagem
PostScript deles. Links relacionados:

@itemize
@item
GNU GV, um
@uref{http://www.gnu.org/software/gv/, Leitor de PDF baseado em Ghostscript}.
(Ele também consegue pré visualizar documentos PostScript).

@item
@code{xpdf}, um @uref{http://www.foolabs.com/xpdf/, leitor de PDF} autônomo e
disponível livremente para o sistema de janelas X.

@item
@uref{https://en.wikipedia.org/wiki/Portable_Document_Format, PDF na Wikipedia}.

@end itemize

Atualmente, o Texinfo não fornece os comandos @samp{@@ifpdf} ou @samp{@@pdf}
como para os outros formatos de saída, pois os documentos PDF contém muitos
deslocamentos internos de baixo nível e referências cruzadas que seriam
difíceis ou impossíveis de especificar no nível do fonte do Texinfo.

Arquivos PDF exigem software dedicado para serem exibidos, diferentemente dos
formatos ASCII simples (Info, HTML) que o Texinfo suporta. Eles também tendem a
ser muito maiores que os arquivos DVI produzidos pelo @TeX{} por padrão. No
entanto, um arquivo PDF define um documento tipografado real em um arquivo
autocontido, notavelmente incluindo todas as fontes que são usadas, de forma
que ele tem o lugar dele.


@node Obtendo @TeX{}
@section Obtendo @TeX{}
@cindex Obtendo @TeX{}
@cindex @TeX{}, como obter

@TeX{} é um formatador de documentos que é usado pela FSF para a documentação
dela. Ele é a maneira mais fácil de obter saída impressa (por exemplo, PDF e
PostScript) para manuais do Texinfo. O TeX é redistribuível livremente, e você
pode obtê-lo pela Internet ou em mídia física. Veja-se
@url{http://tug.org/texlive}.

@c por favor, mantenha esse texto em sincronia com www.gnu.org/prep/FTP


@node Tradutor Genérico @command{texi2any}
@chapter @command{texi2any}: O Tradutor Genérico para Texinfo

@command{texi2any} é o tradutor genérico para Texinfo que consegue produzir
diferentes formatos de saída e é altamente personalizável. Ele suporta estes
formatos:

@table @asis
@item Info (por padrão, ou com @option{--info}),

@item HTML (com @option{--html}),

@item texto simples (com @option{--plaintext}),

@item Docbook (com @option{--docbook}),

@item XML do Texinfo (com @option{--xml}).
@end table

@command{makeinfo} é um apelido para @command{texi2any}. Por padrão, tanto
@command{texi2any} quanto @command{makeinfo} geram saída Info; de fato, não
existem diferenças no comportamento baseadas no nome.

Além desses formatos padrão, as opções de linha de comando para
@command{texi2any} podem mudar muitos aspectos da saída. Além disso, os
arquivos de inicialização fornecem ainda mais controle sobre a saída
final---quase tudo não especificado no arquivo de entrada do Texinfo. Os
arquivos de inicialização são escritos em Perl, como o programa principal, e
qualquer coisa que possa ser especificada na linha de comando também pode ser
especificada dentro de um arquivo de inicialização.

O restante deste capítulo entra em detalhes.

@menu
* Implementação de Referência::                  @command{texi2any}: a implementação de referência.
* Invocando @command{texi2any}::                 Executando o tradutor a partir de um shell.
* Saída Impressa do @command{texi2any}::         Chamando @command{texi2any}.
* Validação de Ponteiro::                        Como verificar se os ponteiros apontam para algum lugar.
* Variáveis de Personalização::                  Configurando @command{texi2any}.
* Internacionalização de Strings de Documentos:: Traduzindo texto inserido pelo programa.
* Invocando @command{pod2texi}::                 Traduzindo POD Perl para Texinfo.
* @command{texi2html}::                          Um ancestral de @command{texi2any}.
@end menu


@node Implementação de Referência
@section @command{texi2any}: Uma Implementação de Referência do Texinfo

@cindex @command{texi2any}, como implementação de referência
@cindex Implementação de referência
@cindex Implementação, @command{texi2any} como referência

Acima, nós chamamos @command{texi2any} de ``o'' tradutor para Texinfo em vez de
apenas ``um'' tradutor, embora (claro) seja técnica e juridicamente possível
que outras implementações sejam escritas. O motivo é que implementações
alternativas tem grande probabilidade de ter diferenças sutis, ou não tão
sutis, no comportamento, e assim os documentos do Texinfo se tornariam
dependentes do processador. Portanto, é importante ter uma implementação de
referência que defina partes da linguagem não totalmente especificadas pelo
manual (frequentemente intencionalmente). É igualmente importante ter opções de
linha de comando consistentes e outros comportamentos para todos os
processadores.

@cindex Representação em árvore de documentos
@cindex Representação em árvore da sintaxe de documentos
@cindex Representação abstrata e em árvore da sintaxe de documentos
Por esse motivo, o processador Perl @command{texi2html} do Texinfo, antes
independente, foi tornado compatível com a implementação C do
@command{makeinfo}, para evitar continuar com duas implementações
(@pxref{Histórico}). A implementação atual, @command{texi2any}, serve como a
implementação de referência. Ela herdou o projeto de personalização e outros
recursos de @command{texi2html} (para mais acerca de compatibilidade do
@command{texi2html}, @pxref{@command{texi2html}}). No entanto, @code{texi2any}
é uma reimplementação completa: ela constrói uma representação baseada em
árvore do documento de entrada para todas as estruturas de retaguarda
trabalharem.

@cindex Testes de linguagem do Texinfo
@cindex Testes, da linguagem  do Texinfo
Testes extensivos da linguagem foram desenvolvidos ao mesmo tempo que
@command{texi2any}; nós apelamos a qualquer um(a) pensando em escrever um
programa para analisar a entrada do Texinfo para, pelo menos, fazer uso desses
testes.

@cindex Exemplos de uso do @command{texi2any}
@findex Texinfo::Parser module
O script envolucrador @command{texi2html} (@pxref{@command{texi2html}}) fornece
um exemplo muito simples de chamada do @command{texi2any} a partir de um script
de shell; ele está em @file{util/texi2html} nos fontes do Texinfo. Mais
consequentemente, @command{texi-elements-by-size} é um script Perl de exemplo
usando a interface do módulo @code{Texinfo::Parser}; ele também está no
diretório @file{util} do fonte. (A funcionalidade dele também pode ser útil
para autores(as); @pxref{texi-elements-by-size}).

@cindex Futuro das implementações do Texinfo
Com o lançamento do @command{texi2any} como a implementação de referência, o
desenvolvimento tanto da implementação C do @command{makeinfo} quanto do
@command{texi2html} foi interrompido. Daqui para frente, nós pedimos para
os(as) autores(as) de documentos do Texinfo que usem somente
@command{texi2any}.


@node Invocando @command{texi2any}
@section Invocando @command{texi2any}/@command{makeinfo} a partir de um Shell

@anchor{Invocando makeinfo}
@pindex makeinfo
@pindex texi2any

Para processar um arquivo do Texinfo, invoque @command{texi2any} ou
@command{makeinfo} (os dois nomes são sinônimos para o mesmo programa; nós
usaremos os nomes intercambiavelmente) seguido pelo nome do arquivo do Texinfo.
Selecione também o formato que você quer gerar com a opção apropriada de linha
de comando (padrão é Info). Assim, para criar o arquivo Info para Bison, digite
o seguinte para o shell:

@example
texi2any --info bison.texinfo
@end example

Você pode especificar mais que um nome de arquivo de entrada; cada um é
processado por vez. Se um nome de arquivo de entrada for @samp{-}, a entrada
padrão será lida.

@anchor{Opções do @command{makeinfo}}
@c anchor{opções do makeinfo}@c nome anterior, mas conflito sem distinção entre maiúsculas e minúsculas
@cindex Opções do @code{makeinfo}
@cindex Opções para @code{makeinfo}
@anchor{Opções do texi2any}
@cindex Opções do @code{texi2any}
@cindex Opções para @code{texi2any}

O programa @command{texi2any} aceita muitas opções. Talvez as mais básicas
sejam aquelas que mudam o formato da saída gerada. Por padrão,
@command{texi2any} produz Info.

Cada opção de linha de comando é ou um nome longo precedido por @samp{--} ou
uma letra precedida por @samp{-}. Você pode usar abreviações para os nomes
longos de opções, desde que elas sejam únicas.

Por exemplo, você poderia usar o seguinte comando de shell para criar um
arquivo Info para @file{bison.texinfo} no qual as linhas sejam preenchidas com
somente 68 colunas:

@example
texi2any --fill-column=68 bison.texinfo
@end example

Você pode escrever duas ou mais opções em sequência, assim:

@example
texi2any --no-split --fill-column=70 @dots{}
@end example

@noindent
(Isso manteria o arquivo Info unido como um arquivo possivelmente muito longo e
também configuraria a coluna de preenchimento para 70).

As opções são (aproximadamente em ordem alfabética):

@table @code
@item --commands-in-node-names
@opindex --commands-in-node-names
Essa opção agora não faz nada, mas permanece para compatibilidade. (Ela
costumava garantir que os comandos @@ em nomes de nós fossem expandidos por
todo o documento, especialmente @code{@@value}. Isso agora é feito por padrão).

@item --conf-dir=@var{caminho}
@opindex --conf-dir=@var{caminho}
Pospõe @var{caminho} a lista de pesquisa de diretório para encontrar arquivos
de personalização que possam ser carregados com @option{--init-file} (veja-se
abaixo). O valor @var{caminho} pode ser um diretório ou uma lista de vários
diretórios separados pelo caractere separador de caminho usual (@samp{:} em
sistemas do tipo Unix, @samp{;} no Windows).
@c @xref{Carregando Arquivos de Inicialização}.

@item --css-include=@var{arquivo}
@opindex --css-include
Ao produzir HTML, inclui literalmente o conteúdo de @var{arquivo}, que deveria
conter especificações do W3C de folhas de estilo em cascata, no bloco
@samp{<style>} da saída gerada em HTML. Se @var{arquivo} for @samp{-}, lê a
entrada padrão. @xref{CSS de HTML}.

@item --css-ref=@var{url}
@opindex --css-ref
Ao produzir HTML, adiciona uma etiqueta @samp{<link>} à saída que referencia uma
folha de estilo em cascata em @var{url}. Isso permite usar folhas de estilo
autônomas.

@item -D @var{variável}
@itemx -D '@var{variável} @var{valor}'
@opindex -D @var{variável}
Faz com que a variável @var{variável} do Texinfo seja definida. Isso é
equivalente a @code{@@set @var{variável}} no arquivo do Texinfo
(@pxref{@code{@@set @@clear @@value}}).

O argumento para a opção é sempre uma palavra para o shell; se contiver espaços
em branco internos, a primeira palavra é tomada como o nome da variável e o
restante como o valor. Por exemplo, @code{-D 'minhavariável algumvalor'} é
equivalente a @code{@@set minhavariável algumvalor}.

@item --disable-encoding
@itemx --enable-encoding
@opindex --disable-encoding
@opindex --enable-encoding
Por padrão, ou com @option{--enable-encoding}, produz caracteres acentuados e
especiais na saída Info e de texto simples baseada em
@samp{@@documentencoding}. Com @option{--disable-encoding}, transliterações
ASCII de 7 bits são produzidas. @xref{@code{@@documentencoding}} e
@ref{Inserindo Acentos}.

@item --docbook
@opindex --docbook
Gera saída Docbook (em vez de Info).

@item --document-language=@var{idioma}
@opindex --document-language
Usa @var{idioma} para traduzir palavras-chave do Texinfo que acabam no
documento de saída. O padrão é a localidade especificada pelo comando
@code{@@documentlanguage} se existir um, caso contrário, inglês
(@pxref{@code{@@documentlanguage}}).

@item --dvi
@opindex --dvi
Gera um arquivo DVI do TeX usando @command{texi2dvi}, em vez de Info
(@pxref{Saída Impressa do @command{texi2any}}).

@item --dvipdf
@opindex --dvipdf
Gera um arquivo PDF usando @command{texi2dvi --dvipdf}, em vez de Info
(@pxref{Saída Impressa do @command{texi2any}}).

@item --error-limit=@var{limite}
@itemx -e @var{limite}
@opindex --error-limit=@var{limite}
@opindex -e @var{limite}
Informa @var{limite} erros antes de abortar (supondo que continuar seria
inútil); padrão 100.

@item --fill-column=@var{largura}
@itemx -f @var{largura}
@opindex --fill-column=@var{largura}
@opindex -f @var{largura}
Especifica o número máximo de colunas em uma linha; essa é a borda direita de
uma linha. Parágrafos que estejam preenchidos estarão preenchidos com essa
largura. (Preenchimento é o processo de quebrar e conectar linhas, de forma que
as linhas tenham o mesmo comprimento ou sejam menores que o número especificado
como coluna de preenchimento. As linhas são quebradas entre palavras). O valor
padrão é 72.

@item --footnote-style=@var{estilo}
@itemx -s @var{estilo}
@opindex --footnote-style=@var{estilo}
@opindex -s @var{estilo}
Configura o estilo da nota de rodapé como @var{estilo}: ou @samp{end} para o
estilo do nó final (o padrão) ou @samp{separate} para o estilo do nó separado.
O valor configurado por essa opção substitui o valor configurado em um arquivo
do Texinfo por um comando @code{@@footnotestyle}
(@pxref{Estilos de Notas de Rodapé}).

Quando o estilo da nota de rodapé for @samp{separate}, @code{makeinfo} cria um
novo nó contendo as notas de rodapé encontradas no nó atual. Quando o estilo da
nota de rodapé for @samp{end}, @code{makeinfo} coloca as referências da nota de
rodapé no final do nó atual.

Em HTML, quando o estilo de nota de rodapé for @samp{end}, ou se a saída não
for dividida, as notas de rodapé serão colocadas no final da saída. Se
configurada como @samp{separate}, e a saída for dividida, elas serão colocadas
em um arquivo separado.

@item --force
@itemx -F
@opindex --force
@opindex -F
Normalmente, se o arquivo de entrada tiver erros, os arquivos de saída não
serão criados. Com essa opção, eles serão preservados.

@item --help
@itemx -h
@opindex --help@r{, para @command{texi2any}}
@opindex -h
Imprime uma mensagem com as opções disponíveis e o uso básico e sai com
sucesso.

@item --html
@opindex --html
Gera saída HTML (em vez de Info). Por padrão, a saída HTML é dividida em um
arquivo de saída por nó do fonte do Texinfo, e a saída dividida é escrita em um
subdiretório baseado no nome do arquivo do Info de nível superior.
@xref{Gerando HTML}.

@item -I @var{caminho}
@opindex -I @var{caminho}
Pospõe @var{caminho} na lista de pesquisa de diretório para encontrar arquivos
que estejam incluídos usando o comando @code{@@include}. Por padrão,
@code{texi2any} pesquisa somente o diretório atual. Se @var{caminho} não for
fornecido, o diretório atual será posposto. O valor de @var{caminho} pode ser
um diretório ou uma lista de vários diretórios separados pelo caractere usual
separador de caminho (@samp{:} em sistemas do tipo Unix, @samp{;} no Windows).

@item --ifdocbook
@opindex --ifdocbook
@itemx --ifhtml
@opindex --ifhtml
@itemx --ifinfo
@opindex --ifinfo
@itemx --ifplaintext
@opindex --ifplaintext
@itemx --iftex
@opindex --iftex
@itemx --ifxml
@opindex --ifxml
Para o formato fornecido, processa os comandos @samp{@@if@var{formato}} e
@samp{@@@var{formato}} e não processa @samp{@@ifnot@var{formato}},
independentemente do formato sendo gerado. Por exemplo, se @option{--iftex} for
fornecido, então os blocos @samp{@@iftex} e @samp{@@tex} serão lidos, e os
blocos @samp{@@ifnottex} serão ignorados.

@item --info
@opindex --info
Gera saída Info. Por padrão, se o arquivo de saída contiver mais que cerca de
300.000 bytes, ele será dividido em subarquivos menores, de cerca desse
tamanho. O nome do arquivo de saída, e quaisquer subarquivos, é determinado por
@code{@@setfilename} (@pxref{@code{@@setfilename}}).
@xref{Arquivos de Etiqueta e de Divisão}.

@item --init-file=@var{arquivo}
@opindex --init-file=@var{arquivo}
Carrega @var{arquivo} como código para modificar o comportamento e a saída do
manual gerado. É costumeiro usar as extensões @code{.pm} ou @code{.init} para
esses arquivos de personalização, mas isso não é obrigatório; o nome
@var{arquivo} pode ser qualquer coisa. A opção @option{--conf-dir} (veja-se
acima) pode ser usada para adicionar à lista de diretórios nos quais esses
arquivos de personalização serão pesquisados.
@c @xref{Carregando Arquivos de Iniciação}.

@item --internal-links=@var{arquivo}
@opindex --internal-links=@var{arquivo}
@cindex Links internos, de HTML
No modo HTML, produz um arquivo separado por tabulações contendo três colunas:
o link interno para um item indexado ou item no sumário; o nome do
índice (ou sumário) no qual ele ocorre; e o termo que foi indexado
ou inserido. Os itens estão na ordem natural de ordenação para o elemento
fornecido. Esse despejo pode ser útil para pós-processadores.

@item --macro-expand=@var{arquivo}
@itemx -E @var{arquivo}
@opindex --macro-expand=@var{arquivo}
@opindex -E @var{arquivo}
Gera o fonte do Texinfo, com todas as macros do Texinfo expandidas, para
@var{arquivo}. Normalmente, o resultado da expansão da macro é usado
internamente por @code{makeinfo} e então descartado.

@item --no-headers
@opindex --no-headers
@cindex Separadores de nós, omitindo com @option{--no-headers}
@cindex Gerando arquivos de texto simples com @option{--no-headers}
@cindex Menus, omitindo com @option{--no-headers}
Não inclui menus ou linhas separadoras de nós na saída gerada.

Ao gerar Info, isso é o mesmo que usar @option{--plaintext}, resultando em um
arquivo de texto simples. Além disso, @code{@@setfilename} é ignorado, e a
saída é para a saída padrão, a menos que substituída por @option{-o}. (Esse
comportamento é para retro compatibilidade).

@cindex Links de navegação, omitindo
Ao gerar HTML, e a saída for dividida, também produz links de navegação somente
no começo de cada arquivo. Se a saída não for dividida, não inclui links de
navegação no topo de cada nó. @xref{Gerando HTML}.

@item --no-ifdocbook
@opindex --no-ifdocbook
@itemx --no-ifhtml
@opindex --no-ifhtml
@itemx --no-ifinfo
@opindex --no-ifinfo
@itemx --no-ifplaintext
@opindex --no-ifplaintext
@itemx --no-iftex
@opindex --no-iftex
@itemx --no-ifxml
@opindex --no-ifxml
Para o formato fornecido, não processa os comandos @samp{@@if@var{formato}} e
@samp{@@@var{formato}} e processa @samp{@@ifnot@var{formato}},
independentemente do formato sendo gerado. Por exemplo, se @option{--no-ifhtml}
for fornecido, então os blocos @samp{@@ifhtml} e @samp{@@html} não serão lidos,
e os blocos @samp{@@ifnothtml} serão.

@item --no-node-files
@itemx --node-files
@opindex --no-node-files
@opindex --node-files
Ao gerar HTML, cria arquivos de redirecionamento para âncoras e quaisquer nós
ainda não gerados com o nome de arquivo correspondente ao nome do nó
(@pxref{Expansão Xref de Nome de Nó do HTML}). Isso torna possível que
referências entre manuais em nível de seção e de capítulo sejam bem-sucedidas
(@pxref{Configuração do Xref do HTML}).

Se a saída for dividida, isso é habilitado por padrão. Se a saída não for
dividida, @option{--node-files} habilita a criação dos arquivos de
redirecionamento, além do arquivo de saída principal monolítico.
@option{--no-node-files} suprime a criação de arquivos de redirecionamento em
qualquer caso. Essa opção não tem efeito com nenhum formato de saída diferente
de HTML@. @xref{Gerando HTML}.

@item --no-number-footnotes
@opindex --no-number-footnotes
Suprime numeração automática de notas de rodapé. Por padrão, as notas de rodapé
são numeradas sequencialmente dentro de um nó, ou seja, o número atual da nota
de rodapé é reconfigurado para 1 no início de cada nó.

@item --no-number-sections
@itemx --number-sections
@opindex --no-number-sections
@opindex --number-sections
Com @option{--number_sections} (o padrão), gera números de capítulos, de seções
e de anexos como em manuais impressos. Isso funciona somente com manuais
estruturados hierarquicamente. Você deveria especificar
@code{--no-number-sections} se teu manual não for normalmente estruturado.

@item --no-pointer-validate
@itemx --no-validate
@opindex --no-pointer-validate
@opindex --no-validate
@cindex Validação de ponteiro, suprimindo a partir da linha de comando
Suprime a fase de validação de ponteiro de @code{makeinfo}---uma coisa perigosa
de se fazer. Isso também pode ser feito com o comando @code{@@novalidate}
(@pxref{Use @TeX{}}). Normalmente, verificações de consistência são feitas para
garantir que referências cruzadas possam ser resolvidas, etc.
@xref{Validação de Ponteiro}.

@item --no-warn
@opindex --no-warn
Suprime mensagens de aviso (mas não mensagens de erro).

@item --output=@var{arquivo}
@itemx -o @var{arquivo}
@opindex --output=@var{arquivo}
@opindex -o @var{arquivo}
Especifica que a saída deveria ser direcionada para @var{arquivo}. Isso
substitui qualquer nome de arquivo especificado em um comando
@code{@@setfilename} encontrado no fonte do Texinfo. Se nem
@code{@@setfilename} nem essa opção forem especificadas, o nome do arquivo de
entrada será usado para determinar o nome de saída.
@xref{@code{@@setfilename}}.

Se @var{arquivo} for @samp{-}, a saída vai para a saída padrão e
@samp{--no-split} será implícito.

Se @var{arquivo} for um diretório ou terminar com @samp{/}, as regras usuais
serão usadas para determinar o nome do arquivo de saída (ou seja, usar
@code{@@setfilename} ou o nome do arquivo de entrada), mas os arquivos serão
escritos no diretório @var{arquivo}. Por exemplo, @samp{makeinfo -o bar/
foo.texi}, com ou sem @option{--no-split}, escreverá @file{bar/foo.info}, e
possivelmente outros arquivos, sob @file{bar/}.

Ao gerar HTML e a saída for dividida, @var{arquivo} é usado como o nome para o
diretório no qual todos os arquivos são escritos. Por exemplo, @samp{makeinfo
-o bar --html foo.texi} escreverá @file{bar/index.html}, entre outros arquivos.

@item --output-indent=@var{valor}
@opindex --outputindent
Essa opção agora não faz nada, mas permanece para compatibilidade. (Ela
costumava alterar o recuo na saída XML/Docbook).

@item -P @var{caminho}
@opindex -P @var{caminho}
Antepõe @var{caminho} na lista de pesquisa de diretório para @code{@@include}.
Se @var{caminho} não for fornecido, o diretório atual será anteposto. Veja-se
@samp{-I} acima.

@item --paragraph-indent=@var{recuo}
@itemx -p @var{recuo}
@opindex --paragraph-indent=@var{recuo}
@opindex -p @var{recuo}
Configura o estilo de recuo do parágrafo para @var{recuo}. O valor configurado
por essa opção substitui o valor configurado em um arquivo do Texinfo por um
comando @code{@@paragraphindent} (@pxref{@code{@@paragraphindent}}). O valor de
@var{recuo} é interpretado conforme segue:

@table @asis
@item @samp{asis}
Preserva qualquer recuo existente (ou falta dele) no início dos parágrafos.

@item @samp{0} ou @samp{none}
Deleta qualquer recuo existente.

@item @var{número}
Recua cada parágrafo com @var{número} espaços.
@end table

O padrão é o de recuar dois espaços, exceto para parágrafos seguinte a um
título de seção, os quais não são recuados.

@item --pdf
@opindex --pdf
Gera um arquivo PDF usando @command{texi2dvi --pdf}, em vez de Info
(@pxref{Saída Impressa do @command{texi2any}}).

@item --plaintext
@opindex --plaintext
@cindex Saída de texto simples com @option{--plaintext}
@cindex Saída de texto ASCII com @option{--plaintext}
@cindex Gerando arquivos de texto simples com @option{--plaintext}
@cindex Separadores de nós, omitindo com @option{--plaintext}
@cindex Menus, omitindo com @option{--plaintext}
@cindex Arquivo @file{INSTALL}, gerando
Produz um arquivo de texto simples (em vez de Info): não inclui menus ou linhas
separadoras de nós na saída. Isso resulta em um arquivo de texto simples direto
que você pode (por exemplo) enviar em mensagem eletrônica sem complicações, ou
incluir em uma distribuição (por exemplo, um arquivo @file{INSTALL}).

Com essa opção, @code{@@setfilename} é ignorado e a saída vai para a saída
padrão por padrão; isso pode ser substituído por @option{-o}.

@item --ps
@opindex --ps
Gera um arquivo PostScript usando @command{texi2dvi --ps}, em vez de Info
(@pxref{Saída Impressa do @command{texi2any}}).

@item --set-customization-variable @var{variável}=@var{valor}
@itemx -c @var{variável}=@var{valor}
@opindex --set-customization-variable @var{variável}=@var{valor}
@opindex -c @var{variável}=@var{valor}
Configura a variável de personalização @var{variável} para @var{valor}. O
@code{=} é opcional, mas tanto @var{variável} quanto @var{valor} precisam ser
aspados para o shell, conforme necessário, de forma que o resultado seja uma
palavra. Muitos aspectos do comportamento e da saída de @command{texi2any}
podem ser controlados por variáveis de personalização, além do que
pode ser configurado no documento por comandos @@ e com outras chaves de linha
de comando. @xref{Variáveis de Personalização}.

@item --split=@var{como}
@itemx --no-split
@opindex --split=@var{como}
@opindex --no-split
@cindex Divisão de arquivos de saída
@cindex Divisão do arquivo de saída
@anchor{Dividindo Saída}
@c
Ao gerar Info, por padrão, arquivos de saída grandes são divididos em
subarquivos menores, de aproximadamente 300k bytes. Ao gerar HTML, por padrão,
cada arquivo de saída contém um nó (@pxref{Gerando HTML}). @option{--no-split}
suprime essa divisão da saída gerada.

Alternativamente, @option{--split=@var{como}} pode ser usada para especificar
em qual nível a saída HTML deveria ser dividida. Os valores possíveis para
@var{como} são:

@table @samp
@item chapter
A saída é dividida em @code{@@chapter} e outros comandos @@ de seccionamento
nesse nível (@code{@@appendix}, etc.).

@item section
A saída é dividida em @code{@@section} e similares.

@item node
A saída é dividida em cada nó. Esse é o padrão.
@end table

A saída de texto simples pode ser dividida similarmente ao HTML@. Isso pode ser
útil para extrair seções a partir de um documento do Texinfo e torná-las
disponíveis como arquivos separados.

@item --split-size=@var{número}
@opindex --split-size=@var{número}
Mantém os arquivos Info com no máximo @var{número} caracteres, se possível; o
padrão é 300.000. (Entretanto, um nó nunca será dividido entre os arquivos
Info).

@item --transliterate-file-names
@opindex --transliterate-file-names
Habilita transliteração de caracteres de 8 bits em nomes de nós para o
propósito de criação de nomes de arquivo.
@xref{Expansão de Caracteres de 8 bits do Xref do HTML}.

@item -U @var{variável}
Causa @var{variável} ser indefinida. Isso é equivalente a @code{@@clear
@var{variável}} no arquivo do Texinfo (@pxref{@code{@@set @@clear @@value}}).

@item --verbose
@opindex --verbose
Causa @code{makeinfo} exibir mensagens dizendo o que está fazendo. Normalmente,
@code{makeinfo} somente emite mensagens se existirem erros ou avisos.

@item --version
@itemx -V
@opindex --version@r{, para @command{texi2any}}
@opindex -V
Imprime o número da versão, então sai com sucesso.

@item --Xopt @var{string}
@opindex --Xopt @var{string}
Passa @var{string} (uma palavra do shell) para @command{texi2dvi}; pode ser
repetida (@pxref{Saída Impressa do @command{texi2any}}).

@item --xml
@opindex --xml
Gera saída XML do Texinfo (em vez de Info).
@end table

@vindex TEXINFO_OUTPUT_FORMAT
@cindex Variável de ambiente @code{TEXINFO_OUTPUT_FORMAT}
@command{makeinfo} também lê a variável de ambiente @env{TEXINFO_OUTPUT_FORMAT}
para determinar o formato de saída, se não substituída por uma opção de linha
de comando. O valor deveria ser um de:

@example
docbook  dvi  dvipdf  html  info  pdf  plaintext  ps  xml
@end example

Se não configurada ou, de outra forma, especificada, a saída Info será o
padrão.

A variável de personalização de mesmo nome também é lida; se configurada, isso
substitui uma configuração de variável de ambiente, porém não uma opção de
linha de comando. @xref{Variáveis e Opções de Personalização}.


@node Saída Impressa do @command{texi2any}
@section Saída Impressa do @command{texi2any}

@cindex Saída impressa, por meio do @command{texi2any}
@cindex Saída, impressa por meio do @command{texi2any}

Para justificar o nome Texinfo-to-@emph{any}, @command{texi2any} tem suporte
básico para criar saída impressa nos vários formatos: DVI, PDF e PostScript, do
@TeX{}. Isso é feito pelo método simples de executar o programa
@command{texi2dvi} quando esses formatos de saída são solicitados, depois de
verificar a validade da entrada para dar para os(as) usuários(as) o benefício
da verificação de erros do @command{texi2any}. Se você não quiser essa
verificação de erros, talvez porque teu manual faça truques avançados do @TeX{}
junto com o @file{texinfo.tex}, basta invocar o @command{texi2dvi} diretamente.

As opções de formato de saída para isso são @option{--dvi}, @option{--dvipdf},
@option{--pdf} e @option{--ps}. @xref{Formatar com @command{texi2dvi}}, para
mais detalhes acerca dessas opções e da operação geral do @command{texi2dvi}.
Além disso, as opções @option{--verbose}, @option{--silent} e @option{--quiet}
são passadas adiante se especificadas; as opções @option{-I} e @option{-o} são,
da mesma maneira, passadas adiante com os argumentos delas, e @option{--debug}
sem o argumento dela.

A única opção restante que está relacionada à invocação do @command{texi2dvi} é
@option{--Xopt}. Aqui, apenas o argumento é passado adiante e várias opções
@option{--Xopt} se acumulam. Isso fornece uma maneira de construir uma linha de
comando arbitrária para @command{texi2dvi}. Por exemplo, executando

@example
texi2any --Xopt -t --Xopt @@a4paper --pdf foo.texi
@end example

@noindent é equivalente a executar

@example
texi2dvi -t @@a4paper --pdf foo.texi
@end example

@noindent exceto pela verificação de validade.

Embora alguém possa desejar que outras opções para @command{texi2any} tivessem
efeito, elas não tem. Por exemplo, executar @samp{texi2any --no-number-sections
--dvi foo.texi} ainda resulta em um arquivo DVI com seções numeradas. (Talvez
isso pudesse ser melhorado no futuro, se solicitações forem recebidas).

O nome real do comando que é invocado é especificado pela variável de
personalização @code{TEXI2DVI}
(@pxref{Outras Variáveis de Personalização}). Como você pode imaginar, o padrão
é @samp{texi2dvi}.

O próprio @command{texi2any} não gera nenhuma saída normal quando invoca o
@command{texi2dvi}, somente mensagens de diagnóstico.


@node Validação de Ponteiro
@section Validação de Ponteiro
@cindex Validação de ponteiro com @code{makeinfo}
@cindex Validação de ponteiros

Se você não suprimir a validação de ponteiro com a opção @samp{--no-validate}
ou com o comando @code{@@novalidate} no arquivo fonte (@pxref{Use @TeX{}}),
@code{makeinfo} verificará a validade do arquivo do Texinfo.

A maioria das verificações de validação é diferente, dependendo de se os
ponteiros de nó são determinados explicitamente ou implicitamente. Com
ponteiros de nó explícitos, aqui está a lista do que é verificado:

@enumerate
@item
Se uma referência de nó `Próximo', `Anterior' ou `Acima' for uma referência
para um nó no arquivo atual e não for uma referência externa, como para
@file{(diretório)}, então o nó referenciado precisa existir.

@item
Cada nó, exceto o nó `Top', precisa ter um ponteiro `Up'.

@item
O nó referenciado por um ponteiro `Up' precisa ele próprio referenciar o nó
atual por meio de um item de menu, a menos que o nó referenciado por `Up' tenha
o formato @samp{(@var{arquivo})}.
@end enumerate

Com ponteiros de nó implícitos, o erro acima não pode ocorrer, como tal. (Que é
uma das principais razões pelas quais nós recomendamos usar esse recurso do
@code{makeinfo}, e não especificar quaisquer ponteiros de nó você mesmo(a)).

Em vez disso, @code{makeinfo} verifica se a árvore construída a partir dos
menus do documento corresponde à árvore construída a partir dos comandos de
seccionamento. Por exemplo, se um menu de nível de capítulo mencionar nós
@var{n1} e @var{n2}, nessa ordem, nós @var{n1} e @var{n2} precisam ser
associados com comandos @code{@@section} no capítulo.

Finalmente, com ponteiros de nó explícitos e implícitos, @code{makeinfo}
verifica se cada nó, exceto o nó `Top', é referenciado em um menu.


@node Variáveis de Personalização
@section Variáveis de Personalização

@quotation Aviso
Esses nomes e significados de variáveis de personalização podem mudar em
qualquer lançamento do Texinfo. Nós sempre tentamos evitar mudanças
incompatíveis, mas não podemos prometer absolutamente, pois as necessidades
mudam com o tempo.
@end quotation

Muitos aspectos do comportamento e da saída do @command{texi2any} podem ser
modificados modificando as assim chamadas @dfn{variáveis de personalização}.
Elas se enquadram em algumas categorias gerais:

@itemize @bullet
@item
Aquelas associadas com comandos @@; por exemplo, @code{@@documentlanguage}.

@item
Aquelas associadas com opções de linha de comando; por exemplo, a variável de
personalização @code{SPLIT} está associada com a opção de linha de comando
@option{--split}, e @code{TEXINFO_OUTPUT_FORMAT} permite especificar o formato
de saída.

@item
Aquelas associadas com personalização da saída HTML.

@item
Outras variáveis ad hoc.
@end itemize

Variáveis de personalização podem ser configuradas na linha de comando usando
@code{--set-customization-variable '@var{variável} @var{valor}'} (aspando o par
variável/valor para o shell) ou @code{--set-customization-variable
@var{variável}=@var{valor}} (usando @code{=}). Um @var{valor} especial é
@samp{undef}, que configura a variável para esse valor Perl especial
``undefined''.

As seções abaixo fornecem os detalhes para cada uma delas.

@menu
* Comandos: Variáveis de Personalização para Comandos @@.
* Opções: Variáveis e Opções de Personalização.
* HTML: Variáveis de Personalização de HTML.
* Outras: Outras Variáveis de Personalização.
@end menu


@node Variáveis de Personalização para Comandos @@
@subsection Variáveis de Personalização para Comandos @@

@cindex Variáveis de personalização para comandos @@
@cindex Comandos @@, variáveis de personalização para

Cada um dos seguintes comandos @@ tem uma variável de personalização associada
com o mesmo nome (menos o @code{@@} inicial):

@smallexample
@@allowcodebreaks @@clickstyle @@codequotebacktick
@@codequoteundirected @@contents @@deftypefnnewline
@@documentdescription @@documentencoding @@documentlanguage
@@evenfooting   @@evenfootingmarks
@@evenheading   @@evenheadingmarks
@@everyfooting  @@everyfootingmarks
@@everyheading  @@everyheadingmarks
@@exampleindent @@firstparagraphindent
@@fonttextsize  @@footnotestyle @@frenchspacing @@headings
@@kbdinputstyle @@novalidate
@@oddfooting    @@oddfootingmarks
@@oddheading    @@oddheadingmarks
@@pagesizes     @@paragraphindent
@@setchapternewpage @@setcontentsaftertitlepage
@@setfilename   @@setshortcontentsaftertitlepage @@shortcontents
@@urefbreakstyle @@validatemenus @@xrefautomaticsectiontitle
@end smallexample

Configurar uma tal variável de personalização para um valor  @samp{foo} é
semelhante a executar @code{@@@var{comando} foo}. Não é exatamente o mesmo, no
entanto, já que quaisquer efeitos colaterais da análise do fonte do Texinfo não
são refeitos. Além disso, algumas variáveis não recebem código do Texinfo ao
gerar formatos específicos, mas um argumento que já está formatado. Esse é o
caso, por exemplo, para HTML para @code{documentdescription}.


@node Variáveis e Opções de Personalização
@subsection Variáveis e Opções de Personalização

@cindex Variáveis de personalização para opções
@cindex Opções, variáveis de personalização para

A tabela seguinte fornece as variáveis de personalização associadas com algumas
opções de linha de comando. @xref{Invocando @command{texi2any}}, para o
significado das opções.

@multitable @columnfractions 0.5 0.5
@headitem Opção @tab Variável
@vindex ENABLE_ENCODING
@item @option{--enable-encoding}   @tab @code{ENABLE_ENCODING}
@vindex documentlanguage
@item @option{--document-language} @tab @code{documentlanguage}
@vindex ERROR_LIMIT
@item @option{--error-limit}       @tab @code{ERROR_LIMIT}
@vindex FILLCOLUMN
@item @option{--fill-column}       @tab @code{FILLCOLUMN}
@vindex footnotestyle
@item @option{--footnote-style}    @tab @code{footnotestyle}
@vindex FORCE
@item @option{--force}             @tab @code{FORCE}
@vindex INTERNAL_LINKS
@item @option{--internal-links}    @tab @code{INTERNAL_LINKS}
@vindex MACRO_EXPAND
@item @option{--macro-expand}      @tab @code{MACRO_EXPAND}
@vindex HEADERS
@vindex SHOW_MENU
@item @option{--headers}           @tab @code{HEADERS}, @code{SHOW_MENU}
@vindex NO_WARN
@item @option{--no-warn}           @tab @code{NO_WARN}
@vindex novalidate
@item @option{--no-validate}       @tab @code{novalidate}
@vindex NUMBER_FOOTNOTES
@item @option{--number-footnotes}  @tab @code{NUMBER_FOOTNOTES}
@vindex NUMBER_SECTIONS
@item @option{--number-sections}   @tab @code{NUMBER_SECTIONS}
@vindex NODE_FILES
@item @option{--node-files}        @tab @code{NODE_FILES}
@vindex OUT
@vindex OUTFILE
@vindex SUBDIR
@item @option{--output}            @tab @code{OUT}, @code{OUTFILE},
                                        @code{SUBDIR}
@vindex paragraphindent
@item @option{--paragraph-indent}  @tab @code{paragraphindent}
@vindex SILENT
@item @option{--silent}            @tab @code{SILENT}
@vindex SPLIT
@item @option{--split}             @tab @code{SPLIT}
@vindex SPLIT_SIZE
@item @option{--split-size}        @tab @code{SPLIT_SIZE}
@vindex TRANSLITERATE_FILE_NAMES
@item @option{--transliterate-file-names} @tab @code{TRANSLITERATE_FILE_NAMES}
@vindex VERBOSE
@item @option{--verbose}           @tab @code{VERBOSE}
@end multitable

Configurar uma tal variável de personalização para um valor @samp{foo} é
essencialmente o mesmo que especificar o @code{--@var{opção}=foo} se a opção
receber um argumento, ou @code{--@var{opção}} se não.

@vindex TEXINFO_OUTPUT_FORMAT
Além disso, a variável de personalização @code{TEXINFO_OUTPUT_FORMAT} permite
especificar o que @code{makeinfo} produz, seja um dos formatos usuais de saída
que podem ser especificados com opções, ou vários outros formatos:

@ftable @samp
@item docbook
@itemx dvi
@itemx dvipdf
@itemx html
@itemx info
@itemx pdf
@itemx plaintext
@itemx ps
@itemx xml
Esses correspondem às opções de linha de comando (e valores da variável de
ambiente @code{TEXINFO_OUTPUT_FORMAT}) do mesmo nome.
@xref{Invocando @command{texi2any}}.

@item debugcount
Em vez de gerar um formato regular de saída, emite a contagem de bytes e de
linhas obtidas ao converter para Info e outras informações.

@item debugtree
@cindex representação em árvore, para depuração
@cindex depurando documento, com representação em árvore
Em vez de gerar um formato regular de saída, produz uma representação de texto
da árvore obtida pela análise do documento de entrada do Texinfo.

@item parse
Faz somente análise do fonte do Texinfo; não existe saída gerada.

@item plaintexinfo
Produz o fonte do Texinfo com todas as macros, @code{@@include} e
@code{@@value@{@}} expandidas. Isso é similar a configurar
@option{--macro-expand}, mas em vez de ser produzido em adição à conversão
normal, a saída de Texinfo é a saída principal.

@item rawtext
@cindex saída de texto bruto
Produz texto bruto, com formatação mínima. Por exemplo, notas de rodapé são
ignoradas e não existe preenchimento de parágrafo. Isso é usado pelo analisador
para nomes de arquivo e texto de direitos de cópia em comentários HTML, por
exemplo.

@item structure
Faz somente análise do fonte do Texinfo e determinação da estrutura do
documento; não existe saída gerada.

@item texinfosxml
@cindex Saída SXML
@cindex Expressões S, formato de saída
Produz o documento na representação TexinfoSXML, uma sintaxe para escrever
dados XML usando expressões S da Lisp.

@item textcontent
@cindex verificação ortográfica
@cindex contagem de palavras
@pindex detexinfo
@cindex comandos Texinfo de despojamento
Produz somente o conteúdo do texto, despojado de comandos; isso é útil para
verificação ortográfica ou contagem de palavras, por exemplo. A script trivial
@code{detexinfo} configurando isso está no diretório @file{util} do fonte do
Texinfo como um exemplo. É uma linha:

@example
exec texi2any -c TEXINPUT_OUTPUT_FORMAT=conteúdotexto "$@@"
@end example
@end ftable


@node Variáveis de Personalização de HTML
@subsection Variáveis de Personalização de HTML

Essa tabela fornece as variáveis de personalização que se aplicam somente à
saída HTML. Algumas outras variáveis de personalização se aplicam tanto ao HTML
quanto a outros formatos de saída; essas são fornecidas na próxima seção.

@vtable @code
@item AVOID_MENU_REDUNDANCY
Para HTML@. Se configurada, e a entrada do menu e a descrição do menu forem as
mesmas, então não imprime a descrição do menu; padrão falso.

@item AFTER_BODY_OPEN
Para HTML@. Se configurada, o texto correspondente aparecerá no início de cada
arquivo HTML; padrão desconfigurada.

@item AFTER_ABOUT
Para HTML, quando um elemento About é produzido. Se configurada, o texto
correspondente aparecerá no final do elemento About; padrão desconfigurada.

@item AFTER_OVERVIEW
@itemx AFTER_TOC_LINES
Para HTML@. Se configurada, o texto correspondente é produzido depois do tabela
curta de conteúdo para @code{AFTER_OVERVIEW} e depois do sumário
para @code{AFTER_TOC_LINES}; caso contrário, uma string padrão é usada. No
momento da escrita, um elemento @code{</div>} é fechado.

Em geral, você deveria configurar @code{BEFORE_OVERVIEW} se
@code{AFTER_OVERVIEW} estiver configurada, e deveria configurar
@code{BEFORE_TOC_LINES} se @code{AFTER_TOC_LINES} estiver configurada.


@item BASEFILENAME_LENGTH
Para HTML@. O comprimento máximo dos nomes de arquivo base; padrão 245. Mudar
isso tornaria referências manuais cruzadas para esses nomes longos de nó
inválidas (@pxref{Fundamentos do Link Xref do HTML}).

@item BEFORE_OVERVIEW
@itemx BEFORE_TOC_LINES
Para HTML@. Se configurada, o texto correspondente é produzido antes do tabela
curta de conteúdo para @code{BEFORE_OVERVIEW} e antes do sumário
para @code{BEFORE_TOC_LINES}, caso contrário, uma string padrão é usada. No
momento da escrita, um elemento @code{<div ...>} é aberto.

Em geral, você deveria configurar @code{AFTER_OVERVIEW} se
@code{BEFORE_OVERVIEW} estiver configurada, e deveria configurar
@code{AFTER_TOC_LINES} se @code{BEFORE_TOC_LINES} estiver configurada.


@item BIG_RULE
Para HTML@. Regra usada depois e antes do elemento superior e antes de
elementos especiais, mas não para rodapés e cabeçalhos; padrão @code{<hr>}.

@item BODYTEXT
@cindex Texto de @code{<body>}, personalizando
@opindex lang@r{, atributo HTML}
Para HTML, o texto que aparece em @code{<body>}. Por padrão, configura o
atributo @code{lang} do HTML para o idioma do documento
(@pxref{@code{@@documentlanguage}}).

@item CASE_INSENSITIVE_FILENAMES
Para HTML@. Constrói nomes de arquivos de saída como se o sistema de arquivos
não diferenciasse maiúsculas de minúsculas (@pxref{Divisão de HTML}); padrão
falso.

@item CHAPTER_HEADER_LEVEL
Para HTML@. Nível de formatação de cabeçalho usado para comandos de
seccionamento de nível de capítulo; padrão @samp{2}.

@item CHECK_HTMLXREF
Para HTML@. Verifica se os manuais que são alvo de referências cruzadas
externas (@pxref{Quatro e Cinco Argumentos}) estão presentes em
@file{htmlxref.cnf} (@pxref{Configuração do Xref do HTML}); padrão falso.

@item COMPLEX_FORMAT_IN_TABLE
Para HTML@. Se configurado, usa tabelas para recuo de formatos complexos;
padrão falso.

@item CSS_LINES
Para HTML@. Saída CSS, determinada automaticamente por padrão
(@pxref{CSS de HTML}).

@item DATE_IN_HEADER
Para HTML@. Coloca a data de geração do documento no cabeçalho; desligada por
padrão.

@item DEF_TABLE
Para HTML@. Se configurada, uma construção @code{<table>} para @code{@@deffn} e
comandos @@ semelhantes é usada (parecendo mais com a saída do @TeX{}), em vez
de listas de definições; padrão falso.

@item DEFAULT_RULE
Para HTML@. Regra usada entre elementos, exceto antes e depois do elemento
superior, e antes de elementos especiais, e para rodapés e cabeçalhos; padrão
@code{<hr>}.

@item DO_ABOUT
Para HTML@. Se configurada para 0, nunca faz um elemento especial About; se
configurada para 1, sempre faz um elemento especial About; padrão 0.
@c @xref{Elementos Definidos de Saída}.

@item EXTERNAL_DIR
Para HTML@. Diretório base para manuais externos; padrão nenhum. É melhor usar
o mecanismo geral de referência cruzada externa
(@pxref{Configuração do Xref do HTML}) que essa variável.

@item EXTRA_HEAD
Para HTML@. Texto adicional aparecendo dentro de @code{<head>}; padrão
desconfigurada.

@item FOOTNOTE_END_HEADER_LEVEL
Para HTML@. Nível de formatação de cabeçalho usado para o cabeçalho de notas de
rodapé com o estilo de notas de rodapé `end'; padrão @samp{4}.
@xref{Estilos de Notas de Rodapé}.

@item FOOTNOTE_SEPARATE_HEADER_LEVEL
Para HTML@. Nível de formatação de cabeçalho usado para o cabeçalho de notas de
rodapé com o estilo de notas de rodapé `separate'; padrão @samp{4}.
@xref{Estilos de Notas de Rodapé}.

@item FRAMES
Para HTML@. Se configurada, um arquivo descrevendo o esquema do quadro é
gerado, junto com um arquivo com a tabela curta de conteúdo; padrão falso.

@item FRAMESET_DOCTYPE
Para HTML@. O mesmo que DOCTYPE, mas para o arquivo contendo a descrição do
quadro.

@item HEADER_IN_TABLE
Para HTML@. Usa tabelas para formatação de cabeçalho em vez de um simples
elemento @code{<div>}; padrão falso.

@item ICONS
Para HTML@. Usa ícones para o painel de navegação; padrão falso.

@item IMAGE_LINK_PREFIX
Para HTML@. Se configurada, o valor associado é anteposto nos links do arquivo
de imagem; padrão desconfigurada.

@item INLINE_CONTENTS
Para HTML@. Se configurada, produz o conteúdo onde @code{@@contents} e comandos
@@- similares estão localizados; padrão verdadeiro. Isso é ignorado se
@code{@@set*contentsaftertitlepage} estiver configurado (@pxref{Conteúdo}).

@item INLINE_CSS_STYLE
Para HTML@. Coloca CSS diretamente em elementos HTML em vez de no início da
saída; padrão falso.

@item KEEP_TOP_EXTERNAL_REF
Para HTML@. Se configurada, não ignora @samp{Top} como o primeiro argumento
para uma referência externa a um manual, como é feito por padrão.
@xref{Referenciando Um Manual Como Um Todo}.

@item L2H
Para HTML@. Se configurada, @command{latex2html} é usado para converter seções
@code{@@math} e @code{@@tex}; padrão falso. Melhor usada com @option{--iftex}.

@item L2H_CLEAN
(Relevante somente se @code{L2H} estiver configurada). Se configurada, os
arquivos intermediários gerados em relação ao @command{latex2html} serão
removidos; padrão verdadeiro.

@item L2H_FILE
(Relevante somente se @code{L2H} estiver configurada). Se configurada, o
arquivo fornecido será usado como arquivo de iniciação do @command{latex2html};
padrão desconfigurada.

@item L2H_HTML_VERSION
(Relevante somente se @code{L2H} estiver configurada). A versão HTML usada na
chamada @command{latex2html}; padrão desconfigurada.

@item L2H_L2H
(Relevante somente se @code{L2H} estiver configurada). O programa invocado como
@command{latex2html}; padrão é @code{latex2html}.

@item L2H_SKIP
(Relevante somente se @code{L2H} estiver configurada). Se configurada para um
valor verdadeiro, a chamada real para @command{latex2html} é ignorada; o
conteúdo gerado anteriormente é reusado. Se configurada para 0, o cache não é
usado. Se configurada para @samp{undef}, o cache é usado para tantos fragmentos
do @TeX{} quanto possível e para qualquer restante o comando é executado. O
padrão é @samp{undef}.

@item L2H_TMP
(Relevante somente se @code{L2H} estiver configurada). Configura o diretório
usado para arquivos temporários. Nenhum dos componentes de nome de arquivo
nesse nome de diretório pode começar com @samp{.}; caso contrário,
@command{latex2html} falhará (por causa de @command{dvips}). O padrão é a
string vazia, o que significa o diretório atual.

@item MAX_HEADER_LEVEL
Para HTML@. Nível máximo de formatação de cabeçalho usado (números de nível de
formatação de cabeçalho mais altos correspondem a níveis de seccionamento mais
baixos); padrão @samp{4}.

@item MENU_SYMBOL
Para HTML@. Símbolo usado na frente de entradas de menu quando nomes de nós são
usados para formatação de entradas de menu; padrão @samp{&bull;}.

@item MONOLITHIC
Para HTML@. Produz somente um arquivo incluindo o sumário.
Configurada por padrão, mas relevante somente quando a saída não for dividida.

@item NO_CSS
Para HTML@. Não usa CSS; padrão falso. @xref{CSS de HTML}.

@item NODE_FILE_EXTENSION
Para HTML@. Extensão para arquivos de nó se @code{NODE_FILENAMES} estiver
configurada; padrão @samp{html}.

@item PRE_ABOUT
Para HTML, quando um elemento About é produzido. Se configurada para uma string
de texto, esse texto aparecerá no início do elemento About. Se configurada para
uma referência sobre uma sub rotina, o resultado da chamada da suberitínea
aparecerá no início do elemento About. Se não configurada (o padrão), o texto
padrão é usado.

@item PRE_BODY_CLOSE
Para HTML@. Se configurada, o texto fornecido aparecerá no rodapé de cada
arquivo HTML; padrão desconfigurada.

@item PROGRAM_NAME_IN_FOOTER
Para HTML@. Se configurada, produz o nome do programa e informações diversas
relacionadas nos rodapés da página; padrão falso.

@item SHORTEXTN
Para HTML@. Se configurada, usa @samp{.htm} como extensão; padrão falso.

@item SHOW_TITLE
Para HTML@. Se configurada, produz o título no início do documento; padrão
verdadeiro.

@item SIMPLE_MENU
Para HTML@. Se configurada, usa um estilo pré-formatado simples para o menu, em
vez de dividir as diferentes partes do menu; padrão falso.
@xref{Partes de Menu}.

@item TOC_LINKS
Para HTML@. Se configurada, links oriundos de títulos para entradas da tabela
de conteúdo são criados; padrão falso.

@item TOP_FILE
Esse nome de arquivo pode ser usado para o arquivo de nível superior. A
extensão é configurada apropriadamente, se necessário. Isso é usado para
substituir o padrão e, em geral, é levado em conta somente quando a saída é
dividida e para HTML@.

@item TOP_NODE_FILE
Para HTML@. Nome do arquivo usado para o nó Top, se @code{NODE_FILENAMES}
estiver configurada; padrão é @code{index}.

@item TOP_NODE_FILE_TARGET
Para HTML@. Nome do arquivo usado para o nó Top em referências cruzadas; padrão
é @code{index}.

@item TOP_NODE_UP_URL
Para HTML@. Uma URL usada para referências @code{(dir)}; o padrão é
@code{undef}, significando que as regras normais se aplicam, tipicamente
levando a um link para @samp{dir.html} originário de uma referência implícita
ou explícita para @samp{(dir)} (@pxref{Xref de HTML}). Para mais acerca dos
ponteiros do nó Top, @pxref{Primeiro Nó}. Para substituir o ponteiro Up em
outros formatos, veja-se @code{TOP_NODE_UP} em
@ref{Outras Variáveis de Personalização}.

@item USE_ACCESSKEY
@cindex @code{accesskey}, variável de personalização para
Para HTML@. Usa @code{accesskey} em referências cruzadas; padrão verdadeiro.

@item USE_ISO
Para HTML@. Usa entidades para caracteres duplicados de aspas simples
(@pxref{Inserindo Aspas}), e @samp{---} e @samp{--} (@pxref{Convenções});
padrão verdadeiro.

@item USE_LINKS
@cindex Etiqueta @code{<link>} do HTML, em @code{<head>}
@cindex Etiqueta @code{<head>} do HTML, e @code{<link>}
Para HTML@. Gera elementos @code{<link>} na saída @code{<head>} do HTML; padrão
verdadeiro.

@item USE_REL_REV
Para HTML@. Usa @code{rel} em referências cruzadas; padrão verdadeiro.

@item VERTICAL_HEAD_NAVIGATION
Para HTML@. Se configurada, um painel vertical de navegação é usado; padrão
falso.

@item WORDS_IN_PAGE
@cindex Painel de navegação, parte inferior da página
Para HTML, com saída dividida em nós. Especifica o comprimento mínimo
aproximado da página em que um painel de navegação é colocado na parte inferior
de uma página. Para evitar sempre ter os botões de navegação na parte inferior
de uma página, configure isso para um número suficientemente grande. O padrão é
300.

@item XREF_USE_FLOAT_LABEL
Para HTML@. Se configurada, para o nome do flutuador em referências cruzadas,
usa o rótulo do flutuador em vez do tipo seguido pelo número do flutuador
(@pxref{@code{@@float}}). O padrão é desligado.

@item XREF_USE_NODE_NAME_ARG
Para HTML@. Relevante somente para comandos de referência cruzada sem nome de
referência cruzada (segundo argumento). Se configurada para@tie{}1, usa o
argumento do nome do nó (primeiro) em comandos @@ de referência cruzada para o
texto exibido como o hiperlink. Se configurada para@tie{}0, usa o nome do nó se
@code{USE_NODES} estiver configurado, caso contrário, o nome da seção. Se
configurada para @samp{undef}, usa o primeiro argumento em ambientes
pré-formatados, caso contrário, usa o nome do nó ou o nome da seção, dependendo
de @code{USE_NODES}. O padrão é @samp{undef}.
@end vtable


@node Outras Variáveis de Personalização
@subsection Outras Variáveis de Personalização

Esta tabela fornece as restantes variáveis de personalização, as quais se
aplicam a vários formatos, afetam o comportamento global ou não se enquadram
nas categorias das seções anteriores.

@vtable @code
@item CLOSE_QUOTE_SYMBOL
Quando uma aspa de fechamento for necessária, usa esse caractere; padrão
@code{&rsquo;} em HTML, @code{&#8217;} em Docbook. O padrão para Info é o mesmo
que @code{OPEN_QUOTE_SYMBOL} (veja-se abaixo).

@c @item COMPLETE_IMAGE_PATHS
@c Se configurada, os arquivos de imagem serão computados para serem relativos
@c a partir do diretório do documento para o diretório do manual do fonte e,
@c depois, para a imagem.

@item CPP_LINE_DIRECTIVES
Reconhecer diretivas @code{#line} em uma passagem de ``pré-processamento''
(@pxref{Processadores Externos de Macro}); ligada por padrão.

@item DEBUG
Se configurada, a saída de depuração é gerada; padrão é desligada (zero).
@c O valor inteiro especifica quais tipos de saída de depuração são gerados. É
@c uma máscara de bits. Configurá-la para 255 garante ter todas as saídas de
@c depuração disponíveis.

@item DOCTYPE
@vindex SystemLiteral
Para Docbook, HTML, XML@. Especifica o @code{SystemLiteral}, o identificador de
sistema da entidade. Esse é um URI que pode ser usado para recuperar a entidade
e identifica o DTD canônico para o documento. O valor padrão é diferente para
cada HTML, Docbook e Texinfo@tie{}XML.

@item DUMP_TEXI
Para depuração. Se configurada, nenhuma conversão é feita, somente análise e
expansão de macro. Se a opção @option{--macro-expand} for configurada, o fonte
do Texinfo também será expandido para o arquivo correspondente. Padrão falso.

@item DUMP_TREE
Para depuração. Se configurada, a árvore construída ao analisar um documento do
Texinfo é enviada para erro padrão; padrão falso.

@item ENABLE_ENCODING_USE_ENTITY
Para HTML, XML@. Se @option{--enable-encoding} estiver configurada, e existir
uma entidade correspondendo com a letra ou o símbolo sendo produzido, prefira a
entidade. Configurada por padrão para HTML, mas não para XML.

@item EXTERNAL_CROSSREF_SPLIT
Para referências cruzadas para outros manuais, isso determina se o outro manual
é considerado dividido ou monolítico. Por padrão, é configurada baseada no
valor de @code{SPLIT}. @xref{Xref de HTML} e
@pxref{Configuração do Xref do HTML}.

@item EXTENSION
A extensão adicionada ao nome do arquivo de saída. O padrão é diferente para
cada formato de saída.

@item FIX_TEXINFO
Para ``Texinfo simples'' (veja-se o item @code{PLAINTEXINFO}). Se configurada
para falso, o Texinfo resultante não terá todos os erros corrigidos, tal como
@samp{@@end} ausente; padrão verdadeiro. Essa variável somente é relevante ao
expandir Texinfo; outros conversores sempre tentam produzir algo sensato, mesmo
que a entrada seja errônea.

@c @item IDX_SUMMARY
@c Se configurada, para cada @code{@@printindex}, um arquivo chamado
@c @file{@var{docname}_@var{idxname}.idx} é criado, contendo linhas da forma:
@c
@c @example
@c @var{chave} @var{referência}
@c @end example
@c
@c @noindent ordenado alfabeticamente (diferencia maiúsculas e minúsculas).

@item IGNORE_BEFORE_SETFILENAME
Se configurada, inicia a saída em @code{@@setfilename}, se @code{@@setfilename}
estiver presente; padrão verdadeiro.

@item IGNORE_SPACE_AFTER_BRACED_COMMAND_NAME
Se configurado, espaços são ignorados depois de um comando @@ que receba
chaves. Padrão verdadeiro, correspondendo ao comportamento do @TeX{}.

@item INDEX_ENTRY_COLON
Símbolo usado entre a entrada do índice e o nó ou seção associado; padrão
@samp{:}.

@item INDEX_SPECIAL_CHARS_WARNING
Se configurada, avisa acerca de @samp{:} na entrada de índice, pois isso leva a
entradas inválidas em menus de índice em arquivos de saída do Info. Somente
para Info e texto simples.

@anchor{INFO_SPECIAL_CHARS_QUOTE}
@item INFO_SPECIAL_CHARS_QUOTE
Se configurada, sempre que existir caracteres problemáticos para a saída Info
em locais como nomes de nós ou itens de menu, envolva entre aspas a parte da
construção onde eles aparecem, conforme descrito em
@ref{Especificação do Formato Info}. @xref{Exigências de Linha de Nó}.

@item INFO_SPECIAL_CHARS_WARNING
Se configurada, avisa acerca de construções problemáticas para saída Info (como
a string @samp{::}) em nomes de nós, itens de menu e referências cruzadas;
padrão verdadeiro. Não avisa acerca de entradas de índice, já que problemas de
análise não impedem a navegação; leitores ainda conseguem relativamente
facilmente encontrar o caminho para o nó em questão.

@item INLINE_INSERTCOPYING
Se configurada, @code{@@insertcopying} será substituído pelo conteúdo de
@code{@@copying} (@pxref{@code{@@copying}}) como se @code{@@insertcopying}
fosse uma macro definida por usuário(a); padrão falso.

@item INPUT_ENCODING_NAME
Nome de codificação normalizado adequado para saída. Deveria ser um nome de
conjunto de caracteres usável em HTML, tipicamente um dos nomes de codificação
preferidos da IANA. Você não deveria precisar usar essa variável, pois ela é
configurada por @code{@@documentencoding} (@pxref{@code{@@documentencoding}}).

@item INPUT_PERL_ENCODING
Codificação Perl usada para processar o fonte do Texinfo. Você não deveria
precisar usar essa variável, pois ela é configurada por
@code{@@documentencoding} (@pxref{@code{@@documentencoding}}).

@item MACRO_BODY_IGNORES_LEADING_SPACE
Ignora espaço em branco no início da linha do corpo da macro definida por
usuário(a), imitando uma limitação do @TeX{} (@pxref{Detalhes de Macro}).
Padrão desligado.

@item MAX_MACRO_CALL_NESTING
O número máximo de chamadas recursivas de comandos @@ definidos por meio de
@code{@@rmacro}; padrão 100000. O propósito dessa variável é o de evitar
recursões infinitas.

@item MENU_ENTRY_COLON
Símbolo usado entre a entrada do menu e a descrição; padrão @samp{:}.

@item NO_USE_SETFILENAME
Se configurada, não use @code{@@setfilename} para configurar o nome do
documento; em vez disso, baseie o nome do documento de saída somente no nome do
arquivo de entrada. O padrão é falso.

@item NODE_FILENAMES
Se configurada, nomes de nó são usados para construir nomes de arquivo. Por
padrão, é configurada se a saída for dividida por nó, ou se @code{NODE_FILES}
estiver configurada e a saída for dividida de alguma forma.

@item NODE_NAME_IN_INDEX
Se configurada, use nomes de nós em entradas de índice, caso contrário, prefira
nomes de seção; padrão verdadeiro.

@item NODE_NAME_IN_MENU
Se configurada, use nomes de nós em entradas de menu, caso contrário, prefira
nomes de seção; padrão verdadeiro.

@item OPEN_QUOTE_SYMBOL
Quando uma aspa de abertura for necessária, por exemplo, para a saída do
@samp{@@samp}, use o caractere especificado; padrão @code{&lsquo;} para HTML,
@code{&#8216;} para Docbook. Para Info, o padrão depende da codificação
habilitada do documento (@pxref{@code{@@documentencoding}}); se nenhuma
codificação de documento estiver configurada, ou a codificação for US-ASCII,
etc., @samp{'} será usado. Esse caractere geralmente aparece como uma aspa
simples não direcionada em sistemas modernos. Se a codificação do documento for
Unicode, a saída Info usará uma aspa esquerda Unicode.

@item OUTPUT_ENCODING_NAME
Nome de codificação normalizado usado para arquivos de saída. Deveria ser um
nome de conjunto de caracteres usável em HTML, tipicamente um dos nomes de
codificação preferidos da IANA. Por padrão, se uma codificação de entrada for
configurada (tipicamente por meio de @code{@@documentencoding} ou
@code{INPUT_ENCODING_NAME}), essa informação será usada para configurar o nome
da codificação de saída. Se nenhuma codificação de entrada for especificada, o
nome padrão da codificação de saída poderá ser configurado pelo formato de
saída. Em particular, os formatos baseados em XML usam @code{utf-8} para
@code{OUTPUT_ENCODING_NAME} se a codificação não for especificada de outra
maneira. @xref{@code{@@documentencoding}}.

@item OVERVIEW_LINK_TO_TOC
Se configurada, as referências cruzadas na Visão Geral se lincam às entradas
correspondentes do Sumário; padrão verdadeiro.

@item PACKAGE
@itemx PACKAGE_VERSION
@itemx PACKAGE_AND_VERSION
@itemx PACKAGE_URL
@itemx PACKAGE_NAME
O nome curto do pacote de implementação, versão do pacote, nome do pacote e
versão concatenados, url do pacote e nome completo do pacote, respectivamente.
Por padrão, essas variáveis são todas configuradas por meio do Autoconf,
Automake e @code{configure}.

@item PREFIX
O prefixo do arquivo de saída, o qual é anteposto a alguns nomes de arquivo de
saída. Por padrão, ele é configurado por @code{@@setfilename} ou a partir do
arquivo de entrada (@pxref{@code{@@setfilename}}). Como esse valor é usado
depende do valor de outras variáveis de personalização ou de opções de linha de
comando, como se a saída estivesse dividida, e de @code{NODE_FILENAMES}. O
padrão é desconfigurada.

@item PROGRAM
Nome do programa usado. Por padrão, é configurada para o nome do programa
iniciado, com um @samp{.pl} final removido.

@item RENAMED_NODES_FILE
Se configurada, use o valor para o arquivo de descrição de nós renomeados. Se
não configurada, o arquivo é @file{@var{nome_base_documento}-noderename.cnf}.
@xref{Preservação de Link Xref do HTML}.

@item RENAMED_NODES_REDIRECTIONS
Se configurada, cria arquivos de redirecionamento para nós renomeados.
Configurada por padrão ao gerar HTML@.

@item SHOW_MENU
@opindex --no-headers
Se configurada, os menus do Texinfo são emitidos. Por padrão, é configurada, a
menos que gerando Docbook ou se @option{--no-headers} for especificada.

@item SORT_ELEMENT_COUNT
@pindex texi-elements-by-size
@cindex Nós mais longos, encontrando
@cindex Ordenando nós por tamanho
Se configurada, o nome de um arquivo para o qual uma lista de elementos (nós
ou seções, dependendo do formato de saída) é despejada, ordenada pelo número de
linhas que eles contém depois da remoção de comandos @@; padrão desconfigurada.
Isso é usado pelo programa @code{texi-elements-by-size} no diretório
@file{util/} da distribuição do fonte do Texinfo
(@pxref{texi-elements-by-size}).

@item SORT_ELEMENT_COUNT_WORDS
Ao despejar o arquivo de elementos por tamanho (veja-se o item precedente), use
contagens de palavras em vez de contagens de linhas; padrão falso.

@c @item SPLIT_INDEX
@c Para HTML@. Se configurada, a saída é dividida, e a saída proveniente de
@c @code{@@printindex} acontece em um elemento de seccionamento no nível de
@c divisão, então divide páginas de índice na próxima letra depois de elas terem
@c mais que essa quantidade de entradas. Se configurada para 0, nenhuma divisão de
@c índice.

@item TEST
Se configurada para verdadeiro, algumas variáveis que normalmente são geradas
dinamicamente novamente para cada execução (data, nome do programa, versão) são
configuradas para valores fixos e fornecidos. Isso é útil para comparar a saída
com um arquivo de referência, como é feito para os testes. O padrão é falso.

@item TEXI2DVI
Nome do comando usado para produzir PostScript, PDF e DVI; padrão
@samp{texi2dvi}. @xref{Saída Impressa do @command{texi2any}}.

@item TEXI2HTML
@cindex compatibilidade, com @command{texi2html}
Gere HTML e tente ser o mais compatível possível com @command{texi2html};
padrão falso.

@item TEXINFO_COLUMN_FOR_DESCRIPTION
Usado com a transformação de árvore do @code{indent_menu_descriptions},
descrita abaixo; padrão 32 (correspondente a
@code{texinfo-column-for-description} no Emacs)).

@item TEXINFO_DTD_VERSION
Para XML@. Versão do DTD usado no preâmbulo de saída XML. O padrão é
configurada baseada em uma variável em @file{configure.ac}.

@item TEXTCONTENT_COMMENT
Para saída de conteúdo de texto despojado (por exemplo, quando
@code{TEXINFO_OUTPUT_FORMAT} for configurada para @code{textcontent}). Se
configurada, também emite comentários. Padrão falso.

@item TOP_NODE_UP
Nó superior para o nó Top; padrão @samp{(dir)}. Para substituir a URL na saída
HTML, veja-se @code{TOP_NODE_UP_URL} em
@ref{Variáveis de Personalização de HTML}.

@item TREE_TRANSFORMATIONS
O valor associado é uma lista separada por vírgulas de transformações que podem
ser aplicadas à árvore do Texinfo antes de emitir o resultado. Se mais que uma
for especificada, a ordenamento é irrelevante; cada uma é sempre aplicada no
ponto necessário durante o processamento.

O único executado por padrão é @samp{move_index_entries_after_items} para saída
HTML e Docbook. Aqui está um exemplo de atualização do menu mestre em um
documento:

@example
makeinfo \
  -c TREE_TRANSFORMATIONS=regenerate_master_menu \
  -c PLAINTEXINFO=1 \
  meudocumento.texi \
  -o /tmp/saida
@end example

@noindent (Ressalva: como a saída de @code{PLAINTEXINFO} expande macros e
condicionais do Texinfo, é necessário remover quaisquer diferenças antes de
instalar as atualizações no documento original. Isso será remediado em um
lançamento futuro).

As seguintes transformações são atualmente suportadas (muitas são usadas no
utilitário @code{pod2texi} distribuído com o Texinfo;
@pxref{Invocando @command{pod2texi}}):

@ftable @samp
@item complete_tree_nodes_menus
Adicione entradas de menu ou menus inteiros para nós associados com seções de
qualquer nível, baseados na árvore de seccionamento.

@item fill_gaps_in_sectioning
Adiciona seções @code{@@unnumbered...} vazias em uma árvore para preencher
lacunas no seccionamento. Por exemplo, um @code{@@unnumberedsec} será inserido
se um @code{@@chapter} for seguido por um @code{@@subsection}.

@item indent_menu_descriptions
Reformate os menus de forma que as descrições comecem na coluna
@code{TEXINFO_COLUMN_DESCRIPTION}.

@item insert_nodes_for_sectioning_commands
Insira nós para comandos de seccionamento carecendo de um nó correspondente.

@item move_index_entries_after_items
Em @code{@@enumerate} e @code{@@itemize}, mova as entradas de índice que
aparecem logo antes de um @code{@@item} para logo depois do @code{@@item}. As
linhas de comentários entre as entradas de índice também são movidas. Como
mencionado, isso é sempre feito para saídas em HTML e em Docbook.

@item regenerate_master_menu
Atualize o menu mestre do nó Top, ou substituindo o (primeiro)
@code{@@detailmenu} no menu do nó Top ou criando-o no final do menu do nó Top.

@item simple_menu
Basicamente o mesmo que @code{SIMPLE_MENU}: use um estilo simples pré-formatado
para o menu. Ele difere da configuração de @code{SIMPLE_MENU} em que
@code{SIMPLE_MENU} somente tem efeito em saída HTML.

@end ftable

@item USE_NODES
Use preferencialmente nós para decidir onde os elementos são separados. Se
configurada para falso, use preferencialmente seccionamento para decidir onde
os elementos são separados. O padrão é verdadeiro.

@item USE_NODE_TARGET
Se configurada, use o nó associado com uma seção para o alvo de seção em
referências cruzadas; padrão verdadeiro.

@item USE_NUMERIC_ENTITY
Para HTML e XML@. Se configurada, use entidades numéricas em vez de caracteres
ASCII quando não existir entidade nomeada. Por padrão, configurada para
verdadeiro para HTML.

@item USE_UP_NODE_FOR_ELEMENT_UP
Preencha a direção de seccionamento para cima com a direção do nó quando não
existir direção de seccionamento para cima. Na prática, isso somente pode
acontecer quando não existir seção @@top. Não configurada por padrão.

@item USE_SETFILENAME_EXTENSION
O padrão é on para Info, off para outras saídas. Se configurada, use exatamente
o que @code{@@setfilename} fornecer para o nome do arquivo de saída, incluindo
a extensão. Você não deveria precisar configurar explicitamente essa variável.

@item USE_TITLEPAGE_FOR_TITLE
Use o @code{@@titlepage} completo como título, não uma simples string de
título; padrão falso.

@item USE_UNIDECODE
@pindex Text::Unidecode
Se configurada para falso, não use o módulo @code{Text::Unidecode} do Perl para
transliterar mais caracteres; padrão verdadeiro.

@end vtable


@node Internacionalização de Strings de Documentos
@section Internacionalização de Strings de Documentos

@cindex I18n, de strings de documento
@cindex Internacionalização de strings de documentos
@cindex Strings de documentos, internacionalização de
@cindex Strings de saída de documento, internacionalização de
@cindex Traduzindo strings em documentos de saída

@vindex documentlanguage @r{variável de personalização}
@command{texi2any} escreve strings fixas no documento de saída em vários
lugares: referências cruzadas, rodapés de página, a página de ajuda, texto
alternativo para imagens e assim por diante. A string escolhida depende do
valor do @code{documentlanguage} ao tempo em que a string sendo gerada
(@pxref{@code{@@documentlanguage}}, para a interface de comando do Texinfo).

@pindex libintl-perl @r{implementação Gettext}
O framework Gettext é usado para essas strings
(@pxref{Top,,, gettext, Gettext}). O pacote @code{libintl-perl} é usado como a
implementação @code{gettext}; mais especificamente, a implementação Perl pura é
usada, de forma que o Texinfo pode suportar comportamento consistente em todas
as plataformas e instalações, o que não seria possível de outra maneira.
@code{libintl-perl} é incluído na distribuição do Texinfo e sempre instalado,
para garantir que esteja disponível se necessário. Também é possível usar o
@code{gettext} do sistema (a escolha pode ser feita em tempo de construção).

@vindex texinfo_document @r{domínio Gettext}
@cindex Strings de formato Perl para tradução
O domínio Gettext @samp{texinfo_document} é usado para as strings. Strings
traduzidas são escritas como Texinfo e podem incluir comandos @@. Em strings
traduzidas, as partes variáveis da string geralmente não são denotadas por
@code{%s} e similares, mas por @samp{@{arg_name@}}. (Essa convenção é comum
para @code{gettext} em Perl e é totalmente suportada no GNU Gettext;
@pxref{perl-format,, Perl Format Strings, gettext, GNU Gettext}). Por exemplo,
no seguinte, @samp{@{section@}} será substituído pelo nome da seção:

@example
veja-se @{section@}
@end example

Essas strings de formato de chaves no estilo Perl são usadas por dois motivos:
primeiro, a mudança da ordem dos argumentos de @code{printf} somente está
disponível desde o Perl@tie{}5.8.0; segundo, e mais importante, a ordem dos
argumentos é imprevisível, já que a expansão do comando @@ possivelmente leve a
ordens diferentes dependendo do formato de saída.

A expansão de uma string de tradução é feita assim:

@enumerate
@item Primeiro, a string é traduzida. A localidade é
@var{@@documentlanguage}@code{.}@var{@@documentencoding}.

@cindex Codificação @code{us-ascii},  traduções
Se o @var{@@documentlanguage} tiver o formato @samp{ll_CC}, esse será tentado
primeiro, e então apenas @samp{ll}. Se esse não existir, e a codificação não
for @code{us-ascii}, então @code{us-ascii} será tentado.

A ideia é a de que se existir uma codificação @code{us-ascii}, isso significa
que todos os caracteres no conjunto de caracteres podem ser expressos como
comandos @@. Por exemplo, existe uma localidade, @code{fr.us-ascii}, que pode
acomodar qualquer codificação, já que todos os caracteres Latin@tie{}1 tem
comandos @@ associados. Por outro lado, o japonês tem somente uma tradução,
@code{ja.utf-8}, já que não existem comandos @@ para caracteres japoneses.

@item Em seguida, a string é expandida como Texinfo e convertida. Os argumentos
são substituídos; por exemplo, @samp{@{arg_name@}} é substituído pelo argumento
real correspondente.

@end enumerate

No exemplo seguinte, @samp{@{date@}}, @samp{@{program_homepage@}} e
@samp{@{program@}} são os argumentos da string. Como eles são usados em
@code{@@uref}, a ordem deles não é previsível. @samp{@{date@}},
@samp{@{program_homepage@}} e @samp{@{program@}} são substituídos depois da
expansão:

@example
Gerado em @@emph@{@{date@}@} usando
@@uref@{@{program_homepage@}, @@emph@{@{program@}@}@}.
@end example

Essa abordagem é reconhecidamente um pouco complicada. A utilidade dela é a de
que ela suporta ter traduções disponíveis em diferentes codificações para
codificações que podem ser cobertas por comandos @@, e também especifica como a
formatação para alguns comandos é feita, independentemente do formato de
saída---mas ainda ser dependente do idioma. Por exemplo, a string de tradução
@samp{@@pxref} pode ser assim:

@example
veja-se @{node_file_href@} seção `@{section@}\' em @@cite@{@{book@}@}
@end example

@noindent
que permite especificar uma string independentemente do formato de saída,
embora, com formatação avançada, ela possa ser traduzida adequadamente em
muitos idiomas.


@node Invocando @command{pod2texi}
@section Invocando @command{pod2texi}: Converte POD para Texinfo

@pindex pod2texi
@cindex Invocando @code{pod2texi}
@cindex POD, convertendo para Texinfo
@cindex Perl POD, convertendo para Texinfo

O programa @code{pod2texi} traduz arquivo(s) de documentação do pod do Perl
para Texinfo. Existem dois modos básicos de operação: gerar um manual
independente a partir de cada pod de entrada ou (se @code{--base-level=1} ou
superior for fornecido) gerar subarquivos do Texinfo adequados para uso com
@code{@@include}.

Embora normalmente essa documentação no manual do Texinfo seja o melhor lugar
para procurar, nesse caso nós documentamos todas as opções e exemplos no
próprio programa @code{pod2texi}, já que ele pode ser útil fora do resto do
Texinfo. Portanto, por favor, veja-se a saída do @code{pod2texi --help}, a
versão na web em
@url{http://www.gnu.org/software/texinfo/manual/pod2texi.html}, etc.

Para um exemplo de uso do @code{pod2texi} para criar o Texinfo a partir da
própria documentação do Perl, veja-se
@url{http://svn.savannah.gnu.org/viewvc/trunk/contrib/perldoc-all/?root=texinfo,
@file{contrib/perldoc-all}} na distribuição do fonte do Texinfo (a saída está
disponível em @url{http://www.gnu.org/software/perl/manual}).


@node @command{texi2html}
@section @command{texi2html}: Ancestral de @command{texi2any}

@pindex texi2html

@cindex Cons, Lionel
Conceitualmente, o programa @command{texi2html} é o ascendente do programa
@command{texi2any} de hoje. O @command{texi2html} foi desenvolvido
independentemente, originalmente por Lionel Cons em 1998; na época, o
@command{makeinfo} não conseguia gerar HTML@. Muitas outras pessoas
contribuíram para o @command{texi2html} ao longo dos anos.

O @command{texi2any} atual usa pouco do código real do @command{texi2html} e
tem uma abordagem básica bem diferente para a implementação (ou seja, analisar
o documento do Texinfo em uma árvore), mas ainda assim, existe uma semelhança
familiar.

Por projeto, @command{texi2any} suporta quase todos os recursos de
@command{texi2html} de alguma forma. No entanto, nós não tentamos manter
compatibilidade estrita, de forma que nenhum executável @command{texi2html} é
instalado pelo pacote do Texinfo. Uma aproximação pode ser executada com uma
invocação como esta (disponível como @file{util/texi2html} no fonte do
Texinfo):

@example
texi2any --set-customization-variable TEXI2HTML=1 ...
@end example

@noindent mas, para enfatizar, isso @emph{não} é um substituto imediato para o
@command{texi2html} anterior. Aqui estão as maiores diferenças:

@itemize @bullet
@item Mais flagrantemente, as opções de linha de comando do @command{texi2html}
agora são variáveis de personalização, na maior parte. Uma tabela de
equivalentes aproximados é fornecida abaixo.

@item A API de personalização em nível de programa é muito diferente no
@command{texi2any}.

@item Índices não podem ser divididos.

@item As strings traduzidas não podem ser personalizadas; nós esperamos
introduzir esse recurso no @command{texi2any} no futuro.

@end itemize

Além do último, nós não pretendemos reimplementar essas diferenças. Portanto, o
caminho a seguir para autores(as) é o de alterar manuais e processos de
construção conforme necessário para usar os novos recursos e métodos do
@command{texi2any}. Os(As) mantenedores(as) do @command{texi2html} (um dos
quais é o autor principal do @command{texi2any}) não pretendem fazer mais
lançamentos.

@cindex Opções do @command{texi2html}
@cindex Opções de linha de comando do @command{texi2html}
Aqui está a tabela mostrando opções do @command{texi2html} e variáveis de
personalização correspondentes do @command{texi2any}.
@c (@pxref{texi2any Output Customization,, @command{texi2any} Output Customization}).

@multitable {@option{--ignore-preamble-text}} {@code{IGNORE_PREAMBLE_TEXT}}
@item @option{--toc-links}            @tab @code{TOC_LINKS}
@item @option{--short-ext}            @tab @code{SHORTEXTN}
@item @option{--prefix}               @tab @code{PREFIX}
@item @option{--short-ref}            @tab @code{SHORT_REF}
@item @option{--idx-sum}              @tab @code{IDX_SUMMARY}
@item @option{--def-table}            @tab @code{DEF_TABLE}
@item @option{--ignore-preamble-text} @tab @code{IGNORE_PREAMBLE_TEXT}
@item @option{--html-xref-prefix}     @tab @code{EXTERNAL_DIR}
@item @option{--l2h}                  @tab @code{L2H}
@item @option{--l2h-l2h}              @tab @code{L2H_L2H}
@item @option{--l2h-skip}             @tab @code{L2H_SKIP}
@item @option{--l2h-tmp}              @tab @code{L2H_TMP}
@item @option{--l2h-file}             @tab @code{L2H_FILE}
@item @option{--l2h-clean}            @tab @code{L2H_CLEAN}
@item @option{--use-nodes}            @tab @code{USE_NODES}
@item @option{--monolithic}           @tab @code{MONOLITHIC}
@item @option{--top-file}             @tab @code{TOP_FILE}
@item @option{--toc-file}             @tab @code{TOC_FILE}
@item @option{--frames}               @tab @code{FRAMES}
@item @option{--menu}                 @tab @code{SHOW_MENU}
@item @option{--debug}                @tab @code{DEBUG}
@item @option{--doctype}              @tab @code{DOCTYPE}
@item @option{--frameset-doctype}     @tab @code{FRAMESET_DOCTYPE}
@item @option{--test}                 @tab @code{TEST}
@end multitable

@cindex @file{texi2oldapi.texi}, para @command{texi2any}
Finalmente, quaisquer usuários(as) do @command{texi2html} buscando informações
mais detalhadas pode verificar o arquivo de rascunho
@file{doc/texi2oldapi.texi} no repositório do fonte do Texinfo. Ele consiste
principalmente de notas muito grosseiras, mas ainda pode ser útil para
alguns(mas).


@node Criando e Instalando Arquivos Info
@chapter Criando e Instalando Arquivos Info

Este capítulo descreve como criar e instalar arquivos Info.
@xref{Arquivos do Info}, para informações gerais acerca do formato do arquivo
em si.

@menu
* Criando um Arquivo do Info::
* Instalando Um Arquivo do Info::
@end menu


@node Criando um Arquivo do Info
@section Criando um Arquivo do Info
@cindex Criando um arquivo do Info
@cindex Info, criando um arquivo online
@cindex Formatando um arquivo para Info

@code{makeinfo} é um programa que converte um arquivo do Texinfo em um arquivo
do Info, em arquivo HTML ou em texto simples. @code{texinfo-format-region} e
@code{texinfo-format-buffer} são funções do GNU Emacs que convertem Texinfo
para Info.

Para informações acerca de como instalar o arquivo do Info no sistema Info,
@pxref{Instalando Um Arquivo do Info}.

@menu
* Vantagens do @command{makeinfo}::   @command{makeinfo} fornece melhor verificação de erros.
* @code{makeinfo} no Emacs::          Como executar @code{makeinfo} a partir do Emacs.
* Comandos @code{texinfo-format}::    Dois comandos do Info de formatação escritos em Emacs Lisp são uma alternativa ao @code{makeinfo}.
* Formatação em Lote::                Como formatar para Info no modo de lote do Emacs.
* Arquivos de Etiqueta e de Divisão:: Como arquivos etiquetados e divididos ajudam o Info a executar melhor.
@end menu


@node Vantagens do @command{makeinfo}
@subsection Vantagens do @code{makeinfo}

@anchor{vantagens do makeinfo}@c nome antigo

O utilitário @code{makeinfo} cria um arquivo do Info a partir de um fonte do
Texinfo, fornecendo melhores mensagens de erro que qualquer um dos comandos de
formatação do Emacs. Nós o recomendamos. O programa @code{makeinfo} é
independente do Emacs. Você pode executar o @code{makeinfo} de três maneiras: a
partir de um shell do sistema operacional; a partir de um shell dentro do
Emacs; ou digitando o comando @kbd{C-c C-m C-r} ou @kbd{C-c C-m C-b} no modo
Texinfo no Emacs.

Os comandos @code{texinfo-format-region} e @code{texinfo-format-buffer}
possivelmente sejam úteis se você não puder executar @code{makeinfo}.


@node @code{makeinfo} no Emacs
@subsection Executando @code{makeinfo} dentro do Emacs

@c anchor{makeinfo no Emacs}@c nome anterior
@cindex Executando @code{makeinfo} no Emacs
@cindex @code{makeinfo} dentro do Emacs
@cindex Shell, executando @code{makeinfo} em

Você pode executar @code{makeinfo} no modo Texinfo do GNU Emacs usando os
comandos @code{makeinfo-region} ou @code{makeinfo-buffer}. No modo Texinfo, os
comandos são vinculados a @kbd{C-c C-m C-r} e @kbd{C-c C-m C-b} por padrão.

@table @kbd
@item C-c C-m C-r
@itemx M-x makeinfo-region
Formata a região atual para Info.
@findex makeinfo-region

@item C-c C-m C-b
@itemx M-x makeinfo-buffer
Formata o buffer atual para Info.
@findex makeinfo-buffer
@end table

Quando você invoca @code{makeinfo-region} a saída vai para um buffer
temporário. Quando você invoca @code{makeinfo-buffer} a saída vai para o
conjunto de arquivos com @code{@@setfilename} (@pxref{@code{@@setfilename}}).

Os comandos @code{makeinfo-region} e @code{makeinfo-buffer} do Emacs executam o
programa @code{makeinfo} em um buffer temporário de shell. Se @code{makeinfo}
encontrar quaisquer erros, o Emacs exibe as mensagens de erro no buffer
temporário.

@cindex Erros, analisando
@cindex Analisando erros
@findex next-error
Você consegue analisar as mensagens de erro digitando @kbd{C-x `}
(@code{next-error}). Isso faz com que o Emacs vá e posicione o cursor na linha
no fonte do Texinfo que @code{makeinfo} pensa que causou o erro.
@xref{Compilation, , Running @code{make} or Compilers Generally, emacs, The GNU
Emacs Manual}, para mais informações acerca de usar o comando
@code{next-error}.

Além disso, você pode matar o shell no qual o comando @code{makeinfo} está
executando ou fazer com que o buffer do shell exiba a saída dele mais recente.

@table @kbd
@item C-c C-m C-k
@itemx M-x makeinfo-kill-job
@findex makeinfo-kill-job
Mata o atual trabalho do @code{makeinfo} executando (a partir de
@code{makeinfo-region} ou @code{makeinfo-buffer}).

@item C-c C-m C-l
@itemx M-x makeinfo-recenter-output-buffer
@findex makeinfo-recenter-output-buffer
Reexibe o buffer do shell do @code{makeinfo} para exibir a saída dele mais recente.
@end table

@noindent
(Observe que os comandos paralelos para encerrar e recentralizar um trabalho do
@TeX{} são @kbd{C-c C-t C-k} e @kbd{C-c C-t C-l}.
@xref{Impressão no Modo Texinfo}).

Você pode especificar opções para @code{makeinfo} configurando a variável
@code{makeinfo-options} com o comando @kbd{M-x customize} ou @kbd{M-x
set-variable}, ou configurando a variável em teu arquivo de inicialização
@file{.emacs}.

Por exemplo, você poderia escrever o seguinte no teu arquivo @file{.emacs}:

@example
@group
(setq makeinfo-options
     "--paragraph-indent=0 --no-split
      --fill-column=70 --verbose")
@end group
@end example

@noindent
@c Escrever essas três referências cruzadas usando xref resulta em três
@c referências para o mesmo manual nomeado, o que parece estranho.
@iftex
Para mais informações, veja-se @ref{Opções do @command{makeinfo}}, bem como
``Easy Customization Interface'', ``Examining and Setting Variables'' e ``Init
File'' em @cite{O Manual do GNU Emacs}.
@end iftex
@ifnottex
Para mais informações, veja-se@*
@ref{Easy Customization, , Easy Customization Interface, emacs, O Manual do GNU Emacs},@*
@ref{Examining, , Examining and Setting Variables, emacs, O Manual do GNU Emacs},@*
@ref{Init File, , , emacs, O Manual do GNU Emacs} e@*
@ref{Opções do @command{makeinfo}}.
@end ifnottex


@node Comandos @code{texinfo-format}
@subsection Os Comandos @code{texinfo-format@dots{}}

@c anchor{comandos texinfo-format}@c nome anterior

No GNU Emacs em modo Texinfo, você pode formatar parte ou todo um arquivo do
Texinfo com o comando @code{texinfo-format-region}. Isso formata a região atual
e exibe o texto formatado em um buffer temporário chamado @samp{*Info Region*}.

Similarmente, você pode formatar um buffer com o comando
@code{texinfo-format-buffer}. Esse comando cria um novo buffer e gera o arquivo
do Info nele. Digitar @kbd{C-x C-s} salvará o arquivo do Info sob o nome
especificado pela linha @code{@@setfilename}, que precisa estar perto do início
do arquivo do Texinfo.

@table @kbd
@item C-c C-e C-r
@itemx @code{texinfo-format-region}
@findex texinfo-format-region
Formata a região atual para Info.

@item C-c C-e C-b
@itemx @code{texinfo-format-buffer}
@findex texinfo-format-buffer
Formata o buffer atual para Info.
@end table

Os comandos @code{texinfo-format-region} e @code{texinfo-format-buffer} te
fornecem alguma verificação de erros, e outras funções podem te fornecer mais
ajuda para encontrar erros de formatação. Esses procedimentos são descritos em
um anexo; veja-se @ref{Capturando Erros}. Entretanto, o programa
@code{makeinfo} fornece melhor verificação de erros
(@pxref{@code{makeinfo} no Emacs}).

Uma peculiaridade dos comandos @code{texinfo-format-buffer} e
@code{texinfo-format-region} é a de que eles não recuam (nem preenchem)
parágrafos que contenham comandos @code{@@w} ou @code{@@*}.


@node Formatação em Lote
@subsection Formatação em Lote
@cindex Formatação em lote para o Info
@cindex Formatação em lote do Info

Você pode formatar arquivos do Texinfo para o Info usando
@code{batch-texinfo-format} e o modo lote do Emacs. Você pode executar o Emacs
no modo lote a partir de qualquer shell, incluindo um shell dentro do Emacs.
(@xref{Initial Options,,, emacs, O Manual do GNU Emacs}).

Aqui está um comando de shell para formatar todos os arquivos que terminam em
@file{.texinfo} no diretório atual:

@example
emacs -batch -funcall batch-texinfo-format *.texinfo
@end example

@noindent
O Emacs processa todos os arquivos listados na linha de comando, mesmo se um
erro ocorrer ao tentar formatar alguns deles.

Execute @code{batch-texinfo-format} somente com Emacs em modo lote, como
mostrado; não é interativo. Ele mata o Emacs em modo lote ao concluir.

@code{batch-texinfo-format} é conveniente se você carecer do @code{makeinfo} e
quiser formatar vários arquivos do Texinfo de uma vez. Quando usa o modo Lote,
você cria um novo processo do Emacs. Isso libera teu Emacs atual, de forma que
você continue trabalhando nele. (Quando executa @code{texinfo-format-region} ou
@code{texinfo-format-buffer}, você não consegue usar esse Emacs para mais nada
até que o comando termine).

@node Arquivos de Etiqueta e de Divisão
@subsection Arquivos de Etiqueta e Arquivos de Divisão
@cindex Criando uma tabela de etiquetas automaticamente
@cindex Tabela de etiquetas, fazendo automaticamente

Se um arquivo do Texinfo tiver mais que 30.000 bytes,
@code{texinfo-format-buffer} cria automaticamente uma tabela de etiquetas para
o arquivo dele do Info; @code{makeinfo} sempre cria uma tabela de etiquetas.
Com uma @dfn{tabela de etiquetas}, Info pode pular para novos nós mais
rapidamente que de outra forma.

@cindex Subarquivos indiretos
Além disso, se o arquivo do Texinfo contiver mais que 300.000 bytes,
@code{texinfo-format-buffer} e @code{makeinfo} dividem o arquivo grande do Info
em subarquivos @dfn{indiretos} mais curtos de cerca de 300.000 bytes cada.
Arquivos grandes são divididos em arquivos menores, de forma que o Emacs não
precise fazer um buffer grande para armazenar todo um arquivo grande do Info;
em vez disso, o Emacs aloca apenas memória suficiente para o arquivo pequeno e
dividido que seja necessária no momento. Dessa forma, o Emacs evita desperdiçar
memória quando você executa o Info. (Antes da divisão ser implementada, os
arquivos do Info eram sempre mantidos curtos e @dfn{arquivos de inclusão} foram
projetados como uma maneira de criar um manual impresso grande a partir dos
arquivos menores do Info. @xref{Arquivos de Inclusão}, para mais informações.
Os arquivos de inclusão ainda são usados para documentos muito grandes, como
@cite{The Emacs Lisp Reference Manual}, no qual cada capítulo é um arquivo
separado).

Quando um arquivo é dividido, o próprio Info faz uso de uma versão abreviada do
arquivo original que contém apenas a tabela de etiquetas e referências para os
arquivos que foram divididos. Os arquivos divididos são chamados de arquivos
@dfn{indiretos}.

Os arquivos divididos tem nomes que são criados pospondo @w{@samp{-1}},
@w{@samp{-2}}, @w{@samp{-3}} e assim por diante no nome do arquivo especificado
pelo comando @code{@@setfilename}. A versão abreviada do arquivo original
continua a ter o nome especificado por @code{@@setfilename}.

Em um estágio da escrita deste documento, por exemplo, o arquivo do Info foi
salvo como o arquivo @file{test-texinfo} e esse arquivo se parecia com isto:

@example
@group
Arquivo do Info: test-texinfo,    -*-Text-*-
produzido por texinfo-format-buffer
a partir do arquivo: new-texinfo-manual.texinfo

^_
Indireto:
test-texinfo-1: 102
test-texinfo-2: 50422
@end group
@group
test-texinfo-3: 101300
^_^L
Tabela de etiquetas:
(Indireto)
Nó: overview^?104
Nó: info file^?1271
@end group
@group
Nó: printed manual^?4853
Nó: conventions^?6855
@dots{}
@end group
@end example

@noindent
(Mas @file{test-texinfo} tinha muito mais nós que os mostrados aqui). Cada um
dos arquivos indiretos divididos, @file{test-texinfo-1}, @file{test-texinfo-2}
e @file{test-texinfo-3}, está listado nesse arquivo depois da linha que diz
@samp{Indireto:}. A tabela de etiquetas está listada depois da linha que diz
@samp{Tabela de Etiquetas:}.

Na lista de arquivos indiretos, o número seguinte ao nome do arquivo registra o
número cumulativo de bytes nos arquivos indiretos precedentes, não contando a
lista de arquivos em si, a tabela de etiquetas ou qualquer texto de permissões
no primeiro arquivo. Na tabela de etiquetas, o número seguinte ao nome do nó
registra o local do início do nó, em bytes, a partir do início da saída (não
dividida).

Se você estiver usando @code{texinfo-format-buffer} para criar arquivos do
Info, você pode querer executar o comando @code{Info-validate}. (O comando
@code{makeinfo} faz um trabalho tão bom sozinho, que você não precisa do
@code{Info-validate}). No entanto, você não pode executar o comando de
verificação de nó @kbd{M-x Info-validate} sobre arquivos indiretos. Para
informações acerca de como evitar que arquivos sejam divididos e como validar a
estrutura dos nós, veja-se @ref{Usando @code{Info-validate}}.


@node Instalando Um Arquivo do Info
@section Instalando Um Arquivo do Info
@cindex Instalando um arquivo do Info
@cindex Instalação de arquivo do Info
@cindex Diretório @file{dir} para instalação do Info

Arquivos do Info geralmente são mantidos no diretório @file{info}. Você pode
ler arquivos do Info usando o programa autônomo Info ou o leitor Info integrado
ao Emacs. (@xref{Top,,, info, Info}, para uma introdução ao Info).

@menu
* Arquivo de Diretório::             O menu de nível superior para todos os arquivos Info.
* Novo Arquivo Info::                Listando um novo arquivo Info.
* Outros Diretórios Info::           Como especificar arquivos Info que estão localizados em outros diretórios.
* Instalando Entradas de Diretório:: Como especificar qual entrada de menu adicionar ao diretório Info.
* Invocando @command{install-info}:: Opções do @code{install-info}.
@end menu


@node Arquivo de Diretório
@subsection O Arquivo de Diretório @file{dir}

Para que o Info funcione, o diretório @file{info} precisa conter um arquivo que
sirva como um diretório de nível superior para o sistema Info. Por convenção,
esse arquivo é chamado @file{dir}. (Você pode encontrar o local desse arquivo
dentro do Emacs digitando @kbd{C-h i} para entrar no Info e então digitando
@kbd{C-x C-f} para ver o caminho para o diretório @file{info}).

O arquivo @file{dir} é ele próprio um arquivo do Info. Ele contém o menu de
nível superior para todos os arquivos do Info no sistema. O menu se parece com
isto:

@example
@group
* Menu:
* Info:    (info).     Sistema de navegação de documentação.
* Emacs:   (emacs).    O editor de texto extensível e autodocumentado.
* Texinfo: (texinfo).  Com um arquivo fonte, crie um manual impresso usando @@TeX@{@} ou um arquivo do Info.
@dots{}
@end group
@end example

Cada uma dessas entradas de menu aponta para o nó `Top' do arquivo do Info que
é nomeado entre parênteses. (A entrada de menu não precisa especificar o nó
`Top', pois o Info vai para o nó `Top' se nenhum nome de nó for mencionado.
@xref{Outros Arquivos do Info, , Nós em Outros Arquivos do Info}).

Assim, a entrada @samp{Info} aponta para o nó `Top' do arquivo @file{info} e a
entrada @samp{Emacs} aponta para o nó `Top' do arquivo @file{emacs}.

Em cada um dos arquivos do Info, o ponteiro `Acima' do nó `Top' remete de volta ao
arquivo @code{dir}. Por exemplo, a linha para o nó `Top' do manual do Emacs se
parece com isto no Info:

@example
File: emacs  Node: Top, Acima: (DIR), Próximo: Distrib
@end example

@noindent
Nesse caso, o nome do arquivo @file{dir} é escrito em letras maiúsculas---pode
ser escrito em letras maiúsculas ou minúsculas. Isso não é verdade em geral; é
um caso especial para @file{dir}.


@node Novo Arquivo Info
@subsection Listando um Novo Arquivo Info
@cindex Adicionando um novo arquivo Info
@cindex Listando um novo arquivo Info
@cindex Novo arquivo Info, listando-o no arquivo @file{dir}
@cindex Arquivo Info, listando um novo
@cindex Listagem de arquivos @file{dir}

Para adicionar um novo arquivo do Info ao teu sistema, você precisa escrever
uma entrada de menu para adicionar ao menu no arquivo @file{dir} no diretório
@file{info}. Por exemplo, se estivesse adicionando documentação para o GDB,
você escreveria a seguinte nova entrada:

@example
* GDB: (gdb).           O depurador C em nível de fonte.
@end example

@noindent
A primeira parte da entrada do menu é o nome da entrada do menu, seguido por
dois pontos. A segunda parte é o nome do arquivo do Info, entre parênteses,
seguido por um ponto. A terceira parte é a descrição.

O nome de um arquivo do Info frequentemente tem uma extensão @file{.info}.
Assim, o arquivo do Info para GDB pode ser chamado de @file{gdb} ou
@file{gdb.info}. Os programas leitores do Info automaticamente tentam o nome do
arquivo com e sem @file{.info}@footnote{Em sistemas MS-DOS/MS-Windows, o Info
tentará a extensão @file{.inf} também.}; de forma que é melhor evitar desordem
e não escrever @samp{.info} explicitamente na entrada do menu. Por exemplo, a
entrada do menu do GDB deveria usar apenas @samp{gdb} para o nome do arquivo,
não @samp{gdb.info}.


@node Outros Diretórios Info
@subsection Arquivos do Info em Outros Diretórios
@cindex Instalando o Info em outro diretório
@cindex Info instalado em outro diretório
@cindex Outro diretório do Info
@cindex Arquivos @file{dir} e diretórios Info

Se um arquivo do Info não estiver no diretório @file{info}, existem três
maneiras de se especificar o local dele:

@enumerate
@item
Escreva o nome do caminho no arquivo @file{dir} como a segunda parte do menu.

@item
Especifique o nome do diretório do Info na variável de ambiente @code{INFOPATH}
em teu arquivo de inicialização @file{.profile} ou @file{.cshrc}. (Somente você
e outros(as) que configuraram essa variável de ambiente poderão encontrar
arquivos do Info cujo local seja especificado dessa maneira).

@item
Se você estiver usando o Emacs, liste o nome do arquivo em um segundo arquivo
@file{dir}, no diretório dele; e então adicione o nome desse diretório à
variável @code{Info-directory-list} no teu arquivo de inicialização pessoal ou
do sítio.

Essa variável diz ao Emacs onde procurar por arquivos @file{dir} (os arquivos
precisam ser nomeados @file{dir}). O Emacs mescla os arquivos nomeados
@file{dir} provenientes de cada um dos diretórios listados. (Na versão 18 do
Emacs, você consegue configurar a variável @code{Info-directory} para o nome de
somente um diretório).
@end enumerate

Por exemplo, para acessar um arquivo de teste no diretório
@file{/home/bob/info}, você poderia adicionar uma entrada como esta ao menu no
arquivo padrão @file{dir}:

@example
* Teste: (/home/bob/info/info-test).  Arquivo de teste do próprio Bob.
@end example

@noindent
Nesse caso, o nome absoluto do arquivo do arquivo @file{info-test} está escrito
como a segunda parte da entrada do menu.

@vindex INFOPATH
@cindex Variável de ambiente @code{INFOPATH}
Se você não quiser editar o arquivo @file{dir} do sistema, você pode dizer ao
Info onde procurar configurando a variável de ambiente @code{INFOPATH} em teu
arquivo de inicialização do shell. Isso funciona com o Emacs e com leitores
Info autônomos.

Especificamente, se usar um shell compatível com Bourne, como @code{sh} ou
@code{bash} para teu interpretador de comandos de shell, você configura a
variável de ambiente @code{INFOPATH} no arquivo de inicialização
@file{.profile}; mas, se usar @code{csh} ou @code{tcsh}, você configura a
variável no arquivo de inicialização @file{.cshrc}. Em sistemas
MS-DOS/MS-Windows, você precisa configurar @code{INFOPATH} em teu arquivo
@file{autoexec.bat} ou no registro. Cada tipo de shell usa uma sintaxe
diferente.

@itemize @bullet
@item
Em um arquivo @file{.cshrc}, você poderia configurar a variável @code{INFOPATH}
conforme segue:

@smallexample
setenv INFOPATH .:~/info:/usr/local/emacs/info
@end smallexample

@item
Em um arquivo @file{.profile}, você alcançaria o mesmo efeito escrevendo:

@smallexample
INFOPATH=.:$HOME/info:/usr/local/emacs/info
export INFOPATH
@end smallexample

@item
@pindex autoexec.bat
Em um arquivo @file{autoexec.bat}, você escreve este comando (observe o uso de
@samp{;} como separador de diretório e uma sintaxe diferente para usar valores
de outras variáveis de ambiente):

@smallexample
set INFOPATH=.;%HOME%/info;c:/usr/local/emacs/info
@end smallexample
@end itemize

@noindent
O @samp{.} indica o diretório atual como de costume. O Emacs usa a variável de
ambiente @code{INFOPATH} para inicializar o valor da variável
@code{Info-directory-list} do próprio Emacs. O leitor Info autônomo mescla
quaisquer arquivos chamados @file{dir} em qualquer diretório listado na
variável @env{INFOPATH} em um menu unitário apresentado a você no nó chamado
@samp{(dir)Top}.

@cindex Dois pontos, último em @env{INFOPATH}
No entanto, você configura @env{INFOPATH}, se o último caractere dela for dois
pontos (em sistemas MS-DOS/MS-Windows, use um ponto e vírgula em vez disso),
ele será substituído pelo caminho padrão (compilado). Isso te dá uma maneira de
aumentar o caminho padrão com novos diretórios sem ter que listar todos os
lugares padrão. Por exemplo (usando a sintaxe do @code{sh}):

@example
INFOPATH=/home/bob/info:
export INFOPATH
@end example

@noindent
pesquisará @file{/home/bob/info} primeiro, depois os diretórios padrão. Dois
pontos iniciais ou duplos não são tratados especialmente.

@cindex Arquivo @file{dir}, criando o teu próprio
Ao criar teu próprio arquivo @file{dir} para uso com @code{Info-directory-list}
ou @env{INFOPATH}, é mais fácil começar copiando um arquivo @file{dir}
existente e substituir todo o texto depois de @samp{* Menu:} pelas tuas
entradas desejadas. Dessa maneira, a pontuação e os caracteres especiais
@kbd{CTRL-_} que o Info precisa estarão presentes.

Como uma alternativa final, que funciona somente com o Info do Emacs, você pode
mudar a variável @code{Info-directory-list}. Por exemplo:

@example
(add-hook 'Info-mode-hook '(lambda ()
	     (add-to-list 'Info-directory-list
			  (expand-file-name "~/info"))))
@end example


@node Instalando Entradas de Diretório
@subsection Instalando Arquivos do Diretório do Info

Quando instalar um arquivo do Info no teu sistema, você pode usar o programa
@code{install-info} para atualizar o arquivo @file{dir} de diretórios do Info.
Normalmente o Makefile para o pacote executa @code{install-info}, logo depois
de copiar o arquivo do Info para o local de instalação apropriado dele.

@findex dircategory
@findex direntry
Para a finalidade de que o arquivo do Info funcione com @code{install-info},
você inclui os comandos @code{@@dircategory} e
@code{@@direntry}@dots{}@code{@@end direntry} no arquivo fonte do Texinfo. Use
@code{@@direntry} para especificar as entradas de menu a adicionar ao arquivo
de diretórios do Info e use @code{@@dircategory} para especificar em qual parte
do diretório do Info colocá-lo. Aqui está como esses comandos são usados neste
manual:

@smallexample
@@dircategory Sistema de documentação Texinfo
@@direntry
* Texinfo: (texinfo).           O formato da documentação GNU.
* install-info: (texinfo)Invocando install-info. @dots{}
@dots{}
@@end direntry
@end smallexample

Aqui está o que isso produz no arquivo do Info:

@smallexample
INFO-DIR-SECTION Sistema de documentação Texinfo
START-INFO-DIR-ENTRY
* Texinfo: (texinfo).           O formato da documentação GNU.
* install-info: (texinfo)Invocando install-info. @dots{}
@dots{}
END-INFO-DIR-ENTRY
@end smallexample

@noindent
O programa @code{install-info} vê essas linhas no arquivo do Info e assim é
como ele sabe o que fazer.

Sempre use os comandos @code{@@direntry} e @code{@@dircategory} perto do começo
da entrada do Texinfo, antes do primeiro comando @code{@@node}. Se você usá-los
mais tarde na entrada, @code{install-info} não os notará.

@code{install-info} automaticamente reformatará a descrição das entradas de
menu que estiver adicionando. Como uma questão de convenção, a descrição da
entrada principal (acima, @samp{O formato da documentação GNU}) deveria começar
na coluna 32, começando em zero (como em @code{what-cursor-position} no Emacs).
Isso fará com que ela se alinhe com a maioria das outras. A descrição para
utilitários individuais deve começar na coluna 48, onde possível. Para mais
informações acerca de formatação, vejam-se as opções @samp{--calign},
@samp{--align} e @samp{--max-width} em @ref{Invocando @command{install-info}}.

Se você usar @code{@@dircategory} mais que uma vez no fonte do Texinfo, cada
uso especificará a categoria `atual'; quaisquer comandos @code{@@direntry}
subsequentes adicionarão a essa categoria.

@cindex Diretório de Software Livre
@cindex Categorias de diretórios, escolhendo
@cindex Categorias, escolhendo
Ao escolher um nome de categoria para o comando @code{@@dircategory}, nós
recomendamos consultar o @uref{http://www.gnu.org/directory, Diretório de
Software Livre}. Se teu programa não estiver listado lá, ou listado incorreta
ou incompletamente, por favor, informe a situação para os(as) mantenedores(as)
do diretório (@url{http://directory.fsf.org}), de forma que os nomes das
categorias possam ser mantidos em sincronia.

Aqui estão alguns exemplos (veja-se o arquivo @file{util/dir-example} na
distribuição do Texinfo para um grande arquivo @code{dir} de amostra):

@display
Emacs
Localização
Impressão
Desenvolvimento de software
Bibliotecas de software
Criação e manipulação de texto
@end display

@cindex Invocando nós, incluindo em arquivo dir
Cada nó `Invoking' para cada programa instalado deveria ter um
@code{@@direntry} correspondente. Isso permite que usuários(as) encontrem
facilmente a documentação para os diferentes programas que podem executar, como
no tradicional sistema @command{man}.


@node Invocando @command{install-info}
@subsection Invocando @command{install-info}

@pindex install-info

@code{install-info} insere entradas de menu a partir de um arquivo do Info no
arquivo @file{dir} de nível superior no sistema Info (vejam-se as seções
anteriores para uma explicação de como o arquivo @file{dir} funciona).
@code{install-info} também remove entradas de menu do arquivo @file{dir}. Ele é
mais frequentemente executado como parte de instalação de software, ou ao
construir um arquivo @file{dir} para todos os manuais em um sistema. Sinopse:

@example
install-info [@var{opção}@dots{}] [@var{arquivo-info} [@var{arquivo-dir}]]
@end example

Se @var{arquivo-info}, ou @var{arquivo-dir} não for especificado, as opções
(descritas abaixo) que os definem precisam ser. Não existem padrões de tempo de
compilação, e a entrada padrão nunca é usada. @code{install-info} pode ler
somente um arquivo do Info e escrever somente um arquivo @file{dir} por
invocação.

@cindex @file{dir}, criado por @code{install-info}
Se @var{arquivo-dir} (como especificado) não existir, @code{install-info} o
criará, se possível (sem entradas).

@cindex Arquivos dir comprimidos, lendo
@cindex Arquivos dir comprimidos com XZ, lendo
@cindex Arquivos dir comprimidos com bzip, lendo
@cindex Arquivos dir comprimidos com Lzip, lendo
@cindex Arquivos dir comprimidos com LZMA, lendo
@cindex Arquivos dir, comprimidos
Se qualquer arquivo de entrada for comprimido com @code{gzip}
(@pxref{Top,,, gzip, Gzip}), @code{install-info} o descomprimirá
automaticamente para leitura. E se @var{arquivo-dir} for comprimido,
@code{install-info} também o deixará comprimido automaticamente depois de
escrever quaisquer mudanças. Se @var{arquivo-dir} em si não existir,
@code{install-info} tentará abrir @file{@var{arquivo-dir}.gz},
@file{@var{arquivo-dir}.xz}, @file{@var{arquivo-dir}.bz2},
@file{@var{arquivo-dir}.lz} e @file{@var{arquivo-dir}.lzma}, nessa ordem.

Opções:

@table @code
@item --add-once
@opindex --add-once@r{, para @command{install-info}}
Especifica que a entrada ou entradas serão colocadas somente em uma seção.

@item --align=@var{coluna}
@opindex --align=@var{coluna}@r{, para @command{install-info}}
Especifica a coluna em que a segunda e as linhas subsequentes da descrição da
entrada do menu serão formatadas para começar. O padrão para essa opção é
@samp{35}. Ela é usada em conjunto com a opção @samp{--max-width}. @var{coluna}
começa contagem em 1.

@item --append-new-sections
@opindex --append-new-sections@r{, para @command{install-info}}
Em vez de ordenar alfabeticamente novas seções, coloque-as ao final do arquivo
DIR.

@item --calign=@var{coluna}
@opindex --calign=@var{coluna}@r{, para @command{install-info}}
Especifica a coluna em que a primeira linha da descrição da entrada do menu
será formatada para começar. O padrão para essa opção é @samp{33}. É usada em
conjunto com a opção @samp{--max-width}. Quando o nome da entrada do menu
excede essa coluna, a descrição da entrada começará na linha seguinte.
@var{coluna} começa contagem em 1.

@item --debug
@opindex --debug@r{, para @command{install-info}}
Informa o que está sendo feito.

@item --delete
@opindex --delete@r{, para @command{install-info}}
Deleta as entradas em @var{arquivo-info} de @var{arquivo-dir}. O nome do
arquivo na entrada em @var{arquivo-dir} precisa ser @var{arquivo-info} (exceto
por um @samp{.info} opcional em qualquer um deles). Não insira quaisquer novas
entradas. Quaisquer seções vazias que resultem da remoção também serão
removidas.

@item --description=@var{texto}
@opindex --description=@var{texto}@r{, para @command{install-info}}
Especifica a parte explicativa da entrada do menu. Se você não especificar uma
descrição (por meio de @samp{--entry}, @samp{--item} ou dessa opção), a
descrição será retirada do próprio arquivo do Info.

@item --dir-file=@var{nome}
@opindex --dir-file=@var{nome}@r{, para @command{install-info}}
Especifica o nome do arquivo do arquivo de diretórios do Info. Isso é
equivalente a usar o argumento @var{arquivo-dir}.

@item --dry-run
@opindex --dry-run@r{, para @command{install-info}}
Mesmo que @samp{--test}.

@item --entry=@var{texto}
@opindex --entry=@var{texto}@r{, para @command{install-info}}
Insere @var{texto} como uma entrada de diretórios do Info; @var{texto} deveria
ter o formato de uma linha de item de menu do Info mais zero ou mais linhas
extras começando com espaço em branco. Se você especificar mais que uma
entrada, todas elas serão adicionadas. Se você não especificar quaisquer
entradas, elas serão determinadas a partir de informações no próprio arquivo do
Info.

@item --help
@opindex --help@r{, para @command{texindex}}
Exibe uma mensagem de uso com o uso básico e todas as opções disponíveis e
então sai com sucesso.

@item --info-file=@var{arquivo}
@opindex --info-file=@var{arquivo}@r{, para @command{install-info}}
Especifica o arquivo do Info para instalar no diretório. Isso é equivalente a
usar o argumento @var{arquivo-info}.

@item --info-dir=@var{diretório}
@opindex --info-dir=@var{diretório}@r{, para @command{install-info}}
Especifica o diretório onde o arquivo de diretórios @file{dir} reside.
Equivalente a @samp{--dir-file=@var{diretório}/dir}.

@item --infodir=@var{diretório}
@opindex --infodir=@var{diretório}@r{, para @command{install-info}}
Mesmo que @samp{--info-dir}.

@item --item=@var{texto}
@opindex --item=@var{texto}@r{, para @command{install-info}}
Mesmo que @samp{--entry=@var{texto}}. Uma entrada de diretórios do Info é, na
verdade, um item de menu.

@item --keep-old
@opindex --keep-old@r{, para @command{install-info}}
Não substitui entradas de menu preexistentes. Quando @samp{--remove} é
especificado, essa opção significa que seções vazias não são removidas.

@item --max-width=@var{coluna}
@opindex --max-width=@var{coluna}@r{, para @command{install-info}}
Especifica a coluna na qual a descrição da entrada do menu será quebrada.
@var{coluna} começa contagem em 1.

@item --maxwidth=@var{coluna}
@opindex --maxwidth=@var{coluna}@r{, para @command{install-info}}
Mesmo que @samp{--max-width}.

@item --menuentry=@var{texto}
@opindex --menuentry=@var{texto}@r{, para @command{install-info}}
Mesmo que @samp{--name}.

@item --name=@var{texto}
@opindex --name=@var{texto}@r{, para @command{install-info}}
Especifica a parte do nome da entrada do menu. Se o @var{texto} não começar com
um asterisco @samp{*}, é presumido ser o texto depois do @samp{*} e antes dos
parênteses que especificam o arquivo do Info. Caso contrário, @var{texto} é
tomado literalmente e é tomado como definindo o texto até e incluindo o
primeiro ponto (um espaço é posposto se necessário). Se você não especificar o
nome (por meio de @samp{--entry}, @samp{--item} ou dessa opção), ele será
obtido do próprio arquivo do Info. Se o Info não contiver o nome, o nome base
do arquivo do Info será usado.

@item --no-indent
@opindex --no-indent@r{, para @command{install-info}}
Suprime a formatação de novas entradas no arquivo @file{dir}.

@item --quiet
@itemx --silent
@opindex --quiet@r{, para @command{install-info}}
@opindex --silent@r{, para @command{install-info}}
Suprime avisos, etc., para operação silenciosa.

@item --remove
@opindex --remove@r{, para @command{install-info}}
Mesmo que @samp{--delete}.

@item --remove-exactly
@opindex --remove-exactly@r{, para @command{install-info}}
Também como @samp{--delete}, mas somente entradas se o nome do arquivo do Info
corresponder exatamente; os sufixos @code{.info} e (ou) @code{.gz} @emph{não}
são ignorados.

@item --section=@var{seção}
@opindex --section=@var{seção}@r{, para @command{install-info}}
Coloca as entradas desse arquivo na seção @var{seção} do diretório. Se você
especificar mais que uma seção, todas as entradas serão adicionadas em cada uma
das seções. Se você não especificar quaisquer seções, elas serão determinadas a
partir de informações no próprio arquivo do Info. Se o arquivo do Info não
especificar uma seção, as entradas do menu serão colocadas na seção
Miscelâneas.

@item --section @var{expressãoregular} @var{seção}
@opindex --section @var{expressãoregular} @var{seção}@r{, para @command{install-info}}
Mesmo que @samp{--regex=@var{expressãoregular} --section=@var{seção} --add-once}.

@code{install-info} tenta detectar quando essa sintaxe alternativa é usada, mas
nem sempre adivinha corretamente. Aqui está a heurística que
@code{install-info} usa:
@enumerate
@item
Se o segundo argumento para @code{--section} começar com um hífen, a sintaxe
original será presumida.

@item
Se o segundo argumento para @code{--section} for um arquivo que possa ser
aberto, a sintaxe original será presumida.

@item
Caso contrário, a sintaxe alternativa será usada.
@end enumerate

Quando a heurística falha porque o título da tua seção começa com um hífen, ou
acontece de ser um nome de arquivo que pode ser aberto, a sintaxe deveria ser
mudada para
@samp{--regex=@var{expressãoregular} --section=@var{seção} --add-once}.

@item --regex=@var{expressãoregular}
@opindex --regex=@var{expressãoregular}@r{, para @command{install-info}}
Coloca as entradas desse arquivo em qualquer seção que corresponda a
@var{expressãoregular}. Se mais que uma seção corresponder, todas as entradas
serão adicionadas em cada uma das seções. Especifique @var{expressãoregular}
usando a sintaxe básica de expressão regular, mais ou menos como usada com
@command{grep}, por exemplo.

@item --test
@opindex --test@r{, para @command{install-info}}
Suprime atualização do arquivo de diretórios.

@item --version
@opindex --version@r{, para @command{install-info}}
@cindex Número de versão, para install-info
Exibe informações da versão e sai com sucesso.

@end table


@node Gerando HTML
@chapter Gerando HTML

@cindex Gerando HTML
@cindex Gerando HTML

@command{makeinfo} gera saída do Info por padrão, mas dada a opção
@option{--html}, ele gerará HTML, para navegadores da web e outros programas.
Este capítulo fornece alguns detalhes acerca tal saída HTML.

@command{makeinfo} tem muitas variáveis de personalização definidas por
usuário(a) com as quais você pode influenciar a saída HTML.
@xref{Variáveis de Personalização}.

@command{makeinfo} também pode produzir saída nos formatos XML e Docbook, mas
nós ainda não os descrevemos em detalhes. @xref{Formatos de Saída}, para uma
breve visão geral de todos os formatos de saída.

@menu
* Tradução de HTML:: Detalhes da saída HTML.
* Divisão de HTML::  Como a saída HTML é dividida.
* CSS de HTML::      Influenciando a saída HTML com Folhas de Estilo em Cascata.
* Xref de HTML::     Referências cruzadas em saída HTML.
@end menu


@node Tradução de HTML
@section Tradução de HTML

@cindex Tradução de HTML

@cindex Tradução de HTML, compatibilidade do navegador da
Primeiro, o HTML gerado por @command{makeinfo} é o HTML@tie{}4 padrão. Ele
também tenta ser compatível com padrões anteriores (por exemplo, HTML@tie{}2.0,
RFC-1866). Portanto, por favor, informe a saída proveniente de uma execução sem
erros de @code{makeinfo} que tenha problemas práticos de portabilidade do
navegador como um defeito (@pxref{Informando Defeitos}).

@pindex html32.pm
Algumas exceções conhecidas ao HTML@tie{}3.2 (usar @samp{--init-file=html32.pm}
produz uma saída de estrito HTML@tie{}3.2;
@pxref{Invocando @command{texi2any}}):

@enumerate
@item
As tabelas HTML@tie{}3.2 são geradas para o comando @code{@@multitable}
(@pxref{Tabelas Multi Colunas}), mas elas deveriam degradar razoavelmente em
navegadores sem suporte a tabelas.

@item
O atributo @samp{lang} do HTML@tie{}4 no atributo @samp{<html>} é usado.

@item
Entidades que não estão no padrão HTML@tie{}3.2 também são usadas.

@item
CSS é usado (@pxref{CSS de HTML}).

@item
Alguns elementos do HTML@tie{}4 são usados: @code{thead}, @code{abbr},
@code{acronym}.

@end enumerate

Para alcançar a máxima portabilidade e acessibilidade entre navegadores (tanto
gráficos quanto baseados em texto), sistemas e usuários(as), a saída HTML é
intencionalmente bem simples e genérica. Isso sempre tem sido nosso objetivo
para usuários(as) estarem aptos(as) a personalizarem a saída aos desejos
deles(as) via CSS (@pxref{CSS de HTML}) ou outros meios
(@pxref{Variáveis de Personalização}. Se você não conseguir realizar uma
personalização razoável, sinta-se à vontade para informar isso.

No entanto, nós não desejamos nos afastarmos do nosso objetivo básico de
legibilidade mais ampla para a saída principal. Por exemplo, usar CSS
sofisticado pode tornar possível que a saída HTML se assemelhe mais à saída do
@TeX{} em alguns detalhes, mas esse resultado não chega nem perto de compensar
as dificuldades decorrentes.

Também não é intencionalmente nosso objetivo, e nem mesmo possível, passar por
cada teste concebível de validação sem quaisquer diagnósticos. Testes
diferentes de validação tem objetivos diferentes, frequentemente acerca da
aplicação pedante de algum padrão ou outro. Nosso objetivo primordial é o de
ajudar usuários(as), não cumprir cegamente os padrões.

Para repetir o que foi dito acima: por favor, informe a saída oriunda de uma
execução sem erros do @code{makeinfo} que tenha problemas @emph{práticos} de
portabilidade do navegador como um defeito (@pxref{Informando Defeitos}).

Uns poucos outros pontos gerais acerca da saída HTML seguem.

@cindex Barra de navegação, na saída HTML
@strong{Barra de navegação:} Por padrão, uma barra de navegação é inserida no
início de cada nó, análogo à saída do Info. Se a opção @samp{--no-headers} for
usada, a barra de navegação será inserida somente no início dos arquivos
divididos. Elementos @code{<link>} do cabeçalho na saída dividida podem
suportar navegação semelhante à Info com navegadores como Lynx e @w{Emacs W3}
que implementam esse recurso HTML@tie{}1.0.

@cindex Estilos de nota de rodapé, em HTML
@strong{Notas de rodapé:} para HTML, quando o estilo de nota de rodapé for
@samp{end}, ou se a saída não for dividida, as notas de rodapé são colocadas no
final da saída. Se o estilo de nota de rodapé for configurado para
@samp{separate}, e a saída for dividida, elas serão colocadas em um arquivo
separado. @xref{Estilos de Notas de Rodapé}.

@cindex Escapagem para HTML
@cindex HTML bruto
@strong{HTML bruto}: @command{makeinfo} incluirá segmentos do fonte do Texinfo
entre @code{@@ifhtml} e @code{@@end ifhtml} na saída HTML (mas não nenhum dos
outros Condicionais, por padrão). O fonte entre @code{@@html} e
@code{@@end html} é passado sem mudanças para a saída (ou seja, suprimindo a
escapagem normal dos caracteres de entrada @samp{<}, @samp{>} e @samp{&}, os
quais tem significado especial em HTML)@. @xref{Comandos Condicionais}.


@node Divisão de HTML
@section Divisão de HTML
@cindex Saída dividida de HTML
@cindex Saída HTML, dividida

Ao dividir a saída nos nós (que é o padrão), @command{makeinfo} escreve a
saída HTML em (basicamente) um arquivo de saída por @code{@@node} do fonte do
Texinfo.

Cada nome de arquivo de saída é o nome do nó com espaços substituídos por
@samp{-} e caracteres especiais mudados para @samp{_} seguidos pelo ponto de
código deles em hexadecimal (@pxref{Xref de HTML}). Isso é para torná-lo
portável e fácil de usar como um nome de arquivo. No caso incomum de dois nós
terem o mesmo nome depois desse tratamento, eles serão escritos
consecutivamente no mesmo arquivo, com âncoras HTML, de forma que cada um possa
ser referenciado independentemente.

Se @command{makeinfo} for executado em um sistema que não distingue maiúsculas
de minúsculas em nomes de arquivo, os nós que forem os mesmos, exceto por
maiúsculas e minúsculas (por exemplo, @samp{index} e @samp{Index}), também
serão guardados no mesmo arquivo de saída com âncoras. Você também pode fingir
estar em um sistema de arquivos que não diferencia maiúsculas de minúsculas,
configurando a variável de personalização @code{CASE_INSENSITIVE_FILENAMES}.

Também é possível dividir em capítulos ou seções com @option{--split}
(@pxref{Invocando @command{texi2any}}). Nesse caso, os nomes dos arquivos são
construídos depois do nome do nó associado ao relevante comando de
seccionamento. Além disso, a menos que @option{--no-node-files} seja
especificada, um arquivo de redirecionamento é gerado para cada nó para a
finalidade de suportar mais confiavelmente referências cruzadas para esse
manual (@pxref{Xref de HTML}).

Ao dividir, os arquivos de saída HTML são gravados em um subdiretório, com o
nome escolhido conforme segue:

@enumerate
@item
@command{makeinfo} primeiro tenta o subdiretório com o nome base oriundo de
@code{@@setfilename} (ou seja, qualquer extensão é removida). Por exemplo, a
saída HTML para @code{@@setfilename gcc.info} seria escrita em um subdiretório
chamado @samp{gcc/}.

@item
Se esse diretório não puder ser criado por qualquer motivo, então
@command{makeinfo} tentará pospor @samp{.html} no nome do diretório. Por
exemplo, a saída para @code{@@setfilename texinfo} seria escrita em
@samp{texinfo.html/}.

@item
Se o diretório @samp{@var{nome}.html} também não puder ser criado,
@code{makeinfo} desistirá.

@end enumerate

@noindent Em qualquer caso, o arquivo de saída de nível superior dentro do
diretório é sempre chamado @samp{index.html}.

A saída monolítica (@code{--no-split}) é nomeada de acordo com
@code{@@setfilename} (com qualquer extensão @samp{.info} substituída por
@samp{.html}), @code{--output} (o argumento é usado literalmente) ou baseada no
nome do arquivo de entrada como último recurso (@pxref{@code{@@setfilename}}).


@node CSS de HTML
@section CSS de HTML
@cindex HTML, e CSS
@cindex CSS, e saída HTML
@cindex Folhas de estilo em cascata e saída HTML

Cascading Style Sheets (CSS para abreviar) é um padrão da Internet para
influenciar a exibição de documentos HTML: veja-se
@uref{http://www.w3.org/Style/CSS/}.

Por padrão, @command{makeinfo} inclui alguns comandos CSS simples para
implementar melhor a aparência de alguns ambientes do Texinfo. Aqui estão dois
deles, como um exemplo:

@example
pre.display @{ font-family:inherit @}
pre.smalldisplay @{ font-family:inherit; font-size:smaller @}
@end example

Uma explicação completa de CSS está (muito) além deste manual; por favor,
veja-se a referência acima. Em resumo, no entanto, o acima diz ao navegador da
web para usar um tamanho de fonte `menor' para o texto de @code{@@smalldisplay}
e para usar a mesma fonte do documento principal para @code{@@smalldisplay} e
@code{@@display}. Por padrão, o comando @samp{<pre>} do HTML usa uma fonte
mono-espaçada.

Você pode influenciar o CSS na saída HTML com duas opções do
@command{makeinfo}: @option{--css-include=@var{arquivo}} e
@option{--css-ref=@var{url}}.

@pindex texinfo-bright-colors.css
@cindex CSS de Visualização do Texinfo
A opção @option{--css-ref=@var{url}} adiciona a cada arquivo de saída HTML uma
etiqueta @samp{<link>} referenciando um CSS no @var{url} fornecido. Isso permite
usar folhas de estilo externas. Você pode achar o arquivo
@file{texi2html/examples/texinfo-bright-colors.css} útil para visualizar os
elementos CSS na saída do Texinfo.

A opção @option{--css-include=@var{arquivo}} inclui o conteúdo @var{arquivo} na
saída HTML, como você pode esperar. Entretanto, os detalhes são um pouco
complicados, conforme descrito a seguir, para fornecer flexibilidade máxima.

@cindex Especificações de @samp{@@import}, em arquivos CSS
O arquivo CSS pode começar com as assim chamadas diretivas @samp{@@import}, as
quais lincam especificações externas de CSS para navegadores usarem ao
interpretar o documento. Novamente, uma descrição completa está além do nosso
escopo aqui, mas nós descreveremos sintaticamente como elas funcionam, de forma
que possamos explicar como @command{makeinfo} as manuseia.

@cindex Comentários, em arquivos CSS
Podem existir mais que um @samp{@@import}, mas eles tem que vir primeiro no
arquivo, com somente espaços em branco e comentários intercalados, sem
definições normais. (Exceção técnica: uma diretiva @samp{@@charset} pode
preceder os @samp{@@import}. Isso não altera o comportamento do
@command{makeinfo}; ele apenas copia o @samp{@@charset} se presente).
Comentários em arquivos CSS são delimitados por @samp{/* ... */}, como em C@.
Uma diretiva @samp{@@import} precisa estar em uma destas duas formas:

@example
@@import url(http://exemplo.org/foo.css);
@@import "http://exemplo.net/bar.css";
@end example

No que diz respeito a @command{makeinfo}, os caracteres cruciais são o
@samp{@@} no início e o ponto e vírgula terminando a diretiva. Ao ler o arquivo
CSS, ele simplesmente copia qualquer diretiva @samp{@@} para a saída, como
segue:

@itemize
@item Se @var{arquivo} contiver somente declarações normais CSS, ele será
incluído depois do CSS padrão do @command{makeinfo}, assim substituindo-o.

@item Se @var{arquivo} começar com as especificações @samp{@@import} (veja-se
abaixo), então os @samp{import} serão incluídos primeiro (eles tem de vir
primeiro, de acordo com o padrão), e então o CSS padrão do @command{makeinfo}
será incluído. Se você precisar substituir os padrões do @command{makeinfo} a
partir de um @samp{@@import}, você pode fazer isso com a construção
@samp{!@: important} do CSS, como em:

@example
pre.pequenoexemplo @{ font-size: inherit ! important @}
@end example

@item Se @var{arquivo} contiver especificações de @samp{@@import} e internas de
CSS, as de @samp{@@import} serão incluídas primeiro, depois os padrões de
@command{makeinfo} e, por último, a interna de CSS proveniente de
@var{arquivo}.

@item Qualquer diretiva @@ diferente de @samp{@@import} e @samp{@@charset} é
tratada como uma declaração CSS, significando que @command{makeinfo} inclui o
CSS padrão dele e, em seguida, o restante do arquivo.
@end itemize

Se o arquivo CSS estiver malformado ou errôneo, a saída do @command{makeinfo}
será inespecificada. O @command{makeinfo} não tenta interpretar o significado
do arquivo CSS de maneira alguma; ele apenas procura pelos caracteres especiais
@samp{@@} e @samp{;} e copia cegamente o texto para a saída. Comentários no
arquivo CSS podem ou não ser incluídos na saída.

Além das possibilidades oferecidas pelo CSS, @command{makeinfo} tem muitas
variáveis de personalização definíveis por usuário(a) com as quais você
consegue influenciar a saída HTML. @xref{Variáveis de Personalização}.


@node Xref de HTML
@section Referências Cruzadas de HTML
@cindex Referências cruzadas de HTML
@cindex Referências cruzadas, em saída HTML

Referências cruzadas entre manuais do Texinfo em formato HTML se tornam, no
final, um link @code{<a>} padrão do HTML, mas os detalhes são infelizmente
complexos. Esta seção descreve o algoritmo usado em detalhes, de forma que o
Texinfo consiga cooperar com outros programas, tais como @command{texi2html},
escrevendo arquivos HTML mutuamente compatíveis.

Este algoritmo pode ou não ser usado para links @emph{dentro} da saída HTML
para um arquivo do Texinfo. Dado que nenhum problema de compatibilidade surge
em tais casos, nós não precisamos especificar isso.

Nós tentamos suportar referências a esses manuais ``externos'' em formatos
monolíticos e divididos. Um manual @dfn{monolítico} (mono) está inteiramente
contido em um arquivo, e um manual @dfn{dividido} tem um arquivo para cada nó.
(@xref{Divisão de HTML}).

@cindex Dumas, Patrice
O algoritmo foi desenvolvido principalmente por Patrice Dumas em 2003--04.

@menu
* Fundamentos de Link: Fundamentos do Link Xref do HTML.
* Expansão de Nó:    Expansão Xref de Nome de Nó do HTML.
* Expansão de Comando: Expansão do Comando Xref do HTML.
* Expansão de 8 bits:  Expansão de Caracteres de 8 bits do Xref do HTML.
* Incompatibilidade:   Incompatibilidade de Xref do HTML.
* Configuração:        Configuração do Xref do HTML. htmlxref.cnf.
* Preservando links:   Preservação de Link Xref do HTML. MANUAL-noderename.cnf.
@end menu


@node Fundamentos do Link Xref do HTML
@subsection Fundamentos do Link de Referência Cruzada do HTML
@cindex Fundamentos do link de referência cruzada do HTML

Para nossos propósitos, um link do HTML consiste de quatro componentes: um nome
de dispositivo, uma parte de diretório, uma parte de arquivo e uma parte de
alvo. Nós sempre assumimos o protocolo @code{http}. Por exemplo:

@example
http://@var{dispositivo}/@var{diretório}/@var{arquivo}.html#@var{alvo}
@end example

As informações para construir um link vem do nome do nó e do nome do manual no
comando de referência cruzada no fonte do Texinfo
(@pxref{Referências Cruzadas}) e de @dfn{informações externas}
(@pxref{Configuração do Xref do HTML}).

Nós agora consideramos cada parte separadamente.

O @var{dispositivo} é programado para ser o dispositivo local. Isso poderia ser
ou a string literal @samp{localhost} ou, de acordo com as regras para links
HTML, o @samp{http://localhost/} poderia ser omitido completamente.

As partes @var{diretório} e @var{arquivo} são mais complicadas e dependem da
natureza relativa de divisão/mono do manual sendo processado e do manual ao
qual a referência cruzada se refere. A ideia subjacente é a de que existe um
diretório para manuais do Texinfo em HTML, e um dado @var{manual} ou está
disponível como um arquivo monolítico @file{@var{manual}.html} ou como um
subdiretório dividido @file{@var{manual}/*.html}. Aqui estão os casos:

@itemize @bullet
@item
Se o manual atual estiver dividido, e o manual referente também estiver
dividido, o diretório será @samp{../@var{referente/}} e o arquivo será o nome
do nó expandido (descrito posteriormente).

@item
Se o manual atual estiver dividido e o manual referente estiver monolítico, o
diretório será @samp{../} e o arquivo será @file{@var{referente}.html}.

@item
Se o manual atual estiver monolítico e o manual referente estiver dividido, o
diretório será @file{@var{referente}/} e o arquivo será o nome do nó expandido.

@item
Se o manual atual estiver monolítico e o manual referente também estiver
monolítico, o diretório será @file{./} (ou apenas a string vazia), e o arquivo
será @file{@var{referente}.html}.

@end itemize

@vindex BASEFILENAME_LENGTH
Outra regra, que só vale para nomes de arquivo, é que nomes de arquivo base são
truncados para 245 caracteres, para permitir para uma extensão ser posposta e
ainda cumprir com o limite de 255 caracteres, o qual é comum a muitos sistemas
de arquivo. Embora, tecnicamente, isso possa ser mudado com a variável de
personalização @code{BASEFILENAME_LENGTH}
(@pxref{Outras Variáveis de Personalização}), fazer isso tornaria referências
entre manuais para tais nós inválidas.

Qualquer parte de diretório no argumento do nome de arquivo do comando fonte da
referência cruzada é ignorada. Assim, @code{@@xref@{,,,../foo@}} e
@code{@@xref@{,,,foo@}} ambos usam @samp{foo} como o nome do manual. Isso é
porque qualquer tal conexão rígida tentada do diretório dificilmente seja útil
para ambas as saídas Info e HTML.

Finalmente, a parte @var{alvo} sempre é o nome do nó expandido.

Se o manual atual será dividido ou monolítico é determinado pela opção de
usuário(a); @command{makeinfo} padroniza para dividir, com a opção
@option{--no-split} substituindo isso.

Se o manual referente é dividido ou monolítico, no entanto, é outra parte da
informação externa (@pxref{Configuração do Xref do HTML}). Por padrão,
@command{makeinfo} usa o mesmo formato do manual referente como o manual atual.

Portanto, pode existir uma incompatibilidade entre o formato do manual
referente que o software gerador assume e o formato em que ele realmente está
presente. @xref{Incompatibilidade de Xref do HTML}.


@node Expansão Xref de Nome de Nó do HTML
@subsection Expansão de Nome de Nó de Referência Cruzada do HTML
@cindex Expansão de nome de nó de referência cruzada do HTML
@cindex Expansão de nome de nó, em referências cruzados do HTML
@cindex Expansão, de nomes de nó em referências cruzadas do HTML

Conforme mencionado na seção anterior, a parte chave do algoritmo de referência
cruzada do HTML é a conversão de nomes de nós no fonte do Texinfo em strings
adequadas para identificadores e nomes de arquivo do XHTML. As restrições são
semelhantes para cada um: letras ASCII simples, números e os caracteres
@samp{-} e @samp{_} são tudo o que pode ser usado. (Embora âncoras HTML possam
conter a maioria dos caracteres, XHTML é mais restritivo).

Referências cruzadas no Texinfo podem se referir ou a nós ou a âncoras
(@pxref{@code{@@anchor}}). No entanto, âncoras são tratadas identicamente a
nós nesse contexto, de forma que nós continuaremos a dizer nomes de ``nós''
por simplicidade.

Uma exceção especial: o nó Top (@pxref{O Nó Top}) sempre é mapeado para o
arquivo @file{index.html}, para corresponder ao software do servidor web. Não
obstante, o @emph{alvo} do HTML é @samp{Top}. Assim (no caso dividido):

@example
@@xref@{Top,,, emacs, O Manual do GNU Emacs@}.
@result{} <a href="emacs/index.html#Top">
@end example

@enumerate
@item
As letras ASCII padrão (a-z e A-Z) não são modificadas. Todos os outros
caracteres podem ser mudados conforme especificado abaixo.

@item
Os números ASCII padrão (0-9) não são modificados, exceto quando um número é o
primeiro caractere do nome do nó. Nesse caso, veja-se abaixo.

@item
Vários espaços consecutivos, tabulações e caracteres de nova linha são
transformados em apenas um espaço. (Não é possível ter novas linhas em nomes de
nós com a implementação atual, mas nós especificamos isso de qualquer maneira,
só por precaução).

@item
Espaços iniciais e finais são removidos.

@item
Depois que o acima tenha sido aplicado, cada caractere de espaço restante é
convertido em um caractere @samp{-}.

@item
Outros caracteres ASCII de 7 bits são transformados em @samp{_00@var{xx}}, onde
@var{xx} é o código de caractere ASCII em hexadecimal (minúsculo). Isso inclui
@samp{_}, que é mapeado para @samp{_005f}.

@item
Se o nome do nó não começar com uma letra, a string literal @samp{g_t} será
prefixada ao resultado. (Devido às regras acima, essa string nunca pode ocorrer
de outra forma; é uma escolha arbitrária, significando ``GNU Texinfo''). Isso é
necessário porque o XHTML exige que os identificadores comecem com uma letra.

@end enumerate

Por exemplo:

@example
@@node Um  nó --- com _'%
@result{} Um-nó-_002d_002d_002d-com-_005f_0027_0025
@end example

Exemplo de traduções de caracteres comuns:

@itemize @bullet
@item @samp{_} @result{} @samp{_005f}
@item @samp{-} @result{} @samp{_002d}
@item @samp{Um  nó} @result{} @samp{Um-nó}
@end itemize

Em sistemas computacionais com conversão para minúsculas, nós que diferem
somente pela caixa serão mapeados para o mesmo arquivo. Em particular, como
mencionado acima, Top sempre mapeia para o arquivo @file{index.html}. Assim, em
um sistema com conversão para minúsculas, Top e um nó chamado `Index' serão
ambos escritos em @file{index.html}. Felizmente, os alvos servem para
distinguir esses casos, já que os nomes de alvos do HTML são sempre sensíveis à
caixa, independente do sistema operacional.


@node Expansão do Comando Xref do HTML
@subsection Expansão do Comando de Referências Cruzadas do HTML
@cindex Expansão do comando de referências cruzadas do HTML

Os nomes dos nós podem conter comandos @@
(@pxref{Exigências de Linha de Nó}). Esta seção descreve como eles são
manuseados.

Primeiro, os comentários são removidos.

Em seguida, quaisquer comandos @code{@@value} (@pxref{@code{@@set @@value}}) e
invocações de macro (@pxref{Invocando Macros}) são totalmente expandidos.

Então, para os comandos a seguir, o nome e as chaves do comando é removido, e o
texto do argumento é transformado recursivamente:

@example
@@asis @@b @@cite @@code @@command @@dfn @@dmn @@dotless
@@emph @@env @@file @@i @@indicateurl @@kbd @@key
@@samp @@sansserif @@sc @@slanted @@strong @@sub @@sup
@@t @@U @@var @@verb @@w
@end example

@noindent Para @code{@@sc}, quaisquer letras são maiúsculas.

Além disso, os seguintes comandos são substituídos por texto constante, como
mostrado abaixo. Se qualquer um desses comandos tiver argumentos não vazios,
como em @code{@@TeX@{ruim@}}, é um erro, e o resultado é inespecificado. Nesta
tabela, `(espaço)' significa um caractere de espaço e `(nada)' significa a
string vazia. A notação `U+@var{hhhh}' significa ponto de código Unicode
@var{hhhh} (em hexadecimal, como de costume).

Existem outras transformações de muitas dessas expansões para produzir o
arquivo final ou outro nome de alvo, como caracteres de espaço para @samp{-},
etc., de acordo com as outras regras.

@multitable @columnfractions .3 .5
@item @code{@@(newline)}        @tab (espaço)
@item @code{@@(space)}          @tab (espaço)
@item @code{@@(tab)}            @tab (espaço)
@item @code{@@!}                @tab @samp{!}
@item @code{@@*}                @tab (espaço)
@item @code{@@-}                @tab (nada)
@item @code{@@.}                @tab @samp{.}
@item @code{@@:}                @tab (nada)
@item @code{@@?}                @tab @samp{?}
@item @code{@@@@}               @tab @samp{@@}
@item @code{@@@{}               @tab @samp{@{}
@item @code{@@@}}               @tab @samp{@}}
@item @code{@@LaTeX}            @tab @samp{LaTeX}
@item @code{@@TeX}              @tab @samp{TeX}
@item @code{@@arrow}            @tab U+2192
@item @code{@@bullet}           @tab U+2022
@item @code{@@comma}            @tab @samp{,}
@item @code{@@copyright}        @tab U+00A9
@item @code{@@dots}             @tab U+2026
@item @code{@@enddots}          @tab @samp{...}
@item @code{@@equiv}            @tab U+2261
@item @code{@@error}            @tab @samp{error-->}
@item @code{@@euro}             @tab U+20AC
@item @code{@@exclamdown}       @tab U+00A1
@item @code{@@expansion}        @tab U+21A6
@item @code{@@geq}              @tab U+2265
@item @code{@@leq}              @tab U+2264
@item @code{@@minus}            @tab U+2212
@item @code{@@ordf}             @tab U+00AA
@item @code{@@ordm}             @tab U+00BA
@item @code{@@point}            @tab U+2605
@item @code{@@pounds}           @tab U+00A3
@item @code{@@print}            @tab U+22A3
@item @code{@@questiondown}     @tab U+00BF
@item @code{@@registeredsymbol} @tab U+00AE
@item @code{@@result}           @tab U+21D2
@item @code{@@textdegree}       @tab U+00B0
@item @code{@@tie}              @tab (espaço)
@end multitable

Comandos @@ de aspas (@code{@@quotedblright@{@}} e similares) são igualmente
substituídos pelos valores Unicode deles. @emph{Caracteres} de aspas normais
(por exemplo, ` e ' do ASCII) não são alterados. @xref{Inserindo Aspas}.

Quaisquer comandos @code{@@acronym}, @code{@@abbr}, @code{@@email} e
@code{@@image} são substituídos pelo primeiro argumento deles. (Para esses
comandos, todos os argumentos subsequentes são opcionais e ignorados aqui).
@xref{@code{@@acronym}}, e @ref{@code{@@email}} e @ref{Imagens}.

Acentos são manuseados de acordo com a próxima seção.

Qualquer outro comando é um erro e o resultado é inespecificado.


@node Expansão de Caracteres de 8 bits do Xref do HTML
@subsection Expansão de Caracteres de 8 Bits das Referências Cruzadas do HTML
@cindex Expansão de caracteres de 8 bits das referências cruzadas do HTML
@cindex Caracteres de 8 bits, em referências cruzadas do HTML
@cindex Expansão dos caracteres de 8 bits em referências cruzadas do HTML
@cindex Transliteração dos caracteres de 8 bits em referências cruzadas do HTML

Usualmente, caracteres diferentes de ASCII simples de 7 bits são transformados
no(s) correspondente(s) ponto(s) de código Unicode na Forma de
Normalização@tie{}C, que usa caracteres pré-compostos quando disponíveis. (Esse
é a forma de normalização recomendada pelo W3C e outros órgãos). Isso vale
quando esse ponto de código é @code{0xffff} ou menos, como quase sempre é.

Eles serão então transformados pelas regras acima na string @samp{_@var{hhhh}},
onde @var{hhhh} é o ponto de código em hexadecimal.

Por exemplo, combinando esta regra e a seção anterior:

@example
@@node @@b@{A@} @@TeX@{@} @@u@{B@} @@point@{@}@@enddots@{@}
@result{} A-TeX-B_0306-_2605_002e_002e_002e
@end example

Aviso: 1)@tie{}@code{@@enddots} expande para três pontos, os quais, por sua
vez, expandem para três @samp{_002e}; 2)@tie{}@code{@@u@{B@}} é um `B' com um
acento breve, que não existe como um caractere Unicode pré-acentuado, portanto
expande para @samp{B_0306} (B com acento breve combinado).

Quando o ponto de código Unicode está acima de @code{0xffff}, a transformação é
@samp{__@var{xxxxxx}}, ou seja, dois sublinhados iniciais seguidos por seis
dígitos hexadecimais. Como o Unicode declarou que o ponto de código mais alto
deles é @code{0x10ffff}, isso é suficiente. (Nós sentimos que era melhor
definir esse escape extra que sempre usar seis dígitos hexadecimais, já que os
dois primeiros seriam quase sempre zeros).

Esse método funciona bem se o nome do nó consistir principalmente de caracteres
ASCII e contiver somente alguns de 8 bits. Mas, se o documento estiver escrito
em um idioma cujo script não é baseado no alfabeto latino (por exemplo,
ucraniano), ele criará nomes de arquivo consistindo quase inteiramente de
notações @samp{_@var{xxxx}}, as quais são inconvenientes e quase ilegíveis.
Para lidar com esses casos, @command{makeinfo} oferece a opção de linha de
comando @option{--transliterate-file-names}. Essa opção habilita
@dfn{transliteração} de nomes de nó em caracteres ASCII para os propósitos da
criação e referenciamento de nome de arquivo. A transliteração é baseada em
princípios fonéticos, o que torna os nomes gerados de arquivos mais facilmente
compreensíveis.

@cindex Forma de Normalização C, Unicode
Para a definição da Forma de Normalização@tie{}C do Unicode, veja-se o informe
Unicode UAX#15, @uref{http://www.unicode.org/reports/tr15/}. Muitos documentos
e implementações relacionados estão disponíveis em outros lugares na web.


@node Incompatibilidade de Xref do HTML
@subsection Incompatibilidade de Referências Cruzadas do HTML
@cindex Incompatibilidade de referências cruzadas do HTML
@cindex Origem e alvo das referências cruzadas do HTML incorrespondidos

Conforme mencionado anteriormente (@pxref{Fundamentos do Link Xref do HTML}), o
software gerador pode precisar adivinhar se um manual fornecido sendo
referenciado cruzadamente está disponível em formato dividido ou
monolítico---e, inevitavelmente, pode adivinhar errado. No entanto, quando o
manual do @emph{referente} é gerado, é possível lidar com pelo menos algumas
incompatibilidades.

No caso onde nós assumimos que o referente é dividido, mas ele está realmente
disponível em monolítico, o único recurso seria gerar um subdiretório
@file{manual/} cheio de arquivos HTML que redirecionam de volta para o
monolítico @file{manual.html}. Como isso é essencialmente o mesmo que um manual
dividido em primeiro lugar, não é muito atraente.

Por outro lado, no caso onde nós assumimos que o referente é monolítico, mas
ele está realmente disponível dividido, é possível usar JavaScript para
redirecionar a partir do supostamente monolítico @file{manual.html} para os
diferentes arquivos @file{manual/node.html}. Aqui está um exemplo:

@example
function redirect() @{
  switch (location.hash) @{
    case "#Nodo1":
      location.replace("manual/Nodo1.html#Nodo1"); break;
    case "#Nodo2" :
      location.replace("manual/Nodo2.html#Nodo2"); break;
    @dots{}
    default:;
  @}
@}
@end example

Então, na etiqueta @code{<body>} de @file{manual.html}:

@example
<body onLoad="redirect();">
@end example

Mais uma vez, isso é algo que o software que gerou o manual @emph{referente}
tem que fazer com antecedência, não é algo que o software que gera a referência
cruzada no manual atual pode controlar.


@node Configuração do Xref do HTML
@subsection Configuração de Referência Cruzada do HTML: @file{htmlxref.cnf}

@pindex htmlxref.cnf
@cindex Configuração de referência cruzada do HTML
@cindex Configuração de referência cruzada, para HTML
@cindex Configuração, para referências do HTML entre manuais

@command{makeinfo} lê um arquivo chamado @file{htmlxref.cnf} para reunir
informações para referências cruzadas para outros manuais na saída HTML. Ele é
procurado nos seguintes diretórios:

@table @file
@item ./
(o diretório atual)

@item ./.texinfo/
(sob o diretório atual)

@item ~/.texinfo/
(onde @code{~} é o diretório inicial do(a) usuário(a) atual)

@item @var{sysconfdir}/texinfo/
(onde @var{sysconfdir} é o diretório de sistema da configuração especificado em
tempo de compilação, por exemplo, @file{/usr/local/etc})

@item @var{datadir}/texinfo/
(da mesma forma especificado em tempo de compilação, por exemplo,
@file{/usr/local/share})
@end table

Todos os arquivos encontrados são usados, com entradas anteriores substituindo
as posteriores. A distribuição do Texinfo inclui um arquivo padrão que lida com
muitos manuais GNU; ele é instalado no último dos diretórios acima, ou seja,
@file{@var{datadir}/texinfo/htmlxref.cnf}.

O arquivo é orientado a linhas. Linhas consistindo somente de espaços em branco
são ignoradas. Comentários são indicados com um @samp{#} no início de uma
linha, opcionalmente precedidos por espaços em branco. Como @samp{#} pode
ocorrer em URLs (como quase qualquer caractere), ele não inicia um comentário.

Cada linha não vazia e sem comentário precisa ser ou uma @dfn{atribuição de
variável} ou uma @dfn{informação de manual}.

Uma linha de atribuição de variável se parece com isto:

@example
@var{nomevariável} = @var{valorvariável}
@end example

Espaço em branco ao redor de @samp{=} é opcional e ignorado. @var{nomevariável}
deveria consistir de letras; maiúsculas e minúsculas são significativas. O
@var{valorvariável} é uma string arbitrária, continuando até o fim da linha. As
variáveis são então referenciadas com @samp{$@{@var{nomevariável}@}};
referências de variáveis podem ocorrer no @var{valorvariável}.

Uma linha de informação de manual se parece com isto:

@example
@var{manual} @var{palavrachave} @var{prefixourl}
@end example

@noindent
com @var{manual} o identificador curto para um manual, @var{palavrachave} sendo
um de: @code{mono}, @code{node}, @code{section}, @code{chapter} e
@var{prefixourl} descritos abaixo. Referências de variáveis podem ocorrer
somente no @var{prefixourl}. Por exemplo (usado no @file{htmlxref.cnf}
canônico):

@smallexample
G = http://www.gnu.org
GS = $@{G@}/software
hello mono    $@{GS@}/hello/manual/hello.html
hello chapter $@{GS@}/hello/manual/html_chapter/
hello section $@{GS@}/hello/manual/html_section/
hello node    $@{GS@}/hello/manual/html_node/
@end smallexample

@cindex Manuais monolíticos, para referências cruzadas do HTML
Se a palavra-chave for @code{mono}, @var{prefixourl} fornecerá o dispositivo, o
diretório e o nome do arquivo para @var{manual} como um arquivo monolítico.

@cindex Manuais divididos, para referências cruzadas do HTML
Se a palavra-chave for @code{node}, @code{section} ou @code{chapter},
@var{prefixourl} fornecerá o dispositivo e o diretório para @var{manual}
dividido em nós, seções ou capítulos, respectivamente.

Quando disponível, @command{makeinfo} usará o valor ``corresponding'' para
referências cruzadas entre manuais. Isto é, ao gerar saída monolítica
(@option{--no-split}), a URL @code{mono} será usada; ao gerar saída que seja
dividida por nó, a URL @code{node} será usada, etc. No entanto, se um manual
não estiver disponível nesse formato, qualquer coisa que esteja disponível pode
ser usada. Aqui está a ordem de pesquisa para cada estilo:

@smallexample
node    @result{} node,    section, chapter, mono
section @result{} section, chapter, node,    mono
chapter @result{} chapter, section, node,    mono
mono    @result{} mono,    chapter, section, node
@end smallexample

@opindex --node-files@r{, e referências cruzadas do HTML}
Essas referências entre manuais em nível de seção e de capítulo só podem ser
bem-sucedidas quando o manual alvo foi criado usando @option{--node-files};
esse é o padrão para saída dividida.

Se você tiver adições ou correções para o @file{htmlxref.cnf} distribuído com o
Texinfo, por favor, contate @email{bug-texinfo@@gnu.org} como de costume. Você
consegue obter a versão mais recente em
@url{http://ftpmirror.gnu.org/@/texinfo/@/htmlxref.cnf}.


@node Preservação de Link Xref do HTML
@subsection Preservação de Link de Referência Cruzada do HTML: @var{manual}@file{-noderename.cnf}

@pindex noderename.cnf
@pindex @var{manual}-noderename.cnf
@cindex Preservação de link de referência cruzada do HTML
@cindex Preservando links do HTML para antigos nós
@cindex Nós antigos, preservando links para
@cindex Renomeando nós, e preservando links
@cindex Links, preservando para nós renomeados
@cindex Renomeação de nós, e preservação de links

Ocasionalmente, mudanças em um programa exigem remover (ou renomear) nós no
manual para a finalidade de ter a melhor documentação. Dada a natureza da web,
no entanto, links podem existir em qualquer lugar para um nó removido (renomear
parece o mesmo que remover para esse propósito), e não é ideal que esses links
simplesmente quebrem.

@vindex RENAMED_NODES_FILE
Portanto, o Texinfo fornece uma maneira para autores(as) de manuais
especificarem nomes antigos de nós e os novos nós para os quais os nomes
antigos deveriam ser redirecionados, por meio do arquivo
@var{manual}@file{-noderename.cnf}, onde @var{manual} é o nome base do manual.
Por exemplo, o manual @file{texinfo.texi} seria complementado por um arquivo
@file{texinfo-noderename}.cnf. (Esse nome pode ser substituído configurando-se
a variável de personalização @file{RENAMED_NODES_FILE};
@pxref{Variáveis de Personalização}).

O arquivo é lido em pares de linhas, conforme segue:

@example
@var{nome-antigo-nó}
@@@@@{@} @var{nome-novo-nó}
@end example

A conversão usual de nomes de nós do Texinfo para nomes do HTML é aplicada;
veja-se esta seção inteira para detalhes (@pxref{Xref de HTML}). O separador
incomum @samp{@@@@@{@}} é usado porque ele não é uma construção válida do
Texinfo, de forma que não pode aparecer nos nomes de nós.

O efeito é que @command{makeinfo} gera um redirecionamento de
@var{nome-antigo-nó} para @var{nome-novo-nó} ao produzir saída HTML. Assim,
links externos para o nó antigo são preservados.

Linhas consistindo somente de espaços em branco são ignoradas. Comentários são
indicados com um @samp{@@c} no início de uma linha, opcionalmente precedidos
por espaços em branco.

Outra abordagem para preservar links para nós deletados ou renomeados é a de
usar âncoras (@pxref{@code{@@anchor}}). Não existe diferença efetiva entre as
duas abordagens.


@node Detalhes do Comando @@
@appendix Detalhes do Comando @@

Aqui estão os detalhes dos comandos @@: informações acerca da sintaxe deles,
uma lista de comandos e informações relativas a onde os comandos podem
aparecer.

@node Sintaxe de Comando
@section Sintaxe do Comando @@
@cindex Sintaxe do comando @@
@cindex Sintaxe, dos comandos @@
@cindex Sintaxe do comando

O Texinfo tem os seguintes tipos de comando @@:

@table @asis
@item 1. Comandos de chaves
Esses comandos começam com @@ seguido por uma letra ou uma palavra, seguida por
um argumento entre chaves. Por exemplo, o comando @code{@@dfn} indica o uso
introdutório ou definidor de um termo; ele é usado conforme segue: @samp{No
Texinfo, comandos @@@@ são comandos de @@dfn@{marcação@}}.

@item 2. Comandos de linha
Esses comandos ocupam uma linha inteira. A linha começa com @@, seguido pelo
nome do comando (uma palavra); por exemplo, @code{@@center} ou @code{@@cindex}.
Se nenhum argumento for necessário, a palavra é seguida pelo fim da linha. Se
existir um argumento, ele é separado do nome do comando por um espaço. Chaves
não são usadas.

@item 3. Comandos de bloco
Esses comandos são escritos no início de uma linha, com texto geral nas linhas
seguintes, terminados por um comando @code{@@end} correspondente em uma linha
própria. Por exemplo, @code{@@example}, depois as linhas de um exemplo de
codificação, depois @code{@@end example}. Alguns desses comandos de bloco
recebem argumentos como os comandos de linha; por exemplo, @code{@@enumerate A}
abrindo um ambiente terminado por @code{@@end enumerate}. Aqui @samp{A} é o
argumento.

@item 4. Comandos de inserção de símbolos sem argumentos
Esses comandos começam com @@ seguido por uma palavra seguida por uma chave
esquerda e direita. Esses comandos inserem símbolos especiais no documento;
eles não recebem argumentos. Alguns exemplos: @code{@@dots@{@}} @result{}
@samp{@dots{}}, @code{@@equiv@{@}} @result{} @samp{@equiv{}}, @code{@@TeX@{@}}
@result{} `@TeX{}' e @code{@@bullet@{@}} @result{} @samp{@bullet{}}.

@item 5. Comandos não alfabéticos
Os nomes dos comandos em todas as categorias acima consistem de caracteres
alfabéticos, quase inteiramente em letras minúsculas. Ao contrário daqueles, os
comandos não alfabéticos consistem de um @@ seguido por um sinal de pontuação
ou outro caractere que não é parte do alfabeto latino. Os comandos não
alfabéticos quase sempre são parte do texto dentro de um parágrafo. Os comandos
não alfabéticos incluem @code{@@@@}, @code{@@@{}, @code{@@@}}, @code{@@.},
@code{@@@kbd{ESPAÇO}} e a maioria dos comandos de acento.

@item 6. Comandos diversos
Existe um punhado de comandos que não se encaixam em nenhuma das categorias
acima; por exemplo, o comando obsoleto @code{@@refill}, que sempre é usado no
final de um parágrafo imediatamente seguinte ao ponto final ou outro caractere
de pontuação. @code{@@refill} não recebe argumentos e não exige chaves. Da
mesma forma, @code{@@tab} usado em um bloco @code{@@multitable} não recebe
argumentos e não é seguido por chaves.
@end table

@cindex Chaves e sintaxe de argumento
Assim, os comandos alfabéticos se enquadram em classes que tem diferentes
sintaxes de argumento. Você não pode dizer a qual classe um comando pertence
pela aparência do nome dele, mas pode dizer pelo significado do comando: se o
comando representa um glifo, ele está na classe 4 e não exige um argumento; se
faz sentido usar o comando entre outros textos como parte de um parágrafo, o
comando está na classe 1 e precisa ser seguido por um argumento entre chaves.
Os comandos não alfabéticos, como @code{@@:}, são exceções à regra; eles não
precisam de chaves.

O propósito de ter sintaxe diferente para comandos é o de tornar os arquivos do
Texinfo mais fáceis de ler e também ajudar os comandos de parágrafo e
preenchimento do GNU Emacs a funcionarem corretamente.


@node Lista de Comandos
@section Lista de Comandos @@
@cindex Lista alfabética dos comandos @@
@cindex Lista dos comandos @@
@cindex Comando @@, lista
@cindex Referência para comandos @@

Aqui está uma lista alfabética dos comandos @@ no Texinfo. Colchetes, @t{[}@w{
}@t{]}, indicam argumentos opcionais; reticências, @samp{@dots{}}, indicam
texto repetido.

@table @code
@item @@@var{espaço em branco}
Um @code{@@} seguido por um espaço, tabulação ou nova linha produz um espaço
entre palavras normal e extensível. @xref{Espaços Múltiplos}.

@item @@!
Produz um ponto de exclamação que finaliza uma frase (geralmente depois de uma
letra maiúscula de fim de frase). @xref{Finalizando Uma Frase}.

@item @@"
@itemx @@'
Gera um trema ou acento agudo, respectivamente, sobre o próximo caractere, como
em @"o e @'o. @xref{Inserindo Acentos}.

@item @@*
Força uma quebra de linha. @xref{Quebras de Linha}.

@item @@,@{@var{c}@}
Gera um acento de cedilha sob @var{c}, como em @,{c}. @xref{Inserindo Acentos}.

@item @@-
Insira um ponto de hifenização discricionário. @xref{@code{@@- @@hyphenation}}.

@item @@.
Produz um ponto que finaliza uma frase (geralmente depois de uma letra
maiúscula de fim de frase). @xref{Finalizando Uma Frase}.

@item @@/
Não produz saída, mas permite uma quebra de linha. @xref{Quebras de Linha}.

@item @@:
Diz ao @TeX{} para evitar inserir espaços em branco extras depois de um ponto,
ponto de interrogação, ponto de exclamação ou dois pontos imediatamente
anterior, como o @TeX{} normalmente faria. @xref{Não Finalizando Uma Frase}.

@item @@=
Gera um acento de mácron (barra) sobre o próximo caractere, como em @=o.
@xref{Inserindo Acentos}.

@item @@?
Produz um ponto de interrogação que finaliza uma frase (geralmente depois de
uma letra maiúscula de fim de frase). @xref{Finalizando Uma Frase}.

@item @@@@
@itemx @@atchar@{@}
Insere um sinal de arroba, @samp{@@}. @xref{Inserindo um Símbolo Arroba}.

@item @@\
@itemx @@backslashchar@{@}
Insere uma barra invertida, @samp{\}; @code{@@backslashchar@{@}} funciona em
qualquer lugar, enquanto @code{@@\} funciona somente dentro de @code{@@math}.
@xref{Inserindo uma Barra Invertida} e @ref{Inserindo Fórmulas Matemáticas}.

@item @@^
@itemx @@`
Gera um acento circunflexo (chapéu) ou grave, respectivamente, sobre o próximo
caractere, como em @^o e @`e. @xref{Inserindo Acentos}.

@item @@@{
@itemx @@lbracechar@{@}
Insere uma chave esquerda, @samp{@{}. @xref{Inserindo Chaves}.

@item @@@}
@itemx @@rbracechar@{@}
Insere uma chave direita, @samp{@}}. @xref{Inserindo Chaves}.

@item @@~
Gera um acento til sobre o próximo caractere, como em @~N.
@xref{Inserindo Acentos}.

@item @@AA@{@}
@itemx @@aa@{@}
Gera as letras maiúsculas e minúsculas do anel A escandinavo, respectivamente:
@AA{}, @aa{}. @xref{Inserindo Acentos}.

@item @@abbr@{@var{abbreviation}@}
Indica uma abreviação geral, como `Comput.'. @xref{@code{@@abbr}}.

@item @@acronym@{@var{acronym}@}
Indica uma sigla em letras todas maiúsculas, como `NASA'.
@xref{@code{@@acronym}}.

@item @@AE@{@}
@itemx @@ae@{@}
Gera as ligaduras AE maiúsculas e minúsculas, respectivamente: @AE{}, @ae{}.
@xref{Inserindo Acentos}.

@item @@afivepaper
Muda as dimensões da página para o tamanho de papel A5. @xref{Papel A4}.

@item @@afourlatex
@itemx @@afourpaper
@itemx @@afourwide
Muda as dimensões da página para o tamanho de papel A4. @xref{Papel A4}.

@item @@alias @var{novo}=@var{existente}
Torna o comando @samp{@@@var{novo}} um sinônimo para o comando existente
@samp{@@@var{existente}}. @xref{@code{@@alias}}.

@item @@allowcodebreaks @var{verdadeiro-falso}
Controla quebra em @samp{-} e @samp{_} no @TeX{}.
@xref{@code{@@allowcodebreaks}}.

@item @@anchor@{@var{nome}@}
Define @var{nome} como o local atual para uso como um alvo de referência
cruzada. @xref{@code{@@anchor}}.

@item @@appendix @var{título}
Inicia um anexo. O título aparece no sumário. No Info, o título é
sublinhado com asteriscos. @xref{@code{@@unnumbered @@appendix}}.

@item @@appendixsec @var{título}
@itemx @@appendixsection @var{título}
Inicia uma seção de anexos dentro de um anexo. O título da seção aparece no
sumário. No Info, o título é sublinhado com sinais de igual.
@code{@@appendixsection} é uma grafia mais longa do comando
@code{@@appendixsec}. @xref{@code{@@unnumberedsec @@appendixsec @@heading}}.

@item @@appendixsubsec @var{título}
Inicia uma subseção de anexos. O título aparece no sumário. No Info,
o título é sublinhado com hifens.
@xref{@code{@@unnumberedsubsec @@appendixsubsec @@subheading}}.

@item @@appendixsubsubsec @var{título}
Inicia uma subsubseção de anexos. O título aparece no sumário. No
Info, o título é sublinhado com pontos. @xref{@code{@@subsubsection}}.

@item @@arrow@{@}
Gera um glifo de seta para a direita: @samp{@arrow{}}. Usado por padrão para
@code{@@click}. @xref{Sequências de Clique}.

@item @@asis
Usado seguindo @code{@@table}, @code{@@ftable} e @code{@@vtable} para imprimir a
primeira coluna da tabela sem realçar (``como está''). @xref{@code{@@asis}}.

@item @@author @var{autor(a)}
Tipografa @var{autor(a)} alinhado à esquerda e sublinhado.
@xref{@code{@@title @@subtitle @@author}}.

@item @@b@{@var{texto}@}
Configura @var{texto} em uma fonte @b{negrito}. Sem efeito no Info. @xref{Fontes}.

@item @@bullet@{@}
Gera um ponto redondo grande, @bullet{} (@samp{*} no Info). Geralmente usado
com @code{@@table}. @xref{@code{@@bullet}}.

@item @@bye
Para de formatar um arquivo. Os formatadores não veem nada no arquivo de
entrada seguinte a @code{@@bye}. @xref{Finalizando um Arquivo}.

@item @@c @var{comentário}
Inicia um comentário no Texinfo. O restante da linha não aparece em nenhuma
saída. Um sinônimo para @code{@@comment}. @kbd{DEL} também inicia um
comentário. @xref{Comentários}.

@item @@caption
Define a legenda completa para um @code{@@float}.
@xref{@code{@@caption @@shortcaption}}.

@item @@cartouche
Destaca um exemplo ou citação desenhando uma caixa com cantos arredondados ao
redor. Emparelha com @code{@@end cartouche}. Sem efeito no Info.
@xref{@code{@@cartouche}}.

@item @@center @var{linha-de-texto}
Centraliza a linha de texto seguindo o comando.
@xref{@code{@@titlefont @@center @@sp}}.

@item @@centerchap @var{linha-de-texto}
Como @code{@@chapter}, mas centraliza o título do capítulo.
@xref{@code{@@chapter}}.

@item @@chapheading @var{título}
Imprime um título não numerado, como um capítulo, mas omite da tabela de
conteúdo. No Info, o título é sublinhado com asteriscos.
@xref{@code{@@majorheading @@chapheading}}.

@item @@chapter @var{título}
Inicia um capítulo numerado. O título do capítulo aparece na tabela de
conteúdo. No Info, o título é sublinhado com asteriscos.
@xref{@code{@@chapter}}.

@item @@cindex @var{entrada}
Adiciona @var{entrada} ao índice de conceitos.
@xref{Entradas de Índice, , Definindo as Entradas de um Índice}.

@item @@cite@{@var{referência}@}
Destaca o nome de um livro ou de outra referência que não tenha um arquivo
complementar do Info. @xref{@code{@@cite}}.

@item @@clear @var{sinalizador}
Desconfigura @var{sinalizador}, impedindo que os comandos de formatação do
Texinfo formatem o texto entre pares subsequentes de comandos @code{@@ifset
@var{sinalizador}} e @code{@@end ifset}, e impedindo que
@code{@@value@{@var{sinalizador}@}} expanda para o valor para o qual
@var{sinalizador} está configurada. @xref{@code{@@set @@clear @@value}}.

@item @@click@{@}
Representa um ``clique'' em uma GUI@. Usado dentro de @code{@@clicksequence}.
@xref{Sequências de Clique}.

@item @@clicksequence@{@var{ação} @@click@{@} @var{ação}@}
Representa uma sequência de cliques em uma GUI@. @xref{Sequências de Clique}.

@item @@clickstyle @@@var{comando}
Executa @@@var{comando} para cada @code{@@click}; o padrão é @code{@@arrow}. As
chaves vazias usuais seguintes a @@@var{comando} são omitidas.
@xref{Sequências de Clique}.

@item @@code@{@var{código-amostra}@}
Indica uma expressão, um token sintaticamente completo de um programa ou um
nome de programa. Sem aspas na saída do Info. @xref{@code{@@code}}.

@item @@codequotebacktick @var{ligado-desligado}
@itemx @@codequoteundirected @var{ligado-desligado}
Controla a saída de @code{`} e @code{'} em exemplos de código.
@xref{Inserindo Caracteres de Citação}.

@item @@comma@{@}
Insere um caractere vírgula `,'; necessário somente quando uma vírgula literal
fosse recebida como separador de argumentos. @xref{Inserindo Uma Vírgula}.

@item @@command@{@var{nome-comando}@}
Indica um nome de comando, como @command{ls}. @xref{@code{@@command}}.

@item @@comment @var{comentário}
Inicia um comentário no Texinfo. O restante da linha não aparece em nenhuma
saída. Um sinônimo para @code{@@c}. @xref{Comentários}.

@item @@contents
Imprime uma tabela completa de conteúdo. Não tem efeito no Info, que usa menus.
@xref{Conteúdo, , Gerando Um Sumário}.

@item @@copying
Especifica os(as) titulares dos direitos autorais e as condições de cópia para
o documento. Emparelha com @code{@@end cartouche}. @xref{@code{@@copying}}.

@item @@copyright@{@}
Gera o símbolo de direitos autorais @copyright{}. @xref{@code{@@copyright}}.

@item @@defcodeindex @var{nome-índice}
Define um novo índice e comando dele de indexação. Imprime entradas em uma
fonte do @code{@@code}. @xref{Novos Índices, , Definindo Novos Índices}.

@item @@defcv @var{categoria} @var{classe} @var{nome}
@itemx @@defcvx @var{categoria} @var{classe} @var{nome}
Formata uma descrição para uma variável associada com uma classe em programação
orientada a objetos. Recebe três argumentos: a categoria da coisa sendo
definida, a classe à qual ela pertence e o nome dela.
@xref{Comandos de Definição}.

@item @@deffn @var{categoria} @var{nome} @var{argumentos}@dots{}
@itemx @@deffnx @var{categoria} @var{nome} @var{argumentos}@dots{}
Formata uma descrição para uma função, comando interativo ou entidade similar
que pode receber argumentos. @code{@@deffn} recebe como argumentos a categoria
da entidade sendo descrita, o nome dessa entidade em particular e os argumentos
dela, se existirem. @xref{Comandos de Definição}.

@item @@defindex @var{nome-índice}
Define um novo índice e o comando dele de indexação. Imprime entradas em uma
fonte romana. @xref{Novos Índices, , Definindo Novos Índices}.

@item @@definfoenclose @var{novocomando}, @var{antes}, @var{depois}
Precisa ser usado dentro de @code{@@ifinfo}; cria um novo comando
@code{@@@var{novocomando}} para Info que marca o texto cercando-o entre strings
que precedem e seguem o texto. @xref{@code{@@definfoenclose}}.

@item @@defivar @var{classe} @var{instância-variável-nome}
@itemx @@defivarx @var{classe} @var{instância-variável-nome}
Formata uma descrição para uma variável de instância em programação orientada a
objetos. O comando é equivalente a @samp{@@defcv @{Variável de Instância@}
@dots{}}. @xref{Comandos de Definição}.

@item @@defmac @var{nomemacro} @var{argumentos}@dots{}
@itemx @@defmacx @var{nomemacro} @var{argumentos}@dots{}
Formata uma descrição para uma macro; equivalente a @samp{@@deffn Macro
@dots{}}. @xref{Comandos de Definição}.

@item @@defmethod @var{classe} @var{nome-método} @var{argumentos}@dots{}
@itemx @@defmethodx @var{classe} @var{nome-método} @var{argumentos}@dots{}
Formata uma descrição para um método em programação orientada a objetos;
equivalente a @samp{@@defop Método @dots{}}. @xref{Comandos de Definição}.

@item @@defop @var{categoria} @var{classe} @var{nome} @var{argumentos}@dots{}
@itemx @@defopx @var{categoria} @var{classe} @var{nome} @var{argumentos}@dots{}
Formata uma descrição para uma operação em programação orientada a objetos.
@code{@@defop} recebe como argumentos o nome da categoria da operação, o nome
da classe da operação, o nome da operação e os argumentos dela, se existirem.
@xref{Comandos de Definição} e @ref{Objetos Abstratos}.

@item @@defopt @var{nome-opção}
@itemx @@defoptx @var{nome-opção}
Formata uma descrição para uma opção de usuário(a); equivalente a @samp{@@defvr
@{Opção de Usuário(a)@} @dots{}}. @xref{Comandos de Definição}.

@item @@defspec @var{nome-forma-especial} @var{argumentos}@dots{}
@itemx @@defspecx @var{nome-forma-especial} @var{argumentos}@dots{}
Formata uma descrição para uma forma especial; equivalente a @samp{@@deffn
@{Forma Especial@} @dots{}}. @xref{Comandos de Definição}.

@item @@deftp @var{categoria} @var{nome-do-tipo} @var{atributos}@dots{}
@itemx @@deftpx @var{categoria} @var{nome-do-tipo} @var{atributos}@dots{}
Formata uma descrição para um tipo de dado; os argumentos dela são a categoria,
o nome do tipo (por exemplo, @samp{int}) e, em seguida, os nomes dos atributos
dos objetos desse tipo. @xref{Comandos de Definição} e @ref{Tipos de Dados}.

@item @@deftypecv @var{categoria} @var{classe} @var{tipo-dado} @var{nome}
@itemx @@deftypecvx @var{categoria} @var{classe} @var{tipo-dado} @var{nome}
Formata uma descrição para uma variável de classe tipada em programação
orientada a objetos. @xref{Comandos de Definição} e @ref{Objetos Abstratos}.

@item @@deftypefn @var{categoria} @var{tipo-dado} @var{nome} @var{argumentos}@dots{}
@itemx @@deftypefnx @var{categoria} @var{tipo-dado} @var{nome} @var{argumentos}@dots{}
Formata uma descrição para uma função ou para entidade similar que pode receber
argumentos e que é tipada. @code{@@deftypefn} recebe como argumentos a
categoria da entidade sendo descrita, o tipo, o nome da entidade e os
argumentos dela, se existirem. @xref{Comandos de Definição}.

@item @@deftypefnnewline @var{ligado-desligado}
Especifica se os tipos de retorno para @code{@@deftypefn} e similares são
impressos sozinhos nas linhas; padrão é desligado.
@xref{Funções Tipadas,, Funções em Linguagens Tipadas}.

@item @@deftypefun @var{tipo-dado} @var{nome-função} @var{argumentos}@dots{}
@itemx @@deftypefunx @var{tipo-dado} @var{nome-função} @var{argumentos}@dots{}
Formata uma descrição para uma função em uma linguagem tipada. O comando é
equivalente a @samp{@@deftypefn Função @dots{}}. @xref{Comandos de Definição}.

@item @@deftypeivar @var{classe} @var{tipo-dado} @var{nome-variável}
@itemx @@deftypeivarx @var{classe} @var{tipo-dado} @var{nome-variável}
Formata uma descrição para uma variável de instância tipada em programação
orientada a objetos. @xref{Comandos de Definição} e @ref{Objetos Abstratos}.

@item @@deftypemethod @var{classe} @var{tipo-dado} @var{nome-método} @var{argumentos}@dots{}
@itemx @@deftypemethodx @var{classe} @var{tipo-dado} @var{nome-método} @var{argumentos}@dots{}
Formata uma descrição para um método tipado em programação orientada a objetos.
@xref{Comandos de Definição}.

@item @@deftypeop @var{categoria} @var{classe} @var{tipo-dado} @var{nome} @var{argumentos}@dots{}
@itemx @@deftypeopx @var{categoria} @var{classe} @var{tipo-dado} @var{nome} @var{argumentos}@dots{}
Formata uma descrição para uma operação tipada em programação orientada a objetos.
@xref{Comandos de Definição} e @ref{Objetos Abstratos}.

@item @@deftypevar @var{tipo-dado} @var{nome-variável}
@itemx @@deftypevarx @var{tipo-dado} @var{nome-variável}
Formata uma descrição para uma variável em uma linguagem tipada. O comando é
equivalente a @samp{@@deftypevr Variável @dots{}}.
@xref{Comandos de Definição}.

@item @@deftypevr @var{categoria} @var{tipo-dado} @var{nome}
@itemx @@deftypevrx @var{categoria} @var{tipo-dado} @var{nome}
Formata uma descrição para algo como uma variável em uma linguagem tipada---uma
entidade que registra um valor. Recebe como argumentos a categoria da entidade
sendo descrita, o tipo e o nome da entidade. @xref{Comandos de Definição}.

@item @@defun @var{nome-função} @var{argumentos}@dots{}
@itemx @@defunx @var{nome-função} @var{argumentos}@dots{}
Formata uma descrição para uma função; equivalente a @samp{@@deffn Função
@dots{}}. @xref{Comandos de Definição}.

@item @@defvar @var{nome-variável}
@itemx @@defvarx @var{nome-variável}
Formata uma descrição para uma variável; equivalente a @samp{@@defvr Variável
@dots{}}. @xref{Comandos de Definição}.

@item @@defvr @var{categoria} @var{nome}
@itemx @@defvrx @var{categoria} @var{nome}
Formata uma descrição para qualquer tipo de variável. @code{@@defvr} recebe
como argumentos a categoria da entidade e o nome da entidade.
@xref{Comandos de Definição}.

@item @@detailmenu
Marca a listagem detalhada (opcional) de nós em um menu mestre.
@xref{Partes do Menu Mestre}.

@item @@dfn@{@var{termo}@}
Indica o uso introdutório ou definidor de um termo. @xref{@code{@@dfn}}.

@item @@DH@{@}
@itemx @@dh@{@}
Gera a letra maiúscula e minúscula islandesa eth, respectivamente: @DH{},
@dh{}. @xref{Inserindo Acentos}.

@item @@dircategory @var{partediretório}
Especifica uma parte do menu do diretório do Info onde a entrada desse arquivo
deveria ficar. @xref{Instalando Entradas de Diretório}.

@item @@direntry
Inicia a entrada do menu do diretório do Info para esse arquivo. Emparelha com
@code{@@end direntry}. @xref{Instalando Entradas de Diretório}.

@item @@display
Inicia um tipo de exemplo. Como @code{@@example} (recua texto, não preenche),
mas não seleciona uma nova fonte. Emparelha com @code{@@end display}.
@xref{@code{@@display}}.

@item @@dmn@{@var{dimensão}@}
Formata uma unidade de medida, como em 12@dmn{pt}. Faz com que @TeX{} insira um
espaço fino antes de @var{dimensão}. Sem efeito no Info. @xref{@code{@@dmn}}.

@item @@docbook
Entra em Docbook completamente. Emparelha com @code{@@end docbook}.
@xref{Comandos do Formatador Bruto}.

@item @@documentdescription
Define o texto de descrição do documento, incluído na saída HTML. Emparelha com
@code{@@end documentdescription}. @xref{@code{@@documentdescription}}.

@item @@documentencoding @var{codificação}
Declara a codificação de entrada como @var{codificação}.
@xref{@code{@@documentencoding}}.

@item @@documentlanguage @var{CC}
Declara o idioma do documento como a abreviação ISO-639 de dois caracteres
@var{CC}. @xref{@code{@@documentlanguage}}.

@item @@dotaccent@{@var{c}@}
Gera um acento de ponto sobre o caractere @var{c}, como em @dotaccent{o}.
@xref{Inserindo Acentos}.

@item @@dotless@{@var{i-ou-j}@}
Gera i sem ponto (`@dotless{i}') e j sem ponto (`@dotless{j}').
@xref{Inserindo Acentos}.

@item @@dots@{@}
Gera uma reticência, @samp{@dots{}}.
@xref{@code{@@dots}}.

@item @@email@{@var{endereço}[, @var{texto-exibido}]@}
Indica um endereço eletrônico de mensagens. @xref{@code{@@email}}.

@item @@emph@{@var{texto}@}
Enfatiza @var{texto}, usando @emph{itálico}, onde possível e cercando com
asteriscos no Info. @xref{Ênfase, , Enfatizando Texto}.

@item @@end @var{ambiente}
Termina @var{ambiente}, como em @samp{@@end example}.
@xref{Comandos de Formatação,,Comandos @@}.

@item @@enddots@{@}
Gera reticências de fim de frase, como esta: @enddots{} @xref{@code{@@dots}}.

@item @@enumerate [@var{número-ou-letra}]
Inicia uma lista numerada, usando @code{@@item} para cada entrada.
Opcionalmente, inicia a lista com @var{número-ou-letra}. Emparelha com
@code{@@end enumerate}. @xref{@code{@@enumerate}}.

@item @@env@{@var{variável-ambiente}@}
Indica um nome de variável de ambiente, como @env{CAMINHO}.
@xref{@code{@@env}}.

@item @@equiv@{@}
Indica para o(a) leitor(a) a equivalência exata de duas formas com um glifo:
@samp{@equiv{}}. @xref{@code{@@equiv}}.

@item @@error@{@}
Indica para o(a) leitor(a) com um glifo que o texto seguinte é uma mensagem de erro:
@samp{@error{}}. @xref{@code{@@error}}.

@item @@errormsg@{@var{mensagem}@}
Informa @var{mensagem} como um erro para erro padrão e sai sem sucesso.
Comandos do Texinfo dentro de @var{mensagem} são expandidos para texto simples.
@xref{Condicionais} e @ref{Processadores Externos de Macro}.

@item @@euro@{@}
Gera o símbolo da moeda Euro. @xref{@code{@@euro}}.

@item @@evenfooting [@var{esquerda}] @@| [@var{centro}] @@| [@var{direita}]
@itemx @@evenheading [@var{esquerda}] @@| [@var{centro}] @@| [@var{direita}]
Especifica rodapés de página, respectivamente cabeçalhos, para páginas pares (à
esquerda).
@xref{Cabeçalhos Personalizados, , Como Fazer Teus Próprios Cabeçalhos}.

@item @@everyfooting [@var{esquerda}] @@| [@var{centro}] @@| [@var{direita}]
@itemx @@everyheading [@var{esquerda}] @@| [@var{centro}] @@| [@var{direita}]
Especifica rodapés de página, respectivamente cabeçalhos, para cada página. Não
relevante para Info.
@xref{Cabeçalhos Personalizados, , Como Fazer Teus Próprios Cabeçalhos}.

@item @@example
Inicia um exemplo. Recua o texto, não preenche e seleciona fonte de largura
fixa. Emparelha com @code{@@end example}. @xref{@code{@@example}}.

@item @@exampleindent @var{recuo}
Recua ambientes semelhantes a exemplos por @var{recuo} número de espaços
(talvez 0). @xref{@code{@@exampleindent}}.

@item @@exclamdown@{@}
Gere um ponto de exclamação invertido. @xref{Inserindo Acentos}.

@item @@exdent @var{linha-do-texto}
Remove qualquer recuo que uma linha possa ter. @xref{@code{@@exdent}}.

@item @@expansion@{@}
Indica o resultado de uma expansão de macro para o(a) leitor(a) com um glifo
especial: @samp{@expansion{}}. @xref{@code{@@expansion}}.

@item @@file@{@var{nomearquivo}@}
Destaca o nome de um arquivo, buffer, nó, diretório, etc. @xref{@code{@@file}}.

@item @@finalout
Impede que o @TeX{} imprima grandes retângulos pretos de aviso ao lado de
linhas muito largas. @xref{hboxes lotados}.

@item @@findex @var{entrada}
Adiciona @var{entrada} ao índice de funções.
@xref{Entradas de Índice, , Definindo as Entradas de um Índice}.

@item @@firstparagraphindent @var{palavra}
Controla o recuo do primeiro parágrafo depois dos cabeçalhos de seção de acordo
com @var{palavra}, uma de `none' ou `insert'.
@xref{@code{@@firstparagraphindent}}.

@item @@float
Ambiente para definir material flutuante. Emparelha com @code{@@end float}.
@xref{Flutuações}.

@item @@flushleft
@itemx @@flushright
Não preenche texto; justifica cada linha à esquerda (direita), deixando a
extremidade direita (esquerda) irregular. Deixa a fonte como está. Emparelha
com @code{@@end flushleft} (@code{@@end flushright}).
@xref{@code{@@flushleft @@flushright}}.

@item @@fonttextsize @var{10-11}
Muda o tamanho da fonte do corpo principal na saída do @TeX{}.
@xref{Fontes}.

@item @@footnote@{@var{texto-da-notaderodapé}@}
Insere uma nota de rodapé. O texto da nota de rodapé é impresso na parte
inferior da página pelo @TeX{}; Info pode formatar ou no estilo de nó `End' ou
nó `Separate'. @xref{Notas de Rodapé}.

@item @@footnotestyle @var{estilo}
Especifica um estilo de nota de rodapé do arquivo do Info, ou @samp{end} para o
estilo do nó final ou @samp{separate} para o estilo do nó separado.
@xref{Notas de Rodapé}.

@item @@format
Inicia um tipo de exemplo. Como @code{@@display}, mas não recua. Emparelha com
@code{@@end format}. @xref{@code{@@example}}.

@item @@frenchspacing @var{ligado-desligado}
Controla o espaçamento depois da pontuação. @xref{@code{@@frenchspacing}}.

@item @@ftable @var{comando-formatação}
Inicia uma tabela de duas colunas, usando @code{@@item} para cada entrada.
Insere automaticamente cada um dos itens da primeira coluna no índice de
funções. Emparelha com @code{@@end ftable}. O mesmo que @code{@@table}, exceto
pela indexação. @xref{@code{@@ftable @@vtable}}.

@item @@geq@{@}
Gera um sinal de maior que ou igual a, `@geq{}'. @xref{@code{@@geq @@leq}}.

@item @@group
Desautoriza quebras de página dentro do texto seguinte. Emparelha com
@code{@@end group}. Ignorado no Info. @xref{@code{@@group}}.

@item @@guillemetleft@{@}
@itemx @@guillemetright@{@}
@item @@guillemotleft@{@}
@itemx @@guillemotright@{@}
@itemx @@guilsinglleft@{@}
@itemx @@guilsinglright@{@}
Aspas angulares duplas e simples: @guillemetleft{} @guillemetright{}
@guilsinglleft{} @guilsinglright{}. @code{@@guillemotleft} e
@code{@@guillemotright} são sinônimos de @code{@@guillemetleft} e
@code{@@guillemetright}. @xref{Inserindo Aspas}.

@item @@H@{@var{c}@}
Gera o acento de trema húngaro longo sobre @var{c}, como em @H{o}.

@item @@hashchar@{@}
Insere um caractere cerquilha `#'; necessário somente quando uma cerquilha
literal introduziria a diretiva @code{#line}.
@xref{Inserindo um Símbolo Cerquilha} e @ref{Processadores Externos de Macro}.

@item @@heading @var{título}
Imprime um título não numerado, como uma seção, mas omite da tabela de
conteúdo. No Info, o título é sublinhado com sinais de igual.
@xref{@code{@@unnumberedsec @@appendixsec @@heading}}.

@item @@headings @var{ligado-desligado-simples-duplo}
Ativa ou desativa os títulos de página e (ou) especifica títulos de página de
um ou de dois lados para impressão. @xref{@code{@@headings}}.

@item @@headitem
Inicia uma linha de cabeçalho em uma multi tabela.
@xref{Linhas de Multi Tabelas}.

@item @@headitemfont@{@var{texto}@}
Configura @var{texto} na fonte usada para linhas de cabeçalho de multi tabelas;
útil principalmente em modelos de multi tabelas.
@xref{Linhas de Multi Tabelas}.

@item @@html
Entra em HTML completamente. Emparelha com @code{@@end html}.
@xref{Comandos do Formatador Bruto}.

@item @@hyphenation@{@var{palavras hi-fen-a-das words}@}
Define explicitamente os pontos de hifenização. @xref{@code{@@- @@hyphenation}}.

@item @@i@{@var{texto}@}
Configura @var{texto} em uma fonte @i{itálica}. Sem efeito no Info.
@xref{Fontes}.

@item @@ifclear @var{variáveltexinfo}
Se a variável do Texinfo @var{variáveltexinfo} não estiver configurada, formata
o texto seguinte. Emparelha com @code{@@end ifclear}.
@xref{@code{@@set @@clear @@value}}.

@item @@ifcommanddefined @var{comandotexinfo}
@itemx @@ifcommandnotdefined @var{comandotexinfo}
Se o código do Texinfo @samp{@@@var{comandotexinfo}} (não) estiver definido,
formata o texto a seguir. Emparelha com o correspondente @code{@@end
ifcommand...}. @xref{Testes para Comandos do Texinfo}.

@item @@ifdocbook
@itemx @@ifhtml
@itemx @@ifinfo
Inicia o texto que aparecerá somente no formato de saída fornecido. A saída do
@code{@@ifinfo} aparece tanto na saída do Info quanto (para compatibilidade
histórica) em texto simples. Emparelha com @code{@@end ifdocbook},
respectivamente @code{@@end ifhtml}, respectivamente @code{@@end ifinfo}.
@xref{Condicionais}.

@item @@ifnotdocbook
@itemx @@ifnothtml
@itemx @@ifnotplaintext
@itemx @@ifnottex
@itemx @@ifnotxml
Inicia o texto a ser ignorado em um formato de saída, mas não nos outros. Texto
do @code{@@ifnothtml} é omitido da saída HTML, etc. Emparelha com o @code{@@end
ifnot@var{format}} correspondente. @xref{Condicionais}.

@item @@ifnotinfo
Inicia o texto a aparecer em uma saída diferente de Info e (para
compatibilidade histórica) texto simples. Emparelha com @code{@@end ifnotinfo}.
@xref{Condicionais}.

@item @@ifplaintext
Inicia o texto que aparecerá somente na saída de texto simples. Emparelha com
@code{@@end ifplaintext}. @xref{Condicionais}.

@item @@ifset @var{variáveltexinfo}
Se a variável do Texinfo @var{variáveltexinfo} estiver configurada, formata o
texto seguinte. Emparelha com @code{@@end ifset}.
@xref{@code{@@set @@clear @@value}}.

@item @@iftex
Inicia o texto para aparecer somente na saída do @TeX{}. Emparelha com
@code{@@end iftex}. @xref{Condicionais, , Texto Visível Condicionalmente}.

@item @@ifxml
Inicia o texto que aparecerá somente na saída XML. Emparelha com @code{@@end
ifxml}. @xref{Condicionais}.

@item @@ignore
Inicia um texto que não aparecerá em nenhuma saída. Emparelha com @code{@@end
ignore}. @xref{Comentários, , Comentários e Texto Ignorado}.

@item @@image@{@var{nomearquivo}, [@var{largura}], [@var{altura}], [@var{alternativo}], [@var{extensão}]@}
Inclui imagem gráfica em @var{nomearquivo} externo dimensionado para
@var{largura} e (ou) @var{altura} fornecidos, usando texto @var{alternativo} e
procurando por @samp{@var{nomearquivo}.@var{extensão}} em HTML@.
@xref{Imagens}.

@item @@include @var{nomearquivo}
Lê o conteúdo do arquivo fonte do Texinfo @var{nomearquivo}.
@xref{Arquivos de Inclusão}.

@item @@indent
Insere recuo de parágrafo. @xref{@code{@@indent}}.

@item @@indentedblock
Recua um bloco de texto arbitrário à esquerda. Emparelha com @code{@@end
indentedblock}. @xref{@code{@@indentedblock}}.

@item @@indicateurl@{@var{urlindicação}@}
Indica o texto que é um localizador uniforme de recursos para a World Wide Web.
@xref{@code{@@indicateurl}}.

@item @@inforef@{@var{nome-nó}, [@var{nome-entrada}], @var{nome-arquivo-info}@}
Faz uma referência cruzada para um arquivo do Info para o qual não existe
manual impresso. @xref{@code{@@inforef}}.

@item @@inlinefmt@{@var{formato}, @var{texto}@}
Insere @var{texto} somente se o formato de saída for @var{formato}.
@xref{Condicionais Inline}.

@item @@inlinefmtifelse@{@var{formato}, @var{texto}, @var{texto-senão}@}
Insere @var{texto} se o formato de saída for @var{formato}, caso contrário
@var{texto-senão}.

@item @@inlineifclear@{@var{variável}, @var{texto}@}
@itemx @@inlineifset@{@var{variável}, @var{texto}@}
Insere @var{texto} somente se a variável do Texinfo @var{variável} (não)
estiver configurada.

@item @@inlineraw@{@var{formato}, @var{texto-bruto}@}
Insere @var{texto} como em uma condicional bruta, somente se o formato de saída
for @var{formato}.

@item \input @var{arquivo-definições-macro}
Usa o arquivo de definições de macro especificado. Esse comando é usado somente
na primeira linha de um arquivo do Texinfo para fazer com que o @TeX{} faça uso
do arquivo de definições de macro @file{texinfo}. A @code{\} em @code{\input} é
usada, em vez de um @code{@@}, porque o @TeX{} não reconhece @code{@@} até
depois de ter lido o arquivo de definições.
@xref{Cabeçalho do Arquivo do Texinfo}.

@item @@insertcopying
Insere o texto definido anteriormente com o ambiente @code{@@copying}.
@xref{@code{@@insertcopying}}.

@item @@item
Indica o início de um parágrafo marcado para @code{@@itemize} e
@code{@@enumerate}; indica o início do texto de uma entrada de primeira coluna
para @code{@@table}, @code{@@ftable} e @code{@@vtable}.
@xref{Listas e Tabelas}.

@item @@itemize @var{marca-caractere-gerador-ou-comando}
Inicia uma lista não ordenada: parágrafos recuados com uma marca, como
@code{@@bullet}, dentro da margem esquerda no início de cada item. Emparelha
com @code{@@end itemize}. @xref{@code{@@itemize}}.

@item @@itemx
Como @code{@@item}, mas não gera espaço vertical extra acima do texto do item.
Assim, quando vários itens tiverem a mesma descrição, usa @code{@@item} para o
primeiro e @code{@@itemx} para os outros. @xref{@code{@@itemx}}.

@item @@kbd@{@var{caracteres-teclado}@}
Indica caracteres de entrada a serem digitados por usuários(as).
@xref{@code{@@kbd}}.

@item @@kbdinputstyle @var{estilo}
Especifica quando @code{@@kbd} deveria usar uma fonte diferente de
@code{@@code} de acordo com @var{estilo}: @code{code}, @code{distinct},
@code{example}. @xref{@code{@@kbd}}.

@item @@key@{@var{nome-tecla}@}
Indica o nome de uma tecla em um teclado. @xref{@code{@@key}}.

@item @@kindex @var{entrada}
Adiciona @var{entrada} ao índice de chaves.
@xref{Entradas de Índice, , Definindo as Entradas de um Índice}.

@item @@L@{@}
@itemx @@l@{@}
Gera as letras L suprimidas, maiúsculas e minúsculas, em polonês,
respectivamente: @L{}, @l{}.

@item @@LaTeX@{@}
Gera o logotipo do @LaTeX{}. @xref{@code{@@TeX @@LaTeX}}.

@item @@leq@{@}
Gera um sinal de menor que ou igual a, `@leq{}'. @xref{@code{@@geq @@leq}}.

@item @@lisp
Inicia um exemplo de código Lisp. Recua o texto, não preenche e seleciona fonte
de largura fixa. Emparelha com @code{@@end lisp}. @xref{@code{@@lisp}}.

@item @@listoffloats
Produz uma listagem de @code{@@float}s, semelhante a um sumário.
@xref{@code{@@listoffloats}}.

@item @@lowersections
Muda capítulos subsequentes para seções, seções para subseções e assim por
diante. @xref{Elevar/rebaixar seções, , @code{@@raisesections} e
@code{@@lowersections}}.

@item @@macro @var{nomemacro} @{@var{parâmetros}@}
Define um novo comando do Texinfo @code{@@@var{nomemacro}@{@var{parâmetros}@}}.
Emparelha com @code{@@end macro}. @xref{Definindo Macros}.

@item @@majorheading @var{título}
Imprime um título não numerado, como um capítulo, mas omite do sumário. Isso
gera mais espaço em branco vertical antes do título que o comando
@code{@@chapheading}. @xref{@code{@@majorheading @@chapheading}}.

@item @@math@{@var{expressão-matemática}@}
Formata uma expressão matemática. @xref{Inserindo Fórmulas Matemáticas}.

@item @@menu
Marca o início de um menu de nós. Nenhum efeito em um manual impresso.
Emparelha com @code{@@end menu}. @xref{Menus}.

@item @@minus@{@}
Gera um sinal de menos, `@minus{}'. @xref{@code{@@minus}}.

@item @@multitable @var{coluna-jargura-especificações}
Inicia uma tabela com várias colunas. Inicie cada linha com @code{@@item} ou
@code{@@headitem} e separe as colunas com @code{@@tab}. Emparelha com
@code{@@end multitable}. @xref{Larguras de Colunas Multi Tabelas}.

@item @@need @var{n}
Inicia uma nova página em um manual impresso se menos que @var{n} mils
(milésimos de polegada) restarem na página atual. @xref{@code{@@need}}.

@item @@node @var{nome}, @var{próximo}, @var{anterior}, @var{acima}
Inicia um novo nó. @xref{Escrevendo um Nó}.

@item @@noindent
Evita que o texto seja recuado como se fosse um novo parágrafo.
@xref{@code{@@noindent}}.

@item @@novalidate
Suprime a validação de referências de nó e omite a criação de arquivos
auxiliares com o @TeX{}. Use antes de quaisquer comandos de seccionamento ou de
referência cruzada. @xref{Validação de Ponteiro}.

@item @@O@{@}
@itemx @@o@{@}
Gera as letras O com barra, maiúsculas e minúsculas, respectivamente: @O{}, @o{}.

@item  @@oddfooting [@var{esquerda}] @@| [@var{centro}] @@| [@var{direita}]
@itemx @@oddheading [@var{esquerda}] @@| [@var{centro}] @@| [@var{direita}]
Especifica os rodapés das páginas, respectivamente títulos, para páginas
ímpares (à direita).
@xref{Cabeçalhos Personalizados, , Como Fazer Teus Próprios Cabeçalhos}.

@item @@OE@{@}
@itemx @@oe@{@}
Gera as ligaduras OE maiúsculas e minúsculas, respectivamente: @OE{}, @oe{}.
@xref{Inserindo Acentos}.

@item @@ogonek@{@var{c}@}
Gera um diacrítico ogonek sob o próximo caractere, como em @ogonek{a}.
@xref{Inserindo Acentos}.

@item @@option@{@var{nome-opção}@}
Indica uma opção de linha de comando, como @option{-l} ou @option{--help}.
@xref{@code{@@option}}.

@item @@ordf@{@}
@itemx @@ordm@{@}
Gera os ordinais espanhóis femininos e masculinos, respectivamente: @ordf{},
@ordm{}. @xref{Inserindo Acentos}.

@item @@page
Inicia uma nova página em um manual impresso. Nenhum efeito no Info.
@xref{@code{@@page}}.

@item @@pagesizes [@var{largura}][, @var{altura}]
Muda dimensões da página. @xref{pagesizes}.

@item @@paragraphindent @var{recuo}
Recua parágrafos por @var{recuo} número de espaços (talvez 0); preserva o recuo
do arquivo fonte se @var{recuo} for @code{asis}.
@xref{@code{@@paragraphindent}}.

@item @@part @var{título}
Inicia um grupo de capítulos ou anexos; incluídos no sumário e produz uma
página própria na saída impressa. @xref{@code{@@part}}.

@item @@pindex @var{entrada}
Adiciona @var{entrada} ao índice de programas.
@xref{Entradas de Índice, , Definindo as Entradas de um Índice}.

@item @@point@{@}
Indica a posição do ponto em um buffer para o(a) leitor(a) com um glifo:
@samp{@point{}}. @xref{@code{@@point}}.

@item @@pounds@{@}
Gera o símbolo da moeda libras esterlinas.
@xref{@code{@@pounds}}.

@item @@print@{@}
Indica a saída impressa para o(a) leitor(a) com um glifo: @samp{@print{}}.
@xref{@code{@@print}}.

@item @@printindex @var{nome-índice}
Gera o índice alfabético para @var{nome-índice} (usando duas colunas em um
manual impresso). @xref{Imprimindo Índices e Menus}.

@item @@pxref@{@var{nó}, [@var{entrada}], [@var{título-nó}], [@var{arquivo-info}], [@var{manual}]@}
Faz uma referência que comece com um `Veja' minúsculo em um manual impresso.
Use somente entre parênteses. Somente o primeiro argumento é obrigatório.
@xref{@code{@@pxref}}.

@item @@questiondown@{@}
Gera um ponto de interrogação invertido. @xref{Inserindo Acentos}.

@item @@quotation
Estreita as margens para indicar texto que seja citado a partir de outro
trabalho. Recebe argumento opcional especificando texto de prefixo, por
exemplo, um nome de autor(a). Emparelha com @code{@@end quotation}.
@xref{@code{@@quotation}}.

@item @@quotedblleft@{@}
@itemx @@quotedblright@{@}
@itemx @@quoteleft@{@}
@itemx @@quoteright@{@}
@itemx @@quotedblbase@{@}
@itemx @@quotesinglbase@{@}
Produz várias aspas: @quotedblleft{} @quotedblright{} @quoteleft{}
@quoteright{} @quotedblbase{} @quotesinglbase{}. @xref{Inserindo Aspas}.

@item @@r@{@var{texto}@}
Configura @var{texto} na fonte regular @r{romana}. Sem efeito no Info.
@xref{Fontes}.

@item @@raggedright
Preenche texto; justifica à esquerda cada linha, deixando a extremidade direita
irregular. Deixa a fonte como está. Emparelha com @code{@@end raggedright}. Sem
efeito no Info. @xref{@code{@@raggedright}}.

@item @@raisesections
Muda seções subsequentes para capítulos, subseções para seções e assim por
diante. @xref{Elevar/rebaixar seções}.

@item @@ref@{@var{nó}, [@var{entrada}], [@var{título-nó}], [@var{arquivo-info}], [@var{manual}]@}
Faz uma referência simples que não comece com nenhum texto especial. Siga o
comando com um sinal de pontuação. Somente o primeiro argumento é obrigatório.
@xref{@code{@@ref}}.

@item @@refill
@findex refill
Esse comando costumava preencher e recuar o parágrafo depois que todo o outro
processamento tivesse sido feito. Ele não mais é necessário, já que todos os
formatadores agora preenchem automaticamente conforme necessário, mas você
ainda pode vê-lo no fonte para alguns manuais, pois não faz mal.

@item @@registeredsymbol@{@}
Gera o símbolo jurídico @registeredsymbol{}.
@xref{@code{@@registeredsymbol}}.

@item @@result@{@}
Indica o resultado de uma expressão para o(a) leitor(a) com um glifo especial:
@samp{@result{}}. @xref{@code{@@result}}.

@item @@ringaccent@{@var{c}@}
Gera um acento de anel sobre o próximo caractere, como em @ringaccent{o}.
@xref{Inserindo Acentos}.

@item @@samp@{@var{texto}@}
Indica um exemplo literal de uma sequência de caracteres, em geral. Aspado na
saída do Info. @xref{@code{@@samp}}.

@item @@sansserif@{@var{texto}@}
Configura @var{texto} em uma fonte @sansserif{sans serifa} se possível. Sem
efeito no Info. @xref{Fontes}.

@item @@sc@{@var{texto}@}
Configura @var{texto} em fonte de versaletes na saída impressa e em caixa alta
no Info. @xref{Versaletes}.

@item @@section @var{título}
Inicia uma seção dentro de um capítulo. O título da seção aparece no sumário.
Em Info, o título é sublinhado com sinais de igual. Dentro de @code{@@chapter}
e @code{@@appendix}, o título da seção é numerado; dentro de
@code{@@unnumbered}, a seção não é numerada. @xref{@code{@@section}}.

@item @@set @var{variáveltexinfo} [@var{string}]
Define a variável do Texinfo @var{variáveltexinfo}, opcionalmente para o valor
@var{string}. @xref{@code{@@set @@clear @@value}}.

@item @@setchapternewpage @var{ligado-desligado-ímpar}
Especifica se os capítulos iniciam em novas páginas e, em caso afirmativo, se
em novas páginas ímpares (à direita). @xref{@code{@@setchapternewpage}}.

@item @@setcontentsaftertitlepage
Coloca o sumário depois do @samp{@@end titlepage}, mesmo que o comando
@code{@@contents} esteja no final. @xref{Conteúdo}.

@item @@setfilename @var{nome-arquivo-info}
Fornece um nome a ser usado para os arquivos de saída. Esse comando é ignorado
para formatação de @TeX{}. @xref{@code{@@setfilename}}.

@item @@setshortcontentsaftertitlepage
Coloca o sumário curto depois do comando @samp{@@end titlepage}, mesmo que o
comando @code{@@shortcontents} esteja no final.
@xref{Conteúdo}.

@item @@settitle @var{título}
Especifica o título para cabeçalhos de página em um manual impresso e o título
padrão de documento para @samp{<head>} do HTML.
@xref{@code{@@settitle}}.

@item @@shortcaption
Define a legenda curta para um @code{@@float}.
@xref{@code{@@caption @@shortcaption}}.

@item @@shortcontents
Imprime um sumário curto, com entradas de nível de capítulo somente. Não é
relevante para Info, que usa menus em vez de sumários.
@xref{Conteúdo, , Gerando Um Sumário}.

@item @@shorttitlepage @var{título}
Gera uma página mínima de título. @xref{@code{@@titlepage}}.

@item @@slanted@{@var{texto}@}
Configura @var{texto} em uma fonte @slanted{inclinada} se possível. Sem efeito
no Info. @xref{Fontes}.

@item @@smallbook
Faz com que o @TeX{} produza um manual impresso em um formato de 7 por 9,25
polegadas em vez do formato regular de 8,5 por 11 polegadas.
@xref{@code{@@smallbook}}. Veja-se também @ref{@code{@@small@dots{}}}.

@item @@smalldisplay
Inicia um tipo de exemplo. Como @code{@@display}, mas usa um tamanho de fonte
menor onde possível. Emparelha com @code{@@end smalldisplay}.
@xref{@code{@@small@dots{}}}.

@item @@smallexample
Inicia um exemplo. Como @code{@@example}, mas usa um tamanho de fonte menor
onde possível. Emparelha com @code{@@end smallexample}.
@xref{@code{@@small@dots{}}}.

@item @@smallformat
Inicia um tipo de exemplo. Como @code{@@format}, mas usa um tamanho de fonte
menor onde possível. Emparelha com @code{@@end smallformat}.
@xref{@code{@@small@dots{}}}.

@item @@smallindentedblock
Como @code{@@indentedblock}, mas usa um tamanho de fonte menor onde possível.
Emparelha com @code{@@end smallindentedblock}. @xref{@code{@@small@dots{}}}.

@item @@smalllisp
Inicia um exemplo de código Lisp. O mesmo que @code{@@smallexample}. Emparelha
com @code{@@end smalllisp}. @xref{@code{@@small@dots{}}}.

@item @@smallquotation
Como @code{@@quotation}, mas usa um tamanho de fonte menor onde possível.
Emparelha com @code{@@end smallquotation}. @xref{@code{@@small@dots{}}}.

@item @@sortas @{@var{chave}@}
Usado nos argumentos para comandos de indexação para fornecer uma string pela
qual a entrada do índice deveria ser ordenada. @xref{Comandos de Indexação}.

@item @@sp @var{n}
Ignora @var{n} linhas em branco. @xref{@code{@@sp}}.

@item @@ss@{@}
Gera a letra alemã S sustenido es-zet, @ss{}.
@xref{Inserindo Acentos}.

@item @@strong @{@var{texto}@}
Enfatiza @var{texto} com mais força que @code{@@emph}, usando @strong{negrito}
onde possível; cercado entre asteriscos no Info.
@xref{enfatizar e fortalecer, , Enfatizando Texto}.

@item @@sub @{@var{texto}@}
Configura @var{texto} como um subscrito.
@xref{Inserindo Subscritos e Sobrescritos}.

@item @@subheading @var{título}
Imprime um título não numerado, como uma subseção, mas omite do sumário de um
manual impresso. No Info, o título é sublinhado com hifens.
@xref{@code{@@unnumberedsubsec @@appendixsubsec @@subheading}}.

@item @@subsection @var{título}
Inicia uma subseção dentro de uma seção. O título da subseção aparece no
sumário. No Info, o título é sublinhado com hifens. Mesma numeração dependente
do contexto que @code{@@section}. @xref{@code{@@subsection}}.

@item @@subsubheading @var{título}
Imprime um título não numerado, como uma subsubseção, mas omite do sumário de
um manual impresso. No Info, o título é sublinhado com pontos.
@xref{@code{@@subsubsection}}.

@item @@subsubsection @var{título}
Inicia uma subsubseção dentro de uma subseção. O título da subsubseção aparece
no sumário. No Info, o título é sublinhado com pontos. Mesma numeração
dependente do contexto que @code{@@section}. @xref{@code{@@subsubsection}}.

@item @@subtitle @var{título}
Em um manual impresso, configura um subtítulo em uma fonte de tamanho normal
alinhada ao lado direito da página. Não é relevante para Info, que não tem
páginas de título. @xref{@code{@@title @@subtitle @@author}}.

@item @@summarycontents
Imprime um sumário curto. Sinônimo para @code{@@shortcontents}.
@xref{Conteúdo, , Gerando Um Sumário}.

@item @@sup @{@var{texto}@}
Configura @var{texto} como um sobrescrito.
@xref{Inserindo Subscritos e Sobrescritos}.

@item @@syncodeindex @var{de-índice} @var{para-índice}
Mescla o índice nomeado no primeiro argumento no índice nomeado no segundo
argumento, formatando as entradas originárias do primeiro índice com
@code{@@code}. @xref{Combinando Índices}.

@item @@synindex @var{de-índice} @var{para-índice}
Mescla o índice nomeado no primeiro argumento no índice nomeado no segundo
argumento. Não muda a fonte das entradas de @var{de-índice}.
@xref{Combinando Índices}.

@item @@t@{@var{texto}@}
Configura @var{texto} em uma fonte de @t{largura-fixa}, tipo máquina de
escrever. Sem efeito no Info. @xref{Fontes}.

@item @@tab
Separa colunas em uma linha de uma multitabela. @xref{Linhas de Multi Tabelas}.

@item @@table @var{comando-formatação}
Inicia uma tabela de duas colunas (lista de descrição), usando @code{@@item}
para cada entrada. Escreve cada entrada da primeira coluna na mesma linha que
@code{@@item}. As entradas da primeira coluna são impressas na fonte resultante
proveniente de @var{comando-formatação}. Emparelha com @code{@@end table}.
@xref{Tabelas de Duas Colunas, , Fazendo Uma Tabela de Duas Colunas}. Veja-se
também @ref{@code{@@ftable @@vtable}} e @ref{@code{@@itemx}}.

@item @@TeX@{@}
Gera o logotipo do @TeX{}. @xref{@code{@@TeX @@LaTeX}}.

@item @@tex
Entra no @TeX{} completamente. Emparelha com @code{@@end tex}.
@xref{Comandos do Formatador Bruto}.

@item @@textdegree@{@}
Gera o símbolo de Graus.  @xref{@code{@@textdegree}}.

@item @@thischapter
@itemx @@thischaptername
@itemx @@thischapternum
@itemx @@thisfile
@itemx @@thispage
@itemx @@thistitle
Permitido somente em um título ou rodapé. Representa, respectivamente, o número
e o nome do capítulo atual (no formato `Capítulo 1: Título'), somente o nome do
capítulo atual, somente o número do capítulo atual, o nome do arquivo, o número
da página atual e o título do documento, respectivamente.
@xref{Cabeçalhos Personalizados, , Como Fazer Teus Próprios Cabeçalhos}.

@item @@TH@{@}
@itemx @@th@{@}
Gera a letra maiúscula e minúscula islandesa thorn, respectivamente: @TH{},
@th{}. @xref{Inserindo Acentos}.

@item @@tie@{@}
Gera um espaço normal entre palavras no qual uma quebra de linha não é
permitida. @xref{@code{@@tie}}.

@item @@tieaccent@{@var{cc}@}
Gera um acento de ligação sobre os próximos dois caracteres @var{cc}, como em
`@tieaccent{oo}'. @xref{Inserindo Acentos}.

@item @@tindex @var{entrada}
Adiciona @var{entrada} ao índice de tipos de dados.
@xref{Entradas de Índice, , Definindo as Entradas de um Índice}.

@item @@title @var{título}
Em um manual impresso, configura um título alinhado ao lado esquerdo da página,
em uma fonte maior que a normal e sublinhada com uma régua preta. Não é
relevante para Info, que não tem páginas de título.
@xref{@code{@@title @@subtitle @@author}}.

@item @@titlefont@{@var{texto}@}
Em um manual impresso, imprime @var{texto} em uma fonte maior que a normal.
@xref{@code{@@titlefont @@center @@sp}}.

@item @@titlepage
Inicia a página de título. Escreve o comando em uma linha própria, emparelhado
com @code{@@end titlepage}. Nada entre @code{@@titlepage} e @code{@@end
titlepage} aparece no Info. @xref{@code{@@titlepage}}.

@item @@today@{@}
Insere a data atual, no estilo `1 de janeiro de 1900'.
@xref{Cabeçalhos Personalizados, , Como Fazer Teus Próprios Cabeçalhos}.

@item @@top @var{título}
Marca o @code{@@node} mais alto no arquivo, que precisa ser definido na linha
imediatamente precedente ao comando @code{@@top}. O título é formatado como um
cabeçalho de nível de capítulo. O nó superior inteiro, incluindo as linhas
@code{@@node} e @code{@@top}, normalmente são cercadas com @code{@@ifnottex ...
@@end ifnottex}. No @TeX{} e @code{texinfo-format-buffer}, o comando
@code{@@top} é meramente um sinônimo para @code{@@unnumbered}.
@xref{Criação de Ponteiros do @command{makeinfo}}.

@item @@U@{@var{hexadecimal}@}
Produz uma representação do caractere Unicode U+@var{hexadecimal}.
@xref{Inserindo Unicode}.

@item @@u@{@var{c}@}
@itemx @@ubaraccent@{@var{c}@}
@itemx @@udotaccent@{@var{c}@}
Gera um acento breve, um sublinhado ou um ponto, respectivamente, sobre ou sob
o caractere @var{c}, como em @u{o}, @ubaraccent{o}, @udotaccent{o}.
@xref{Inserindo Acentos}.

@item @@unmacro @var{nomemacro}
Desconfigura a macro @code{@@@var{nomemacro}} se ela tiver sido definida.
@xref{Definindo Macros}.

@item @@unnumbered @var{título}
Inicia um capítulo que aparece sem números de capítulo de qualquer tipo. O
título aparece no sumário. No Info, o título é sublinhado com asteriscos.
@xref{@code{@@unnumbered @@appendix}}.

@item @@unnumberedsec @var{título}
Inicia uma seção que aparece sem números de seção de qualquer tipo. O título
aparece no sumário de um manual impresso. No Info, o título é sublinhado com
sinais de igual. @xref{@code{@@unnumberedsec @@appendixsec @@heading}}.

@item @@unnumberedsubsec @var{título}
Inicia uma subseção não numerada. O título aparece no sumário. No Info, o
título é sublinhado com hifens.
@xref{@code{@@unnumberedsubsec @@appendixsubsec @@subheading}}.

@item @@unnumberedsubsubsec @var{título}
Inicia uma subsubseção não numerada. O título aparece no sumário. No Info, o
título é sublinhado com pontos. @xref{@code{@@subsubsection}}.

@item @@uref@{@var{url}[, @var{texto-exibido}][, @var{substituição}@}
@itemx @@url@{@var{url}[, @var{texto-exibido}][, @var{substituição}@}
Define uma referência cruzada para um localizador externo uniforme de recursos,
por exemplo, para a World Wide Web. @xref{@code{@@url}}.

@item @@urefbreakstyle @var{estilo}
Especifica como @code{@@uref}/@code{@@url} deveria quebrar em caracteres
especiais: @code{after}, @code{before}, @code{none}. @xref{@code{@@url}}.

@item @@v@{@var{c}@}
Gera acento caron sobre o caractere @var{c}, como em @v{o}.
@xref{Inserindo Acentos}.

@item @@validatemenus @var{ligado-desligado}
Controla se os menus podem ser gerados automaticamente.
@xref{Escrevendo um Menu}.

@item @@value@{@var{variáveltexinfo}@}
Insere o valor, se existir, da variável do Texinfo @var{variáveltexinfo},
previamente definida por @code{@@set}. @xref{@code{@@set @@clear @@value}}.

@item @@var@{@var{variável-metassintática}@}
Destaca uma variável metassintática, que é algo que representa outro pedaço de
texto. @xref{@code{@@var}}.

@item @@verb@{@var{delimitador} @var{literal} @var{delimitador}@}
Emite @var{literal}, delimitada pelo caractere único @var{delimitador},
exatamente como está (na fonte de largura fixa), incluindo quaisquer espaços em
branco ou caracteres especiais do Texinfo. @xref{@code{@@verb}}.

@item @@verbatim
Emite o texto do ambiente exatamente como está (na fonte de largura fixa).
Emparelha com @code{@@end verbatim}. @xref{@code{@@verbatim}}.

@item @@verbatiminclude @var{nomearquivo}
Emite o conteúdo de @var{nomearquivo} exatamente como está (na fonte de largura
fixa). @xref{@code{@@verbatiminclude}}.

@item @@vindex @var{entrada}
Adiciona @var{entrada} ao índice de variáveis.
@xref{Entradas de Índice, , Definindo as Entradas de um Índice}.

@item @@vskip @var{quantidade}
Em um manual impresso, insere espaços em branco de forma a empurrar o texto no
restante da página em direção ao final da página. Usado na formatação da página
de direitos autorais com o argumento @samp{0pt plus 1filll}. (Observe a grafia
de @samp{filll}). @code{@@vskip} pode ser usado somente em contextos ignorados
para Info. @xref{Direitos Autorais}.

@item @@vtable @var{comando-formatação}
Inicia uma tabela de duas colunas, usando @code{@@item} para cada entrada.
Insere automaticamente cada um dos itens da primeira coluna no índice de
variáveis. Emparelha com @code{@@end vtable}. O mesmo que @code{@@table},
exceto pela indexação. @xref{@code{@@ftable @@vtable}}.

@item @@w@{@var{texto}@}
Proíbe quebras de linha em @var{texto}. @xref{@code{@@w}}.

@item @@xml
Entra no XML completamente. Emparelha com @code{@@end xml}.
@xref{Comandos do Formatador Bruto}.

@item @@xref@{@var{nó}, [@var{entrada}], [@var{título-nó}], [@var{arquivo-info}], [@var{manual}]@}
Faz uma referência que comece com `Veja' em um manual impresso. Siga o comando
com um sinal de pontuação. Apenas o primeiro argumento é obrigatório.
@xref{@code{@@xref}}.

@item @@xrefautomaticsectiontitle @var{ligado-desligado}
Por padrão, use o título da seção em vez do nome do nó em referências cruzadas.
@xref{Três Argumentos}.

@end table


@node Contextos de Comandos
@section Contextos de Comandos @@

@cindex Contextos, de Comandos @@

Aqui nós descrevemos aproximadamente quais comandos @@ podem ser usados em
quais contextos. Não é exaustivo nem pretende ser uma referência completa.
Discrepâncias entre as informações aqui e as implementações do @code{makeinfo}
ou do @TeX{} provavelmente serão resolvidas em favor da implementação.

Por @dfn{texto geral} abaixo, nós queremos dizer qualquer coisa, exceto
seccionamento e outros comandos de documento de nível externo, como
@code{@@section}, @code{@@node} e @code{@@setfilename}.

Os comandos condicionais @code{@@c}, @code{@@comment} e @code{@@if ... @@end
if} podem aparecer em qualquer lugar (exceto os Condicionais, que ainda
precisam estar em linhas separadas). @code{@@caption} pode aparecer somente em
@code{@@float}, mas pode conter texto geral. O conteúdo de @code{@@footnote}
também.

Os comandos @@ com chaves marcando texto (como @code{@@strong}, @code{@@sc},
@code{@@asis}) podem conter comandos de formatador bruto, como @code{@@html},
mas nenhum outro comando de bloco (outros comandos terminados por @code{@@end})
e não podem ser divididos entre em parágrafos, mas podem conter texto geral.

Além da restrição do comando de bloco, em @code{@@center}, @code{@@exdent} e
@code{@@item} nas linhas @code{@@table}, comandos @@ que só fazem sentido em um
parágrafo não são aceitos, como @code{@@indent}.

Além do acima, os comandos de seccionamento não podem conter @code{@@anchor},
@code{@@footnote} ou @code{@@verb}.

Além do acima, os comandos restantes (@code{@@node}, @code{@@anchor},
@code{@@printindex}, @code{@@ref}, @code{@@math}, @code{@@cindex},
@code{@@url}, @code{@@image} e assim por diante) não podem conter comandos de
referência cruzada (@code{@@ref}, @code{@@xref}, @code{@@pxref} e
@code{@@inforef}). Em uma última adição, @code{@@shortcaption} pode aparecer
somente dentro de @code{@@float}.

Para informações precisas e completas, nós sugerimos consultar a suíte de teste
nos fontes, que testa combinações exaustivamente.


@node Dicas
@appendix Dicas e Sugestões

Aqui estão algumas dicas para escrever documentação do Texinfo:

@cindex Dicas
@cindex Dicas de uso
@cindex Hints
@itemize @bullet
@item
Escreva no presente, não no passado ou no futuro.

@item
Escreva ativamente! Por exemplo, escreva ``Nós recomendamos que @dots{}'' em
vez de ``É recomendado que @dots{}''.

@item
Use 70 ou 72 como tua coluna de preenchimento. Linhas mais longas são difíceis
de ler.

@item
Inclua um aviso de direitos autorais e de permissões de cópia.
@end itemize


@subsubheading Índice, Índice, Índice!

Escreva muitas entradas de índice, de maneiras diferentes. Leitores(as) gostam
de índices; eles são úteis e convenientes.

Embora seja mais fácil escrever entradas de índice conforme você escreve o
corpo do texto, algumas pessoas preferem escrever entradas depois. Em ambos os
casos, escreva uma entrada antes do parágrafo ao qual ela se aplica. Dessa
maneira, uma entrada de índice aponta para a primeira página de um parágrafo
que é dividido entre páginas.

Aqui estão mais dicas relacionadas ao índice que nós consideramos valiosas:

@itemize @bullet
@item
Escreva cada entrada de índice diferentemente, de forma que cada entrada se
refira a um lugar diferente no documento.

@item
Escreva entradas de índice somente onde um tópico seja discutido
significativamente. Por exemplo, não é útil indexar ``informações de
depuração'' em um capítulo acerca de informes de defeitos. Alguém que queira
saber acerca de informações de depuração certamente não as encontrará naquele
capítulo.

@item
Capitalize consistentemente a primeira palavra de cada entrada do índice de
conceitos, ou então use consistentemente letras minúsculas. Entradas concisas
frequentemente pedem letras minúsculas; entradas mais longas pedem letras
maiúsculas. Qualquer que seja a convenção de caixa que você usar, por favor,
use uma ou a outra consistentemente! Misturar os dois estilos parece ruim.

@item
Sempre coloque em maiúsculas ou use letras maiúsculas para aquelas palavras em
um índice para as quais isso for apropriado, como nomes de países ou siglas.
Sempre use a caixa apropriada para nomes sensíveis a maiúsculas e minúsculas,
como aqueles em C ou Lisp.

@item
Escreva os comandos de indexação que se refiram a uma seção inteira
imediatamente depois do comando de seção e escreva os comandos de indexação que
se refiram a um parágrafo antes desse parágrafo.

No exemplo que segue, uma linha em branco vem depois da entrada de índice para
``Pulando'':

@example
@group
@@section O Cachorro e a Raposa
@@cindex Pular, em geral
@@cindex Pulando

@@cindex Cachorro, preguiçoso, pulou
@@cindex Cachorro preguiçoso, pulou
@@cindex Raposa, pula sobre o cachorro
@@cindex Raposa rápida salta sobre o cachorro
A rápida raposa marrom salta sobre o cachorro preguiçoso.
@end group
@end example

@noindent
(Observe que o exemplo mostra entradas para o mesmo conceito que são escritas
de maneiras diferentes---@samp{Cachorro preguiçoso} e @samp{Cachorro,
preguiçoso}---de forma que os(as) leitores(as) consigam pesquisar o conceito de
maneiras diferentes).
@end itemize


@subsubheading Linhas em Branco

@itemize @bullet
@item
Insira uma linha em branco entre um comando de seccionamento e a primeira frase
ou parágrafo seguinte, ou entre os comandos de indexação associados com o
comando de seccionamento e a primeira frase ou parágrafo seguinte, como
mostrado na dica acerca de indexação. Isso torna o fonte mais fácil de ler.

@item
Sempre insira uma linha em branco antes de um comando @code{@@table} e depois
de um comando @code{@@end table}; mas nunca insira uma linha em branco depois
de um comando @code{@@table}.

@need 1000
Por exemplo,

@example
@group
Tipos de raposa:

@@table @@samp
@@item Rápida
Pula sobre cães preguiçosos.
@end group

@group
@@item Marrom
também pula sobre cães preguiçosos.
@@end table

@end group
@group
@@noindent
Por outro lado, @dots{}
@end group
@end example

Insira linhas em branco antes e depois de @code{@@itemize} @dots{} @code{@@end
itemize} e @code{@@enumerate} @dots{} @code{@@end enumerate} da mesma maneira.

@end itemize


@subsubheading Frases Completas

Frases completas são mais fáceis de ler que @dots{}

@itemize @bullet
@item
Escreva entradas em uma lista itemizada como sentenças completas; ou pelo
menos, como frases completas. Expressões incompletas @dots{} estranhas @dots{}
como esta.

@item
Escreva a frase ou sentença preliminar para uma lista ou tabela de vários itens
como uma expressão completa. Não escreva ``Você pode configurar:''; em vez
disso, escreva ``Você pode configurar estas variáveis:''. A expressão anterior
soa cortada.
@end itemize


@subsubheading Edições, Datas e Versões

Inclua números de edição, números de versão e datas no texto do
@code{@@copying} (para pessoas que leem o arquivo do Texinfo e para os direitos
autorais nos arquivos de saída). Em seguida, use @code{@@insertcopying} na
seção @code{@@titlepage} para pessoas que leem a saída impressa
(@pxref{Amostra Curta}).

É mais fácil manusear essas informações de versão usando @code{@@set} e
@code{@@value}. @xref{Exemplo de @code{@@value}} e @ref{Textos GNU de Amostra}.


@subsubheading Comandos de Definição

Os comandos de definição são @code{@@deffn}, @code{@@defun}, @code{@@defmac} e
similares, e te habilitam a escrever descrições em um formato uniforme.

@itemize @bullet
@item
Escreva apenas um comando de definição para cada entidade que você definir com
um comando de definição. O recurso de indexação automática cria uma entrada de
índice que leva o(a) leitor(a) para a definição.

@item
Use @code{@@table} @dots{} @code{@@end table} em um anexo que contenha um
resumo de funções, não @code{@@deffn} ou outros comandos de definição.
@end itemize


@subsubheading Capitalização

@itemize @bullet
@item
Coloque ``Texinfo'' em maiúscula; é um nome. Não escreva @samp{x} ou o @samp{i}
em maiúsculas.

@item
Coloque ``Info'' em maiúscula; é um nome.

@item
Escreva @TeX{} usando o comando @code{@@TeX@{@}}. Observe as letras maiúsculas
@samp{T} e @samp{X}. Esse comando faz com que os formatadores tipografem o nome
de acordo com os desejos de Donald Knuth, que escreveu o @TeX{}. (Da mesma
forma @code{@@LaTeX@{@}} para @LaTeX{}).
@end itemize


@subsubheading Espaços

Não use espaços para formatar um arquivo do Texinfo, exceto dentro de
@code{@@example} @dots{} @code{@@end example} e outros ambientes e comandos
literais.

@need 700
Por exemplo, o @TeX{} preenche o seguinte:

@example
@group
   @@kbd@{C-x v@}
   @@kbd@{M-x vc-next-action@}
      Realize a próxima operação lógica sobre arquivo controlado por versão
      correspondente ao buffer atual.
@end group
@end example

@need 950
@noindent
de forma que se pareça com isto:

@iftex
@quotation
   @kbd{C-x v}
   @kbd{M-x vc-next-action}
      Realize a próxima operação lógica sobre arquivo controlado por versão
      correspondente ao buffer atual.
@end quotation
@end iftex
@ifnottex
@quotation
`C-x v' `M-x vc-next-action' Realize a próxima operação lógica sobre arquivo
controlado por versão correspondente ao buffer atual.
@end quotation
@end ifnottex

@noindent
Nesse caso, o texto deveria ser formatado com @code{@@table}, @code{@@item} e
@code{@@itemx} para criar uma tabela.


@subsubheading @@code, @@samp, @@var e @samp{---}

@itemize @bullet
@item
Use @code{@@code} em torno de símbolos da Lisp, incluindo nomes de comandos.
Por exemplo,

@example
A função principal é @@code@{vc-next-action@}, @dots{}
@end example

@item
Evite colocar letras, como @samp{s}, imediatamente depois de um @samp{@@code}.
Essas letras parecem ruins.

@item
Use @code{@@var} em torno de meta-variáveis. Não escreva colchetes angulares em
torno delas.

@item
Use três hifens em uma linha, @samp{---}, para indicar um traço longo. @TeX{}
os tipografa como um traço longo e os formatadores do Info reduzem três hifens
para dois.

@end itemize


@subsubheading Pontos Fora das Aspas

Coloque pontos e outros sinais de pontuação @emph{fora} das citações, a menos
que a pontuação faça parte da citação. Essa prática vai contra algumas
convenções de publicação nos Estados Unidos, mas habilita o(a) leitor(a) a
distinguir entre o conteúdo da citação e a passagem inteira.

Por exemplo, você deveria escrever a seguinte frase com o ponto fora das aspas:

@example
Evidentemente, @samp{au} é uma abreviação para ``autor(a)''.
@end example

@noindent
já que @samp{au} @emph{não} serve como uma abreviação para @samp{autor(a)}.
(com um ponto seguinte à palavra).


@subsubheading Apresentando Novos Termos

@itemize @bullet
@item
Apresente novos termos, de forma que um(a) leitor(a) que não os conheça consiga
entendê-los a partir do contexto; ou escreva uma definição para o termo.

Por exemplo, na seguinte, os termos ``check in'', ``register'' e ``delta''
estão todos aparecendo pela primeira vez; a frase de exemplo deveria ser
reescrita, de forma que eles sejam compreensíveis.

@quotation
A função principal te auxilia na submissão inicial de um arquivo no teu sistema
de controle de versão e a registrar conjuntos sucessivos de mudanças para ele
como deltas.
@end quotation

@item
Use o comando @code{@@dfn} ao redor de uma palavra sendo apresentada, para
indicar que o(a) leitor(a) deveria esperar não saber o significado de antemão,
e deveria esperar aprender o significado a partir dessa passagem.
@end itemize


@subsubheading Nós de Invocação de Programa

Você pode invocar programas como Emacs, GCC e @code{gawk} a partir de um shell.
A documentação para cada programa deveria conter uma seção que descreva isso.
Infelizmente, se os nomes e títulos dos nós para essas seções forem todos
diferentes, eles são difíceis para usuários(as) encontrar.

Portanto, existe uma convenção para nomear essas seções com uma frase que
começa com a palavra `Invocando', como em `Invocando Emacs'; dessa maneira,
os(as) usuários(as) conseguem encontrar a seção facilmente.


@subsubheading Sintaxe ANSI C

Ao usar @code{@@example} para descrever as convenções de chamada de uma função
C, use a sintaxe ANSI C, como esta:

@example
void dld_init (char *@@var@{path@});
@end example

@noindent
E na discussão subsequente, refira-se aos valores dos argumentos escrevendo os
mesmos nomes dos argumentos, novamente destacados com @code{@@var}.

@need 800
Evite o estilo obsoleto que se parece com este:

@example
#include <dld.h>

dld_init (path)
  char *path;
@end example

Além disso, é melhor evitar escrever @code{#include} acima da declaração apenas
para indicar que a função está declarada em um arquivo de cabeçalho. A prática
pode dar a impressão equivocada de que o @code{#include} pertence próximo à
declaração da função. Declare explicitamente qual arquivo de cabeçalho contém a
declaração ou, melhor ainda, nomeie o arquivo de cabeçalho usado para um grupo
de funções no início da seção que descreve as funções.

@anchor{texi-elements-by-size}
@subsubheading Comprimento do Nó

Mantenha os nós (seções) em um comprimento razoável, qualquer que seja o
razoável no contexto dado. Não hesite em dividir nós longos em sub nós e ter uma
extensa estrutura de árvore; é para isso que ela está lá. Muitas vezes, os(as)
leitores(as) provavelmente tentarão encontrar um ponto específico no manual,
usando busca, indexação ou apenas simples adivinhação, em vez de ler a coisa
toda desde o começo até o fim.

Você pode usar o utilitário @command{texi-elements-by-size} para ver uma lista
de todos os nós (ou seções) no documento, ordenados por tamanho (ou por linhas
ou por palavras), para encontrar candidatos para divisão. Ele está no
subdiretório @file{util/} dos fontes do Texinfo.


@subsubheading Exemplos Ruins

Aqui estão vários exemplos de escrita ruim para se evitar:

Neste exemplo, digamos, `` @dots{} você precisa @code{@@dfn}@{submeter@} a nova
versão.'' Isso flui melhor.

@quotation
Quando terminar de editar o arquivo, você precisa realizar uma
@code{@@dfn}@{submissão@}.
@end quotation

No exemplo seguinte, digamos, ``@dots{} torna possível uma interface unificada,
como o modo VC.''

@quotation
SCCS, RCS e outros sistemas de controle de versão realizam funções semelhantes
de maneiras amplamente semelhantes (é essa semelhança que torna possível um
modo de controle unificado como esse).
@end quotation

E neste exemplo, você deveria especificar a que `isso' se refere:

@quotation
Se você estiver trabalhando com outras pessoas, isso ajuda a coordenar as
mudanças de todas, de forma que elas não atrapalhem umas as outras.
@end quotation


@subsubheading E Finalmente @dots{}

@itemize @bullet
@item
Pronuncie @TeX{} como se @samp{X} fosse um `chi' grego, como o último som do
nome `Bach'. Mas pronuncie Texinfo como em `speck': ``teckinfo''.

@item
Escreva notas para você mesmo(a) no finalzinho de um arquivo do Texinfo depois
do @code{@@bye}. Nenhum dos formatadores processa texto depois do @code{@@bye};
é como se o texto estivesse dentro de @code{@@ignore} @dots{} @code{@@end
ignore}.
@end itemize


@node Arquivos de Amostra do Texinfo
@appendix Arquivos de Amostra do Texinfo
@cindex Arquivos de amostra do Texinfo

O primeiro exemplo oriundo do primeiro capítulo (@pxref{Amostra Curta}) é dado
aqui na íntegra, sem comentários. O segundo exemplo inclui os textos completos
a serem usados nos manuais GNU.

@menu
* Arquivo Curto de Amostra do Texinfo::
* Textos GNU de Amostra::
* Licença de Cópia Literal::
* Licença de Cópia Totalmente Permissiva::
@end menu


@node Arquivo Curto de Amostra do Texinfo
@section Amostra Curta
@cindex Arquivo de amostra do Texinfo, sem comentários

Aqui está um arquivo do Texinfo de amostra completo e curto. Você pode ver esse
arquivo, com comentários, no primeiro capítulo. @xref{Amostra Curta}.

Resumindo: O programa @command{makeinfo} transforma um arquivo fonte do Texinfo
como este em um arquivo do Info ou em HTML; e o @TeX{} o tipografa para um
manual impresso.


@sp 1
@example
\input texinfo
@@settitle Manual de Amostra 1.0

@@copying
Este é um curto exemplo de um arquivo completo do Texinfo.

Copyright @@copyright@{@} 2016 Free Software Foundation, Inc.
@@end copying

@@titlepage
@@title Título de Amostra
@@page
@@vskip 0pt plus 1filll
@@insertcopying
@@end titlepage

@@c Exibe o sumário no início.
@@contents

@@ifnottex
@@node Top
@@top Amostra GNU

Este manual é para Amostra GNU (version @@value@{VERSION@},
@@value@{UPDATED@}).
@@end ifnottex

@@menu
* Primeiro Capítulo:: O primeiro capítulo é o único capítulo nesta amostra.
* Índice::            ìndice completo.
@@end menu


@@node Primeiro Capítulo
@@chapter Primeiro Capítulo

@@cindex capítulo, primeiro

Este é o primeiro capítulo.
@@cindex entrada de índice, outra

Aqui está uma lista numerada.

@@enumerate
@@item
Este é o primeiro item.

@@item
Este é o segundo item.
@@end enumerate


@@node Índice
@@unnumbered Índice

@@printindex cp

@@bye
@end example


@node Textos GNU de Amostra
@section Textos GNU de Amostra

@cindex Textos GNU de Amostra
@cindex Textos de amostra, GNU
@cindex Textos completos, GNU

A seguir está uma amostra de documento do Texinfo com os textos completos que
deveriam ser usados (adaptados conforme necessário) nos manuais GNU.

Assim como os textos legais, ele também serve como um exemplo prático de
quantos elementos em um sistema GNU podem afetar o manual. Se você não está
familiarizado(a) com todos esses elementos diferentes, não se preocupe. Eles
não são exigidos e um manual perfeitamente bom pode ser escrito sem eles. Eles
estão incluídos aqui, no entanto, porque muitos manuais se beneficiam (ou
poderiam se beneficiar) deles.

@xref{Amostra Curta}, para um exemplo mínimo de um arquivo do Texinfo.
@xref{Iniciando e Finalizando um Arquivo}, para uma explicação completa desse
exemplo mínimo.

Aqui estão algumas observações acerca do exemplo:

@itemize @bullet
@item
@cindex $Id
@cindex CVS $Id
@cindex RCS $Id
@cindex Identificação de documentação
@cindex Identificação da documentação
O comentário @samp{$Id:} é para o CVS (@url{http://www.nongnu.org/cvs/}), RCS
(@pxref{Top,,, rcs, Revision Control System}) e outros sistemas de controle de
versão, que o expandem em uma string como:

@example
$Id: texinfo.texi 6987 2016-02-06 08:59:21Z gavin $
@end example

(Isso é potencialmente útil em todos os fontes que usem controle de versão, não
apenas manuais). Você pode desejar incluir o comentário @samp{$Id:} no texto do
@code{@@copying}, se quiser uma referência completamente inequívoca para a
versão do fonte da documentação.

Se você quiser escrever literalmente @t{@w{$}Id$}, use @code{@@w}:
@code{@@w@{$@}Id$}. Infelizmente, essa técnica não funciona em saída de texto
simples, onde não está claro o que deveria ser feito.

@item
@pindex automake@r{, e informações de versão}
@vindex UPDATED @r{variável do Automake}
@vindex VERSION @r{variável do Automake}
@pindex time-stamp.el
O @file{version.texi} no comando @code{@@include} é mantido automaticamente
pelo Automake (@pxref{Top,,, automake, GNU Automake}). Ele configura os valores
de @samp{VERSION} e de @samp{UPDATED} usados em outros lugares. Se tua
distribuição não usa o Automake, mas você usa o Emacs, você pode achar o pacote
time-stamp.el útil (@pxref{Time Stamps,,, emacs, O Manual do GNU Emacs}).

@item
O comando @code{@@syncodeindex} reflete a recomendação para usar somente um
índice onde possível, para facilitar para os(as) leitores(as) a consulta de
entradas de índice.

@item
O @code{@@dircategory} é para construir o diretório do Info.
@xref{Instalando Entradas de Diretório}, que inclui uma variedade de nomes
recomendados de categorias.

@item
O nó `Invocando' é um padrão GNU para ajudar os(as) usuários(as) a encontrar
informações básicas relativas ao uso da linha de comando de um programa
fornecido.
@xref{Manual Structure Details,,, standards, Padrões GNU de Codificação}.

@item
@cindex Licença GNU de Documentação Livre, incluindo inteira
@cindex Documentação Livre, Licença GNU, incluindo inteira
É melhor incluir a Licença GNU de Documentação Livre inteira em um manual GNU,
a menos que o manual tenha somente umas poucas páginas. Claro que esse exemplo
é ainda mais curto que isso, mas inclui a FDL de qualquer forma para a
finalidade de mostrar uma maneira convencional de fazer isso. O arquivo
@file{fdl.texi} está disponível nas máquinas GNU e nas distribuições de fontes
do Texinfo e outras GNU.

A FDL prevê omissão dela própria sob certas condições, mas nesse caso os textos
de amostra fornecidos aqui tem de ser modificados.
@xref{Licença GNU de Documentação Livre}.

@item
Se a FSF não for a titular dos direitos autorais, então use o nome apropriado.

@item
Se teu manual for publicado em papel pela FSF ou tiver mais que 400 páginas,
você deveria incluir os textos de capa padrão da FSF
(@pxref{License Notices for Documentation,,, maintain, Informações de Mantenedor(a) GNU}).

@item
Para documentos que expressam tuas opiniões, sentimentos ou experiências
pessoais, é mais apropriado usar uma licença que permita somente cópias
literais, em vez da FDL@. @xref{Licença de Cópia Literal}.
@end itemize

Aqui está o documento de amostra:

@verbatim
\input texinfo   @c -*-texinfo-*-
@comment $Id@w{$}
@comment %**start of header
@include version-pt_BR.texi
@settitle GNU Amostra @value{VERSION}
@syncodeindex pg cp
@comment %**end of header
@copying
Este manual é para GNU Amostra (versão @value{VERSION}, @value{UPDATED}), que é
um exemplo na documentação do Texinfo.

Copyright @copyright{} 2016 Free Software Foundation, Inc.

@quotation
É concedida permissão para copiar, distribuir e (ou) modificar este documento
sob os termos da Licença GNU de Documentação Livre, Versão 1.3 ou qualquer
versão posterior publicada pela Free Software Foundation; sem Seções
Invariantes, sem Textos de Capa Frontal e sem Textos de Contracapa. Uma cópia
da licença está incluída na seção intitulada ``Licença GNU de Documentação
Livre''.
@end quotation
@end copying

@dircategory Sistema Texinfo de documentação
@direntry
* amostra: (amostra)Invocando amostra.
@end direntry

@titlepage
@title GNU Amostra
@subtitle para versão @value{VERSION}, @value{UPDATED}
@author A.U. Thor (@email{bug-sample@@gnu.org})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top GNU Amostra

Este manual é para GNU Amostra (versão @value{VERSION}, @value{UPDATED}).
@end ifnottex

@menu
* Invocando amostra::
* Licença GNU de Documentação Livre::
* Índice::
@end menu


@node Invocando amostra
@chapter Invocando amostra

@pindex amostra
@cindex invocando @command{amostra}

Este é um manual de amostra. Não existe um programa de amostra para invocar,
mas se existisse, você poderia ver o uso básico e opções de linha de comando
dele aqui.


@node Licença GNU de Documentação Livre
@appendix Licença GNU de Documentação Livre

@include fdl-versao_1.3-pt_BR.texi


@node Índice
@unnumbered Índice

@printindex cp

@bye
@end verbatim


@node Licença de Cópia Literal
@section Licença de Cópia Literal

@cindex Licença de cópia literal
@cindex Licença para cópia literal

Para manuais de software e outras documentações, é fundamental usar uma licença
que permita redistribuição e atualização livres, de forma que, quando um
programa livre for mudado, a documentação também possa ser atualizada.

Por outro lado, para documentos que expressam tuas opiniões, sentimentos ou
experiências pessoais, é mais apropriado usar uma licença que permita somente
cópias literais.

Aqui está um texto de amostra para tal licença permitindo somente cópias
literais. Este é apenas o texto da licença em si. Para um documento completo de
amostra, vejam-se as seções anteriores.

@verbatim
@copying
Este documento é uma amostra para permitir somente cópias literais.

Copyright @copyright{} 2016 Free Software Foundation, Inc.

@quotation
É concedida permissão para fazer e distribuir cópias literais deste documento
inteiro sem royalties, desde que o aviso de direitos autorais e este aviso de
permissão sejam preservados.
@end quotation
@end copying
@end verbatim


@node Licença de Cópia Totalmente Permissiva
@section Licença de Cópia Totalmente Permissiva

@cindex Licença de cópia totalmente permissiva
@cindex Licença para cópia totalmente permissiva

Para manuais de software e outras documentações, é importante usar uma licença
que permita redistribuição e atualização livres, de forma, que quando um
programa livre for mudado, a documentação também possa ser atualizada.

Por outro lado, para pequenos arquivos de suporte, manuais curtos (com menos de
300 linhas) e documentação rudimentar (arquivos README, arquivos INSTALL,
etc.), a FDL completa seria um exagero. Eles podem usar uma licença simples
totalmente permissiva.

Aqui está um texto de amostra para uma tal licença totalmente permissiva. Este
é apenas o texto da licença em si. Para um documento completo de amostra,
vejam-se as seções anteriores.

@example
Copyright @@copyright@{@} 2016 Free Software Foundation, Inc.

A cópia e a distribuição deste arquivo, com ou sem modificação, são permitidas
em qualquer meio, sem royalties, desde que o aviso de direitos autorais e este
aviso sejam preservados.
@end example


@node Modo Texinfo
@appendix Usando o Modo Texinfo
@cindex Modo Texinfo
@cindex Modo, usando Texinfo
@cindex GNU Emacs
@cindex Emacs

Você pode editar um arquivo do Texinfo com qualquer editor de texto que
escolher. Um arquivo do Texinfo não é diferente de qualquer outro arquivo
ASCII. No entanto, o GNU Emacs vem com um modo especial, chamado modo Texinfo,
que fornece comandos e ferramentas do Emacs para ajudar a facilitar teu
trabalho.

@menu
* Visão Geral do Modo Texinfo:: Como o modo Texinfo pode te ajudar.
* Edição Emacs::                Adições do modo Texinfo às características de propósito geral de edição do GNU Emacs.
* Inserindo::                   Como inserir comandos @code{@@@@} usados frequentemente.
* Mostrando a Estrutura::       Como exibir a estrutura de um arquivo.
* Atualizando Nós e Menus::   Como atualizar ou criar novos nós e menus.
* Formatação Info::             Como formatar para Info.
* Impressão::                   Como formatar e imprimir parte ou tudo de um arquivo.
* Resumo do Modo Texinfo::     Sumário de todos os comandos do modo Texinfo.
@end menu

@node Visão Geral do Modo Texinfo
@section Visão Geral do Modo Texinfo

O modo Texinfo fornece recursos especiais para trabalhar com arquivos do
Texinfo. Você pode:

@itemize @bullet
@item
Inserir comandos @@ usados frequentemente.

@item
Criar automaticamente linhas @code{@@node}.

@item
Mostrar a estrutura de um arquivo fonte do Texinfo.

@item
Criar ou atualizar automaticamente os ponteiros `Próximo', `Anterior' e `Acima'
de um nó.

@item
Criar ou atualizar menus automaticamente.

@item
Criar automaticamente um menu mestre.

@item
Formatar uma parte ou todo um arquivo para o Info.

@item
Tipografar e imprimir parte ou todo um arquivo.
@end itemize

Talvez os dois recursos mais úteis sejam aqueles para inserir comandos @@
usados frequentemente e para criar ponteiros de nó e menus.

@node Edição Emacs
@section Os Comandos Usuais de Edição do GNU Emacs

Na maioria dos casos, os comandos usuais do modo Texto funcionam da mesma forma
no modo Texinfo como no modo Texto. O modo Texinfo adiciona novos comandos e
ferramentas de edição aos recursos de edição de propósito geral do GNU Emacs. A
principal diferença diz respeito ao preenchimento. No modo Texinfo, a variável
de separação de parágrafo e a tabela de sintaxe são redefinidas para a
finalidade de que os comandos do Texinfo que deveriam estar em linhas próprias
não sejam inadvertidamente incluídos em parágrafos. Assim, o comando @kbd{M-q}
(@code{fill-paragraph}) preencherá novamente um parágrafo, mas não misturará um
comando de indexação em uma linha adjacente a ele no parágrafo.

Além disso, o modo Texinfo configura a variável @code{page-delimiter} para o
valor de @code{texinfo-chapter-level-regexp}; por padrão, essa é uma expressão
regular que corresponde aos comandos para capítulos e os equivalentes deles,
como anexos. Com esse valor para o delimitador de página, você pode pular de um
título de capítulo para um título de capítulo com os comandos @kbd{C-x ]}
(@code{forward-page}) e @kbd{C-x [} (@code{backward-page}) e restringir a um
capítulo com o comando @kbd{C-x n p} (@code{narrow-to-page}).
(@xref{Pages, , ,emacs, O Manual do GNU Emacs}, para detalhes acerca dos
comandos de página).

Você pode nomear um arquivo do Texinfo como desejar, mas a convenção é a de
terminar um nome de arquivo do Texinfo com uma das extensões @file{.texinfo},
@file{.texi}, @file{.txi} ou @file{.tex}. Uma extensão mais longa é preferível,
pois é explícita, mas uma extensão mais curta pode ser necessária para sistemas
operacionais que limitam o comprimento dos nomes de arquivo. O GNU Emacs
automaticamente entra no modo Texinfo quando você visita um arquivo com uma
extensão @file{.texinfo}, @file{.texi} ou @file{.txi}. Além disso, o Emacs
comuta para o modo Texinfo quando você visita um arquivo que tenha
@samp{-*-texinfo-*-} na primeira linha dele. Se você já estiver em outro modo e
desejar comutar para o modo Texinfo, digite @code{M-x texinfo-mode}.

Como todos os outros recursos do Emacs, você consegue personalizar ou aprimorar
o modo Texinfo como desejar. Em particular, as combinações de teclas são muito
fáceis de mudar. As combinações de teclas descritas aqui são as padrões ou as
de uso mais comum.

@node Inserindo
@section Inserindo Comandos Usados Frequentemente
@cindex Inserindo comandos usados frequentemente
@cindex Comandos usados frequentemente, inserindo
@cindex Comandos, inserindo-os

O modo Texinfo fornece comandos para inserir vários comandos @@ usados
frequentemente no buffer. Você pode usar esses comandos para economizar
pressionamentos de tecla.

Os comandos de inserção são invocados digitando @kbd{C-c} duas vezes e depois a
primeira letra do comando @@:

@table @kbd
@item  C-c C-c c
@itemx M-x texinfo-insert-@@code
@findex texinfo-insert-@@code
Insere @code{@@code@{@}} e coloca o cursor entre as chaves.

@item  C-c C-c d
@itemx M-x texinfo-insert-@@dfn
@findex texinfo-insert-@@dfn
Insere @code{@@dfn@{@}} e coloca o cursor entre as chaves.

@item  C-c C-c e
@itemx M-x texinfo-insert-@@end
@findex texinfo-insert-@@end
Insere @code{@@end} e tenta inserir a palavra correta seguinte, como
@samp{example} ou @samp{table}. (Esse comando não lida com listas aninhadas
corretamente, mas insere a palavra apropriada na lista imediatamente
precedente).

@item  C-c C-c i
@itemx M-x texinfo-insert-@@item
@findex texinfo-insert-@@item
Insere @code{@@item} e coloca o cursor no início da próxima linha.

@item  C-c C-c k
@itemx M-x texinfo-insert-@@kbd
@findex texinfo-insert-@@kbd
Insere @code{@@kbd@{@}} e coloca o cursor entre as chaves.

@item  C-c C-c n
@itemx M-x texinfo-insert-@@node
@findex texinfo-insert-@@node
Insere @code{@@node} e uma linha de comentário listando a sequência para os nós
`Próximo', `Anterior' e `Acima'. Deixa um ponto depois do @code{@@node}.

@item  C-c C-c o
@itemx M-x texinfo-insert-@@noindent
@findex texinfo-insert-@@noindent
Insere @code{@@noindent} e coloca o cursor no início da próxima linha.

@item  C-c C-c s
@itemx M-x texinfo-insert-@@samp
@findex texinfo-insert-@@samp
Insere @code{@@samp@{@}} e coloca o cursor entre as chaves.

@item  C-c C-c t
@itemx M-x texinfo-insert-@@table
@findex texinfo-insert-@@table
Insere @code{@@table} seguido de @key{SPC} e deixa o cursor depois de @key{SPC}.

@item  C-c C-c v
@itemx M-x texinfo-insert-@@var
@findex texinfo-insert-@@var
Insere @code{@@var@{@}} e coloca o cursor entre as chaves.

@item  C-c C-c x
@itemx M-x texinfo-insert-@@example
@findex texinfo-insert-@@example
Insere @code{@@example} e coloca o cursor no início da próxima linha.

@c M-@{  era a vinculação para texinfo-insert-braces;
@c no Emacs 19, backward-paragraph receberá essa vinculação.
@item C-c C-c @{
@itemx M-x texinfo-insert-braces
@findex texinfo-insert-braces
Insere @code{@{@}} e coloca o cursor entre as chaves.

@item C-c @}
@itemx C-c  ]
@itemx M-x up-list
@findex up-list
Move de entre um par de chaves para a frente, passando pela chave de
fechamento. Digitar @kbd{C-c ]} é mais fácil que digitar @kbd{C-c @}}, que é,
no entanto, mais mnemônico; daí as duas combinações de teclas. (Além disso,
você pode sair de entre chaves digitando @kbd{C-f}).
@end table

Para colocar um comando como @w{@code{@@code@{@dots{}@}}} em volta de uma
palavra @emph{existente}, posicione o cursor na frente da palavra e digite
@kbd{C-u 1 C-c C-c c}. Isso facilita editar texto simples existente. O valor do
argumento de prefixo informa ao Emacs quantas palavras seguintes ao ponto incluir
entre chaves---@samp{1} para uma palavra, @samp{2} para duas palavras e assim
por diante. Use um argumento negativo para cercar a palavra ou palavras
anterior. Se você não especificar um argumento de prefixo, o Emacs insere a string
do comando @@ e posiciona o cursor entre as chaves. Esse recurso funciona
somente para os comandos @@ que operam sobre uma palavra ou palavras dentro de
uma linha, como @code{@@kbd} e @code{@@var}.

Esse conjunto de comandos de inserção foi criado depois de analisar a
frequência com que diferentes comandos @@ são usados no @cite{Manual do GNU
Emacs} e no @cite{Manual do GDB}. Se desejar adicionar teus próprios comandos
de inserção, você pode vincular uma macro de teclado a uma tecla, usar
abreviações ou estender o código em @file{texinfo.el}.

@findex texinfo-start-menu-description
@cindex Descrição de menu, iniciar
@cindex Descrição para menu, iniciar
@kbd{C-c C-c C-d} (@code{texinfo-start-menu-description}) é um comando de
inserção que funciona diferentemente dos outros comandos de inserção. Ele
insere o título da seção ou o do capítulo de um nó no espaço para a descrição
em uma linha de entrada de menu. (Uma entrada de menu tem três partes, o nome
da entrada, o nome do nó e a descrição. Somente o nome do nó é exigido, mas uma
descrição ajuda a explicar do que se trata o nó.
@xref{Partes de Menu, , Partes de Menu}).

Para usar @code{texinfo-start-menu-description}, posicione o ponto em uma linha
de entrada de menu e digite @kbd{C-c C-c C-d}. O comando procura e copia o
título que acompanha o nome do nó e insere o título como uma descrição; ele
posiciona o ponto no início do texto inserido para que você possa editá-lo. A
função não insere o título se a linha de entrada do menu já contiver uma
descrição.

Esse comando é somente um auxílio para escrever descrições; ele não faz o
trabalho todo. Você precisa editar o texto inserido, pois um título tende a
usar as mesmas palavras que um nome de nó, mas uma descrição útil usa palavras
diferentes.

@node Mostrando a Estrutura
@section Mostrando a Estrutura de Seccionamento de um Arquivo
@cindex Mostrando a estrutura de seccionamento de um arquivo
@cindex Estrutura de seccionamento de um arquivo, mostrando
@cindex Estrutura de um arquivo, mostrando
@cindex Esboço da estrutura do arquivo, mostrando
@cindex Esboço semelhante ao conteúdo da estrutura do arquivo
@cindex Estrutura de seccionamento de arquivo, mostrando
@cindex Estrutura de seccionamento do arquivo do Texinfo, mostrando

Você pode mostrar a estrutura de seccionamento de um arquivo Texinfo usando o
comando @kbd{C-c C-s} (@code{texinfo-show-structure}). Este comando lista as
linhas que começam com os comandos @@ para @code{@@chapter}, @code{@@section} e
similares. Ele constrói o que equivale a um índice. Essas linhas são exibidas
em outro buffer chamado buffer @samp{*Occur*}. Nesse buffer, você pode
posicionar o cursor sobre uma das linhas e usar o comando @kbd{C-c C-c}
(@code{occur-mode-goto-occurrence}) para pular para o ponto correspondente no
arquivo Texinfo.

@table @kbd
@item  C-c C-s
@itemx M-x texinfo-show-structure
@findex texinfo-show-structure
Mostra o @code{@@chapter}, @code{@@section} e linhas semelhantes de um arquivo
do Texinfo.

@item  C-c C-c
@itemx M-x occur-mode-goto-occurrence
@findex occur-mode-goto-occurrence
Vai para a linha no arquivo do Texinfo correspondente à linha sob o cursor no
buffer @file{*Occur*}.
@end table

Se você chamar @code{texinfo-show-structure} com um argumento de prefixo
digitando @w{@kbd{C-u C-c C-s}}, ele listará não somente aquelas linhas com os
comandos @@ para @code{@@chapter}, @code{@@section} e similares, mas também as
linhas @code{@@node}. Você pode usar @code{texinfo-show-structure} com um
argumento de prefixo para verificar se os ponteiros `Próximo', `Anterior' e
`Acima' de uma linha @code{@@node} estão corretos.

Frequentemente, quando você está trabalhando em um manual, você estará
interessado(a) somente na estrutura do capítulo atual. Nesse caso, você pode
marcar a região do buffer na qual você está interessado(a) usando o comando
@kbd{C-x n n} (@code{narrow-to-region}) e @code{texinfo-show-structure}
funcionará somente naquela região. Para ver o buffer inteiro novamente, use
@w{@kbd{C-x n w}} (@code{widen}).
(@xref{Narrowing, , , emacs, O Manual do GNU Emacs}, para mais informações
acerca dos comandos de estreitamento).

@vindex page-delimiter
@cindex Delimitador de página no modo Texinfo
Além de fornecer o comando @code{texinfo-show-structure}, o modo Texinfo
configura o valor da variável delimitadora de página para corresponder aos
comandos @@ de nível de capítulo. Isso te habilita a usar os comandos @kbd{C-x
]} (@code{forward-page}) e @kbd{C-x [} (@code{backward-page}) para avançar e
retroceder por capítulo, e a usar o comando @kbd{C-x n p}
(@code{narrow-to-page}) para restringir a um capítulo.
@xref{Pages, , , emacs, O Manual do GNU Emacs}, para mais informações acerca
dos comandos de página.


@node Atualizando Nós e Menus
@section Atualizando Nós e Menus

@cindex Atualizando Nós e Menus
@cindex Crie nós, menus automaticamente
@cindex Insira nós, menus automaticamente
@cindex Inserir automaticamente nós, menus

O modo Texinfo fornece comandos para criar ou atualizar automaticamente menus e
ponteiros de nó. Os comandos são chamados de comandos de ``atualizar'' porque o
uso mais frequente deles é para atualizar um arquivo do Texinfo depois que você
trabalhou nele; mas você pode usá-los para inserir os ponteiros ``Próximo',
`Anterior' e `Acima' em uma linha @code{@@node} que não tenha nenhum e para
criar menus em um arquivo que não tenha nenhum.

Se não usar quaisquer comandos de atualização, você precisará escrever menus
manualmente, o que é uma tarefa tediosa.

@menu
* Comandos de Atualização::        Cinco principais comandos de atualização.
* Exigências de Atualização::      Como estruturar um arquivo do Texinfo para usar o comando de atualização.
* Outros Comandos de Atualização:: Como recuar descrições, inserir linhas de nós ausentes e atualizar nós em sequência.
@end menu

@node Comandos de Atualização
@subsection Os Comandos de Atualização

Você pode usar os comandos de atualização para:

@itemize @bullet
@item
inserir ou atualizar os ponteiros `Próximo', `Anterior' e `Acima' de um nó,

@item
inserir ou atualizar o menu de uma seção e

@item
criar um menu mestre para um arquivo fonte do Texinfo.
@end itemize

Você também pode usar os comandos para atualizar todos os nós e menus em uma
região ou em um arquivo do Texinfo inteiro.

Os comandos de atualização funcionam somente com arquivos do Texinfo
convencionais, que são estruturados hierarquicamente como livros. Em tais
arquivos, uma linha de comando de estruturação precisa seguir próximo depois de
cada linha @code{@@node}, exceto para a linha `Top' do @code{@@node}. (Uma
@dfn{linha de comando de estruturação} é uma linha que começa com
@code{@@chapter}, @code{@@section} ou outro comando similar).

Você pode escrever a linha de comando de estruturação na linha que segue
imediatamente depois uma linha @code{@@node} ou então na linha que segue depois
de uma linha @code{@@comment} ou uma linha @code{@@ifinfo}. Você não pode
interpor mais que uma linha entre a linha @code{@@node} e a linha de comando de
estruturação; e você pode interpor somente uma linha @code{@@comment} ou uma
linha @code{@@ifinfo}.

Comandos que funcionam em um buffer inteiro exigem que o nó `Top' seja seguido
por um nó com um comando @code{@@chapter} ou nível equivalente. Os comandos de
atualização de menu não criarão um menu principal ou mestre para um arquivo do
Texinfo que tenha somente nós de nível @code{@@chapter}! Os comandos de
atualização de menu criam somente menus @emph{dentro de} nós para nós de nível
inferior. Para criar um menu de capítulos, você precisa fornecer um nó `Top'.

Os comandos de atualização de menu removem entradas de menu que se referem a
outros arquivos do Info, pois eles não se referem a nós dentro do buffer atual.
Isso é uma deficiência. Em vez de usar entradas de menu, você pode usar
referências cruzadas para se referir a outros arquivos do Info. Nenhum dos
comandos de atualização afeta referências cruzadas.

O modo Texinfo tem cinco comandos de atualização que são usados com mais
frequência: dois são para atualizar os ponteiros de nó ou o menu de um nó (ou
de uma região); dois são para atualizar cada ponteiro de nó e menu em um
arquivo; e um, o comando @code{texinfo-master-menu}, é para criar um menu
mestre para um arquivo completo e, opcionalmente, para atualizar cada nó e menu
no arquivo do Texinfo inteiro.

O comando @code{texinfo-master-menu} é o comando principal:

@table @kbd
@item C-c C-u m
@itemx M-x texinfo-master-menu
@findex texinfo-master-menu
Cria ou atualiza um menu mestre que inclua todos os outros menus (incorporando
as descrições oriundas dos menus preexistentes, se existir).

Com um argumento (argumento de prefixo, @kbd{C-u,} se interativo), primeiro
crie ou atualize todos os nós e todos os menus regulares no buffer antes de
construir o menu mestre. (@xref{O Nó Top, , O Nó Top e o Menu Mestre}, para
mais acerca de um menu mestre).

Para @code{texinfo-master-menu} funcionar, o arquivo do Texinfo precisa ter um
nó `Top' e pelo menos um nó subsequente.

Depois de editar extensivamente um arquivo do Texinfo, você pode digitar o seguinte:

@example
C-u M-x texinfo-master-menu
@exdent ou
C-u C-c C-u m
@end example

@noindent
Isso atualiza todos os nós e menus completamente e de uma vez.
@end table

Os outros principais comandos de atualização realizam trabalhos menores e são
projetados para a pessoa que atualiza nós e menus conforme ele ou ela escreve
um arquivo do Texinfo.

@need 1000
Os comandos são:

@table @kbd
@item C-c C-u C-n
@itemx M-x texinfo-update-node
@findex texinfo-update-node
Insere os ponteiros `Próximo', `Anterior' e `Acima' para o nó em que o ponto
está (ou seja, para a linha @code{@@node} precedente ao ponto). Se a linha
@code{@@node} tiver ponteiros `Próximo', `Anterior' ou `Acima' preexistentes,
os ponteiros antigos serão removidos e novos serão inseridos. Com um argumento
(argumento de prefixo, @kbd{C-u}, se interativo), esse comando atualiza todas
as linhas @code{@@node} na região (que é o texto entre o ponto e a marca).

@item C-c C-u C-m
@itemx M-x texinfo-make-menu
@findex texinfo-make-menu
Cria ou atualiza o menu no nó em que o ponto está. Com um argumento (@kbd{C-u}
como argumento de prefixo, se interativo), o comando cria ou atualiza menus
para os nós que estão dentro ou são parte da região.

Sempre que @code{texinfo-make-menu} atualiza um menu existente, as descrições
oriundas desse menu são incorporadas ao novo menu. Isso é feito copiando
descrições oriundas do menu existente para as entradas no novo menu que tenham
os mesmos nomes de nó. Se os nomes de nó forem diferentes, as descrições não
são copiadas para o novo menu.

@item C-c C-u C-e
@itemx M-x texinfo-every-node-update
@findex texinfo-every-node-update
Insere ou atualiza os ponteiros `Próximo', `Anterior' e `Acima' para cada nó no
buffer.

@item C-c C-u C-a
@itemx M-x texinfo-all-menus-update
@findex texinfo-all-menus-update
Cria ou atualiza todos os menus no buffer. Com um argumento (@kbd{C-u} como
argumento de prefixo, se interativo), primeiro insere ou atualiza todos os
ponteiros de nó antes de trabalhar nos menus.

Se um menu mestre existir, o comando @code{texinfo-all-menus-update} o
atualiza; mas o comando não cria um novo menu mestre se nenhum existir. (Use o
comando @code{texinfo-master-menu} para isso).

Ao trabalhar em um documento que não merece um menu mestre, você pode digitar o
seguinte:

@example
C-u C-c C-u C-a
@exdent or
C-u M-x texinfo-all-menus-update
@end example

@noindent
Isso atualiza todos os nós e menus.
@end table

A variável @code{texinfo-column-for-description} especifica a coluna para a
qual as descrições do menu são recuadas. Por padrão, o valor é 32, embora possa
ser útil reduzi-lo para até 24. Você pode configurar a variável por meio de
personalização (@pxref{Customization,,, emacs, O Manual do GNU Emacs}) ou com o
comando @kbd{M-x set-variable}
(@pxref{Examining, , Examining and Setting Variables, emacs, O Manual do GNU Emacs}).

Além disso, o comando @code{texinfo-indent-menu-description} pode ser usado
para recuar descrições de menu existentes para uma coluna especificada.
Finalmente, se desejar, você pode usar o comando
@code{texinfo-insert-node-lines} para inserir linhas @code{@@node} ausentes em
um arquivo. (@xref{Outros Comandos de Atualização}, para mais informações).

@node Exigências de Atualização
@subsection Exigências de Atualização
@cindex Exigências de atualização
@cindex Exigências para comandos de atualização

Para usar os comandos de atualização, você precisa organizar o arquivo do
Texinfo hierarquicamente com capítulos, seções, subseções e similares. Quando
você construir a hierarquia do manual, não `pule para baixo' mais que um nível
por vez: você pode seguir o nó `Top' com um capítulo, mas não com uma seção;
você pode seguir um capítulo com uma seção, mas não com uma subseção. No
entanto, você pode `pular para cima' qualquer número de níveis ao mesmo
tempo---por exemplo, desde uma subseção para um capítulo.

Cada linha @code{@@node}, com exceção da linha para o nó `Top', precisa ser
seguida por uma linha com um comando de estruturação, como @code{@@chapter},
@code{@@section} ou @code{@@unnumberedsubsec}.

Cada combinação de linha @code{@@node} e de comando de estruturação precisa ser
semelhante a esta:

@example
@group
@@node     Comentários,  Mínima, Convenções, Visão Geral
@@comment  nome-nó, próximo,    anterior,    acima
@@section Comentários
@end group
@end example

ou a esta (sem a linha @code{@@comment}):

@example
@group
@@node Comentários, Mínima, Convenções, Visão Geral
@@section Comentários
@end group
@end example

ou a esta (sem os ponteiros explícitos de nó):

@example
@group
@@node Comentários
@@section Comentários
@end group
@end example

@noindent
Nesse exemplo, `Comentários' é o nome do nó e o da seção. O próximo nó é
chamado `Mínima' e o nó anterior é chamado `Convenções'. A seção `Comentários'
está dentro do nó `Visão Geral', que é especificado pelo ponteiro `Acima'. (Em
vez de uma linha @code{@@comment}, você também pode escrever uma linha
@code{@@ifinfo}).

Se um arquivo tiver um nó `Top', ele precisa ser chamado de @samp{top} ou de
@samp{Top} e ser o primeiro nó no arquivo.

Os comandos de atualização de menu criam um menu de seções dentro de um
capítulo, um menu de subseções dentro de uma seção, e assim por diante. Isso
significa que você precisa ter um nó `Top' se quiser um menu de capítulos.

A propósito, o comando @code{makeinfo} criará um arquivo do Info para um
arquivo do Texinfo organizado hierarquicamente que careça de ponteiros
`Próximo', `Anterior' e `Acima'. Assim, se puder ter certeza de que teu arquivo
do Texinfo será formatado com @code{makeinfo}, você não tem necessidade dos
comandos de atualização de nó. (@xref{Criando um Arquivo do Info}, para mais
informações acerca do @code{makeinfo}).


@node Outros Comandos de Atualização
@subsection Outros Comandos de Atualização

Além dos cinco principais comandos de atualização, o modo Texinfo possui vários
comandos de atualização usados menos frequentemente:

@table @kbd
@item M-x texinfo-insert-node-lines
@findex texinfo-insert-node-lines
Insere as linhas @code{@@node} antes de @code{@@chapter}, @code{@@section} e de
outros comandos de seccionamento sempre que estiverem ausentes em uma região em
um arquivo do Texinfo.

Com um argumento (@kbd{C-u} como argumento de prefixo, se interativo), o
comando @code{texinfo-insert-node-lines} não somente insere linhas
@code{@@node}, mas também insere os títulos de capítulos ou de seções como os
nomes dos nós correspondentes. Além disso, ele insere os títulos como nomes de
nós em linhas @code{@@node} preexistentes que careçam de nomes. Como os nomes
de nós deveriam ser mais concisos que os títulos de seções ou de capítulos,
você precisa editar manualmente os nomes de nós assim inseridos.

Por exemplo, o seguinte marca um buffer inteiro como uma região e insere linhas
e títulos @code{@@node} por toda parte:

@example
C-x h C-u M-x texinfo-insert-node-lines
@end example

Esse comando insere títulos como nomes de nós em linhas @code{@@node}; o
comando @code{texinfo-start-menu-description}
(@pxref{Inserindo, Inserindo Comandos Usados Frequentemente}) insere títulos
como descrições em entradas de menu, uma ação diferente. No entanto, em ambos
os casos, você precisa editar o texto inserido.

@item M-x texinfo-multiple-files-update
@findex texinfo-multiple-files-update @r{(em resumo)}
Atualiza nós e menus em um documento construído a partir de arquivos separados.
Com @kbd{C-u} como um argumento de prefixo, cria e insere um menu mestre no
arquivo externo. Com um argumento de prefixo numérico, como @kbd{C-u 2},
primeiro atualiza todos os menus e todos os ponteiros `Próximo', `Anterior' e
`Acima' de todos os arquivos incluídos antes de criar e inserir um menu mestre
no arquivo externo. O comando @code{texinfo-multiple-files-update} está
descrito no anexo acerca de arquivos @code{@@include}.
@xref{@code{texinfo-multiple-files-update}}.

@item M-x texinfo-indent-menu-description
@findex texinfo-indent-menu-description
Recua cada descrição no menu seguindo o ponto para a coluna especificada. Você
pode usar esse comando para ter mais espaço para descrições. Com um argumento
(@kbd{C-u} como argumento de prefixo, se interativo), o comando
@code{texinfo-indent-menu-description} recua cada descrição em cada menu na
região. No entanto, esse comando não recua a segunda linha e as subsequentes de
uma descrição de várias linhas.

@item M-x texinfo-sequential-node-update
@findex texinfo-sequential-node-update
Insere os nomes dos nós imediatamente após e antes do nó atual como os
ponteiros `Próximo' ou `Anterior', independentemente do nível hierárquico
desses nós. Isso significa que o nó `Próximo' de uma subseção pode muito bem
ser o próximo capítulo. Nós sequencialmente ordenados são úteis para romances e
outros documentos que você lê sequencialmente. (No entanto, no Info, o comando
@kbd{g *} permite que você olhe ao longo do arquivo sequencialmente, de forma
que nós sequencialmente ordenados não são estritamente necessários). Com um
argumento (argumento de prefixo, se interativo), o comando
@code{texinfo-sequential-node-update} atualiza sequencialmente todos os nós na
região.
@end table

@node Formatação Info
@section Formatação para Info
@cindex Formatação para Info
@cindex Executando um formatador do Info
@cindex Formatação Info

O modo Texinfo fornece vários comandos para formatar parte ou todo um arquivo
do Texinfo para Info. Frequentemente, quando estiver escrevendo um documento,
você vai querer formatar somente parte de um arquivo---ou seja, uma região.

Você pode usar o comando @code{texinfo-format-region} ou @code{makeinfo-region}
para formatar uma região:

@table @kbd
@findex texinfo-format-region
@item  C-c C-e C-r
@itemx M-x texinfo-format-region
@itemx C-c C-m C-r
@itemx M-x makeinfo-region
Formata a região atual para Info.
@end table

Você pode usar ou o comando @code{texinfo-format-buffer} ou o
@code{makeinfo-buffer} para formatar um buffer inteiro:

@table @kbd
@findex texinfo-format-buffer
@item  C-c C-e C-b
@itemx M-x texinfo-format-buffer
@itemx C-c C-m C-b
@itemx M-x makeinfo-buffer
Formata o buffer atual para Info.
@end table

@need 1000
Por exemplo, depois de escrever um arquivo do Texinfo, você pode digitar o
seguinte:

@example
C-u C-c C-u m
@exdent or
C-u M-x texinfo-master-menu
@end example

@noindent
Isso atualiza todos os nós e menus. Então digitar o seguinte para criar um
arquivo do Info:

@example
C-c C-m C-b
@exdent ou
M-x makeinfo-buffer
@end example

@xref{Criando um Arquivo do Info} para detalhes acerca da formatação Info.

@node Impressão
@comment nome-nó,  next,  previous,  up
@section Impressão
@cindex Formatando para impressão
@cindex Imprimindo uma região ou buffer
@cindex Formatação e impressão de região
@cindex Formatação e impressão de buffer
@cindex Formatação e impressão de parte do arquivo

Tipografar e imprimir um arquivo do Texinfo é um processo de várias etapas no
qual você primeiro cria um arquivo para impressão (chamado de arquivo DVI) e
então imprime o arquivo. Opcionalmente, você também pode criar índices. Para
fazer isso, você precisa executar o comando @code{texindex} depois de executar
primeiro o comando de tipografia @code{tex}; e então você precisa executar o
comando @code{tex} novamente. Ou então execute o comando @code{texi2dvi} que
cria índices automaticamente conforme necessário
(@pxref{Formatar com @command{texi2dvi}}).

Frequentemente, quando você está escrevendo um documento, você quer tipografar
e imprimir somente parte de um arquivo para ver como ele ficará. Você pode usar
o @code{texinfo-tex-region} e comandos relacionados para esse propósito. Use o
comando @code{texinfo-tex-buffer} para formatar todo um buffer.

@table @kbd
@item  C-c C-t C-b
@itemx M-x texinfo-tex-buffer
@findex texinfo-tex-buffer
Executa @code{texi2dvi} no buffer. Além de executar @TeX{} no buffer, esse
comando cria ou atualiza índices automaticamente conforme necessário.

@item  C-c C-t C-r
@itemx M-x texinfo-tex-region
@findex texinfo-tex-region
Executa @TeX{} a região.

@item C-c C-t C-i
@itemx M-x texinfo-texindex
Executa @code{texindex} para ordenar os índices de um arquivo do Texinfo
formatado com @code{texinfo-tex-region}. O comando @code{texinfo-tex-region}
não executa @code{texindex} automaticamente; ele executa somente o comando de
tipografia @code{tex}. Você precisa executar o comando
@code{texinfo-tex-region} uma segunda vez depois de ordenar os arquivos de
índices brutos com o comando @code{texindex}. (Normalmente, você não formata um
índice quando formata uma região, somente quando formata um buffer. Agora que o
comando @code{texi2dvi} existe, existe pouca ou nenhuma necessidade para esse
comando).

@item C-c C-t C-p
@itemx M-x texinfo-tex-print
@findex texinfo-tex-print
Imprime o arquivo (ou parte do arquivo) formatado anteriormente com
@code{texinfo-tex-buffer} ou @code{texinfo-tex-region}.
@end table

Para @code{texinfo-tex-region} ou @code{texinfo-tex-buffer} funcionarem, o
arquivo @emph{precisa} começar com uma linha @samp{\input texinfo} e precisa
incluir uma linha @code{@@settitle}. O arquivo precisa terminar com
@code{@@bye} em uma linha própria. (Quando você usa @code{texinfo-tex-region},
você precisa cercar a linha @code{@@settitle} com linhas start-of-header e
end-of-header).

@xref{Impresso}, para uma descrição dos outros comandos relacionados ao @TeX{},
como @code{tex-show-print-queue}.

@node Resumo do Modo Texinfo
@section Resumo do Modo Texinfo

No modo Texinfo, cada conjunto de comandos tem atalhos de teclado padrão que
começam com as mesmas teclas. Todos os comandos que são criados sob medida para
o modo Texinfo começam com @kbd{C-c}. As teclas são um tanto mnemônicas.

@subheading Comandos de Inserção

Os comandos de inserção são invocados digitando @kbd{C-c} duas vezes e, em
seguida, a primeira letra do comando @@ a ser inserido. (Pode fazer mais
sentido mnemonicamente usar @kbd{C-c C-i}, para `inserção personalizada', mas
@kbd{C-c C-c} é rápido de digitar).

@example
C-c C-c c       @r{Inserir} @samp{@@code}.
C-c C-c d       @r{Inserir} @samp{@@dfn}.
C-c C-c e       @r{Inserir} @samp{@@end}.
C-c C-c i       @r{Inserir} @samp{@@item}.
C-c C-c n       @r{Inserir} @samp{@@node}.
C-c C-c s       @r{Inserir} @samp{@@samp}.
C-c C-c v       @r{Inserir} @samp{@@var}.
C-c @{          @r{Inserir chaves.}
C-c ]
C-c @}          @r{Sair das chaves de cercamento.}

@group
C-c C-c C-d     @r{Inserir título da seção de um nó}
                @r{no espaço para a descrição}
                @r{em uma linha de entrada de menu.}
@end group
@end example

@subheading Mostrar Estrutura

O comando @code{texinfo-show-structure} é frequentemente usado dentro de uma
região restrita.

@example
C-c C-s         @r{Listar todos os títulos.}
@end example

@subheading O Comando Mestre de Atualização

O comando @code{texinfo-master-menu} cria um menu mestre e também pode ser
usado para atualizar cada nó e menu em um arquivo.

@c Provavelmente deveria usar @tables nesta seção.
@example
@group
C-c C-u m
M-x texinfo-master-menu
               @r{Cria ou atualiza um menu mestre.}
@end group

@group
C-u C-c C-u m   @r{Com @kbd{C-u} como argumento de prefixo, primeiro}
                @r{cria ou atualiza todos os nós e menus}
                @r{regulares, e então cria um menu mestre.}
@end group
@end example

@subheading Atualizar Ponteiros

Os comandos de atualização de ponteiros são invocados digitando @kbd{C-c C-u} e
então @kbd{C-n} para @code{texinfo-update-node} ou @kbd{C-e} para
@code{texinfo-every-node-update}.

@example
C-c C-u C-n     @r{Atualiza um nó}.
C-c C-u C-e     @r{Atualiza cada nó no buffer.}
@end example

@subheading Atualizar Menus

Invoque os comandos de atualização de menus digitando @kbd{C-c C-u} e então
@kbd{C-m} para @code{texinfo-make-menu} ou @kbd{C-a} para
@code{texinfo-all-menus-update}. Para atualizar nós e menus ao mesmo tempo,
preceda @kbd{C-c C-u C-a} com @kbd{C-u}.

@example
C-c C-u C-m     @r{Faz ou atualiza um menu.}

@group
C-c C-u C-a     @r{Faz ou atualiza todos}
                @r{menus em um buffer.}
@end group

@group
C-u C-c C-u C-a @r{Com @kbd{C-u} como argumento de prefixo,}
                @r{primeiro cria ou atualiza todos os nós e}
                @r{então cria ou atualiza todos os menus.}
@end group
@end example

@subheading Formatar para Info

Os comandos de formatação Info que estão escritos em Emacs Lisp são invocados
digitando @kbd{C-c C-e} e então @kbd{C-r} para uma região ou @kbd{C-b} para o
buffer inteiro.

Os comandos de formatação Info que estão escritos em C e baseados no programa
@code{makeinfo} são invocados digitando @kbd{C-c C-m} e então @kbd{C-r} para
uma região ou @kbd{C-b} para o buffer inteiro.

@need 800
@noindent
Use os comandos @code{texinfo-format@dots{}}:

@example
@group
C-c C-e C-r     @r{Formatar a região.}
C-c C-e C-b     @r{Formatar o buffer.}
@end group
@end example

@need 750
@noindent
Use @code{makeinfo}:

@example
C-c C-m C-r     @r{Formatar a região.}
C-c C-m C-b     @r{Formatar o buffer.}
C-c C-m C-l     @r{Recentralizar o buffer de saída do @code{makeinfo}.}
C-c C-m C-k     @r{Mata o trabalho de formatação @code{makeinfo}.}
@end example

@subheading Tipografia e Impressão

Os comandos de tipografia e impressão do @TeX{} são invocados digitando
@kbd{C-c C-t} e depois outro comando de controle: @kbd{C-r} para
@code{texinfo-tex-region}, @kbd{C-b} para @code{texinfo-tex-buffer} e assim por
diante.

@example
C-c C-t C-r     @r{Executa @TeX{} na região.}
C-c C-t C-b     @r{Executa} @code{texi2dvi} @r{no buffer.}
C-c C-t C-i     @r{Executa} @code{texindex}.
C-c C-t C-p     @r{Imprime o arquivo DVI.}
C-c C-t C-q     @r{Mostra a fila de impressão.}
C-c C-t C-d     @r{Deleta um trabalho da fila de impressão.}
C-c C-t C-k     @r{Mata o trabalho atual de formatação do @TeX{}.}
C-c C-t C-x     @r{Sai de um trabalho de formatação @TeX{} atualmente parado.}
C-c C-t C-l     @r{Recentraliza o buffer de saída.}
@end example

@subheading Outros Comandos de Atualização

Os comandos de atualização restantes não tem atalhos padrão de teclado porque
raramente são usados.

@example
@group
M-x texinfo-insert-node-lines
               @r{Insere linhas @code{@@node} ausentes na região.}
               @r{Com @kbd{C-u} como um argumento de prefixo,}
               @r{usa títulos de seção como nomes de nó.}
@end group

@group
M-x texinfo-multiple-files-update
               @r{Atualizar um documento multi arquivos.}
               @r{Com @kbd{C-u 2} como argumento de prefixo,}
               @r{cria ou atualiza todos os nós e menus}
               @r{em todos os arquivos incluídos primeiro.}
@end group

@group
M-x texinfo-indent-menu-description
               @r{Recua descrições.}
@end group

@group
M-x texinfo-sequential-node-update
               @r{Insere ponteiros de nó em sequência estrita.}
@end group
@end example


@node Cabeçalhos
@appendix Cabeçalhos de Página
@cindex Cabeçalhos
@cindex Rodapés
@cindex Numeração de páginas
@cindex Cabeçalhos de página
@cindex Formatando títulos e rodapés

A maioria dos manuais impressos contém títulos no topo de cada página, exceto
as páginas de título e copyright. Alguns manuais também contém rodapés.
@c A saída HTML também suporta algo como esses, mas de uma maneira
@c completamente diferente: @pxref{Customizing HTML Page Layout}. Cabeçalhos e
@c rodapés não tem significado no Info ou em outros formatos de saída.

@menu
* Cabeçalhos Introduzidos::     Convenções para se usar cabeçalhos de página.
* Formato de Título::           Formatos padrão de títulos de página.
* Escolha de Título::           Como especificar o tipo do título da página.
* Cabeçalhos Personalizados::   Como criar teus próprios cabeçalhos e rodapés.
@end menu

@node Cabeçalhos Introduzidos
@section Cabeçalhos Introduzidos

O Texinfo fornece formatos padrão de cabeçalho de página para manuais que sejam
impressos em um lado de cada folha de papel e para manuais que sejam impressos
em ambos os lados do papel. Tipicamente, você usará esses formatos, mas pode
especificar teu próprio formato se desejar.

Além disso, você pode especificar se os capítulos deveriam começar em uma nova
página ou simplesmente continuar na mesma página que o capítulo anterior; e se
os capítulos começarem em novas páginas, você pode especificar se eles precisam
ser páginas ímpares.

Por convenção, um livro é impresso em ambos os lados de cada folha de papel.
Quando você abre um livro, a página da direita é numerada de forma ímpar, e os
capítulos começam nas páginas da direita---uma página anterior da esquerda é
deixada em branco, se necessário. Informes, no entanto, frequentemente são
impressos em apenas um lado do papel, e os capítulos começam em uma nova página
imediatamente seguinte ao fim do capítulo anterior. Em informes curtos ou
informais, os capítulos frequentemente não começam em uma nova página, mas são
separados do texto precedente por uma pequena quantidade de espaço em branco.

O comando @code{@@setchapternewpage} controla se os capítulos começam em novas
páginas e se um dos formatos padrão de título é usado. Além disso, o Texinfo
tem vários comandos de título e rodapé que você pode usar para gerar teus
próprios formatos de título e rodapé.

No Texinfo, títulos e rodapés são linhas unitárias nas partes superior e
inferior das páginas; você não pode criar títulos ou rodapés multilinha. Cada
linha de cabeçalho ou rodapé é dividida em três partes: uma parte esquerda, uma
parte do meio e uma parte direita. Qualquer parte, ou uma linha inteira, pode
ser deixada em branco. O texto para a parte esquerda de uma linha de cabeçalho
ou rodapé é configurado alinhado à esquerda; o texto para a parte do meio é
centralizado; e o texto para a parte direita é configurado alinhado à direita.


@node Formato de Título
@section Formatos de Título de Uso Comum

O Texinfo fornece dois formatos de cabeçalho de uso mais comum, um para manuais
impressos em um lado de cada folha de papel e outro para manuais impressos em
ambos os lados do papel.

Por padrão, nada é especificado para o rodapé de um arquivo do Texinfo, de
forma que o rodapé permanece em branco.

O formato de uso mais comum para impressão em um lado consiste de uma linha de
cabeçalho na qual a parte esquerda contém o nome do capítulo, a parte central
fica em branco e a parte direita contém o número da página.

@need 950
Uma página de um lado se parece com isto:

@example
@group
  _________________________
 |                         |
 | capítulo  número página |
 |                         |
 | Início do texto ...     |
 | ...                     |
 |                         |
@end group
@end example

O formato de uso mais comum para impressão frente e verso depende se o número
da página é par ou ímpar. Por convenção, páginas pares ficam à esquerda e
páginas ímpares ficam à direita. (@TeX{} ajustará as larguras das margens
esquerda e direita. Normalmente, as larguras estão corretas, mas durante a
impressão frente e verso, é sensato verificar se as páginas serão encadernadas
corretamente---ocasionalmente, uma impressora produzirá uma saída na qual as
páginas pares tem uma margem direita maior que as páginas ímpares).

No formato de uso mais comum frente e verso, a parte esquerda da página
esquerda (numeração par) contém o número da página, a parte central está em
branco e a parte direita contém o título (especificado pelo comando
@code{@@settitle}). A parte esquerda da página direita (numeração ímpar) contém
o nome do capítulo, a parte central fica em branco e a parte direita contém o
número da página.

@need 750
Duas páginas, lado a lado, como em um livro aberto, se parecem com isto:

@example
@group
  _______________________     _________________________
 |                       |   |                        |
 | número página  título |   | capítulo número página |
 |                       |   |                        |
 | Início do texto ...   |   | Mais  texto ...        |
 | ...                   |   | ...                    |
 |                       |   |                        |
@end group
@end example

@noindent
O nome do capítulo é precedido pela palavra ``Capítulo'', o número do capítulo
e dois pontos. Isso torna mais fácil acompanhar onde você está no manual.

@node Escolha de Título
@section Especificando o Tipo de Título

@TeX{} não começa a gerar títulos de página para um arquivo do Texinfo de uso
mais comum até que ele alcance o comando @code{@@end titlepage}. Portanto, as
páginas de título e copyright não são numeradas. O comando @code{@@end
titlepage} faz com que o @TeX{} comece a gerar títulos de página de acordo com
um formato de uso mais comum especificado pelo comando
@code{@@setchapternewpage} que precede a seção @code{@@titlepage}.

@need 1000
Existem quatro possibilidades:

@table @asis
@item Sem comando @code{@@setchapternewpage}
Faz com que @TeX{} especifique o formato de título de um lado, com capítulos em
novas páginas. Isso é o mesmo que @code{@@setchapternewpage on}.

@item @code{@@setchapternewpage on}
Especifica o formato de título de lado unitário, com capítulos em novas páginas.

@item @code{@@setchapternewpage off}
Faz com que o @TeX{} inicie um novo capítulo na mesma página da última página
do capítulo precedente, depois de pular alguns espaços verticais em branco.
Também faz com que o @TeX{} tipografe para impressão de um lado unitário. (Você
pode substituir o formato dos cabeçalhos com o comando @code{@@headings
double}; @pxref{@code{@@headings}}).

@item @code{@@setchapternewpage odd}
Especifica o formato de título frente e verso, com capítulos em novas páginas.
@end table

@noindent
Texinfo carece de um comando @code{@@setchapternewpage even}.


@node Cabeçalhos Personalizados
@section Como Fazer Teus Próprios Cabeçalhos

Você pode usar os títulos de uso mais comum fornecidos com o Texinfo ou
especificar os teus próprios. Por padrão, o Texinfo não tem rodapés, de forma
que se você especificá-los, o tamanho de página disponível para o texto
principal será ligeiramente reduzido.

O Texinfo fornece seis comandos para especificar títulos e rodapés:
@itemize @bullet
@item
@code{@@everyheading} e @code{@@everyfooting} geram cabeçalhos e rodapés de
página que são os mesmos para páginas pares e ímpares.
@item
Os comandos @code{@@evenheading} e @code{@@evenfooting} geram cabeçalhos e
rodapés para páginas pares (lado esquerdo).
@item
@code{@@oddheading} e @code{@@oddfooting} geram cabeçalhos e rodapés para
páginas ímpares (lado direito).
@end itemize

Escreva especificações personalizadas de título no arquivo do Texinfo
imediatamente depois do comando @code{@@end titlepage}. Você precisa cancelar
os comandos de título predefinidos com o comando @code{@@headings off} antes de
definir tuas próprias especificações.

@need 1000
Aqui está como dizer ao @TeX{} para colocar o nome do capítulo à esquerda, o
número da página no centro e a data à direita de cada cabeçalho para páginas
pares e ímpares:

@example
@group
@@headings off
@@everyheading @@thischapter @@| @@thispage @@| @@today@{@}
@end group
@end example

@noindent
Você precisa dividir a parte esquerda da parte central e a parte central da
parte direita inserindo @samp{@@|} entre as partes. Caso contrário, o comando
de especificação não será capaz de dizer onde o texto de uma parte termina e a
próxima parte começa.

Cada parte pode conter texto ou comandos @@. O texto é impresso como se a parte
estivesse dentro de um parágrafo comum no corpo da página. Os comandos @@
substituem eles próprios pelo número da página, data, nome do capítulo ou o que
for.

@need 950
Aqui estão os seis comandos de título e rodapé:

@table @code
@item @@everyheading @var{left} @@| @var{center} @@| @var{right}
@itemx @@everyfooting @var{left} @@| @var{center} @@| @var{right}
@findex everyheading
@findex everyfooting
Os comandos `every' especificam o formato para páginas pares e ímpares. Esses
comandos são para documentos que sejam impressos em um lado de cada folha de
papel, ou para documentos nos quais você queira cabeçalhos ou rodapés
simétricos.

@item @@evenheading @var{left} @@| @var{center} @@| @var{right}
@itemx @@oddheading  @var{left} @@| @var{center} @@| @var{right}
@itemx @@evenfooting @var{left} @@| @var{center} @@| @var{right}
@itemx @@oddfooting  @var{left} @@| @var{center} @@| @var{right}
@findex evenheading
@findex evenfooting
@findex oddheading
@findex oddfooting
Os comandos `even' e `odd' especificam o formato para páginas pares e páginas
ímpares. Esses comandos são para livros e manuais que sejam impressos em ambos
os lados de cada folha de papel.
@end table

Use a série @samp{@@this@dots{}} de comandos @@ para fornecer os nomes de
capítulos e seções e o número da página. Você pode usar os comandos
@samp{@@this@dots{}} nas partes esquerda, central ou direita dos cabeçalhos e
rodapés, ou em qualquer outro lugar em um arquivo do Texinfo, desde que estejam
entre os comandos @code{@@iftex} e @code{@@end iftex}.

@need 1000
Aqui estão os comandos @samp{@@this@dots{}}:

@table @code
@item @@thispage
@findex thispage
Expande para o número da página atual.

@item @@thissectionname
@findex thissectionname
Expande para o nome da seção atual.

@item @@thissectionnum
@findex thissectionnum
Expande para o número da seção atual.

@item @@thissection
@findex thissection
Expande para o número e nome da seção atual, no formato `Seção 1: Título'.

@item @@thischaptername
@findex thischaptername
Expande para o nome do capítulo atual.

@item @@thischapternum
@findex thischapternum
Expande para o número do capítulo atual ou letra do anexo atual.

@item @@thischapter
@findex thischapter
Expande para o número e nome do capítulo atual, no formato `Capítulo 1:
Título'.

@item @@thistitle
@findex thistitle
Expande para o nome do documento, conforme especificado pelo comando
@code{@@settitle}.

@item @@thisfile
@findex thisfile
Somente para arquivos @code{@@include}: expande para o nome do arquivo
@code{@@include} atual. Se o arquivo fonte atual do Texinfo não for um arquivo
@code{@@include}, esse comando não terá efeito. Esse comando @emph{não} fornece
o nome do arquivo fonte atual do Texinfo, a menos que seja um arquivo
@code{@@include}. (@xref{Arquivos de Inclusão}, para mais informações acerca de
arquivos @code{@@include}).
@end table

@noindent
Você também pode usar o comando @code{@@today@{@}}, que expande para a data
atual, no formato `1 Jan 1900'.
@findex today

Outros comandos @@ e texto são impressos em um cabeçalho ou rodapé exatamente
como se estivessem no corpo de uma página. É útil para incorporar texto,
particularmente quando você estiver escrevendo rascunhos:

@example
@group
@@headings off
@@everyheading @@emph@{Rascunho!@} @@| @@thispage @@| @@thischapter
@@everyfooting @@| @@| Versão: 0.27: @@today@{@}
@end group
@end example

Cuidado com títulos muito longos: eles podem se sobrepor a outra parte do
cabeçalho ou rodapé e apagá-la.

Se você tiver capítulos e (ou) seções muito curtos, vários deles podem aparecer
em uma página. Você pode especificar a quais capítulos e seções você quer que
@code{@@thischapter}, @code{@@thissection} e outras macros se refiram em tais
páginas, como segue:

@table @code
@item @@everyheadingmarks @var{referência}
@itemx @@everyfootingmarks @var{referência}
@findex everyheadingmarks
@findex everyfootingmarks
O argumento @var{referência} pode ser @code{top} (os comandos @code{@@this...}
se referirão ao capítulo/seção no topo de uma página) ou @code{bottom} (os
comandos refletirão a situação no final de uma página). Esses comandos
@samp{@@every...} especificam o que fazer em páginas pares e ímpares.

@item @@evenheadingmarks @var{referência}
@itemx @@oddheadingmarks @var{referência}
@itemx @@evenfootingmarks @var{referência}
@itemx @@oddfootingmarks @var{referência}
@findex evenheadingmarks
@findex oddheadingmarks
@findex evenfootingmarks
@findex oddfootingmarks
Esses comandos @samp{@@even...} e @samp{@@odd...} especificam o que fazer
somente em páginas pares ou ímpares, respectivamente. O argumento
@var{referência} é o mesmo dos comandos @samp{@@every...}.
@end table

Escreva esses comandos imediatamente depois dos comandos @code{@@...contents}
ou depois do comando @code{@@end titlepage} se você não tiver um sumário ou se
ele estiver impresso no final do teu manual.

Por padrão, os comandos @code{@@this...} refletem a situação na parte inferior
de uma página, tanto nos títulos quanto nos rodapés.


@node Capturando Erros
@appendix Capturando Erros
@cindex Estrutura, capturando erros em
@cindex Nós, capturando erros
@cindex Capturando erros
@cindex Corrigindo erros
@cindex Erros, capturando
@cindex Problemas, capturando
@cindex Depurando a estrutura do Texinfo

Além de erros no conteúdo da tua documentação, existem dois tipos de erros que
você pode cometer com o Texinfo: você pode cometer erros com os comandos @@; e
pode cometer erros com a estrutura dos nós e dos capítulos.

O Emacs tem duas ferramentas para detectar erros de comando @@ e duas para
detectar erros de estruturação.

Para encontrar problemas com os comandos @@, você pode executar @TeX{} ou um
comando de formatação de região na região que tenha um problema; na verdade,
você pode executar esses comandos em cada região conforme você a escreve.

Para encontrar problemas com a estrutura de nós e capítulos, você pode usar
@kbd{C-c C-s} (@code{texinfo-show-structure}) e o comando relacionado
@code{occur}, e você pode usar o comando @kbd{M-x Info-validate}.

@menu
* @command{makeinfo} Preferido::         @code{makeinfo} encontra erros.
* Depuração com Info::                   Como capturar erros com a formatação Info.
* Depuração com @TeX{}::                 Como capturar erros com a formatação @TeX{}.
* Usando @code{texinfo-show-structure}:: Como se usar @code{texinfo-show-structure}.
* Usando @code{occur}::                  Como listar todas as linhas contendo um modelo.
* Executando @code{Info-validate}::      Como encontrar nós mal referenciados.
@end menu


@node @command{makeinfo} Preferido
@section @command{makeinfo} Preferido

@c anchor{makeinfo Preferido}@c nome anterior

O programa @code{makeinfo} faz um excelente trabalho de capturar erros e
informá-los---muito melhor que @code{texinfo-format-region} ou
@code{texinfo-format-buffer}. Além disso, as várias funções para criar e
atualizar automaticamente ponteiros de nó e menus removem muitas oportunidades
de erro humano.

Se puder, use os comandos de atualização para criar e inserir ponteiros e
menus. Eles evitam muitos erros. A seguir use @code{makeinfo} (ou as
manifestações dele do modo Texinfo, @code{makeinfo-region} e
@code{makeinfo-buffer}) para formatar teu arquivo e verificar outros erros.
Essa é a melhor maneira de trabalhar com o Texinfo. Mas se não puder usar
@code{makeinfo}, ou se teu problema for muito intrigante, então você pode
querer usar as ferramentas descritas neste anexo.


@node Depuração com Info
@section Detectando Erros com Formatação Info
@cindex Detectando erros com formatação Info
@cindex Depuração com formatação Info

Depois que tiver escrito parte de um arquivo do Texinfo, você pode usar o
comando @code{texinfo-format-region} ou @code{makeinfo-region} para ver se a
região formata corretamente.

Provavelmente, no entanto, você está lendo esta seção porque, por algum motivo,
não pode usar o comando @code{makeinfo-region}; portanto, o restante desta
seção presume que você está usando @code{texinfo-format-region}.

Se você tiver cometido um erro com um comando @@, @code{texinfo-format-region}
interromperá o processamento no erro ou depois dele e exibirá uma mensagem de
erro. Para ver onde no buffer o erro ocorreu, comute para o buffer @samp{*Info
Region*}; o cursor estará em uma posição que é depois do local do erro. Além
disso, o texto não será formatado depois do local onde o erro ocorreu (ou mais
precisamente, onde ele foi detectado).

Por exemplo, se acidentalmente terminar um menu com o comando @code{@@end
menus} com um `s' no final, em vez de com @code{@@end menu}, você verá uma
mensagem de erro que diz:

@example
@@end menus não é manuseado pelo texinfo
@end example

@noindent
O cursor irá parar no ponto no buffer onde o erro ocorre, ou não muito depois
dele. O buffer se parecerá com isto:

@example
@group
---------- Buffer: *Info Region* ----------
* Menu:

* Usando texinfo-show-structure:: Como usar `texinfo-show-structure' para detectar erros.
* Running Info-validate::         Como verificar nós não referenciados.
@@end menus
@point{}
---------- Buffer: *Info Region* ----------
@end group
@end example

O comando @code{texinfo-format-region} ocasionalmente fornece mensagens de erro
ligeiramente estranhas. Por exemplo, a seguinte referência cruzada falha para
formatar:

@example
(@@xref@{Capturando Erros, para mais informações.)
@end example

@noindent
Nesse caso, @code{texinfo-format-region} detecta a chave de fechamento ausente,
mas exibe uma mensagem que diz @samp{Parênteses desbalanceados} em vez de
@samp{Chaves desbalanceadas}. Isso ocorre porque o comando de formatação
procura incompatibilidades entre chaves como se fossem parênteses.

Ocasionalmente, @code{texinfo-format-region} falha em detectar erros. Por
exemplo, no seguinte, a chave de fechamento é trocada pelo parêntese de
fechamento:

@example
(@@xref@{Capturando Erros), para mais informações.@}
@end example

@noindent
A formatação produz:
@example
(*Observação para mais informações: Capturando Erros)
@end example

A única maneira para você detectar esse erro é a de perceber que a referência
deveria ter a seguinte aparência:

@example
(*Observação Capturando Erros::, para mais informações)
@end example

Aliás, se você estiver lendo este nó no Info e digitar @kbd{f @key{RET}}
(@code{Info-follow-reference}), você gerará uma mensagem de erro que diz:

@example
Nenhum nó desse tipo: "Capturando Erros) A única maneira @dots{}
@end example

@noindent
Isso ocorre porque o Info percebe o exemplo do erro como a primeira referência
cruzada nesse nó e se você digitar um @key{RET} imediatamente depois de digitar
o comando @kbd{f} do Info, o Info tentará ir para o nó referenciado. Se você
digitar @kbd{f catch @key{TAB} @key{RET}}, o Info completará o nome do nó do
exemplo escrito corretamente e te levará para o nó `Capturando Erros'. (Se você
tentar isso, poderá retornar do nó `Capturando Erros' digitando @kbd{l}
(@code{Info-last})).


@node Depuração com @TeX{}
@section Depuração com @TeX{}
@cindex Detectando erros com formatação @TeX{}
@cindex Depuração com formatação @TeX{}

Você também pode detectar erros ao formatar um arquivo com @TeX{}.

Normalmente, você vai querer fazer isso depois de ter executado
@code{texinfo-format-buffer} (ou, melhor, @code{makeinfo-buffer}) no mesmo
arquivo, porque @code{texinfo-format-buffer} ocasionalmente exibe mensagens de
erro que fazem mais sentido que @TeX{}. (@xref{Depuração com Info}, para mais
informações).

Por exemplo, @TeX{} foi executado sobre um arquivo do Texinfo, parte do qual é
mostrado aqui:

@example
---------- Buffer: texinfo.texi ----------
nome do arquivo do Texinfo como uma extensão. Os @@samp@{??@} são `curingas'
que fazem o shell substituir todos os arquivos de índices brutos.
(@@xref@{ordenação de índices, para mais informações acerca de ordenação de
índices).@@refill
---------- Buffer: texinfo.texi ----------
@end example

@noindent
(A referência cruzada carece de uma chave de fechamento). @TeX{} produziu a
seguinte saída, depois da qual parou:
@example
---------- Buffer: *tex-shell* ----------
Argumento descontrolado?
@{ordenação de índices, para mais informações acerca de ordenação de índices).
@@refill @@ETC.
! Parágrafo terminou antes que @@xref estive completa.
<para ser lido novamente>
                  @@par
l.27

?
---------- Buffer: *tex-shell* ----------
@end example

Nesse caso, @TeX{} produziu uma mensagem de erro precisa e compreensível:

@example
Parágrafo terminou antes que @@xref estive completa.
@end example

@noindent
@samp{@@par} é um comando interno do @TeX{} sem relevância para o Texinfo.
@samp{l.27} significa que o @TeX{} detectou o problema na linha 27 do arquivo
do Texinfo. O @samp{?} é o prompt que o @TeX{} usa nessa circunstância.

Infelizmente, @TeX{} nem sempre é tão útil, e ocasionalmente você precisa ser
realmente um Sherlock Holmes para descobrir o que deu errado.

Em qualquer caso, se enfrentar um problema como esse, você pode fazer uma
destas três coisas.

@enumerate
@item
Você pode dizer ao @TeX{} para continuar executando e ignorar apenas esse erro
digitando @key{RET} no prompt @samp{?}.

@item
Você pode dizer ao @TeX{} para continuar executando e ignorar todos os erros da
melhor forma possível digitando @kbd{r @key{RET}} no prompt @samp{?}.

Geralmente, essa é a melhor coisa a fazer. No entanto, cuidado: um erro pode
produzir uma cascata de mensagens de erro adicionais, pois as consequências
dele são sentidas por todo o restante do arquivo. Para parar o @TeX{} quando
ele estiver produzindo uma avalanche de mensagens de erro, digite @kbd{C-c} (ou
@kbd{C-c C-c}, se estiver executando um shell dentro do Emacs).

@item
Você pode dizer ao @TeX{} para interromper esta execução digitando @kbd{x
@key{RET}} no prompt @samp{?}.
@end enumerate

Se você estiver executando o @TeX{} dentro do Emacs, precisará comutar para o
buffer do shell e a linha na qual o @TeX{} oferece o prompt @samp{?}.

Ocasionalmente, o @TeX{} formatará um arquivo sem produzir mensagens de erro,
mesmo que exista um problema. Isso geralmente ocorre se um comando não for
finalizado, mas o @TeX{} for capaz de continuar o processamento de qualquer
maneira. Por exemplo, se você não conseguir finalizar uma lista itemizada com o
comando @code{@@end itemize}, o @TeX{} escreverá um arquivo DVI que você
consegue imprimir. A única mensagem de erro que o @TeX{} te fornecerá é o
comentário um tanto misterioso:

@example
(@@end ocorreu dentro de um grupo no nível 1)
@end example

@noindent
No entanto, se você imprimir o arquivo DVI, verá que o texto do arquivo que
segue a lista itemizada está inteiramente recuado como se fosse parte do último
item na lista itemizada. A mensagem de erro é a maneira como o @TeX{} diz que
esperava encontrar um comando @code{@@end} em algum lugar no arquivo; mas que
não poderia determinar onde ele era necessário.

Outra fonte de erros notoriamente difíceis de encontrar é um comando
@code{@@end group} ausente. Se você alguma vez ficar perplexo com erros
incompreensíveis, procure por um comando @code{@@end group} ausente primeiro.

Se o arquivo do Texinfo carecer de linhas de cabeçalho, @TeX{} pode parar no
começo da execução e exibir uma saída que se parece com a seguinte. O @samp{*}
indica que @TeX{} está esperando por entrada.

@example
Este é o TeX, Versão 3.14159 (Web2c 7.0)
(test.texinfo [1])
*
@end example

@noindent
Nesse caso, simplesmente digite @kbd{\end @key{RET}} depois do asterisco. A
seguir escreva as linhas de cabeçalho no arquivo do Texinfo e execute o comando
@TeX{} novamente. (Observe o uso da barra invertida, @samp{\}. @TeX{} usa
@samp{\} em vez de @samp{@@}; e nessa circunstância, você está trabalhando
diretamente com @TeX{}, não com Texinfo).

@node Usando @code{texinfo-show-structure}
@section Usando @code{texinfo-show-structure}

@cindex Mostrando a estrutura de um arquivo
@findex texinfo-show-structure

Nem sempre é fácil manter o controle de nós, capítulos, seções e subseções de
um arquivo do Texinfo. Isso é especialmente verdadeiro se você estiver
revisando ou adicionando a um arquivo do Texinfo que outra pessoa tenha
escrito.

No GNU Emacs, no modo Texinfo, o comando @code{texinfo-show-structure} lista
todas as linhas que começam com os comandos @@ que especificam a estrutura:
@code{@@chapter}, @code{@@section}, @code{@@appendix} e assim por diante. Com
um argumento (@w{@kbd{C-u}} como argumento de prefixo, se interativo), o
comando também mostra as linhas @code{@@node}. O comando
@code{texinfo-show-structure} é vinculado a @kbd{C-c C-s} no modo Texinfo, por
padrão.

As linhas são exibidas em um buffer chamado @samp{*Occur*}, recuado por nível
hierárquico. Por exemplo, aqui está uma parte do que foi produzido ao executar
@code{texinfo-show-structure} sobre este manual:

@example
@group
Linhas correspondentes a "^@@\\(chapter \\|sect\\|subs\\|subh\\|
unnum\\|major\\|chapheading \\|heading \\|appendix\\)"
no buffer texinfo.texi.
@dots{}
4177:@@chapter Nós
4198:    @@heading Dois Caminhos
4231:    @@section Ilustração de Nó e Menu
4337:    @@section O Comando @@code@{@@@@node@}
4393:        @@subheading Escolhendo Nomes de Nós e Ponteiros
4417:        @@subsection Como Escrever uma Linha @@code@{@@@@node@}
4469:        @@subsection Dicas da Linha @@code@{@@@@node@}
@dots{}
@end group
@end example

Isso diz que as linhas 4337, 4393 e 4417 de @file{texinfo.texi} começam com os
comandos @code{@@section}, @code{@@subheading} e @code{@@subsection}
respectivamente. Se você mover teu cursor para a janela @samp{*Occur*}, você
pode posicionar o cursor sobre uma das linhas e usar o comando @kbd{C-c C-c}
(@code{occur-mode-goto-occurrence}), para pular para o ponto correspondente no
arquivo do Texinfo.
@xref{Other Repeating Search, , Using Occur, emacs, O Manual do GNU Emacs},
para mais informações acerca de @code{occur-mode-goto-occurrence}.

A primeira linha na janela @samp{*Occur*} descreve a @dfn{expressão regular}
especificada por @var{texinfo-heading-pattern}. Essa expressão regular é o
padrão que @code{texinfo-show-structure} procura.
@xref{Regexps, , Using Regular Expressions, emacs, O Manual do GNU Emacs}, para
mais informações.

Quando você invoca o comando @code{texinfo-show-structure}, o Emacs exibirá a
estrutura do buffer inteiro. Se você quiser ver a estrutura de apenas uma parte
do buffer, de um capítulo, por exemplo, use o comando @kbd{C-x n n}
(@code{narrow-to-region}) para marcar a região.
(@xref{Narrowing, , , emacs, O Manual do GNU Emacs}). É assim que o exemplo
usado acima foi gerado. (Para ver o buffer inteiro novamente, use @kbd{C-x n w}
(@code{widen})).

Se você chamar @code{texinfo-show-structure} com um argumento de prefixo
digitando @w{@kbd{C-u C-c C-s}}, ele listará as linhas começando com
@code{@@node}, bem como as linhas começando com os comandos de sinal @@ para
@code{@@chapter}, @code{@@section} e similares.

Você pode se lembrar da estrutura de um arquivo do Texinfo observando a lista
na janela @samp{*Occur*}; e se tiver nomeado um nó incorretamente ou deixou uma
seção de fora, você consegue corrigir o erro.

@node Usando @code{occur}
@section Usando @code{occur}

@cindex Ocorrências, listando com @code{@@occur}
@findex occur

Ocasionalmente, o comando @code{texinfo-show-structure} produz muita
informação. Talvez você queira se lembrar da estrutura geral de um arquivo do
Texinfo e esteja sobrecarregado(a) pela lista detalhada produzida por
@code{texinfo-show-structure}. Nesse caso, você pode usar o comando
@code{occur} diretamente. Para fazer isso, digite:

@example
@kbd{M-x occur}
@end example

@noindent
e então, quando solicitado(a), digite @dfn{regexp}, uma expressão regular para
o padrão que você quer corresponder.
(@xref{Regexps, , Regular Expressions, emacs, O Manual do GNU Emacs}). O
comando @code{occur} funciona a partir da localização atual do cursor no buffer
até o fim do buffer. Se você quiser executar @code{occur} sobre o buffer
inteiro, coloque o cursor no começo do buffer.

Por exemplo, para ver todas as linhas que contenham a palavra @samp{@@chapter},
basta digitar @samp{@@chapter}. Isso produzirá uma lista dos capítulos. Também
listará todas as frases com @samp{@@chapter} no meio da linha.

Se você quiser ver somente aquelas linhas que começam com a palavra
@samp{@@chapter}, digite @samp{^@@chapter} quando solicitado(a) por
@code{occur}. Se você quiser ver todas as linhas que terminam com uma palavra
ou frase, termine a última palavra com @samp{$}; por exemplo, @samp{capturando
erros$}. Isso pode ser útil quando você quiser ver todos os nós que sejam parte
do mesmo capítulo ou seção e, portanto, tem o mesmo ponteiro `Acima'.

@xref{Other Repeating Search, , Using Occur, emacs , O Manual do GNU Emacs},
para mais informações.


@node Executando @code{Info-validate}
@section Encontrando Nós Mal Referenciados

@anchor{Executando Info-Validate}@c nome antigo
@findex Info-validate
@cindex Nós, verificando mal referenciados
@cindex Verificando nós mal referenciados
@cindex Procurando por nós mal referenciados
@cindex Encontrando nós mal referenciados
@cindex Nós mal referenciados

Você pode usar o comando @code{Info-validate} para verificar se algum dos
ponteiros de nó `Próximo', `Anterior', `Acima' ou outros falham em apontar para
um nó. Esse comando verifica se cada ponteiro de nó aponta para um nó
existente. O comando @code{Info-validate} funciona somente sobre arquivos do
Info, não sobre arquivos do Texinfo.

O programa @code{makeinfo} valida ponteiros automaticamente, de forma que você
não precisa usar o comando @code{Info-validate} se estiver usando
@code{makeinfo}. Você só pode precisar usar @code{Info-validate} se não
conseguir executar @code{makeinfo} e, em vez disso, precisar criar um arquivo
do Info usando @code{texinfo-format-region} ou @code{texinfo-format-buffer}, ou
se escrever um arquivo do Info desde o zero.

@menu
* Usando @code{Info-validate}:: Como executar @code{Info-validate}.
* Desdividir::                  Como criar um arquivo não dividido.
* Etiquetando::                 Como etiquetar um arquivo.
* Dividindo::                   Como dividir um arquivo manualmente.
@end menu


@node Usando @code{Info-validate}
@subsection Usando @code{Info-validate}

@cindex Usando @code{Info-validate}
@cindex Info validando um arquivo grande
@cindex Validando um arquivo grande

Para usar @code{Info-validate}, visite o arquivo do Info que deseja verificar e
digite:

@example
M-x Info-validate
@end example

@noindent
Observe que o comando @code{Info-validate} exige um `I' maiúsculo. Você também
pode precisar criar uma tabela de etiquetas antes de executar
@code{Info-validate}. @xref{Etiquetando}.

Se teu arquivo for válido, você receberá uma mensagem que diz ``Arquivo parece
válido''. No entanto, se você tiver um ponteiro que não aponta para um nó,
mensagens de erro serão exibidas em um buffer chamado @samp{*problemas no
arquivo info*}.

Por exemplo, @code{Info-validate} foi executado sobre um arquivo de teste que
continha somente o primeiro nó deste manual. Uma das mensagens dizia:

@example
No nó "Visão Geral", inválido Pŕoximo: Modo Texinfo
@end example

@noindent
Isso significava que o nó chamado @samp{Visão Geral} tinha um ponteiro
`Próximo' que não apontava para nada (o que era verdade nesse caso, já que o
arquivo de teste tinha somente um nó).

Agora, suponha que nós adicionamos um nó chamado @samp{Modo Texinfo} ao nosso
caso de teste, mas não especificamos um `Anterior' para esse nó. Então,
obteremos a seguinte mensagem de erro:

@example
No nó "Modo Texinfo", deveria ter Anterior: Visão Geral
@end example

@noindent
Isso ocorre porque cada ponteiro `Próximo' deveria ser correspondido por um
`Anterior' (no nó para onde o `Próximo' aponta), que aponta para trás.

@code{Info-validate} também verifica se todas as entradas de menu e referências
cruzadas apontam para nós reais.

@code{Info-validate} exige uma tabela de etiquetas e não funciona com arquivos
que tenham sido divididos. (O comando @code{texinfo-format-buffer} divide
automaticamente arquivos grandes). Para a finalidade de usar
@code{Info-validate} sobre um arquivo grande, você precisa executar
@code{texinfo-format-buffer} com um argumento, de forma que ele não divida o
arquivo do Info; e você precisa criar uma tabela de etiquetas para o arquivo
não dividido.

@node Desdividir
@subsection Criando um Arquivo Desdividido
@cindex Criando um arquivo desdividido
@cindex Criação de arquivo desdividido

Você pode executar @code{Info-validate} somente sobre um arquivo unitário do
Info que tenha uma tabela de etiquetas. O comando não funcionará sobre os
sub arquivos indiretos que sejam gerados quando um arquivo mestre for dividido.
Se você tiver um arquivo grande (maior que 300.000 bytes), você precisa
executar o comando @code{texinfo-format-buffer} ou @code{makeinfo-buffer} de
tal forma que ele não crie subarquivos indiretos. Você também precisará criar
uma tabela de etiquetas para o arquivo do Info. Depois de fazer isso, você pode
executar @code{Info-validate} e procurar por nós referenciados incorretamente.

O primeiro passo é o de criar um arquivo do Info desdividido. Para evitar que o
@code{texinfo-format-buffer} divida um arquivo do Texinfo em arquivos do Info
menores, forneça um prefixo para o comando @kbd{M-x texinfo-format-buffer}:

@example
C-u M-x texinfo-format-buffer
@end example

@noindent
ou então

@example
C-u C-c C-e C-b
@end example

@noindent
Ao fazer isso, o Texinfo não dividirá o arquivo e não criará uma tabela de
etiquetas para ele.
@cindex Fazendo uma tabela de etiquetas manualmente
@cindex Tabela de etiquetas, fazendo manualmente

@node Etiquetando
@subsection Etiquetando um Arquivo

Depois de criar um arquivo do Info desdividido, você precisa criar uma tabela
de etiquetas para ele. Visite o arquivo do Info que você deseja etiquetar e
digite:

@example
M-x Info-tagify
@end example

@noindent
(Observe a letra maiúscula @samp{I} no @code{Info-tagify}). Isso cria um
arquivo do Info com uma tabela de etiquetas que você consegue validar.

O terceiro passo é o de validar o arquivo do Info:

@example
M-x Info-validate
@end example

@noindent
(Observe a letra maiúscula @samp{I} no @code{Info-validate}). Resumidamente, as
etapas são:

@example
@group
C-u M-x texinfo-format-buffer
M-x Info-tagify
M-x Info-validate
@end group
@end example

Depois que tiver validado a estrutura do nó, você pode executar novamente
@code{texinfo-format-buffer} da maneira normal, de forma que ele construirá uma
tabela de etiquetas e dividirá o arquivo automaticamente; ou você pode criar a
tabela de etiquetas e dividir o arquivo manualmente.

@node Dividindo
@subsection Dividindo um Arquivo Manualmente
@cindex Dividindo um arquivo do Info manualmente
@cindex Arquivo do Info, dividindo manualmente

Você deveria dividir um arquivo grande ou então deixar que o comando
@code{texinfo-format-buffer} ou @code{makeinfo-buffer} faça isso para você
automaticamente. (Geralmente você deixará um dos comandos de formatação fazer
esse trabalho para você. @xref{Criando um Arquivo do Info}).

Os arquivos divididos são chamados de subarquivos indiretos.

Arquivos do Info são divididos para economizar memória. Com arquivos menores, o
Emacs não precisa criar um buffer tão grande para manter as informações.

Se um arquivo do Info tiver mais de 30 nós, você também deveria criar uma
tabela de etiquetas para ele. @xref{Usando @code{Info-validate}}, para
informações acerca de criar uma tabela de etiquetas. (Novamente, as tabelas de
etiquetas geralmente são criadas automaticamente pelo comando de formatação;
você só precisa criar uma tabela de etiquetas se estiver fazendo o trabalho
manualmente. Provavelmente, você fará isso para um arquivo grande e não
dividido sobre o qual tenha executado @code{Info-validate}).

Visite o arquivo do Info que você deseja etiquetar e dividir e digite os dois
comandos:

@example
M-x Info-tagify
M-x Info-split
@end example

@noindent
(Observe que o @samp{I} em @samp{Info} é maiúsculo).

Quando você usa o comando @code{Info-split}, o buffer é modificado em um
(pequeno) arquivo do Info que lista os subarquivos indiretos. Esse arquivo
deveria ser salvo no lugar do arquivo original visitado. Os subarquivos
indiretos são escritos no mesmo diretório em que o arquivo original está, com
nomes gerados anexando @samp{-} e um número ao nome do arquivo original.

O arquivo principal ainda funciona como um arquivo do Info, mas contém somente
a tabela de etiquetas e um diretório de subarquivos.


@node Especificação do Formato Info
@appendix Especificação do Formato Info

@cindex Especificação do formato do Info
@cindex Formato, especificação, do Info
@cindex Definição do formato do Info

Aqui nós descrevemos os detalhes técnicos do formato do Info.

Nesta descrição formal, os caracteres @code{<>*()|=#} são usados para o idioma
da descrição em si. Outros caracteres são literais. As construções formais
usadas são típicas: @code{<...>} indica um nome de meta variável, @samp{=}
significa definição, @samp{*} repetição, @samp{?} opcional, @samp{()}
agrupamento, @samp{|} alternância, @samp{#} comentário. Exceção: @samp{*} no
início de uma linha é literal.

Em geral, programas que leem arquivos do Info deveriam tentar não diferenciar
maiúsculas de minúsculas de palavras-chave que ocorrerem no arquivo (por
exemplo, @samp{Tabela de Etiquetas} e @samp{Tabela de etiquetas} deveriam ser
equivalentes) para a finalidade de suportar programas geradores de Info que
usem capitalização diferente.

As seções em um arquivo do Info (como nós ou tabelas de etiquetas) são
separadas com uma sequência:

@example
(^L)?^_(^L)?^J
@end example

@noindent
Isto é, um caractere @samp{CTRL-_} seguido por uma nova linha, com caracteres
de avanço de formulário opcionais. Nós nos referimos a tais sequências como
@t{<separador>}.

Nós especificamos parênteses literais (aqueles que são parte do formato do
Info) com @t{<lparen>} e @t{<rparen>}, significando os caracteres unitários
@samp{(} e @samp{)} respectivamente. Nós especificamos o caractere
@samp{CTRL-?} (número de caractere 127) @t{<del>}. Finalmente, a sequência de
dois caracteres @samp{^@var{x}} significa o caractere unitário
@samp{CTRL-@var{x}}, para qualquer @var{x}.

Esta definição de formato foi escrita cerca de 25 anos depois que o formato do
Info foi concebido. Portanto, no caso de conflitos entre esta definição e a
prática real, a prática vence. Ela também pressupõe algum conhecimento geral do
Texinfo; ela foi criada para ser um guia para implementadores(as), em vez de um
padrão técnico rígido. Frequentemente, nós recorremos a outras partes deste
manual para exemplos e definições, em vez de soletrar redundantemente cada
detalhe.

@menu
* Geral:                       Esquema Geral do Formato do Info.
* Texto:                       Construtores de Texto do Formato do Info.
@end menu


@node Esquema Geral do Formato do Info
@section Esquema Geral do Formato do Info

Esta seção descreve o esquema geral dos manuais do Info.

@menu
* Inteiro:                     Manual Inteiro do Formato Info. Manuais divididos versus não divididos.
* Preâmbulo:                   Preâmbulo do Formato do Info.
* Indireta:                    Tabela Indireta do Formato do Info.
* Tabela de etiquetas:         Tabela de Etiquetas do Formato do Info.
* Variáveis locais:            Variáveis Locais do Formato do Info.
* Nós Regulares:               Nós Regulares do Formato do Info.
@end menu


@node Manual Inteiro do Formato Info
@subheading Formato do Info: Um Manual Inteiro

@cindex Manuais não divididos, formato do Info dos
@cindex Manuais divididos, formato do Info dos
@cindex Manual inteiro, no formato do Info

Para começar, um manual do Info é ou @dfn{não dividido} (contido inteiramente
em um arquivo) ou @dfn{dividido} (em vários arquivos).

A sintaxe para um manual não dividido é:

@example
    <arquivo não dividido do info> =
<preâmbulo>
<nó>*
<tabela de etiquetas>?
<variáveis locais>?
@end example

Quando dividido, existe um @dfn{arquivo principal}, que contém somente
ponteiros para os nós fornecidos em outros @dfn{subarquivos}. O arquivo
principal se parece com isto:

@example
    <arquivo principal dividido do info> =
<preâmbulo>
<tabela indireta>
<tabela de etiquetas>
<variáveis locais>?
@end example

Os subarquivos em um manual dividido tem a seguinte sintaxe:

@example
    <subarquivo dividido do info> =
<preâmbulo>
<nó>*
@end example

Observe que a tabela de etiquetas não é opcional para arquivos divididos, pois
ela é usada com a tabela indireta para deduzir em qual subarquivo um nó
específico está.


@node Preâmbulo do Formato do Info
@subheading Formato do Info: Preâmbulo

@cindex Preâmbulo, no formato do Info

O @t{<preâmbulo>} é um texto no começo de todos os arquivos de saída. Ele não é
destinado a ser visível por padrão em um visualizador do Info, mas pode ser
exibido mediante solicitação do(a) usuário(a).

@example
    <preâmbulo> =
<identificação>             # "Este é NOMEARQUIVO, produzido por ..."
<texto da copiagem>         # Expansão do texto do @@copying.
<entradas de diretórios>    # Derivadas de @@dircategory e @@direntry.
@end example

@noindent
Esses pedaços são:

@table @t
@item <linha de identificação>
Uma sequência arbitrária iniciando o arquivo de saída, seguida por uma linha em
branco.

@item <texto da copiagem>
A expansão de um ambiente @code{@@copying}, se o manual tiver um
(@pxref{@code{@@copying}}).

@item <entradas de diretórios>
O resultado de quaisquer comandos @code{@@dircategory} e @code{@@direntry}
presentes no manual (@pxref{Instalando Entradas de Diretório}).
@end table


@node Tabela Indireta do Formato do Info
@subheading Formato do Info: Tabela Indireta

@cindex Tabela indireta, no Formato do Info

@example
    <tabela indireta> =
<separador>
Indireta:
(<nomearquivo>: <posiçãobyte>)*
@end example

A tabela indireta é escrita no arquivo principal somente no caso de saída
dividida. Ela especifica, como um inteiro decimal, a posição inicial do byte
(baseada em zero) que o primeiro nó de cada subarquivo teria se os subarquivos
fossem concatenados em ordem, não incluindo o arquivo de nível superior. O
primeiro nó do conteúdo real é apontado pela primeira entrada.

Como exemplo, suponha que a saída dividida seja gerada para o manual do GDB. O
arquivo de nível superior @file{gdb.info} conterá algo como isto:

@example
<separador>
Indireta:
gdb.info-1: 1878
gdb.info-2: 295733
...
@end example

Isso informa aos visualizadores do Info que o primeiro nó do manual ocorre no
byte 1878 do arquivo @file{gdb.info-1} (que estaria depois do preâmbulo desse
arquivo). O primeiro nó no subarquivo @file{gdb.info-2} começaria no byte
295733 se @file{gdb.info-2} fosse posposto a @file{gdb.info-1}, incluindo
quaisquer seções de preâmbulo em ambos os arquivos.

Infelizmente, programas de criação do Info, como o @code{makeinfo}, nem sempre
implementaram essas regras perfeitamente, devido a vários defeitos e descuidos.
Portanto, visualizadores robustos do Info deveriam voltar a procurar
``próximo'' à posição fornecida para um nó, em vez de desistir imediatamente se
a posição não estiver exatamente no início de um nó.


@node Tabela de Etiquetas do Formato do Info
@subheading Formato do Info: Tabela de Etiquetas

@cindex Tabela de etiquetas, no formato do Info

@example
    <tabela de etiquetas> =
<separador>
Tabela de Etiquetas:
(<lparen>Indireta<rparen>)?
(Nó|Ref): <idnó>^?<posiçãobyte>
<separador>
Fim Tabela de Etiquetas
@end example

A linha @samp{(Indireta)} aparece somente no caso de saída dividida.

A tabela de etiquetas especifica a posição inicial do byte de cada nó e âncora
no arquivo. No caso de saída dividida, ela é escrita somente no arquivo de
saída principal.

Cada linha define um identificador como ou uma âncora ou um nó, conforme
especificado. Por exemplo, @samp{Node: Top^?1647} diz que o nó chamado
@samp{Top} começa no byte 1647, enquanto @samp{Ref: Overview-Footnote-1^?30045}
diz que a âncora chamada @samp{Overview-Footnote-1} começa no byte 30045. É um
erro definir o mesmo identificador em ambas as formas.

No caso de saída não dividida, as posições de byte simplesmente se referem ao
local no arquivo de saída. No caso de saída dividida, as posições de byte se
referem a um arquivo imaginário criado pela concatenação de todos os arquivos
divididos (mas não o arquivo de nível superior). Veja-se a seção anterior.

Aqui está um exemplo:

@example
^_
Tabela de Etiquetas:
Nó: Top^?89
Nó: Ch1^?292
^_
Fim Tabela de Etiquetas
@end example

@noindent
Isso especifica um manual com dois Nós, `Top' e `Ch1', nas posições de byte 89
e 292, respectivamente. Como a linha @samp{(Indireta)} não está presente, o
manual não é dividido.

Seções de preâmbulo ou outras seções de arquivos não nós não tem uma entrada na
tabela de etiquetas.


@node Variáveis Locais do Formato do Info
@subheading Formato do Info: Variáveis Locais

@cindex Seção das variáveis locais, no formato do Info

A seção de variáveis locais é opcional e é usada atualmente para fornecer as
informações de codificação. Ela pode ser aumentada no futuro.

@example
    <variáveis locais> =
<separador>
Variáveis Locais:
codificação: <codificação>
End:
@end example

@xref{@code{@@documentencoding}}.


@node Nós Regulares do Formato do Info
@subheading Formato do Info: Nós Regulares

@cindex Nós do Info, no formato do Info

Nós regulares se parecem com isto:

@example
    <nó> =
<separador>
Arquivo: <fn>, Nó: <id1>, (Próximo: <id2>, )? (Anterior: <id3>, )? Acima: <id4>

<texto geral, até o próximo ^_ ou fim-do-arquivo>
@end example

@noindent
Pelo menos um espaço ou tabulação precisa estar presente depois de cada dois
pontos e vírgula, mas qualquer número de espaços é ignorado. Os identificadores
de nó @t{<id>} tem o seguinte formato:

@example
   <id> = (<lparen><arquivoinfo><rparen>)?(<del>?<nomenó><del>?)?
|  <id> = (<lparen><arquivoinfo><rparen>)?(<nomenó>)?
@end example

Esse @t{<nó>} define @t{<id1>} no arquivo @t{<fn>}, que normalmente é ou
@samp{nomemanual} ou @samp{nomemanual.info}. Nenhum componente
@t{<arquivoinfo>} entre parênteses pode aparecer dentro de @t{<id1>}.

Cada um dos identificadores depois de @code{Próximo}, @code{Anterior} e
@code{Acima} se refere a nós ou âncoras dentro de um arquivo. Esses ponteiros
normalmente referenciam dentro do mesmo arquivo, mas @samp{(dir)}
frequentemente é usado para apontar para o arquivo Dir de nível superior. Se um
componente @t{<arquivoinfo>} for usado, então o nome do nó pode ser omitido,
caso no qual o identificador do nó se refere ao nó @samp{Top} dentro do arquivo
referenciado.

Os ponteiros @code{Próximo} e @code{Anterior} são opcionais. O ponteiro
@code{Acima} tecnicamente também é opcional, embora muito provavelmente isso
indique um erro na estruturação do nó. Convencionalmente, os nós são
organizados para formar uma árvore, mas isso não é uma exigência do formato.

Nomes de nós contendo pontos, vírgulas, dois pontos ou parênteses (incluindo
comandos @@ que produzem qualquer um desses) podem confundir leitores do Info.
Se for necessário se referir a um nó cujo nome contenha qualquer um desses, o
@t{<nomenó>} deveria ser cercado por um par de caracteres @t{<del>}. Existe
suporte no @command{makeinfo} para adicionar esses caracteres
(@pxref{INFO_SPECIAL_CHARS_QUOTE}); no entanto, nós não recomendamos que você
faça uso desse suporte até que programas de leitura do Info que reconheçam essa
sintaxe sejam comuns. @xref{Exigências de Linha de Nó}.

O uso de caracteres não-ASCII nos nomes de nós é permitido, mas pode causar
problemas em referências cruzadas entre nós em arquivos do Info com diferentes
codificações de caracteres, e também quando nomes de nós provenientes de muitos
arquivos forem listados (por exemplo, com a opção @option{--apropos} para o
navegador autônomo do Info), de forma que nós recomendamos evitá-los sempre que
possível. Por exemplo, prefira o uso do caractere de apóstrofo do ASCII (@t{'})
às aspas direcionais do Unicode.

O @t{<texto geral>} do nó pode incluir as construções especiais descritas a
seguir.


@node Construtores de Texto do Formato do Info
@section Construtores de Texto do Formato do Info

@cindex Construtores de texto do formato do Info
@cindex Construtores de texto, formato do Info

Essas construções especiais do Info podem aparecer dentro do texto de um nó.

@menu
* Menu:                        Menu do Formato do Info.
* Imagem:                      Imagem do Formato do Info.
* Printindex:                  Imprime índices do Formato do Info.
* Xref:                        Referências Cruzadas do Formato do Info.
@end menu


@node Menu do Formato do Info
@subsection Formato do Info: Menu

@cindex Menus, no formato do Info

Convencionalmente, os menus aparecem no final dos nós, mas o formato do Info
não impõe restrições quanto à localização deles.

@example
    <menu> =
* Menu:
(<entrada de menu> | <comentário de menu>)*
@end example

As partes de uma @t{<entrada de menu>} também estão descritas em
@ref{Partes de Menu}. Elas tem a mesma sintaxe que referências cruzadas
(@pxref{Referências Cruzadas do Formato do Info}). Índices estendem o formato
de menu para especificar a linha de destino;
@pxref{Imprime índices do Formato do Info}.

Um @t{<comentário de menu>} é qualquer linha não iniciando com @samp{*} que
aparece ou no início do menu ou é separada de uma entrada de menu por uma ou
mais linhas em branco. Esses comentários são destinados a serem exibidos como
parte do menu, como está (@pxref{Escrevendo um Menu}).


@node Imagem do Formato do Info
@subsection Formato do Info: Imagem

@cindex Imagens, no formato do Info

O comando @code{@@image} resulta na seguinte diretiva especial dentro do
arquivo do Info (@pxref{Imagens}):

@example
    <imagem> =
^@@^H[imagem src="<arquivo de imagem>"
            (texto="<conteúdo do arquivo de texto>")?
            (alt="<texto alternativo>")?
^@@^H]
@end example

As quebras de linha e recuos nesta descrição são editoriais; o espaço em branco
entre as diferentes partes da diretiva nos arquivos do Info é arbitrário.

Nas strings @t{<arquivo de imagem>}, @t{<conteúdo do arquivo de texto>} e
@t{<texto alternativo>}, @samp{"} é aspado como @samp{\"} e @samp{\} é aspado
como @samp{\\}. As especificações de texto e alt são opcionais.

O valor de @t{alt} serve ao mesmo propósito que no HTML: Uma descrição em prosa
da imagem. Em exibições somente de texto ou em sistemas de fala, por exemplo, o
valor de @t{alt} pode ser usado em vez de exibir o (tipicamente gráfico)
@t{<arquivo de imagem>}.

O @t{<conteúdo do arquivo de texto>}, se presente, deveria ser considerado uma
representação ASCII da imagem, para possível uso em uma exibição somente de
texto.

O formato não prescreve a escolha entre exibir o @t{<arquivo de imagem>}, o
@t{<texto alternativo>} ou o @t{<conteúdo do arquivo de texto>}.


@node Imprime índices do Formato do Info
@subsection Formato do Info: Imprime índices

@cindex Índices, no formato do Info

Índices no formato do Info geralmente são escritos como um menu
(@pxref{Índices}), mas com uma diretiva adicional no início marcando esse como
um nó de índice:

@example
    <imprimeíndice> =
^@@^H[índice^@@^H]
* Menu:

<entrada de índice>*
@end example

Os itens @t{<entrada de índice>} são semelhantes às entradas normais de menu,
mas a descrição de formato livre é substituída pelo número da linha onde as
entradas ocorrem no texto:

@example
    <entrada de índice> =
* <texto de entrada>: <nó de entrada>. <lparen>linha <númerolinha><rparen>
@end example

@noindent
O @t{<texto de entrada>} é o termo de índice. O @t{<númerolinha>} é um inteiro
não sinalado, fornecido relativo ao início de @t{<nó de entrada>}. Podem
existir espaços em branco arbitrários depois dos dois pontos e o do ponto, como
de costume em menus, e podem existir quebras nas linhas. Aqui está um exemplo:

@example
^@@^H[índice^@@^H]
* Menu:

* trovão:           Fenômenos Meteorológicos.             (line 5)
@end example

Isso significa que uma entrada de índice para `trovão' aparece na linha 5 do nó
`Fenômenos Meteorológicos'.


@node Referências Cruzadas do Formato do Info
@subsection Formato do Info: Referência Cruzada

@cindex Referências cruzadas, no formato do Info

Uma referência cruzada geral no formato do Info tem um dos seguintes dois
formatos:

@example
    <referência-cruzada> =
  * (N|n)ote <id>::
@c| * (N|n)ote <rótulo>:<id>(.|,)?
| * (N|n)ote <rótulo>:<id>(.|,)

     <id> = (<lparen><arquivoinfo><rparen>)?(<del>?<nomenó><del>?)?
|    <id> = (<lparen><arquivoinfo><rparen>)?(<nomenó>)?
    <rótulo> = <del>?<texto do rótulo><del>?
@end example

Nenhum espaço deveria ocorrer entre o caractere @samp{*} e o seguinte @samp{N}
ou @samp{n}. @samp{*Note} deveria ser usado no início de uma frase, caso
contrário, @samp{*note} deveria ser usado. (Alguns leitores do Info, como o do
Emacs, podem exibir @samp{*Note} e @samp{*note} como @samp{See} e @samp{see},
respectivamente). Em ambos os casos, @t{<texto do rótulo>} é um texto
descritivo.

Em ambas as formas, o @t{<id>} referencia um nó ou âncora, da mesma maneira que
uma referência na linha de informações do nó faz (@pxref{Nós Regulares do
Formato do Info}). O @samp{<arquivoinfo>} opcional entre parênteses é o nome do
arquivo do manual sendo referenciado, e o @t{<nomenó>} é o nó ou âncora dentro
desse manual.

A segunda forma tem um rótulo descritivo. Uma referência cruzada nessa forma
deveria geralmente ser terminada com uma vírgula ou um ponto, para tornar
viável encontrar o fim do @t{<id>}.

Se @t{<rótulo>} contiver um caractere de dois pontos (@t{:}), ele deveria ser
cercado por um par de caracteres @t{<del>}. Da mesma forma, se @t{<nomenó>}
contiver caracteres problemáticos (como vírgulas ou pontos), ele deveria ser
cercado por um par de caracteres @t{<del>}; então uma vírgula ou um ponto de
terminação não é necessária.

Assim como com os nomes de nós, esse mecanismo de aspeamento tem, até o momento
em que este texto foi escrito, suporte limitado em programas de leitura do
Info; portanto, nós não recomendamos usá-lo até que isso mude.

O formato não prescreve como encontrar outros manuais para resolver tais
referências.

Aqui estão alguns exemplos:

@example
*note Licença GNU de Documentação Livre::
*note Tabela de etiquetas: Tabela de Etiquetas do Formato do Info, para detalhes.
*Note Visão Geral: (make)Top.
*Note ^?:^?: (bash)Bourne Shell Builtins.
*Note alloca.h: (gnulib)^?alloca.h^?.
@end example

O primeiro mostra uma referência a um nó no manual atual usando o formato
curto.

O segundo também referencia um nó no manual atual, chamado `Tabela de Etiquetas
do Formato do Info'; a `Tabela de etiquetas' antes de @samp{:} é somente um
rótulo nessa referência específica, e @samp{para detalhes.} é um texto
pertencente à frase, não parte da referência.

O terceiro exemplo referencia o nó `Top' em outro manual, chamado @samp{make},
com `Visão Geral' sendo o rótulo para essa referência cruzada.

O quarto exemplo mostra um caractere de dois pontos sendo aspado em um rótulo,
e o quinto exemplo mostra um ponto sendo aspado em um nome de nó.
@xref{Referências Cruzadas}.


@node Licença GNU de Documentação Livre
@appendix Licença GNU de Documentação Livre

@include fdl-versao_1.3-pt_BR.texi


@node Índice de Comando e Variável
@unnumbered Índice de Comando e Variável

Esta é uma lista alfabética de todos os comandos @@, funções Emacs Lisp
variadas e diversas variáveis. Para tornar a lista mais fácil de usar, os
comandos estão listados sem o @samp{@@} precedente.

@printindex fn


@node Índice Geral
@unnumbered Índice Geral

@printindex cp


@bye
